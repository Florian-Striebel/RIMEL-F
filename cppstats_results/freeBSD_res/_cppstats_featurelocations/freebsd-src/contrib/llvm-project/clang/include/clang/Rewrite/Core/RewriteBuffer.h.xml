<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_REWRITE_CORE_REWRITEBUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_REWRITE_CORE_REWRITEBUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Rewrite/Core/DeltaTree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Rewrite/Core/RewriteRope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>RewriteBuffer</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Rewriter</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>DeltaTree</name></type> <name>Deltas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RewriteRope</name></type> <name>Buffer</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>RewriteRope</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Buffer</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Buffer</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BufStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BufEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Buffer</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>BufStart</name></expr></argument>, <argument><expr><name>BufEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>Initialize</name><argument_list>(<argument><expr><call><name><name>Input</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Input</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<decl_stmt><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>write</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>RemoveText</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>removeLineIfEmpty</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InsertText</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>InsertAfter</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>InsertTextBefore</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>InsertText</name><argument_list>(<argument><expr><name>OrigOffset</name></expr></argument>, <argument><expr><name>Str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>InsertTextAfter</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>InsertText</name><argument_list>(<argument><expr><name>OrigOffset</name></expr></argument>, <argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function_decl><type><name>void</name></type> <name>ReplaceText</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OrigLength</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>NewStr</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>





<decl_stmt><decl><type><name>unsigned</name></type> <name>getMappedOffset</name><argument_list>(<argument><expr><name>unsigned</name> <name>OrigOffset</name></expr></argument>,
<argument><expr><name>bool</name> <name>AfterInserts</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const<block>{<block_content>
<return>return <expr><call><name><name>Deltas</name><operator>.</operator><name>getDeltaAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>OrigOffset</name><operator>+</operator><name>AfterInserts</name></expr></argument>)</argument_list></call><operator>+</operator><name>OrigOffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>AddInsertDelta</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Change</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Deltas</name><operator>.</operator><name>AddDelta</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>OrigOffset</name></expr></argument>, <argument><expr><name>Change</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>AddReplaceDelta</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OrigOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Change</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Deltas</name><operator>.</operator><name>AddDelta</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>OrigOffset</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Change</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
