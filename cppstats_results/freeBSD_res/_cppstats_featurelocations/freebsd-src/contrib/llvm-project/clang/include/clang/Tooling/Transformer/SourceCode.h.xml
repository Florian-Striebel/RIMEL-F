<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_SOURCE_CODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_SOURCE_CODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>maybeExtendRange</name><argument_list>(<argument><expr><name>CharSourceRange</name> <name>Range</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Terminator</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>CharSourceRange</name></type> <name>getExtendedRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Node</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Next</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>maybeExtendRange</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><call><name><name>Node</name><operator>.</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Next</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function_decl><type><name>CharSourceRange</name></type> <name>getAssociatedRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>StringRef</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>Range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>StringRef</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getText</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><call><name><name>Node</name><operator>.</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>























<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>StringRef</name></type> <name>getExtendedText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Node</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Next</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getText</name><argument_list>(<argument><expr><call><name>getExtendedRange</name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>Next</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>validateEditRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CharSourceRange</name> <operator>&amp;</operator><name>Range</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name>
<call><name>getRangeForEdit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CharSourceRange</name> <operator>&amp;</operator><name>EditRange</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name>
<macro><name>getRangeForEdit</name><argument_list>(<argument>const CharSourceRange &amp;EditRange</argument>, <argument>const ASTContext &amp;Context</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getRangeForEdit</name><argument_list>(<argument><expr><name>EditRange</name></expr></argument>, <argument><expr><call><name><name>Context</name><operator>.</operator><name>getSourceManager</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Context</name><operator>.</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
