<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/Job.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_JOB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_JOB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/InputInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Program.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Tool</name></decl>;</decl_stmt>

<struct>struct <name>CrashReportInfo</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>Filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>VFSPath</name></decl>;</decl_stmt>

<macro><name>CrashReportInfo</name><argument_list>(<argument>StringRef Filename</argument>, <argument>StringRef VFSPath</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Filename</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>VFSPath</name><argument_list>(<argument>VFSPath</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>




<struct>struct <name>ResponseFileSupport</name> <block>{
<enum>enum <name>ResponseFileKind</name> <block>{


<decl><name>RF_Full</name></decl>,


<decl><name>RF_FileList</name></decl>,


<decl><name>RF_None</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>ResponseFileKind</name></type> <name>ResponseKind</name></decl>;</decl_stmt>












<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>WindowsEncodingMethod</name> <name>ResponseEncoding</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ResponseFlag</name></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>constexpr</name> <name>ResponseFileSupport</name></type> <name>None</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><block>{<expr><name>RF_None</name></expr>, <expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>WEM_UTF8</name></expr>, <expr><name>nullptr</name></expr>}</block></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>constexpr</name> <name>ResponseFileSupport</name></type> <name>AtFileUTF8</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><block>{<expr><name>RF_Full</name></expr>, <expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>WEM_UTF8</name></expr>, <expr><literal type="string">"@"</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>constexpr</name> <name>ResponseFileSupport</name></type> <name>AtFileCurCP</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><block>{<expr><name>RF_Full</name></expr>, <expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>WEM_CurrentCodePage</name></expr>, <expr><literal type="string">"@"</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>constexpr</name> <name>ResponseFileSupport</name></type> <name>AtFileUTF16</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><block>{<expr><name>RF_Full</name></expr>, <expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>WEM_UTF16</name></expr>, <expr><literal type="string">"@"</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>Command</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Action</name> <modifier>&amp;</modifier></type><name>Source</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>Tool</name> <modifier>&amp;</modifier></type><name>Creator</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ResponseFileSupport</name></type> <name>ResponseSupport</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Executable</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <name>Arguments</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputInfo</name></expr></argument>&gt;</argument_list></name> <name>InputInfoList</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>OutputFilenames</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ResponseFile</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <name>InputFileList</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ResponseFileFlag</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Environment</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>mutable</name> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>ProcessStatistics</name></expr></argument>&gt;</argument_list></name></type> <name>ProcStat</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>buildArgvForResponseFile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>writeResponseFile</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>PrintInputFilenames</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>InProcess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>Command</name><argument_list>(<argument>const Action &amp;Source</argument>, <argument>const Tool &amp;Creator</argument>,
<argument>ResponseFileSupport ResponseSupport</argument>, <argument>const char *Executable</argument>,
<argument>const llvm::opt::ArgStringList &amp;Arguments</argument>, <argument>ArrayRef&lt;InputInfo&gt; Inputs</argument>,
<argument>ArrayRef&lt;InputInfo&gt; Outputs = None</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>Command</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Command</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Terminator</name></expr></argument>, <argument><expr><name>bool</name> <name>Quote</name></expr></argument>,
<argument><expr><name>CrashReportInfo</name> <operator>*</operator><name>CrashInfo</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>Execute</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Redirects</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>ErrMsg</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>ExecutionFailed</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Action</name> <operator>&amp;</operator><macro><name>getSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Source</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Tool</name> <operator>&amp;</operator><macro><name>getCreator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Creator</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><specifier>const</specifier> <name>ResponseFileSupport</name> <modifier>&amp;</modifier></type><name>getResponseFileSupport</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>ResponseSupport</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>setResponseFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FileName</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>setInputFileList</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <name>List</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>InputFileList</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>List</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>setEnvironment</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>NewEnvironment</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getExecutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Executable</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><macro><name>getArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Arguments</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputInfo</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getInputInfos</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InputInfoList</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getOutputFilenames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>OutputFilenames</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>ProcessStatistics</name></expr></argument>&gt;</argument_list></name> <macro><name>getProcessStatistics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ProcStat</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>void</name> <macro><name>PrintFileNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CC1Command</name> <range>: <expr><name>public</name> <name>Command</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CC1Command</name><argument_list>(<argument>const Action &amp;Source</argument>, <argument>const Tool &amp;Creator</argument>,
<argument>ResponseFileSupport ResponseSupport</argument>, <argument>const char *Executable</argument>,
<argument>const llvm::opt::ArgStringList &amp;Arguments</argument>,
<argument>ArrayRef&lt;InputInfo&gt; Inputs</argument>, <argument>ArrayRef&lt;InputInfo&gt; Outputs = None</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>, <argument>const char *Terminator</argument>, <argument>bool Quote</argument>,
<argument>CrashReportInfo *CrashInfo = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>int</name> <macro><name>Execute</name><argument_list>(<argument>ArrayRef&lt;Optional&lt;StringRef&gt;&gt; Redirects</argument>, <argument>std::string *ErrMsg</argument>,
<argument>bool *ExecutionFailed</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>setEnvironment</name><argument_list>(<argument>llvm::ArrayRef&lt;const char *&gt; NewEnvironment</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ForceSuccessCommand</name> <range>: <expr><name>public</name> <name>Command</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ForceSuccessCommand</name><argument_list>(<argument>const Action &amp;Source_</argument>, <argument>const Tool &amp;Creator_</argument>,
<argument>ResponseFileSupport ResponseSupport</argument>,
<argument>const char *Executable_</argument>,
<argument>const llvm::opt::ArgStringList &amp;Arguments_</argument>,
<argument>ArrayRef&lt;InputInfo&gt; Inputs</argument>,
<argument>ArrayRef&lt;InputInfo&gt; Outputs = None</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>, <argument>const char *Terminator</argument>, <argument>bool Quote</argument>,
<argument>CrashReportInfo *CrashInfo = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>int</name> <macro><name>Execute</name><argument_list>(<argument>ArrayRef&lt;Optional&lt;StringRef&gt;&gt; Redirects</argument>, <argument>std::string *ErrMsg</argument>,
<argument>bool *ExecutionFailed</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>JobList</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>list_type</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Command</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>size_type</name> <init>= <expr><name>list_type</name><operator>::</operator><name>size_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>pointee_iterator</name><argument_list type="generic">&lt;<argument><expr><name>list_type</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>pointee_iterator</name><argument_list type="generic">&lt;<argument><expr><name>list_type</name><operator>::</operator><name>const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>list_type</name></type> <name>Jobs</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>Print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Terminator</name></expr></argument>,
<argument><expr><name>bool</name> <name>Quote</name></expr></argument>, <argument><expr><name>CrashReportInfo</name> <operator>*</operator><name>CrashInfo</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addJob</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Command</name></expr></argument>&gt;</argument_list></name> <name>J</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Jobs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>list_type</name> <operator>&amp;</operator><macro><name>getJobs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Jobs</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Jobs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
