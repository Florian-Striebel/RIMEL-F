<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Core/Replacement.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_CORE_REPLACEMENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_CORE_REPLACEMENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Rewriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>Range</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Range</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>Range</name><argument_list>(<argument>unsigned Offset</argument>, <argument>unsigned Length</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Length</name><argument_list>(<argument>Length</argument>)</argument_list></macro> <expr><block>{}</block>



<name>unsigned</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offset</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Length</name></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>overlapsWith</name><argument_list>(<argument><expr><name>Range</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Offset</name> <operator>+</operator> <name>Length</name> <operator>&gt;</operator> <name><name>RHS</name><operator>.</operator><name>Offset</name></name> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>Offset</name></name> <operator>+</operator> <name><name>RHS</name><operator>.</operator><name>Length</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>contains</name><argument_list>(<argument><expr><name>Range</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>RHS</name><operator>.</operator><name>Offset</name></name> <operator>&gt;=</operator> <name>Offset</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>RHS</name><operator>.</operator><name>Offset</name></name> <operator>+</operator> <name><name>RHS</name><operator>.</operator><name>Length</name></name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>Offset</name> <operator>+</operator> <name>Length</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Offset</name> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Length</name> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Replacement</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Replacement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<macro><name>Replacement</name><argument_list>(<argument>StringRef FilePath</argument>, <argument>unsigned Offset</argument>, <argument>unsigned Length</argument>,
<argument>StringRef ReplacementText</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<macro><name>Replacement</name><argument_list>(<argument>const SourceManager &amp;Sources</argument>, <argument>SourceLocation Start</argument>,
<argument>unsigned Length</argument>, <argument>StringRef ReplacementText</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Replacement</name><argument_list>(<argument>const SourceManager &amp;Sources</argument>, <argument>const CharSourceRange &amp;Range</argument>,
<argument>StringRef ReplacementText</argument>,
<argument>const LangOptions &amp;LangOpts = LangOptions()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Node</name></expr></argument>&gt;</argument_list></name></type>
<name>Replacement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>Sources</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>&amp;</modifier></type><name>NodeToReplace</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ReplacementText</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name> <init>= <expr><call><name>LangOptions</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>bool</name> <macro><name>isApplicable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>StringRef</name> <macro><name>getFilePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FilePath</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementRange</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementRange</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getReplacementText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ReplacementText</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>apply</name><argument_list>(<argument><expr><name>Rewriter</name> <operator>&amp;</operator><name>Rewrite</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>setFromSourceLocation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>Sources</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Length</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>ReplacementText</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setFromSourceRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>Sources</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CharSourceRange</name> <modifier>&amp;</modifier></type><name>Range</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ReplacementText</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FilePath</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Range</name></type> <name>ReplacementRange</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ReplacementText</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>replacement_error</name> <block>{<block_content>
<expr_stmt><expr><name>fail_to_apply</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>wrong_file_path</name></expr><operator>,</operator>
<expr><name>overlap_conflict</name></expr><operator>,</operator>
<expr><name>insert_conflict</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ReplacementError</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>ReplacementError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ReplacementError</name><argument_list>(<argument>replacement_error Err</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Err</name><argument_list>(<argument>Err</argument>)</argument_list></macro> <block>{}</block>


<macro><name>ReplacementError</name><argument_list>(<argument>replacement_error Err</argument>, <argument>Replacement Existing</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Err</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr>, <macro><name>ExistingReplacement</name><argument_list>(<argument>std::move(Existing)</argument>)</argument_list></macro> <expr><block>{}</block>



<macro><name>ReplacementError</name><argument_list>(<argument>replacement_error Err</argument>, <argument>Replacement New</argument>, <argument>Replacement Existing</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Err</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NewReplacement</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>New</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>ExistingReplacement</name><argument_list>(<argument>std::move(Existing)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>message</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>log</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <expr><name>OS</name> <operator>&lt;&lt;</operator> <call><name>message</name><argument_list>()</argument_list></call></expr>; }</block>

<name>replacement_error</name> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Err</name></expr>;</return> }</block>

<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getNewReplacement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NewReplacement</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getExistingReplacement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExistingReplacement</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>

<name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>replacement_error</name> <name>Err</name></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name> <name>NewReplacement</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name> <name>ExistingReplacement</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator></expr>;</expr_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Replacements</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>ReplacementsImpl</name> <init>= <expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>ReplacementsImpl</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_reverse_iterator</name> <init>= <expr><name>ReplacementsImpl</name><operator>::</operator><name>const_reverse_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Replacements</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>explicit</name></type> <name>Replacements</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Replacement</name> <modifier>&amp;</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Replaces</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>






































<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>add</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>LLVM_NODISCARD</name> <name>Replacements</name></type> <name>merge</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Replacements</name> <operator>&amp;</operator><name>Replaces</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name> <macro><name>getAffectedRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>getShiftedCodePosition</name><argument_list>(<argument><expr><name>unsigned</name> <name>Position</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Replaces</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Replaces</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Replacements</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Replaces</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Replaces</name></name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>Replacements</name><argument_list>(<argument>const_iterator Begin</argument>, <argument>const_iterator End</argument>)</argument_list></macro>
: <macro><name>Replaces</name><argument_list>(<argument>Begin</argument>, <argument>End</argument>)</argument_list></macro> <block>{<block_content/>}</block>



<decl_stmt><decl><type><name>Replacement</name></type> <name>getReplacementInChangedCode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Replacement</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>Replacements</name> <macro><name>getCanonicalReplacements</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name>
<macro><name>mergeIfOrderIndependent</name><argument_list>(<argument>const Replacement &amp;R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ReplacementsImpl</name></type> <name>Replaces</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<function_decl><type><name>bool</name></type> <name>applyAllReplacements</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Replacements</name> <modifier>&amp;</modifier></type><name>Replaces</name></decl></parameter>, <parameter><decl><type><name>Rewriter</name> <modifier>&amp;</modifier></type><name>Rewrite</name></decl></parameter>)</parameter_list>;</function_decl>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>applyAllReplacements</name><argument_list>(<argument>StringRef Code</argument>,
<argument>const Replacements &amp;Replaces</argument>)</argument_list></macro></expr>;</expr_stmt>


<struct>struct <name>TranslationUnitReplacements</name> <block>{

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>MainSourceFile</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Replacement</name></expr></argument>&gt;</argument_list></name> <name>Replacements</name></expr>;</expr_stmt>
}</block>;</struct>









<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name>
<call><name>calculateRangesAfterReplacements</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Replacements</name> <operator>&amp;</operator><name>Replaces</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <call><name>groupReplacementsByFile</name><argument_list>(
<argument><expr><name>FileManager</name> <operator>&amp;</operator><name>FileMgr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Node</name></expr></argument>&gt;</argument_list></name>
<name>Replacement</name><operator>::</operator><macro><name>Replacement</name><argument_list>(<argument>const SourceManager &amp;Sources</argument>,
<argument>const Node &amp;NodeToReplace</argument>, <argument>StringRef ReplacementText</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>CharSourceRange</name> <name>Range</name> <operator>=</operator>
<name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><call><name><name>NodeToReplace</name><operator>-&gt;</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>setFromSourceRange</name><argument_list>(<argument><expr><name>Sources</name></expr></argument>, <argument><expr><name>Range</name></expr></argument>, <argument><expr><name>ReplacementText</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
