<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_RULE_CONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_RULE_CONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/ASTSelection.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>RefactoringRuleContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>RefactoringRuleContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SM</name><argument_list>(<argument>SM</argument>)</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getSources</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SM</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceRange</name> <macro><name>getSelectionRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SelectionRange</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setSelectionRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>SelectionRange</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AST</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>AST</name> <operator>&amp;&amp;</operator> <literal type="string">"no AST!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>AST</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setASTContext</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>AST</name> <operator>=</operator> <operator>&amp;</operator><name>Context</name></expr>;</expr_stmt> </block_content>}</block></function>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>createDiagnosticError</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<return>return <expr><name>DiagnosticError</name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><call><name>PartialDiagnostic</name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><name>DiagStorage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>createDiagnosticError</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>createDiagnosticError</name><argument_list>(<argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setASTSelection</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name> <name>Node</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>ASTNodeSelection</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>


<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceRange</name></type> <name>SelectionRange</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>*</modifier></type><name>AST</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PartialDiagnostic</name><operator>::</operator><name>DiagStorageAllocator</name> <name>DiagStorage</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name> <name>ASTNodeSelection</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
