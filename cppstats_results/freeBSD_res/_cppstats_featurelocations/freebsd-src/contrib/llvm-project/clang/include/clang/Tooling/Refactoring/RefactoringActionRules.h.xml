<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRulesInternal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>





















<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RuleType</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RequirementTypes</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringActionRule</name></expr></argument>&gt;</argument_list></name>
<call><name>createRefactoringActionRule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RequirementTypes</name> <operator>&amp;</operator><operator>...</operator> <name>Requirements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>RefactoringActionRules</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringActionRule</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>SourceChangeRefactoringRule</name> <range>: <expr><name>public</name> <name>RefactoringActionRuleBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>invoke</name><argument_list>(<argument>RefactoringResultConsumer &amp;Consumer</argument>,
<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>final</name> <name>override</name> <block>{
<expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChanges</name></expr></argument>&gt;</argument_list></name> <name>Changes</name> <operator>=</operator> <call><name>createSourceReplacements</name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Changes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Consumer</name><operator>.</operator><name>handleError</name></name><argument_list>(<argument><expr><call><name><name>Changes</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Consumer</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>Changes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<name>virtual</name> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChanges</name></expr></argument>&gt;</argument_list></name>
<call><name>createSourceReplacements</name><argument_list>(<argument><expr><name>RefactoringRuleContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>FindSymbolOccurrencesRefactoringRule</name> <range>: <expr><name>public</name> <name>RefactoringActionRuleBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>invoke</name><argument_list>(<argument>RefactoringResultConsumer &amp;Consumer</argument>,
<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>final</name> <name>override</name> <block>{
<expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SymbolOccurrences</name></expr></argument>&gt;</argument_list></name> <name>Occurrences</name> <operator>=</operator> <call><name>findSymbolOccurrences</name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Occurrences</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Consumer</name><operator>.</operator><name>handleError</name></name><argument_list>(<argument><expr><call><name><name>Occurrences</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Consumer</name><operator>.</operator><name>handle</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>Occurrences</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<name>virtual</name> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SymbolOccurrences</name></expr></argument>&gt;</argument_list></name>
<call><name>findSymbolOccurrences</name><argument_list>(<argument><expr><name>RefactoringRuleContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
