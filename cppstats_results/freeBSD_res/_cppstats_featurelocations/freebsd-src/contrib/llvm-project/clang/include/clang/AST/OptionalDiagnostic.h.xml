<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/OptionalDiagnostic.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_OPTIONALDIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_OPTIONALDIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APFloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>OptionalDiagnostic</name> <block>{<block_content>
<decl_stmt><decl><type><name>PartialDiagnostic</name> <modifier>*</modifier></type><name>Diag</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>OptionalDiagnostic</name><argument_list>(<argument><expr><name>PartialDiagnostic</name> <operator>*</operator><name>Diag</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Diag</name><argument_list>(<argument>Diag</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>OptionalDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>v</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Diag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Diag</name> <operator>&lt;&lt;</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>OptionalDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Diag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>Buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Diag</name> <operator>&lt;&lt;</operator> <call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>Buffer</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APFloat</name> <operator>&amp;</operator><name>F</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Diag</name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>unsigned</name></type> <name>precision</name> <init>= <expr><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>semanticsPrecision</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>getSemantics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>(</operator><name>precision</name> <operator>*</operator> <literal type="number">59</literal> <operator>+</operator> <literal type="number">195</literal><operator>)</operator> <operator>/</operator> <literal type="number">196</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>Buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Diag</name> <operator>&lt;&lt;</operator> <call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>Buffer</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>OptionalDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APFixedPoint</name> <operator>&amp;</operator><name>FX</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Diag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>Buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>FX</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Diag</name> <operator>&lt;&lt;</operator> <call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>Buffer</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
