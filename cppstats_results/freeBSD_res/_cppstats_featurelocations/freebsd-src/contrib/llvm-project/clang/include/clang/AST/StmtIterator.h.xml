<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/StmtIterator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_STMTITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_STMTITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VariableArrayType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StmtIteratorBase</name> <block>{<block_content>
<label><name>protected</name>:</label>
<enum>enum <block>{
<decl><name>StmtMode</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>SizeOfTypeVAMode</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>DeclGroupMode</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>Flags</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>
}</block>;</enum>

<union>union <block>{
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier><modifier>*</modifier></type><name>DGI</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>RawVAPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier><modifier>*</modifier></type><name>DGE</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StmtIteratorBase</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>stmt</name><argument_list>(<argument>s</argument>)</argument_list></macro> <block>{}</block>
<call><name>StmtIteratorBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VariableArrayType</name> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StmtIteratorBase</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><operator>*</operator><name>dgi</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator><operator>*</operator><name>dge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StmtIteratorBase</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>stmt</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>inDeclGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>RawVAPtr</name> <operator>&amp;</operator> <name>Flags</name><operator>)</operator> <operator>==</operator> <name>DeclGroupMode</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>inSizeOfTypeVA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>RawVAPtr</name> <operator>&amp;</operator> <name>Flags</name><operator>)</operator> <operator>==</operator> <name>SizeOfTypeVAMode</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>inStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>RawVAPtr</name> <operator>&amp;</operator> <name>Flags</name><operator>)</operator> <operator>==</operator> <name>StmtMode</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>VariableArrayType</name> <operator>*</operator><macro><name>getVAPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VariableArrayType</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RawVAPtr</name> <operator>&amp;</operator> <operator>~</operator><name>Flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVAPtr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VariableArrayType</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>inDeclGroup</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>inSizeOfTypeVA</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RawVAPtr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>RawVAPtr</name> <operator>&amp;</operator> <name>Flags</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>NextDecl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ImmediateAdvance</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>HandleDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>NextVA</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>Stmt</name><operator>*</operator><operator>&amp;</operator> <macro><name>GetDeclExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>DERIVED</name></expr></argument>, <argument><expr><name>typename</name> <name>REFERENCE</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>StmtIteratorImpl</name> <range>: <expr><name>public</name> <name>StmtIteratorBase</name> <block>{
<expr><name>protected</name><operator>:</operator>
<call><name>StmtIteratorImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StmtIteratorBase</name><operator>&amp;</operator> <name>RHS</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StmtIteratorBase</name><argument_list>(<argument>RHS</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<name>using</name> <name>iterator_category</name> <operator>=</operator> <name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>REFERENCE</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>std</name><operator>::</operator><name>ptrdiff_t</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>REFERENCE</name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>REFERENCE</name></expr>;

<expr><call><name>StmtIteratorImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>StmtIteratorImpl</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StmtIteratorBase</name><argument_list>(<argument>s</argument>)</argument_list></macro> <block>{}</block>
<call><name>StmtIteratorImpl</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><operator>*</operator><name>dgi</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator><operator>*</operator><name>dge</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StmtIteratorBase</name><argument_list>(<argument>dgi</argument>, <argument>dge</argument>)</argument_list></macro> <block>{}</block>
<call><name>StmtIteratorImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VariableArrayType</name> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StmtIteratorBase</name><argument_list>(<argument>t</argument>)</argument_list></macro> <block>{}</block>

<name>DERIVED</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><call><name>inStmt</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>stmt</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>getVAPtr</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NextVA</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NextDecl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>

<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DERIVED</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>DERIVED</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>DERIVED</name> <name>tmp</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DERIVED</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<expr><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>DERIVED</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>DERIVED</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>stmt</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>stmt</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>DGI</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>DGI</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>RawVAPtr</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>RawVAPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>DERIVED</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>DERIVED</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>REFERENCE</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>inStmt</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>*</operator><name>stmt</name> <operator>:</operator> <call><name>GetDeclExpr</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>REFERENCE</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator></expr>;</return> </block_content>}</block></block></decl></decl_stmt>
};

<struct_decl>struct <name>ConstStmtIterator</name>;</struct_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>StmtIterator</name></name></type> <range>: <expr><name>public</name> <name><name>StmtIteratorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StmtIterator</name></expr></argument>, <argument><expr><name>Stmt</name><operator>*</operator><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>explicit</name> <call><name>StmtIterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>StmtIterator</name><argument_list>(<argument><expr><name>Stmt</name><operator>*</operator><operator>*</operator> <name>S</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>StmtIterator</name></expr>, <expr><name>Stmt</name><operator>*</operator><operator>&amp;</operator><operator>&gt;</operator><operator>(</operator><name>S</name><operator>)</operator> <block>{}</block>
<call><name>StmtIterator</name><argument_list>(<argument><expr><name>Decl</name><operator>*</operator><operator>*</operator> <name>dgi</name></expr></argument>, <argument><expr><name>Decl</name><operator>*</operator><operator>*</operator> <name>dge</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>StmtIterator</name></expr>, <expr><name>Stmt</name><operator>*</operator><operator>&amp;</operator><operator>&gt;</operator><operator>(</operator><name>dgi</name>, <name>dge</name><operator>)</operator> <block>{}</block>
<call><name>StmtIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VariableArrayType</name> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>StmtIterator</name></expr>, <expr><name>Stmt</name><operator>*</operator><operator>&amp;</operator><operator>&gt;</operator><operator>(</operator><name>t</name><operator>)</operator> <block>{}</block>

<name>private</name><operator>:</operator>
<call><name>StmtIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StmtIteratorBase</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>StmtIterator</name></expr>, <expr><name>Stmt</name> <operator>*</operator><operator>&amp;</operator><operator>&gt;</operator><operator>(</operator><name>RHS</name><operator>)</operator> <block>{}</block>

<specifier>inline</specifier> <name>friend</name> <name>StmtIterator</name>
<call><name>cast_away_const</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConstStmtIterator</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ConstStmtIterator</name></name></type> <range>: <expr><name>public</name> <name><name>StmtIteratorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ConstStmtIterator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>explicit</name> <call><name>ConstStmtIterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>ConstStmtIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StmtIterator</name><operator>&amp;</operator> <name>RHS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>ConstStmtIterator</name></expr>, <expr><specifier>const</specifier> <name>Stmt</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><name>RHS</name><operator>)</operator> <block>{}</block>

<call><name>ConstStmtIterator</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StmtIteratorImpl</name></macro><operator>&lt;</operator><name>ConstStmtIterator</name></expr>, <expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator>
<call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>StmtIterator</name></type> <name>cast_away_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConstStmtIterator</name> <modifier>&amp;</modifier></type><name>RHS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>RHS</name></expr>;</return>
</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
