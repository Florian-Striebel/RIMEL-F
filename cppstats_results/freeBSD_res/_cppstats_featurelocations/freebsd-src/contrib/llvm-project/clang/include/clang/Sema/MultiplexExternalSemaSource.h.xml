<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_MULTIPLEXEXTERNALSEMASOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_MULTIPLEXEXTERNALSEMASOURCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/ExternalSemaSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Weak.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>
<struct_decl>struct <name>ExternalVTableUse</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>LookupResult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamespaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypedefNameDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>MultiplexExternalSemaSource</name> <range>: <expr><name>public</name> <name>ExternalSemaSource</name> <block>{

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ExternalSemaSource</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Sources</name></expr>;

<expr><name>public</name><operator>:</operator>







<call><name>MultiplexExternalSemaSource</name><argument_list>(<argument><expr><name>ExternalSemaSource</name><operator>&amp;</operator> <name>s1</name></expr></argument>, <argument><expr><name>ExternalSemaSource</name><operator>&amp;</operator> <name>s2</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>MultiplexExternalSemaSource</name><argument_list>()</argument_list></macro> <name>override</name></expr>;





<expr><name>void</name> <call><name>addSource</name><argument_list>(<argument><expr><name>ExternalSemaSource</name> <operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>;







<expr><name>Decl</name> <operator>*</operator><macro><name>GetExternalDecl</name><argument_list>(<argument>uint32_t ID</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>CompleteRedeclChain</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>Selector</name> <macro><name>GetExternalSelector</name><argument_list>(<argument>uint32_t ID</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>uint32_t</name> <macro><name>GetNumExternalSelectors</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>Stmt</name> <operator>*</operator><macro><name>GetExternalDeclStmt</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>CXXBaseSpecifier</name> <operator>*</operator><macro><name>GetExternalCXXBaseSpecifiers</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>CXXCtorInitializer</name> <operator>*</operator><operator>*</operator><macro><name>GetExternalCXXCtorInitializers</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ExtKind</name> <macro><name>hasExternalDefinitions</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>bool</name> <macro><name>FindExternalVisibleDeclsByName</name><argument_list>(<argument>const DeclContext *DC</argument>,
<argument>DeclarationName Name</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>completeVisibleDeclsMap</name><argument_list>(<argument>const DeclContext *DC</argument>)</argument_list></macro> <name>override</name></expr>;






<expr><name>void</name>
<macro><name>FindExternalLexicalDecls</name><argument_list>(<argument>const DeclContext *DC</argument>,
<argument>llvm::function_ref&lt;bool(Decl::Kind)&gt; IsKindWeWant</argument>,
<argument>SmallVectorImpl&lt;Decl *&gt; &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <macro><name>FindFileRegionDecls</name><argument_list>(<argument>FileID File</argument>, <argument>unsigned Offset</argument>,<argument>unsigned Length</argument>,
<argument>SmallVectorImpl&lt;Decl *&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>CompleteType</name><argument_list>(<argument>TagDecl *Tag</argument>)</argument_list></macro> <name>override</name></expr>;







<expr><name>void</name> <macro><name>CompleteType</name><argument_list>(<argument>ObjCInterfaceDecl *Class</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>ReadComments</name><argument_list>()</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <macro><name>StartedDeserializing</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>FinishedDeserializing</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>StartTranslationUnit</name><argument_list>(<argument>ASTConsumer *Consumer</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>Module</name> <operator>*</operator><macro><name>getModule</name><argument_list>(<argument>unsigned ID</argument>)</argument_list></macro> <name>override</name></expr>;




























<expr><name>bool</name>
<macro><name>layoutRecordType</name><argument_list>(<argument>const RecordDecl *Record</argument>,
<argument>uint64_t &amp;Size</argument>, <argument>uint64_t &amp;Alignment</argument>,
<argument>llvm::DenseMap&lt;const FieldDecl *</argument>, <argument>uint64_t&gt; &amp;FieldOffsets</argument>,
<argument>llvm::DenseMap&lt;const CXXRecordDecl *</argument>, <argument>CharUnits&gt; &amp;BaseOffsets</argument>,
<argument>llvm::DenseMap&lt;const CXXRecordDecl *</argument>,
<argument>CharUnits&gt; &amp;VirtualBaseOffsets</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>getMemoryBufferSizes</name><argument_list>(<argument>MemoryBufferSizes &amp;sizes</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;








<expr><name>void</name> <macro><name>InitializeSema</name><argument_list>(<argument>Sema &amp;S</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>ForgetSema</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>ReadMethodPool</name><argument_list>(<argument>Selector Sel</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>updateOutOfDateSelector</name><argument_list>(<argument>Selector Sel</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name>
<macro><name>ReadKnownNamespaces</name><argument_list>(<argument>SmallVectorImpl&lt;NamespaceDecl*&gt; &amp;Namespaces</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>void</name> <macro><name>ReadUndefinedButUsed</name><argument_list>(
<argument>llvm::MapVector&lt;NamedDecl *</argument>, <argument>SourceLocation&gt; &amp;Undefined</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ReadMismatchingDeleteExpressions</name><argument_list>(<argument>llvm::MapVector&lt;
FieldDecl *</argument>, <argument>llvm::SmallVector&lt;std::pair&lt;SourceLocation</argument>, <argument>bool&gt;</argument>, <argument><literal type="number">4</literal>&gt;&gt; &amp;
Exprs</argument>)</argument_list></macro> <name>override</name></expr>;









<expr><name>bool</name> <macro><name>LookupUnqualified</name><argument_list>(<argument>LookupResult &amp;R</argument>, <argument>Scope *S</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadTentativeDefinitions</name><argument_list>(<argument>SmallVectorImpl&lt;VarDecl*&gt; &amp;Defs</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadUnusedFileScopedDecls</name><argument_list>(
<argument>SmallVectorImpl&lt;const DeclaratorDecl*&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadDelegatingConstructors</name><argument_list>(
<argument>SmallVectorImpl&lt;CXXConstructorDecl*&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadExtVectorDecls</name><argument_list>(<argument>SmallVectorImpl&lt;TypedefNameDecl*&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;







<expr><name>void</name> <macro><name>ReadUnusedLocalTypedefNameCandidates</name><argument_list>(
<argument>llvm::SmallSetVector&lt;const TypedefNameDecl *</argument>, <argument><literal type="number">4</literal>&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadReferencedSelectors</name><argument_list>(<argument>SmallVectorImpl&lt;std::pair&lt;Selector</argument>,
<argument>SourceLocation&gt; &gt; &amp;Sels</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadWeakUndeclaredIdentifiers</name><argument_list>(
<argument>SmallVectorImpl&lt;std::pair&lt;IdentifierInfo*</argument>, <argument>WeakInfo&gt; &gt; &amp;WI</argument>)</argument_list></macro> <name>override</name></expr>;






<expr><name>void</name> <macro><name>ReadUsedVTables</name><argument_list>(<argument>SmallVectorImpl&lt;ExternalVTableUse&gt; &amp;VTables</argument>)</argument_list></macro> <name>override</name></expr>;








<expr><name>void</name> <macro><name>ReadPendingInstantiations</name><argument_list>(
<argument>SmallVectorImpl&lt;std::pair&lt;ValueDecl*</argument>, <argument>SourceLocation&gt; &gt;&amp; Pending</argument>)</argument_list></macro> <name>override</name></expr>;







<expr><name>void</name> <macro><name>ReadLateParsedTemplates</name><argument_list>(
<argument>llvm::MapVector&lt;const FunctionDecl *</argument>, <argument>std::unique_ptr&lt;LateParsedTemplate&gt;&gt;
&amp;LPTMap</argument>)</argument_list></macro> <name>override</name></expr>;







<expr><name>void</name> <macro><name>ReadDeclsToCheckForDeferredDiags</name><argument_list>(
<argument>llvm::SmallSetVector&lt;Decl *</argument>, <argument><literal type="number">4</literal>&gt; &amp;Decls</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>TypoCorrection</name> <macro><name>CorrectTypo</name><argument_list>(<argument>const DeclarationNameInfo &amp;Typo</argument>,
<argument>int LookupKind</argument>, <argument>Scope *S</argument>, <argument>CXXScopeSpec *SS</argument>,
<argument>CorrectionCandidateCallback &amp;CCC</argument>,
<argument>DeclContext *MemberContext</argument>,
<argument>bool EnteringContext</argument>,
<argument>const ObjCObjectPointerType *OPT</argument>)</argument_list></macro> <name>override</name></expr>;











<expr><name>bool</name> <macro><name>MaybeDiagnoseMissingCompleteType</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>QualType T</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name> <operator>||</operator> <name>ExternalSemaSource</name><operator>::</operator><call><name>isA</name><argument_list>(<argument><expr><name>ClassID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ExternalASTSource *S</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
