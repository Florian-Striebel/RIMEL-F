<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Index/DeclOccurrence.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_DECLOCCURRENCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_DECLOCCURRENCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Index/IndexSymbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/MacroInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>

<struct>struct <name>DeclOccurrence</name> <block>{
<decl_stmt><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>DeclOrMacro</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>MacroName</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRelation</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>Relations</name></decl>;</decl_stmt>

<macro><name>DeclOccurrence</name><argument_list>(<argument>SymbolRoleSet R</argument>, <argument>unsigned Offset</argument>, <argument>const Decl *D</argument>,
<argument>ArrayRef&lt;SymbolRelation&gt; Relations</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Roles</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DeclOrMacro</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Relations</name><argument_list>(<argument>Relations.begin()</argument>, <argument>Relations.end()</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>DeclOccurrence</name><argument_list>(<argument>SymbolRoleSet R</argument>, <argument>unsigned Offset</argument>, <argument>const IdentifierInfo *Name</argument>,
<argument>const MacroInfo *MI</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Roles</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DeclOrMacro</name><argument_list>(<argument><expr><name>MI</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>MacroName</name><argument_list>(<argument>Name</argument>)</argument_list></macro> <expr><block>{}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>DeclOccurrence</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>DeclOccurrence</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Offset</name></name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>Offset</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
