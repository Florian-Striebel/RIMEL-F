<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SValVisitor</name> <block>{<block_content>
<label><name>public</name>:</label>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass *&gt;(this)-&gt;Visit ##NAME(V.castAs&lt;CLASS&gt;())</cpp:value></cpp:define>


<function><type><name>RetTy</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>


<switch>switch <condition>(<expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case SVal::Id ##Kind: DISPATCH(Id, Id);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
<case>case <expr><name>SVal</name><operator>::</operator><name>LocKind</name></expr>:</case>
<switch>switch <condition>(<expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case loc::Id ##Kind: DISPATCH(Loc ##Id, loc :: Id);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown Loc sub-kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>SVal</name><operator>::</operator><name>NonLocKind</name></expr>:</case>
<switch>switch <condition>(<expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONLOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case nonloc::Id ##Kind: DISPATCH(NonLoc ##Id, nonloc :: Id);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown NonLoc sub-kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown SVal kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit ##Id(Id V) { DISPATCH(Parent, Id); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BASIC_SVAL(Id, Parent)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy VisitLoc ##Id(loc::Id V) { DISPATCH(Parent, Parent); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONLOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy VisitNonLoc ##Id(nonloc::Id V) { DISPATCH(Parent, Parent); }</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>


<function><type><name>RetTy</name></type> <name>VisitSVal</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SymExprVisitor</name> <block>{<block_content>
<label><name>public</name>:</label>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass *&gt;(this)-&gt;Visit ##CLASS(cast&lt;CLASS&gt;(S))</cpp:value></cpp:define>


<function><type><name>RetTy</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><name>SymbolRef</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case SymExpr::Id ##Kind: DISPATCH(Id);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Symbols.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown SymExpr kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit ##Id(const Id *S) { DISPATCH(Parent); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_SYMBOL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SYMBOL(Id, Parent)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Symbols.def"</cpp:file></cpp:include>


<function><type><name>RetTy</name></type> <name>VisitSymExpr</name><parameter_list>(<parameter><decl><type><name>SymbolRef</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MemRegionVisitor</name> <block>{<block_content>
<label><name>public</name>:</label>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass *&gt;(this)-&gt;Visit ##CLASS(cast&lt;CLASS&gt;(R))</cpp:value></cpp:define>


<function><type><name>RetTy</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGION</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case MemRegion::Id ##Kind: DISPATCH(Id);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Regions.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown MemRegion kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGION</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit ##Id(const Id *R) { DISPATCH(Parent); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_REGION</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGION(Id, Parent)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Regions.def"</cpp:file></cpp:include>


<function><type><name>RetTy</name></type> <name>VisitMemRegion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FullSValVisitor</name> <range>: <expr><name>public</name> <name><name>SValVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>SymExprVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>MemRegionVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>using</name> <name><name>SValVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Visit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name><name>SymExprVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Visit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name><name>MemRegionVisitor</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Visit</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
