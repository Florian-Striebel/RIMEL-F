<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTImporter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTIMPORTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTIMPORTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTImporterSharedState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXCtorInitializer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TranslationUnitDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeSourceInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ImportError</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>ErrorKind</name> <block>{
<expr><name>NameConflict</name></expr>,
<expr><name>UnsupportedConstruct</name></expr>,
<expr><name>Unknown</name></expr>
}</block></expr>;

<expr><name>ErrorKind</name> <name>Error</name></expr>;

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><call><name>ImportError</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Error</name><argument_list>(<argument>Unknown</argument>)</argument_list></macro> <block>{}</block>
<call><name>ImportError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ImportError</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Error</name><argument_list>(<argument>Other.Error</argument>)</argument_list></macro> <block>{}</block>
<name>ImportError</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ImportError</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>Error</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Error</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<macro><name>ImportError</name><argument_list>(<argument>ErrorKind Error</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Error</name><argument_list>(<argument>Error</argument>)</argument_list></macro> <block>{ }</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>log</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <call><name>getCanonicalForwardRedeclChain</name><argument_list>(<argument><expr><name>Decl</name><operator>*</operator> <name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ASTImporter</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTNodeImporter</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>NonEquivalentDeclSet</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ImportedCXXBaseSpecifierMap</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>, <argument><expr><name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ODRHandlingType</name> <block>{<block_content> <expr_stmt><expr><name>Conservative</name></expr><operator>,</operator> <expr><name>Liberal</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>













































































<decl_stmt><decl><type><name>class</name></type> <name>ImportPathTy</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>VecTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Nodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>Aux</name><index>[<expr><name>D</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Nodes</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>Aux</name><index>[<expr><call><name><name>Nodes</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Nodes</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>hasCycleAtBack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>Pos</name> <operator>=</operator> <call><name><name>Aux</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>Nodes</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Pos</name> <operator>!=</operator> <call><name><name>Aux</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>Pos</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>Cycle</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>VecTy</name><operator>::</operator><name>const_reverse_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Cycle</name> <macro><name>getCycleAtBack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Cycle</name><argument_list>(<argument><expr><call><name><name>Nodes</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>Nodes</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>Nodes</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Nodes</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>VecTy</name> <macro><name>copyCycleAtBack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>R</name> <operator>=</operator> <call><name>getCycleAtBack</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name>VecTy</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>R</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>VecTy</name></type> <name>Nodes</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <name>Aux</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporterSharedState</name></expr></argument>&gt;</argument_list></name> <name>SharedState</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ImportPathTy</name></type> <name>ImportPath</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>SavedImportPathsForOneDecl</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ImportPathTy</name><operator>::</operator><name>VecTy</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SavedImportPathsTy</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>SavedImportPathsForOneDecl</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SavedImportPathsTy</name></type> <name>SavedImportPaths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ToContext</name></decl>, <decl><type ref="prev"><modifier>&amp;</modifier></type><name>FromContext</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>ToFileManager</name></decl>, <decl><type ref="prev"><modifier>&amp;</modifier></type><name>FromFileManager</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Minimal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ODRHandlingType</name></type> <name>ODRHandling</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>LastDiagFromFrom</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ImportedTypes</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ImportedDecls</name></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name> <name>ImportDeclErrors</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ImportedFromDecls</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>, <argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ImportedStmts</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>FileID</name></expr></argument>&gt;</argument_list></name> <name>ImportedFileIDs</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>ImportedCXXBaseSpecifierMap</name></type> <name>ImportedCXXBaseSpecifiers</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>NonEquivalentDeclSet</name></type> <name>NonEquivalentDecls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>FoundDeclsTy</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>FoundDeclsTy</name></type> <name>findDeclsInToCtx</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AddToLookupTable</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>ToD</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>



<function_decl><type><name>virtual</name> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>ImportImpl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>From</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>virtual</name> <name>bool</name></type> <name>returnWithErrorInTest</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
















<macro><name>ASTImporter</name><argument_list>(<argument>ASTContext &amp;ToContext</argument>, <argument>FileManager &amp;ToFileManager</argument>,
<argument>ASTContext &amp;FromContext</argument>, <argument>FileManager &amp;FromFileManager</argument>,
<argument>bool MinimalImport</argument>,
<argument>std::shared_ptr&lt;ASTImporterSharedState&gt; SharedState = nullptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ASTImporter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isMinimalImport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Minimal</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setODRHandling</name><parameter_list>(<parameter><decl><type><name>ODRHandlingType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ODRHandling</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt> </block_content>}</block></function>






<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImportT</name></expr></argument>&gt;</argument_list></name>
<name>LLVM_NODISCARD</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>importInto</name><argument_list>(<argument>ImportT &amp;To</argument>, <argument>const ImportT &amp;From</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>ToOrErr</name> <operator>=</operator> <call><name>Import</name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>ToOrErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>To</name> <operator>=</operator> <operator>*</operator><name>ToOrErr</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>ToOrErr</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>ExprWithCleanups</name><operator>::</operator><name>CleanupObject</name></expr></argument>&gt;</argument_list></name>
<macro><name>Import</name><argument_list>(<argument>ExprWithCleanups::CleanupObject From</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>FromT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>QualType FromT</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TypeSourceInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>TypeSourceInfo</name> <operator>*</operator><name>FromTSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Attr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Attr</name> <operator>*</operator><name>FromAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>FromD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>const Decl *FromD</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Import</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FromD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>GetAlreadyImportedOrNull</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>FromD</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function_decl><type><name>TranslationUnitDecl</name> <modifier>*</modifier></type><name>GetFromTU</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>ToD</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>DeclT</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DeclT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getImportedFromDecl</name><argument_list>(<argument>const DeclT *ToD</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>FromI</name> <operator>=</operator> <call><name><name>ImportedFromDecls</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ToD</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>FromI</name> <operator>==</operator> <call><name><name>ImportedFromDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
<name>auto</name> <operator>*</operator><name>FromD</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>FromI</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>FromD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FromD</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>ImportContext</name><argument_list>(<argument><expr><name>DeclContext</name> <operator>*</operator><name>FromDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>FromE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator><name>FromS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>FromNNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name>
<macro><name>Import</name><argument_list>(<argument>NestedNameSpecifierLoc FromNNS</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>TemplateName</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>TemplateName From</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>SourceLocation FromLoc</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>SourceRange FromRange</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>DeclarationName</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>DeclarationName FromName</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>FromId</name></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Selector</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>Selector FromSel</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>&gt;</argument_list></name> <macro><name>Import</name><argument_list>(<argument>FileID</argument>, <argument>bool IsBuiltin = false</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><name>CXXCtorInitializer</name> <operator>*</operator><name>FromInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator><name>FromSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>APValue</name></expr></argument>&gt;</argument_list></name> <call><name>Import</name><argument_list>(<argument><expr><specifier>const</specifier> <name>APValue</name> <operator>&amp;</operator><name>FromValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>LLVM_NODISCARD</name> <name>llvm</name><operator>::</operator><name>Error</name> <call><name>ImportDefinition</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>From</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




























<function_decl><type><name>virtual</name> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>DeclarationName</name></expr></argument>&gt;</argument_list></name></type>
<name>HandleNameConflict</name><parameter_list>(<parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>, <parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>IDNS</name></decl></parameter>,
<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier><modifier>*</modifier></type><name>Decls</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumDecls</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getToContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ToContext</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getFromContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FromContext</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>FileManager</name> <operator>&amp;</operator><macro><name>getToFileManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ToFileManager</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>FileManager</name> <operator>&amp;</operator><macro><name>getFromFileManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FromFileManager</name></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>DiagnosticBuilder</name></type> <name>ToDiag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>DiagnosticBuilder</name></type> <name>FromDiag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>NonEquivalentDeclSet</name> <modifier>&amp;</modifier></type><name>getNonEquivalentDecls</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>NonEquivalentDecls</name></expr>;</return> </block_content>}</block></function>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>CompleteDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>virtual</name> <name>void</name></type> <name>Imported</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>To</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function_decl><type><name>void</name></type> <name>RegisterImportedDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>FromD</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>ToD</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>Decl</name> <modifier>*</modifier></type><name>MapImported</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>To</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>virtual</name> <name>Decl</name> <modifier>*</modifier></type><name>GetOriginalDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>To</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name> <macro><name>getImportDeclErrorIfAny</name><argument_list>(<argument>Decl *FromD</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>setImportDeclError</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>ImportError</name></type> <name>Error</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>IsStructurallyEquivalent</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>From</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>To</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Complain</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getFieldIndex</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
