<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TextNodeDumper.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TEXTNODEDUMPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TEXTNODEDUMPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTDumperUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AttrVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentCommandTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprConcepts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateArgumentVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeVisitor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>APValue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TextTreeStructure</name> <block>{<block_content>
<decl_stmt><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ShowColors</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>IsLastChild</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <name>Pending</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>TopLevel</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>FirstChild</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Prefix</name></expr>;</expr_stmt>

<label><name>public</name>:</label>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>AddChild</name><parameter_list>(<parameter><decl><type><name>Fn</name></type> <name>DoAddChild</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>AddChild</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>DoAddChild</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>AddChild</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Label</name></decl></parameter>, <parameter><decl><type><name>Fn</name></type> <name>DoAddChild</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>TopLevel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>TopLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DoAddChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>Pending</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name><name>Pending</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Pending</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name><name>Prefix</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>TopLevel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>DumpWithIndent</name> <init>= <expr><index>[<expr><name>this</name></expr><operator>,</operator> <name>DoAddChild</name><operator>,</operator>
<call><name>Label</name><argument_list>(<argument><expr><call><name><name>Label</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>]</index><operator>(</operator><name>bool</name> <name>IsLastChild</name><operator>)</operator> <block>{












<expr><block>{
<expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;
<expr><name>ColorScope</name> <call><name>Color</name><argument_list>(<argument><expr><name>OS</name></expr></argument>, <argument><expr><name>ShowColors</name></expr></argument>, <argument><expr><name>IndentColor</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <name>Prefix</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>IsLastChild</name></expr> ?</condition><then> <expr><literal type="char">'`'</literal></expr> </then><else>: <expr><literal type="char">'|'</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="char">'-'</literal></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Label</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <name>Label</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<call><name><name>this</name><operator>-&gt;</operator><name>Prefix</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>IsLastChild</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'|'</literal></expr></else></ternary></expr></argument>)</argument_list></call></block></expr>;
<expr><call><name><name>this</name><operator>-&gt;</operator><name>Prefix</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>FirstChild</name> <operator>=</operator> <name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Depth</name> <init>= <expr><call><name><name>Pending</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DoAddChild</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>Depth</name> <operator>&lt;</operator> <call><name><name>Pending</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name><name>Pending</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Pending</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Prefix</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>Prefix</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>FirstChild</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Pending</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>DumpWithIndent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><call><name><name>Pending</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Pending</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>DumpWithIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>FirstChild</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>TextTreeStructure</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>bool ShowColors</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>OS</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ShowColors</name><argument_list>(<argument>ShowColors</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TextNodeDumper</name>
<range>: <expr><name>public</name> <name>TextTreeStructure</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>comments</name>::<name><name>ConstCommentVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>, <argument><expr><name>void</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>ConstAttrVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>ConstTemplateArgumentVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>ConstStmtVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>TypeVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>ConstDeclVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ShowColors</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>LastLocFilename</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>LastLocLine</name> <init>= <expr><operator>~</operator><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>*</modifier></type><name>Context</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>*</modifier></type><name>SM</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PrintingPolicy</name></type> <name>PrintPolicy</name> <init>= <expr><call><name>LangOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>CommandTraits</name> <operator>*</operator><name>Traits</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getCommandName</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>printFPOptions</name><parameter_list>(<parameter><decl><type><name>FPOptionsOverride</name></type> <name>FPO</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>dumpAPValueChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>APValue</name> <operator>&amp;</operator><name>Value</name></expr></argument>, <argument><expr><name>QualType</name> <name>Ty</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>APValue</name> <operator>&amp;</operator><call>(<modifier>*</modifier><name>IdxToChildFun</name>)<argument_list>(<argument><expr><specifier>const</specifier> <name>APValue</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>unsigned</name> <name>NumChildren</name></expr></argument>, <argument><expr><name>StringRef</name> <name>LabelSingular</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>LabelPlurial</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>TextNodeDumper</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>const ASTContext &amp;Context</argument>, <argument>bool ShowColors</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>TextNodeDumper</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>bool ShowColors</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>Comment</name> <operator>*</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator><name>FC</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Attr</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>R</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>From</name> <operator>=</operator> <name>nullptr</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Label</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXCtorInitializer</name> <modifier>*</modifier></type><name>Init</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPClause</name> <modifier>*</modifier></type><name>C</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BlockDecl</name><operator>::</operator><name>Capture</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GenericSelectionExpr</name><operator>::</operator><name>ConstAssociation</name> <operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>concepts</name><operator>::</operator><name>Requirement</name> <operator>*</operator><name>R</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>APValue</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dumpPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpSourceRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpBareType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Desugar</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpBareDeclRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dumpAccessSpecifier</name><parameter_list>(<parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>dumpCleanupObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExprWithCleanups</name><operator>::</operator><name>CleanupObject</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>dumpDeclRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Label</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>visitTextComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>TextComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitInlineCommandComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>InlineCommandComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitHTMLStartTagComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>HTMLStartTagComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitHTMLEndTagComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>HTMLEndTagComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitBlockCommandComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>BlockCommandComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitParamCommandComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>ParamCommandComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator><name>FC</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitTParamCommandComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>TParamCommandComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator><name>FC</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitVerbatimBlockComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>VerbatimBlockComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type>
<name>visitVerbatimBlockLineComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>VerbatimBlockLineComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>visitVerbatimLineComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>VerbatimLineComment</name> <operator>*</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AttrTextNodeDump.inc"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>VisitNullTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypeTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitDeclarationTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitNullPtrTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitIntegralTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateExpansionTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitExpressionTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitPackTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>TA</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitIfStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IfStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitSwitchStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SwitchStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitWhileStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WhileStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitLabelStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitGotoStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GotoStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCaseStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CaseStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitConstantExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConstantExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCallExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXOperatorCallExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXOperatorCallExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitImplicitCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ImplicitCastExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitDeclRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclRefExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitSYCLUniqueStableNameExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SYCLUniqueStableNameExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitPredefinedExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PredefinedExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCharacterLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CharacterLiteral</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitIntegerLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IntegerLiteral</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFixedPointLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FixedPointLiteral</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFloatingLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FloatingLiteral</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitStringLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringLiteral</name> <modifier>*</modifier></type><name>Str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitInitListExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InitListExpr</name> <modifier>*</modifier></type><name>ILE</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitGenericSelectionExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GenericSelectionExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryOperator</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnaryExprOrTypeTraitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryExprOrTypeTraitExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitMemberExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemberExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitExtVectorElementExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtVectorElementExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitBinaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinaryOperator</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCompoundAssignOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompoundAssignOperator</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitAddrLabelExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddrLabelExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXNamedCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXNamedCastExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXBoolLiteralExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBoolLiteralExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXThisExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXThisExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXFunctionalCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXFunctionalCastExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXStaticCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXStaticCastExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXUnresolvedConstructExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXUnresolvedConstructExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXConstructExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXConstructExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXBindTemporaryExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXNewExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXNewExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXDeleteExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDeleteExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypeTraitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeTraitExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitArrayTypeTraitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArrayTypeTraitExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitExpressionTraitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExpressionTraitExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitMaterializeTemporaryExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitExprWithCleanups</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExprWithCleanups</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnresolvedLookupExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnresolvedLookupExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitSizeOfPackExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SizeOfPackExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>VisitCXXDependentScopeMemberExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDependentScopeMemberExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCAtCatchStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCAtCatchStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCEncodeExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCEncodeExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCMessageExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMessageExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCBoxedExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCBoxedExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCSelectorExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCSelectorExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCProtocolExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCProtocolExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCPropertyRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCPropertyRefExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCSubscriptRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCSubscriptRefExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCIvarRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCIvarRefExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCBoolLiteralExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCBoolLiteralExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitOMPIteratorExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPIteratorExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitConceptSpecializationExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConceptSpecializationExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitRequiresExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RequiresExpr</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitRValueReferenceType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReferenceType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitArrayType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArrayType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitConstantArrayType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConstantArrayType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitVariableArrayType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VariableArrayType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitDependentSizedArrayType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DependentSizedArrayType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitDependentSizedExtVectorType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DependentSizedExtVectorType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitVectorType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VectorType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFunctionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFunctionProtoType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnresolvedUsingType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnresolvedUsingType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypedefType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypedefType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnaryTransformType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryTransformType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTagType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateTypeParmType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateTypeParmType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitAutoType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AutoType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateSpecializationType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateSpecializationType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitInjectedClassNameType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InjectedClassNameType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCInterfaceType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitPackExpansionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PackExpansionType</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitLabelDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypedefDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypedefDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitEnumDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EnumDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitRecordDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitEnumConstantDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EnumConstantDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitIndirectFieldDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndirectFieldDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFunctionDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFieldDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitVarDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitBindingDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BindingDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCapturedDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CapturedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitImportDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ImportDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitPragmaCommentDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PragmaCommentDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitPragmaDetectMismatchDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PragmaDetectMismatchDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitOMPExecutableDirective</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPExecutableDirective</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitOMPDeclareReductionDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitOMPRequiresDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPRequiresDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitOMPCapturedExprDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPCapturedExprDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitNamespaceDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamespaceDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUsingDirectiveDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UsingDirectiveDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitNamespaceAliasDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamespaceAliasDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypeAliasDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeAliasDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTypeAliasTemplateDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeAliasTemplateDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitCXXRecordDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFunctionTemplateDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionTemplateDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitClassTemplateDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ClassTemplateDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitBuiltinTemplateDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BuiltinTemplateDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitVarTemplateDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarTemplateDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateTypeParmDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateTypeParmDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitNonTypeTemplateParmDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NonTypeTemplateParmDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitTemplateTemplateParmDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateTemplateParmDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUsingDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UsingDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnresolvedUsingTypenameDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnresolvedUsingTypenameDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUnresolvedUsingValueDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnresolvedUsingValueDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUsingEnumDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UsingEnumDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitUsingShadowDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UsingShadowDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitConstructorUsingShadowDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConstructorUsingShadowDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitLinkageSpecDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LinkageSpecDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitAccessSpecDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AccessSpecDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitFriendDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FriendDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCIvarDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCIvarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCMethodDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCTypeParamDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCTypeParamDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCCategoryDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCategoryDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCCategoryImplDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCategoryImplDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCProtocolDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCProtocolDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCInterfaceDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCImplementationDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCImplementationDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCCompatibleAliasDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCompatibleAliasDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCPropertyDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCPropertyDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitObjCPropertyImplDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCPropertyImplDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitBlockDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VisitConceptDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConceptDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>VisitLifetimeExtendedTemporaryDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LifetimeExtendedTemporaryDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
