<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CHECKERHELPERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CHECKERHELPERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/OperationKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OperatorKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AttributedType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<function_decl><type><name>bool</name></type> <name>containsMacro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>containsEnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>containsStaticLocal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>containsBuiltinOffsetOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>containsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Child</name> <range>: <expr><call><name><name>S</name><operator>-&gt;</operator><name>children</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>Child</name> <operator>&amp;&amp;</operator> <call><name><name>containsStmt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>VarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<call><name>parseAssignment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Nullability</name> <range>: <expr><name>char</name> <block>{
<expr><name>Contradicted</name></expr>,



<expr><name>Nullable</name></expr>,
<expr><name>Unspecified</name></expr>,
<expr><name>Nonnull</name></expr>
}</block></expr></range></decl>;</decl_stmt>


<function_decl><type><name>Nullability</name></type> <name>getNullabilityAnnotation</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <macro><name>tryExpandAsInteger</name><argument_list>(<argument>StringRef Macro</argument>, <argument>const Preprocessor &amp;PP</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OperatorKind</name> <block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>BinaryOperatorKind</name></type> <name>Bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnaryOperatorKind</name></type> <name>Un</name></decl>;</decl_stmt>
}</block> <decl><name>Op</name></decl>;</union>
<decl_stmt><decl><type><name>bool</name></type> <name>IsBinary</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>OperatorKind</name><argument_list>(<argument>BinaryOperatorKind Bin</argument>)</argument_list></macro> : <macro><name>Op</name></macro><block>{<block_content><expr><name>Bin</name></expr></block_content>}</block><operator>,</operator> <macro><name>IsBinary</name></macro><block>{<block_content><expr><name>true</name></expr></block_content>}</block> <block>{<block_content/>}</block>
<macro><name>explicit</name></macro> <macro><name>OperatorKind</name><argument_list>(<argument>UnaryOperatorKind Un</argument>)</argument_list></macro> : <macro><name>IsBinary</name></macro><block>{<block_content><expr><name>false</name></expr></block_content>}</block> <block>{<block_content> <expr_stmt><expr><name><name>Op</name><operator>.</operator><name>Un</name></name> <operator>=</operator> <name>Un</name></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><name>bool</name> <macro><name>IsBinaryOp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsBinary</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>BinaryOperatorKind</name> <macro><name>GetBinaryOpUnsafe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>IsBinary</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot get binary operator - we have a unary operator"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Op</name><operator>.</operator><name>Bin</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>BinaryOperatorKind</name></expr></argument>&gt;</argument_list></name> <macro><name>GetBinaryOp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>IsBinary</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Op</name><operator>.</operator><name>Bin</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><block>{}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>UnaryOperatorKind</name> <macro><name>GetUnaryOpUnsafe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>IsBinary</name> <operator>&amp;&amp;</operator>
<literal type="string">"cannot get unary operator - we have a binary operator"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Op</name><operator>.</operator><name>Un</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>UnaryOperatorKind</name></expr></argument>&gt;</argument_list></name> <macro><name>GetUnaryOp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsBinary</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Op</name><operator>.</operator><name>Un</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><block>{}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>OperatorKind</name></type> <name>operationKindFromOverloadedOperator</name><parameter_list>(<parameter><decl><type><name>OverloadedOperatorKind</name></type> <name>OOK</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsBinary</name></decl></parameter>)</parameter_list>;</function_decl>

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
