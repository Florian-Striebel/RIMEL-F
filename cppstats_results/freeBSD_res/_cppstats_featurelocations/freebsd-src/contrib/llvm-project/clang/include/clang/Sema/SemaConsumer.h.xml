<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/SemaConsumer.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_SEMACONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_SEMACONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SemaConsumer</name> <range>: <expr><name>public</name> <name>ASTConsumer</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>SemaConsumer</name><argument_list>()</argument_list></macro> <block>{
<expr><name>ASTConsumer</name><operator>::</operator><name>SemaConsumer</name> <operator>=</operator> <name>true</name></expr>;
}</block>




<name>virtual</name> <name>void</name> <macro><name>InitializeSema</name><argument_list>(<argument>Sema &amp;S</argument>)</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>void</name> <macro><name>ForgetSema</name><argument_list>()</argument_list></macro> <block>{}</block>


<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ASTConsumer *Consumer</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>Consumer</name><operator>-&gt;</operator><name>SemaConsumer</name></name></expr>;</return>
}</block>
}</expr>;
}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
