<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/StmtVisitor.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_STMTVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_STMTVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprConcepts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprOpenMP.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtOpenMP.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Ptr</name></expr></argument>, <argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name><operator>=</operator><name>void</name></expr></argument>,
<argument><expr><name>class</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>StmtVisitorBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename Ptr&lt;CLASS&gt;::type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass*&gt;(this)-&gt;Visit ##NAME( static_cast&lt;PTR(CLASS)&gt;(S), std::forward&lt;ParamTys&gt;(P)...)</cpp:value></cpp:define>



<decl_stmt><decl><type><name>RetTy</name></type> <name>Visit</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Stmt</argument>)</argument_list></macro> <name>S</name></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><macro><name>PTR</name><argument_list>(<argument>BinaryOperator</argument>)</argument_list></macro> <name>BinOp</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BinaryOperator</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>BinOp</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BO_PtrMemD</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinPtrMemD</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_PtrMemI</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinPtrMemI</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Mul</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinMul</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Div</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinDiv</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Rem</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinRem</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Add</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinAdd</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Sub</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinSub</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Shl</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinShl</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Shr</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinShr</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BO_LT</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinLT</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_GT</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinGT</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_LE</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinLE</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_GE</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinGE</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_EQ</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinEQ</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_NE</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinNE</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Cmp</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinCmp</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BO_And</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinAnd</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Xor</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinXor</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Or</name></expr> :</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinOr</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_LAnd</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinLAnd</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_LOr</name></expr> :</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinLOr</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Assign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinAssign</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_MulAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinMulAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_DivAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinDivAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_RemAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinRemAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_AddAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinAddAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_SubAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinSubAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_ShlAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinShlAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_ShrAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinShrAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_AndAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinAndAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_OrAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinOrAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_XorAssign</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinXorAssign</name></expr></argument>, <argument><expr><name>CompoundAssignOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>BO_Comma</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>BinComma</name></expr></argument>, <argument><expr><name>BinaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><macro><name>PTR</name><argument_list>(<argument>UnaryOperator</argument>)</argument_list></macro> <name>UnOp</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>UnaryOperator</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>UnOp</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UO_PostInc</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryPostInc</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_PostDec</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryPostDec</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_PreInc</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryPreInc</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_PreDec</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryPreDec</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_AddrOf</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryAddrOf</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Deref</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryDeref</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Plus</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryPlus</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Minus</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryMinus</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Not</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryNot</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_LNot</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryLNot</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Real</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryReal</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Imag</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryImag</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Extension</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryExtension</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>UO_Coawait</name></expr>:</case> <expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>UnaryCoawait</name></expr></argument>, <argument><expr><name>UnaryOperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown stmt kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_STMT</name><parameter_list>(<parameter><type><name>STMT</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Stmt::CLASS ##Class: DISPATCH(CLASS, CLASS);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtNodes.inc"</cpp:file></cpp:include>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit ##CLASS(PTR(CLASS) S, ParamTys... P) { DISPATCH(PARENT, PARENT); }</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtNodes.inc"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINOP_FALLBACK</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy VisitBin ##NAME(PTR(BinaryOperator) S, ParamTys... P) { DISPATCH(BinaryOperator, BinaryOperator); }</cpp:value></cpp:define>



<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>PtrMemD</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>PtrMemI</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Mul</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Div</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Rem</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Add</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Sub</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Shl</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Shr</argument>)</argument_list></macro>

<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>LT</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>GT</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>LE</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>GE</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>EQ</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>NE</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Cmp</argument>)</argument_list></macro>

<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>And</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Xor</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Or</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>LAnd</argument>)</argument_list></macro> <macro><name>BINOP_FALLBACK</name><argument_list>(<argument>LOr</argument>)</argument_list></macro>

<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Assign</argument>)</argument_list></macro>
<macro><name>BINOP_FALLBACK</name><argument_list>(<argument>Comma</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BINOP_FALLBACK</name></cpp:undef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAO_FALLBACK</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy VisitBin ##NAME(PTR(CompoundAssignOperator) S, ParamTys... P) { DISPATCH(CompoundAssignOperator, CompoundAssignOperator); }</cpp:value></cpp:define>



<macro><name>CAO_FALLBACK</name><argument_list>(<argument>MulAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>DivAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>RemAssign</argument>)</argument_list></macro>
<macro><name>CAO_FALLBACK</name><argument_list>(<argument>AddAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>SubAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>ShlAssign</argument>)</argument_list></macro>
<macro><name>CAO_FALLBACK</name><argument_list>(<argument>ShrAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>AndAssign</argument>)</argument_list></macro> <macro><name>CAO_FALLBACK</name><argument_list>(<argument>OrAssign</argument>)</argument_list></macro>
<macro><name>CAO_FALLBACK</name><argument_list>(<argument>XorAssign</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CAO_FALLBACK</name></cpp:undef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNARYOP_FALLBACK</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy VisitUnary ##NAME(PTR(UnaryOperator) S, ParamTys... P) { DISPATCH(UnaryOperator, UnaryOperator); }</cpp:value></cpp:define>



<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>PostInc</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>PostDec</argument>)</argument_list></macro>
<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>PreInc</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>PreDec</argument>)</argument_list></macro>
<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>AddrOf</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Deref</argument>)</argument_list></macro>

<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Plus</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Minus</argument>)</argument_list></macro>
<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Not</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>LNot</argument>)</argument_list></macro>
<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Real</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Imag</argument>)</argument_list></macro>
<macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Extension</argument>)</argument_list></macro> <macro><name>UNARYOP_FALLBACK</name><argument_list>(<argument>Coawait</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNARYOP_FALLBACK</name></cpp:undef>


<decl_stmt><decl><type><name>RetTy</name></type> <name>VisitStmt</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Stmt</argument>)</argument_list></macro> <name>Node</name></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>StmtVisitor</name>
<range>: <expr><name>public</name> <name><name>StmtVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>add_pointer</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstStmtVisitor</name> <range>: <expr><name>public</name> <name><name>StmtVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>make_const_ptr</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>,
<argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
