<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TEMPLATEARGUMENTVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TEMPLATEARGUMENTVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateBase.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>templateargumentvisitor</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Ref</name></expr></argument>, <argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>,
<argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Base</name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename Ref&lt;CLASS&gt;::type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case TemplateArgument::NAME: return static_cast&lt;ImplClass *&gt;(this)-&gt;Visit##NAME##TemplateArgument( TA, std::forward&lt;ParamTys&gt;(P)...)</cpp:value></cpp:define>




<decl_stmt><decl><type><name>RetTy</name></type> <name>Visit</name><argument_list>(<argument><expr><macro><name>REF</name><argument_list>(<argument>TemplateArgument</argument>)</argument_list></macro> <name>TA</name></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>TA</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Declaration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>NullPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Integral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>TemplateExpansion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH</name><argument_list>(<argument><expr><name>Pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"TemplateArgument is not covered in switch!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISIT_METHOD</name><parameter_list>(<parameter><type><name>CATEGORY</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit##CATEGORY##TemplateArgument(REF(TemplateArgument) TA, ParamTys... P) { return VisitTemplateArgument(TA, std::forward&lt;ParamTys&gt;(P)...); }</cpp:value></cpp:define>





<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Declaration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>NullPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Integral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>TemplateExpansion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VISIT_METHOD</name><argument_list>(<argument><expr><name>Pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RetTy</name></type> <name>VisitTemplateArgument</name><argument_list>(<argument><expr><call><name>REF</name><argument_list>(<argument><expr><name>TemplateArgument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VISIT_METHOD</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TemplateArgumentVisitor</name>
<range>: <expr><name>public</name> <name>templateargumentvisitor</name><operator>::</operator><name><name>Base</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>add_lvalue_reference</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>,
<argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstTemplateArgumentVisitor</name>
<range>: <expr><name>public</name> <name>templateargumentvisitor</name><operator>::</operator><name><name>Base</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>make_const_ref</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>,
<argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
