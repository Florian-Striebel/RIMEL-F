<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ParentMapContext.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_PARENTMAPCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_PARENTMAPCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DynTypedNodeList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ParentMapContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ParentMapContext</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ParentMapContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

























<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name> <name>DynTypedNodeList</name></type> <name>getParents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NodeT</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DynTypedNodeList</name></type> <name>getParents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>TraversalKind</name> <macro><name>getTraversalKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Traversal</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setTraversalKind</name><parameter_list>(<parameter><decl><type><name>TraversalKind</name></type> <name>TK</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Traversal</name> <operator>=</operator> <name>TK</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>traverseIgnored</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>traverseIgnored</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>traverseIgnored</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>N</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ParentMap</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ASTCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TraversalKind</name></type> <name>Traversal</name> <init>= <expr><name>TK_AsIs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ParentMap</name></expr></argument>&gt;</argument_list></name> <name>Parents</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TraversalKindScope</name> <block>{<block_content>
<decl_stmt><decl><type><name>ParentMapContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TraversalKind</name></type> <name>TK</name> <init>= <expr><name>TK_AsIs</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TraversalKindScope</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>ASTCtx</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>TraversalKind</name></expr></argument>&gt;</argument_list></name> <name>ScopeTK</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Ctx</name><argument_list>(<argument>ASTCtx.getParentMapContext()</argument>)</argument_list></macro> <block>{
<expr><name>TK</name> <operator>=</operator> <call><name><name>Ctx</name><operator>.</operator><name>getTraversalKind</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>ScopeTK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Ctx</name><operator>.</operator><name>setTraversalKind</name></name><argument_list>(<argument><expr><operator>*</operator><name>ScopeTK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>TraversalKindScope</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>Ctx</name><operator>.</operator><name>setTraversalKind</name></name><argument_list>(<argument><expr><name>TK</name></expr></argument>)</argument_list></call></expr>; }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DynTypedNodeList</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>AlignedCharArrayUnion</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>, <argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Storage</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsSingleNode</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DynTypedNodeList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>IsSingleNode</name><argument_list>(<argument>true</argument>)</argument_list></macro> <block>{
<macro><name>new</name> <argument_list>(<argument>&amp;Storage</argument>)</argument_list></macro> <expr><call><name>DynTypedNode</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>DynTypedNodeList</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name> <name>A</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>IsSingleNode</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{
<macro><name>new</name> <argument_list>(<argument>&amp;Storage</argument>)</argument_list></macro> <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>DynTypedNode</name> <operator>*</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsSingleNode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call>
<operator>-&gt;</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>*</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsSingleNode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>end</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>begin</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>N</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>N</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Out of bounds!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>+</operator> <name>N</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>DynTypedNodeList</name> <name>ParentMapContext</name><operator>::</operator><macro><name>getParents</name><argument_list>(<argument>const NodeT &amp;Node</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getParents</name><argument_list>(<argument><expr><name>DynTypedNode</name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>DynTypedNodeList</name> <name>ASTContext</name><operator>::</operator><macro><name>getParents</name><argument_list>(<argument>const NodeT &amp;Node</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getParentMapContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParents</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>DynTypedNodeList</name> <name>ASTContext</name><operator>::</operator><macro><name>getParents</name><argument_list>(<argument>const DynTypedNode &amp;Node</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getParentMapContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParents</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
