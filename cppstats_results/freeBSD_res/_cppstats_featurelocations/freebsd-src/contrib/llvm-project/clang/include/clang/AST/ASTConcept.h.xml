<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTConcept.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTCONCEPT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTCONCEPT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ConceptDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConceptSpecializationExpr</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ConstraintSatisfaction</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{


<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ConstraintOwner</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>TemplateArgs</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>ConstraintSatisfaction</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><call><name>ConstraintSatisfaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ConstraintOwner</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <name>TemplateArgs</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>ConstraintOwner</name><argument_list>(<argument><expr><name>ConstraintOwner</name></expr></argument>)</argument_list></call></expr>, <macro><name>TemplateArgs</name><argument_list>(<argument>TemplateArgs.begin()</argument>,
<argument>TemplateArgs.end()</argument>)</argument_list></macro> <expr><block>{ }</block>

<name>using</name> <name>SubstitutionDiagnostic</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>Detail</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>bool</name> <name>IsSatisfied</name> <operator>=</operator> <name>false</name></expr>;





<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>Detail</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Details</name></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>const ASTContext &amp;C</argument>)</argument_list></macro> <block>{
<expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>ConstraintOwner</name></expr></argument>, <argument><expr><name>TemplateArgs</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ConstraintOwner</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <name>TemplateArgs</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>UnsatisfiedConstraintRecord</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>ASTConstraintSatisfaction</name></name></type> <name>final</name> <range>:
<expr><name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ASTConstraintSatisfaction</name></expr></argument>,
<argument><expr><name>UnsatisfiedConstraintRecord</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>std</name><operator>::</operator><name>size_t</name> <name>NumRecords</name></expr>;
<expr><name>bool</name> <name>IsSatisfied</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><specifier>const</specifier> <name>UnsatisfiedConstraintRecord</name> <operator>*</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>UnsatisfiedConstraintRecord</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>UnsatisfiedConstraintRecord</name> <operator>*</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>UnsatisfiedConstraintRecord</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>+</operator> <name>NumRecords</name></expr>;</return>
}</block>

<call><name>ASTConstraintSatisfaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ConstraintSatisfaction</name> <operator>&amp;</operator><name>Satisfaction</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ASTConstraintSatisfaction</name> <operator>*</operator>
<call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ConstraintSatisfaction</name> <operator>&amp;</operator><name>Satisfaction</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ConceptReference</name> <block>{<block_content>
<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>NestedNameSpecifierLoc</name></type> <name>NestedNameSpec</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DeclarationNameInfo</name></type> <name>ConceptName</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>FoundDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ConceptDecl</name> <modifier>*</modifier></type><name>NamedConcept</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name> <modifier>*</modifier></type><name>ArgsAsWritten</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>ConceptReference</name><argument_list>(<argument>NestedNameSpecifierLoc NNS</argument>, <argument>SourceLocation TemplateKWLoc</argument>,
<argument>DeclarationNameInfo ConceptNameInfo</argument>, <argument>NamedDecl *FoundDecl</argument>,
<argument>ConceptDecl *NamedConcept</argument>,
<argument>const ASTTemplateArgumentListInfo *ArgsAsWritten</argument>)</argument_list></macro> :
<expr_stmt><expr><call><name>NestedNameSpec</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>TemplateKWLoc</name><argument_list>(<argument><expr><name>TemplateKWLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ConceptName</name><argument_list>(<argument><expr><name>ConceptNameInfo</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FoundDecl</name><argument_list>(<argument><expr><name>FoundDecl</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NamedConcept</name><argument_list>(<argument><expr><name>NamedConcept</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ArgsAsWritten</name><argument_list>(<argument>ArgsAsWritten</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConceptReference</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>NestedNameSpec</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>TemplateKWLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>ConceptName</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>FoundDecl</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NamedConcept</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ArgsAsWritten</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>NestedNameSpecifierLoc</name> <operator>&amp;</operator><macro><name>getNestedNameSpecifierLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NestedNameSpec</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>DeclarationNameInfo</name> <operator>&amp;</operator><macro><name>getConceptNameInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ConceptName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getConceptNameLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getConceptNameInfo</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getTemplateKWLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TemplateKWLoc</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getFoundDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FoundDecl</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ConceptDecl</name> <operator>*</operator><macro><name>getNamedConcept</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NamedConcept</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name> <operator>*</operator><macro><name>getTemplateArgsAsWritten</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ArgsAsWritten</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasExplicitTemplateArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ArgsAsWritten</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeConstraint</name> <range>: <expr><name>public</name> <name>ConceptReference</name> <block>{


<expr><name>Expr</name> <operator>*</operator><name>ImmediatelyDeclaredConstraint</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>TypeConstraint</name><argument_list>(<argument>NestedNameSpecifierLoc NNS</argument>,
<argument>DeclarationNameInfo ConceptNameInfo</argument>, <argument>NamedDecl *FoundDecl</argument>,
<argument>ConceptDecl *NamedConcept</argument>,
<argument>const ASTTemplateArgumentListInfo *ArgsAsWritten</argument>,
<argument>Expr *ImmediatelyDeclaredConstraint</argument>)</argument_list></macro> <operator>:</operator>
<call><name>ConceptReference</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>, <argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConceptNameInfo</name></expr></argument>,
<argument><expr><name>FoundDecl</name></expr></argument>, <argument><expr><name>NamedConcept</name></expr></argument>, <argument><expr><name>ArgsAsWritten</name></expr></argument>)</argument_list></call></expr>,
<macro><name>ImmediatelyDeclaredConstraint</name><argument_list>(<argument>ImmediatelyDeclaredConstraint</argument>)</argument_list></macro> <expr><block>{}</block>




<name>Expr</name> <operator>*</operator><macro><name>getImmediatelyDeclaredConstraint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ImmediatelyDeclaredConstraint</name></expr>;</return>
}</block>

<name>void</name> <macro><name>print</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>, <argument>PrintingPolicy Policy</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
