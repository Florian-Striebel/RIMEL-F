<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTLambda.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTLAMBDA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTLAMBDA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<function><type><specifier>inline</specifier> <name>StringRef</name></type> <name>getLambdaStaticInvokerName</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"__invoke"</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLambdaCallOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>LambdaClass</name> <init>= <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>LambdaClass</name> <operator>||</operator> <operator>!</operator><call><name><name>LambdaClass</name><operator>-&gt;</operator><name>isLambda</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getOverloadedOperator</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OO_Call</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLambdaCallOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DC</name> <operator>||</operator> <operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>isLambdaCallOperator</name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isGenericLambdaCallOperatorSpecialization</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>MD</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>LambdaClass</name> <init>= <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>LambdaClass</name> <operator>&amp;&amp;</operator> <call><name><name>LambdaClass</name><operator>-&gt;</operator><name>isGenericLambda</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>isLambdaCallOperator</name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>MD</name><operator>-&gt;</operator><name>isFunctionTemplateSpecialization</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLambdaConversionOperator</name><parameter_list>(<parameter><decl><type><name>CXXConversionDecl</name> <modifier>*</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>C</name></expr> ?</condition><then> <expr><call><name><name>C</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isLambda</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLambdaConversionOperator</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>D</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><name>CXXConversionDecl</name> <modifier>*</modifier></type><name>Conv</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXConversionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>isLambdaConversionOperator</name><argument_list>(<argument><expr><name>Conv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><name>FunctionTemplateDecl</name> <modifier>*</modifier></type><name>F</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionTemplateDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<decl><type><name>CXXConversionDecl</name> <modifier>*</modifier></type><name>Conv</name> <init>=
<expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>CXXConversionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>F</name><operator>-&gt;</operator><name>getTemplatedDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>isLambdaConversionOperator</name><argument_list>(<argument><expr><name>Conv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isGenericLambdaCallOperatorSpecialization</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>isGenericLambdaCallOperatorSpecialization</name><argument_list>(
<argument><expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isGenericLambdaCallOperatorOrStaticInvokerSpecialization</name><parameter_list>(
<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>MD</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>LambdaClass</name> <init>= <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>LambdaClass</name> <operator>&amp;&amp;</operator> <call><name><name>LambdaClass</name><operator>-&gt;</operator><name>isGenericLambda</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>isLambdaCallOperator</name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>MD</name><operator>-&gt;</operator><name>isLambdaStaticInvoker</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name><name>MD</name><operator>-&gt;</operator><name>isFunctionTemplateSpecialization</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>getLambdaAwareParentOfDeclContext</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isLambdaCallOperator</name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>DC</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>DC</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
