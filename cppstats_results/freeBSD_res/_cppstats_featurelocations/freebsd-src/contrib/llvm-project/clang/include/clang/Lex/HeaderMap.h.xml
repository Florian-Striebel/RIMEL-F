<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/HeaderMap.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_HEADERMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_HEADERMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<struct_decl>struct <name>HMapBucket</name>;</struct_decl>
<struct_decl>struct <name>HMapHeader</name>;</struct_decl>


<decl_stmt><decl><type><name>class</name></type> <name>HeaderMapImpl</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>FileBuffer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>NeedsBSwap</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>ReverseMap</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>HeaderMapImpl</name><argument_list>(<argument>std::unique_ptr&lt;const llvm::MemoryBuffer&gt; File</argument>, <argument>bool NeedsBSwap</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>FileBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NeedsBSwap</name><argument_list>(<argument>NeedsBSwap</argument>)</argument_list></macro> <expr><block>{}</block>


<specifier>static</specifier> <name>bool</name> <call><name>checkHeader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>&amp;</operator><name>File</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>NeedsByteSwap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>StringRef</name></type> <name>lookupFilename</name><argument_list>(<argument><expr><name>StringRef</name> <name>Filename</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>DestPath</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getFileName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>reverseLookupFilename</name><argument_list>(<argument><expr><name>StringRef</name> <name>DestPath</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getEndianAdjustedWord</name><argument_list>(<argument><expr><name>unsigned</name> <name>X</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>HMapHeader</name> <operator>&amp;</operator><macro><name>getHeader</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HMapBucket</name></type> <name>getBucket</name><argument_list>(<argument><expr><name>unsigned</name> <name>BucketNo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>getString</name><argument_list>(<argument><expr><name>unsigned</name> <name>StrTabIdx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>HeaderMap</name> <range>: <expr><name>private</name> <name>HeaderMapImpl</name> <block>{
<macro><name>HeaderMap</name><argument_list>(<argument>std::unique_ptr&lt;const llvm::MemoryBuffer&gt; File</argument>, <argument>bool BSwap</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>HeaderMapImpl</name><argument_list>(<argument>std::move(File)</argument>, <argument>BSwap</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>


<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>HeaderMap</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>FE</name></expr></argument>,
<argument><expr><name>FileManager</name> <operator>&amp;</operator><name>FM</name></expr></argument>)</argument_list></call></expr>;






<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>LookupFile</name><argument_list>(<argument>StringRef Filename</argument>, <argument>FileManager &amp;FM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>using</name> <name>HeaderMapImpl</name><operator>::</operator><name>dump</name></expr>;
<expr><name>using</name> <name>HeaderMapImpl</name><operator>::</operator><name>getFileName</name></expr>;
<expr><name>using</name> <name>HeaderMapImpl</name><operator>::</operator><name>lookupFilename</name></expr>;
<expr><name>using</name> <name>HeaderMapImpl</name><operator>::</operator><name>reverseLookupFilename</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
