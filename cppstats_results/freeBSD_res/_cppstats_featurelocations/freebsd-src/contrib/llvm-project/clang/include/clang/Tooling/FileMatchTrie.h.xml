<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_FILEMATCHTRIE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_FILEMATCHTRIE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileMatchTrieNode</name></decl>;</decl_stmt>

<struct>struct <name>PathComparator</name> <block>{
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PathComparator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>equivalent</name><argument_list>(<argument><expr><name>StringRef</name> <name>FileA</name></expr></argument>, <argument><expr><name>StringRef</name> <name>FileB</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

























<decl_stmt><decl><type><name>class</name></type> <name>FileMatchTrie</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FileMatchTrie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>FileMatchTrie</name><argument_list>(<argument><expr><name>PathComparator</name><operator>*</operator> <name>Comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>FileMatchTrie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>NewPath</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>StringRef</name></type> <name>findEquivalent</name><argument_list>(<argument><expr><name>StringRef</name> <name>FileName</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Error</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FileMatchTrieNode</name> <modifier>*</modifier></type><name>Root</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PathComparator</name></expr></argument>&gt;</argument_list></name> <name>Comparator</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
