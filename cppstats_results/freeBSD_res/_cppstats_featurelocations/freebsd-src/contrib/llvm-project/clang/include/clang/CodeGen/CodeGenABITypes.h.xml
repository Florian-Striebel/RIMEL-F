<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_CODEGENABITYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_CODEGENABITYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CanonicalType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/CodeGen/CGFunctionInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/BasicBlock.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AttrBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDestructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CoverageSourceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCProtocolDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CGFunctionInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>


<struct>struct <name>ImplicitCXXConstructorArgs</name> <block>{


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>Prefix</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>Suffix</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeObjCMessageSendSignature</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>receiverType</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionType</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><name><name>CanQual</name><argument_list type="generic">&lt;<argument><expr><name>FunctionProtoType</name></expr></argument>&gt;</argument_list></name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionType</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><name><name>CanQual</name><argument_list type="generic">&lt;<argument><expr><name>FunctionNoProtoType</name></expr></argument>&gt;</argument_list></name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXMethodType</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>FTP</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionCall</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><name>CanQualType</name> <name>returnType</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CanQualType</name></expr></argument>&gt;</argument_list></name> <name>argTypes</name></expr></argument>,
<argument><expr><name>FunctionType</name><operator>::</operator><name>ExtInfo</name> <name>info</name></expr></argument>,
<argument><expr><name>RequiredArgs</name> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>ImplicitCXXConstructorArgs</name></type>
<name>getImplicitCXXConstructorArgs</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXConstructorDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator>
<macro><name>getCXXDestructorImplicitParam</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>, <argument>llvm::BasicBlock *InsertBlock</argument>,
<argument>llvm::BasicBlock::iterator InsertPoint</argument>,
<argument>const CXXDestructorDecl *D</argument>, <argument>CXXDtorType Type</argument>,
<argument>bool ForVirtualBase</argument>, <argument>bool Delegating</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><call><name>convertFreeFunctionType</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>convertTypeForMemory</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>unsigned</name></type> <name>getLLVMFieldNumber</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

















<decl_stmt><decl><type><name>void</name></type> <name>addDefaultFunctionDefinitionAttributes</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>AttrBuilder</name> <operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructDefaultConstructor</name><argument_list>(<argument>CodeGenModule &amp;GCM</argument>,
<argument>CharUnits DstAlignment</argument>,
<argument>bool IsVolatile</argument>,
<argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructCopyConstructor</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>,
<argument>CharUnits DstAlignment</argument>,
<argument>CharUnits SrcAlignment</argument>,
<argument>bool IsVolatile</argument>,
<argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructMoveConstructor</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>,
<argument>CharUnits DstAlignment</argument>,
<argument>CharUnits SrcAlignment</argument>,
<argument>bool IsVolatile</argument>,
<argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructCopyAssignmentOperator</name><argument_list>(
<argument>CodeGenModule &amp;CGM</argument>, <argument>CharUnits DstAlignment</argument>, <argument>CharUnits SrcAlignment</argument>,
<argument>bool IsVolatile</argument>, <argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructMoveAssignmentOperator</name><argument_list>(
<argument>CodeGenModule &amp;CGM</argument>, <argument>CharUnits DstAlignment</argument>, <argument>CharUnits SrcAlignment</argument>,
<argument>bool IsVolatile</argument>, <argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><macro><name>getNonTrivialCStructDestructor</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>,
<argument>CharUnits DstAlignment</argument>,
<argument>bool IsVolatile</argument>, <argument>QualType QT</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>emitObjCProtocolObject</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCProtocolDecl</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
