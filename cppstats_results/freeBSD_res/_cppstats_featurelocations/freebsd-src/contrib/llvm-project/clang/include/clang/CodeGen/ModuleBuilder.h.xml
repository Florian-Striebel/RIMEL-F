<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_MODULEBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_MODULEBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LLVMContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CoverageSourceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGDebugInfo</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CodeGenerator</name> <range>: <expr><name>public</name> <name>ASTConsumer</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>



<name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><call><name>CGM</name><argument_list>()</argument_list></call></expr>;









<expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><call><name>GetModule</name><argument_list>()</argument_list></call></expr>;





<expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><call><name>ReleaseModule</name><argument_list>()</argument_list></call></expr>;


<expr><name>CodeGen</name><operator>::</operator><name>CGDebugInfo</name> <operator>*</operator><call><name>getCGDebugInfo</name><argument_list>()</argument_list></call></expr>;





<expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>GetDeclForMangledName</name><argument_list>(<argument>llvm::StringRef MangledName</argument>)</argument_list></macro></expr>;









<expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>GetAddrOfGlobal</name><argument_list>(<argument>GlobalDecl decl</argument>, <argument>bool isForDefinition</argument>)</argument_list></macro></expr>;



<expr><name>llvm</name><operator>::</operator><name>Module</name><operator>*</operator> <macro><name>StartModule</name><argument_list>(<argument>llvm::StringRef ModuleName</argument>, <argument>llvm::LLVMContext &amp;C</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CodeGenerator</name> <modifier>*</modifier></type><name>CreateLLVMCodeGen</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ModuleName</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>HeaderSearchOptions</name> <operator>&amp;</operator><name>HeaderSearchOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PreprocessorOptions</name> <operator>&amp;</operator><name>PreprocessorOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><name>CGO</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name><operator>&amp;</operator> <name>C</name></expr></argument>,
<argument><expr><name>CoverageSourceInfo</name> <operator>*</operator><name>CoverageInfo</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
