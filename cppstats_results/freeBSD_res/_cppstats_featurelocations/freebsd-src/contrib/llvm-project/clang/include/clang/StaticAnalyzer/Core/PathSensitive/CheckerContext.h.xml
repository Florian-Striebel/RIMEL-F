<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CHECKERCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CHECKERCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CheckerContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>ExprEngine</name> <modifier>&amp;</modifier></type><name>Eng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ProgramPoint</name></type> <name>Location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeBuilder</name> <modifier>&amp;</modifier></type><name>NB</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wasInlined</name></decl>;</decl_stmt>

<macro><name>CheckerContext</name><argument_list>(<argument>NodeBuilder &amp;builder</argument>,
<argument>ExprEngine &amp;eng</argument>,
<argument>ExplodedNode *pred</argument>,
<argument>const ProgramPoint &amp;loc</argument>,
<argument>bool wasInlined = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Eng</name><argument_list>(<argument><expr><name>eng</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Pred</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Changed</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Location</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NB</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>wasInlined</name><argument_list>(<argument>wasInlined</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"We should not call the checkers on an empty state."</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>AnalysisManager</name> <operator>&amp;</operator><macro><name>getAnalysisManager</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getAnalysisManager</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>ConstraintManager</name> <modifier>&amp;</modifier></type><name>getConstraintManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getConstraintManager</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>StoreManager</name> <modifier>&amp;</modifier></type><name>getStoreManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getStoreManager</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>getPredecessor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Pred</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ProgramStateRef</name> <operator>&amp;</operator><macro><name>getState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getState</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>bool</name></type> <name>isDifferent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Changed</name></expr>;</return> </block_content>}</block></function>



<expr_stmt><expr><name>unsigned</name> <macro><name>blockCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>NB</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>blockCount</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>getASTContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLangOpts</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><macro><name>getLocationContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>StackFrameContext</name> <operator>*</operator><macro><name>getStackFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getStackFrame</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>inTopFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLocationContext</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>inTopFrame</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>getBugReporter</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getBugReporter</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>getSourceManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getBugReporter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSourceManager</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>getPreprocessor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getBugReporter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreprocessor</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SValBuilder</name> <modifier>&amp;</modifier></type><name>getSValBuilder</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getSValBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SymbolManager</name> <modifier>&amp;</modifier></type><name>getSymbolManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getSValBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSymbolManager</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProgramStateManager</name> <modifier>&amp;</modifier></type><name>getStateManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getStateManager</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>AnalysisDeclContext</name> <operator>*</operator><macro><name>getCurrentAnalysisDeclContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getAnalysisDeclContext</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getBlockID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>NB</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBlock</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBlockID</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<function><type><specifier>static</specifier> <specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>getLocationRegionIfPostStore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProgramPoint</name></type> <name>L</name> <init>= <expr><call><name><name>N</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PostStore</name></expr></argument>&gt;</argument_list></name></type> <name>PSL</name> <init>= <expr><name><name>L</name><operator>.</operator><name>getAs</name></name><operator>&lt;</operator><name>PostStore</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>PSL</name><operator>-&gt;</operator><name>getLocationValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>SVal</name></type> <name>getSVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getSVal</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><name>bool</name></type> <name>isGreaterOrEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>Val</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isNegative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>










<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>addTransition</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addTransitionImpl</name><argument_list>(<argument><expr><ternary><condition><expr><name>State</name></expr> ?</condition><then> <expr><name>State</name></expr> </then><else>: <expr><call><name>getState</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>addTransition</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addTransitionImpl</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>, <argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateSink</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addTransitionImpl</name><argument_list>(<argument><expr><ternary><condition><expr><name>State</name></expr> ?</condition><then> <expr><name>State</name></expr> </then><else>: <expr><call><name>getState</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>, <argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>addSink</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>State</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>State</name> <operator>=</operator> <call><name>getState</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>addTransition</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name>generateSink</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name>getPredecessor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateErrorNode</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>generateSink</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>Tag</name></expr> ?</condition><then> <expr><name>Tag</name></expr> </then><else>: <expr><call><name><name>Location</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>ExplodedNode</name> <modifier>*</modifier></type>
<name>generateNonFatalErrorNode</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addTransition</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>Tag</name></expr> ?</condition><then> <expr><name>Tag</name></expr> </then><else>: <expr><call><name><name>Location</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>ExplodedNode</name> <modifier>*</modifier></type>
<name>generateNonFatalErrorNode</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addTransition</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>Tag</name></expr> ?</condition><then> <expr><name>Tag</name></expr> </then><else>: <expr><call><name><name>Location</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>emitReport</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReport</name></expr></argument>&gt;</argument_list></name> <name>R</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>Changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Eng</name><operator>.</operator><name>getBugReporter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>emitReport</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><specifier>const</specifier> <name>NoteTag</name> <modifier>*</modifier></type><name>getNoteTag</name><argument_list>(<argument><expr><name>NoteTag</name><operator>::</operator><name>Callback</name> <operator>&amp;&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><name>bool</name> <name>IsPrunable</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>getDataTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>make</name><argument_list type="generic">&lt;<argument><expr><name>NoteTag</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IsPrunable</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>NoteTag</name>
<modifier>*</modifier></type><name>getNoteTag</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><name>PathSensitiveBugReport</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>Cb</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsPrunable</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getNoteTag</name><argument_list>(
<argument><expr><index>[<expr><name>Cb</name></expr>]</index><operator>(</operator><name>BugReporterContext</name> <operator>&amp;</operator><operator>,</operator>
<name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name><operator>)</operator> <block>{ <return>return <expr><call><name>Cb</name><argument_list>(<argument><expr><name>BR</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></argument></argument_list></call></expr></return><operator>,</operator>
<expr_stmt><expr><name>IsPrunable</name></expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>NoteTag</name> <modifier>*</modifier></type><name>getNoteTag</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>Cb</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsPrunable</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getNoteTag</name><argument_list>(<argument><expr><index>[<expr><name>Cb</name></expr>]</index><operator>(</operator><name>BugReporterContext</name> <operator>&amp;</operator><operator>,</operator>
<name>PathSensitiveBugReport</name> <operator>&amp;</operator><operator>)</operator> <block>{ <return>return <expr><call><name>Cb</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></argument></argument_list></call></expr></return><operator>,</operator>
<expr_stmt><expr><name>IsPrunable</name></expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>







<function><type><specifier>const</specifier> <name>NoteTag</name> <modifier>*</modifier></type><name>getNoteTag</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Note</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsPrunable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getNoteTag</name><argument_list>(
<argument><expr><index>[<expr><name>Note</name></expr>]</index><operator>(</operator><name>BugReporterContext</name> <operator>&amp;</operator><operator>,</operator>
<name>PathSensitiveBugReport</name> <operator>&amp;</operator><operator>)</operator> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Note</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></argument></argument_list></call></expr></return><operator>,</operator>
<expr_stmt><expr><name>IsPrunable</name></expr></expr_stmt>)</block_content></block>;</function>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>NoteTag</name> <modifier>*</modifier></type><name>getNoteTag</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name>, <name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>Cb</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsPrunable</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>getNoteTag</name><argument_list>(
<argument>[Cb](PathSensitiveBugReport &amp;BR) -&gt; std::string {
llvm::SmallString&lt;<literal type="number">128</literal>&gt; Str;
llvm::raw_svector_ostream OS(Str);
Cb(BR, OS);
return std::string(OS.str());
}</argument>,
<argument>IsPrunable</argument>)</argument_list></macro>;</return>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><name>StringRef</name></type> <name>getDeclDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>getCalleeDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>getCalleeName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>FunDecl</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>getCalleeIdentifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FunDecl</name> <init>= <expr><call><name>getCalleeDecl</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>FunDecl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>FunDecl</name><operator>-&gt;</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>getCalleeName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FunDecl</name> <init>= <expr><call><name>getCalleeDecl</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>getCalleeName</name><argument_list>(<argument><expr><name>FunDecl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isCLibraryFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Name</name> <init>= <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>StringRef</name></type> <name>getMacroNameOrSpelling</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name> <modifier>&amp;</modifier></type><name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>addTransitionImpl</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>MarkAsSink</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>Tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>












<if_stmt><if>if <condition>(<expr><operator>!</operator><name>State</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>==</operator> <call><name><name>Pred</name><operator>-&gt;</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>Tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>MarkAsSink</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Pred</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>&amp;</modifier></type><name>LocalLoc</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>Tag</name></expr> ?</condition><then> <expr><call><name><name>Location</name><operator>.</operator><name>withTag</name></name><argument_list>(<argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Location</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>P</name> <operator>=</operator> <name>Pred</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>MarkAsSink</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name><name>NB</name><operator>.</operator><name>generateSink</name></name><argument_list>(<argument><expr><name>LocalLoc</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name><name>NB</name><operator>.</operator><name>generateNode</name></name><argument_list>(<argument><expr><name>LocalLoc</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>
};

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
