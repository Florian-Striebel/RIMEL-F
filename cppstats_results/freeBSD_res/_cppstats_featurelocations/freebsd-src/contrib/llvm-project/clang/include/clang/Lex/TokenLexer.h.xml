<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/TokenLexer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_TOKENLEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_TOKENLEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MacroArgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VAOptExpansionContext</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>TokenLexer</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MacroInfo</name> <modifier>*</modifier></type><name>Macro</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>MacroArgs</name> <modifier>*</modifier></type><name>ActualArgs</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl>;</decl_stmt>









<decl_stmt><decl><type><specifier>const</specifier> <name>Token</name> <modifier>*</modifier></type><name>Tokens</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumTokens</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>CurTokenIdx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>ExpandLocStart</name></decl>, <decl><type ref="prev"/><name>ExpandLocEnd</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>MacroExpansionStart</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>MacroStartSLocOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>MacroDefStart</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MacroDefLength</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>AtStartOfLine</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasLeadingSpace</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>NextTokGetsSpace</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>OwnsTokens</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>DisableMacroExpansion</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsReinject</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>




<macro><name>TokenLexer</name><argument_list>(<argument>Token &amp;Tok</argument>, <argument>SourceLocation ILEnd</argument>, <argument>MacroInfo *MI</argument>,
<argument>MacroArgs *ActualArgs</argument>, <argument>Preprocessor &amp;pp</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>PP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>OwnsTokens</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>Init</name><argument_list>(<argument><expr><name>Tok</name></expr></argument>, <argument><expr><name>ILEnd</name></expr></argument>, <argument><expr><name>MI</name></expr></argument>, <argument><expr><name>ActualArgs</name></expr></argument>)</argument_list></call></expr>;
}</block>




<macro><name>TokenLexer</name><argument_list>(<argument>const Token *TokArray</argument>, <argument>unsigned NumToks</argument>, <argument>bool DisableExpansion</argument>,
<argument>bool ownsTokens</argument>, <argument>bool isReinject</argument>, <argument>Preprocessor &amp;pp</argument>)</argument_list></macro>
<operator>:</operator> <call><name>PP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>OwnsTokens</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>Init</name><argument_list>(<argument><expr><name>TokArray</name></expr></argument>, <argument><expr><name>NumToks</name></expr></argument>, <argument><expr><name>DisableExpansion</name></expr></argument>, <argument><expr><name>ownsTokens</name></expr></argument>, <argument><expr><name>isReinject</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>TokenLexer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TokenLexer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TokenLexer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TokenLexer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>TokenLexer</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>destroy</name><argument_list>()</argument_list></call></expr>; }</block>





<name>void</name> <macro><name>Init</name><argument_list>(<argument>Token &amp;Tok</argument>, <argument>SourceLocation ELEnd</argument>, <argument>MacroInfo *MI</argument>,
<argument>MacroArgs *Actuals</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>*</modifier></type><name>TokArray</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumToks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DisableMacroExpansion</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>OwnsTokens</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsReinject</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>unsigned</name> <macro><name>isNextTokenLParen</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>Lex</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>bool</name> <macro><name>isParsingPreprocessorDirective</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>bool</name> <macro><name>isAtEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CurTokenIdx</name> <operator>==</operator> <name>NumTokens</name></expr>;</return>
}</block></expr></expr_stmt>






















<function_decl><type><name>bool</name></type> <name>pasteTokens</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>LHSTok</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></type> <name>TokenStream</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>&amp;</modifier></type><name>CurIdx</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>pasteTokens</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>void</name></type> <name>stringifyVAOPTContents</name><parameter_list>(<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ResultToks</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VAOptExpansionContext</name> <modifier>&amp;</modifier></type><name>VCtx</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>VAOPTClosingParenLoc</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ExpandFunctionArguments</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>HandleMicrosoftCommentPaste</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>OpLoc</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getExpansionLocForMacroDefLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<function_decl><type><name>void</name></type> <name>updateLocForMacroArgTokens</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>ArgIdSpellLoc</name></decl></parameter>,
<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>begin_tokens</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>end_tokens</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>MaybeRemoveCommaBeforeVaArgs</name><parameter_list>(<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ResultToks</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>HasPasteOperator</name></decl></parameter>,
<parameter><decl><type><name>MacroInfo</name> <modifier>*</modifier></type><name>Macro</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>MacroArgNo</name></decl></parameter>,
<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PropagateLineStartLeadingSpaceInfo</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
