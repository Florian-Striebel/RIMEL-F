<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ARCMigrate/ARCMT.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ARCMIGRATE_ARCMT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ARCMIGRATE_ARCMT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ARCMigrate/FileRemapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/CompilerInvocation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerOperations</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>arcmt</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MigrationPass</name></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>bool</name></type>
<name>checkForManualIssues</name><argument_list>(<argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>CI</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FrontendInputFile</name> <operator>&amp;</operator><name>Input</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagClient</name></expr></argument>,
<argument><expr><name>bool</name> <name>emitPremigrationARCErrors</name> <operator>=</operator> <name>false</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>plistOut</name> <operator>=</operator> <call><name>StringRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type>
<name>applyTransformations</name><argument_list>(<argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>origCI</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FrontendInputFile</name> <operator>&amp;</operator><name>Input</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagClient</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>migrateWithTemporaryFiles</name><argument_list>(
<argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>origCI</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FrontendInputFile</name> <operator>&amp;</operator><name>Input</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagClient</name></expr></argument>, <argument><expr><name>StringRef</name> <name>outputDir</name></expr></argument>,
<argument><expr><name>bool</name> <name>emitPremigrationARCErrors</name></expr></argument>, <argument><expr><name>StringRef</name> <name>plistOut</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>getFileRemappings</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>,<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>remap</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>outputDir</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagClient</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>getFileRemappingsFromFileList</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>,<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>remap</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>remapFiles</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagClient</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>TransformFn</name>)<parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TransformFn</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllTransformations</name><argument_list>(<argument>LangOptions::GCMode OrigGCMode</argument>,
<argument>bool NoFinalizeRemoval</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MigrationProcess</name> <block>{<block_content>
<decl_stmt><decl><type><name>CompilerInvocation</name></type> <name>OrigCI</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>DiagClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileRemapper</name></type> <name>Remapper</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>HadARCErrors</name></decl>;</decl_stmt>

<macro><name>MigrationProcess</name><argument_list>(<argument>const CompilerInvocation &amp;CI</argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps</argument>,
<argument>DiagnosticConsumer *diagClient</argument>,
<argument>StringRef outputDir = StringRef()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RewriteListener</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>RewriteListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>bool</name></type> <name>applyTransform</name><parameter_list>(<parameter><decl><type><name>TransformFn</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>RewriteListener</name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>FileRemapper</name> <modifier>&amp;</modifier></type><name>getRemapper</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Remapper</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
