<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Diagnostic.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticIDs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Error</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StoredDiagnostic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tok</name> <block>{<block_content>

<enum_decl>enum <name>TokenKind</name> : <type><name>unsigned</name> <name>short</name></type>;</enum_decl>

</block_content>}</block></decl></decl_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>FixItHint</name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>RemoveRange</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>InsertFromRange</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CodeToInsert</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>BeforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>FixItHint</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>RemoveRange</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateInsertion</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>InsertionLoc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Code</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>BeforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FixItHint</name></type> <name>Hint</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>RemoveRange</name></name> <operator>=</operator>
<name>CharSourceRange</name><operator>::</operator><call><name>getCharRange</name><argument_list>(<argument><expr><name>InsertionLoc</name></expr></argument>, <argument><expr><name>InsertionLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>CodeToInsert</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>BeforePreviousInsertions</name></name> <operator>=</operator> <name>BeforePreviousInsertions</name></expr>;</expr_stmt>
<return>return <expr><name>Hint</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateInsertionFromRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>InsertionLoc</name></decl></parameter>,
<parameter><decl><type><name>CharSourceRange</name></type> <name>FromRange</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>BeforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FixItHint</name></type> <name>Hint</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>RemoveRange</name></name> <operator>=</operator>
<name>CharSourceRange</name><operator>::</operator><call><name>getCharRange</name><argument_list>(<argument><expr><name>InsertionLoc</name></expr></argument>, <argument><expr><name>InsertionLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>InsertFromRange</name></name> <operator>=</operator> <name>FromRange</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>BeforePreviousInsertions</name></name> <operator>=</operator> <name>BeforePreviousInsertions</name></expr>;</expr_stmt>
<return>return <expr><name>Hint</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateRemoval</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>RemoveRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FixItHint</name></type> <name>Hint</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>RemoveRange</name></name> <operator>=</operator> <name>RemoveRange</name></expr>;</expr_stmt>
<return>return <expr><name>Hint</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateRemoval</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>RemoveRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CreateRemoval</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>RemoveRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateReplacement</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>RemoveRange</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FixItHint</name></type> <name>Hint</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>RemoveRange</name></name> <operator>=</operator> <name>RemoveRange</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Hint</name><operator>.</operator><name>CodeToInsert</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Hint</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FixItHint</name></type> <name>CreateReplacement</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>RemoveRange</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Code</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CreateReplacement</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>RemoveRange</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>DiagnosticStorage</name> <block>{
<enum>enum <block>{





<decl><name>MaxArguments</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>NumDiagArgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>DiagArgumentsKind</name><index>[<expr><name>MaxArguments</name></expr>]</index></name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>intptr_t</name></type> <name><name>DiagArgumentsVal</name><index>[<expr><name>MaxArguments</name></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name><name>DiagArgumentsStr</name><index>[<expr><name>MaxArguments</name></expr>]</index></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>DiagRanges</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name></type> <name>FixItHints</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DiagnosticStorage</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
}</block>;</struct>







<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticsEngine</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>Level</name> <block>{
<expr><name>Ignored</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Ignored</name></expr>,
<expr><name>Note</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Note</name></expr>,
<expr><name>Remark</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Remark</name></expr>,
<expr><name>Warning</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Warning</name></expr>,
<expr><name>Error</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Error</name></expr>,
<expr><name>Fatal</name> <operator>=</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Fatal</name></expr>
}</block></expr>;

enum <expr><name>ArgumentKind</name> <block>{

<expr><name>ak_std_string</name></expr>,


<expr><name>ak_c_string</name></expr>,


<expr><name>ak_sint</name></expr>,


<expr><name>ak_uint</name></expr>,


<expr><name>ak_tokenkind</name></expr>,


<expr><name>ak_identifierinfo</name></expr>,


<expr><name>ak_addrspace</name></expr>,


<expr><name>ak_qual</name></expr>,


<expr><name>ak_qualtype</name></expr>,


<expr><name>ak_declarationname</name></expr>,


<expr><name>ak_nameddecl</name></expr>,


<expr><name>ak_nestednamespec</name></expr>,


<expr><name>ak_declcontext</name></expr>,


<expr><name>ak_qualtype_pair</name></expr>,


<expr><name>ak_attr</name></expr>
}</block></expr>;



<expr><name>using</name> <name>ArgumentValue</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentKind</name></expr></argument>, <argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>private</name><operator>:</operator>

<name>unsigned</name> <name>char</name> <name>AllExtensionsSilenced</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>bool</name> <name>FatalsAsError</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>SuppressAllDiagnostics</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>ElideType</name> <operator>=</operator> <name>true</name></expr>;


<expr><name>bool</name> <name>PrintTemplateTree</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>ShowColors</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>OverloadsShown</name> <name>ShowOverloads</name> <operator>=</operator> <name>Ovl_All</name></expr>;






<expr><name>unsigned</name> <name>NumOverloadsToShow</name> <operator>=</operator> <literal type="number">32</literal></expr>;


<expr><name>unsigned</name> <name>ErrorLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>unsigned</name> <name>TemplateBacktraceLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>unsigned</name> <name>ConstexprBacktraceLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticIDs</name></expr></argument>&gt;</argument_list></name> <name>Diags</name></expr>;
<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name> <name>DiagOpts</name></expr>;
<expr><name>DiagnosticConsumer</name> <operator>*</operator><name>Client</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Owner</name></expr>;
<expr><name>SourceManager</name> <operator>*</operator><name>SourceMgr</name> <operator>=</operator> <name>nullptr</name></expr>;












<expr><name>class</name> <name>DiagState</name> <block>{
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>DiagnosticMapping</name></expr></argument>&gt;</argument_list></name> <name>DiagMap</name></expr>;

<expr><name>public</name><operator>:</operator>



<name>unsigned</name> <name>IgnoreAllWarnings</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>EnableAllWarnings</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>WarningsAsErrors</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>ErrorsAsFatal</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>SuppressSystemWarnings</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>diag</name><operator>::</operator><name>Severity</name> <name>ExtBehavior</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>Severity</name><operator>::</operator><name>Ignored</name></expr>;

<expr><call><name>DiagState</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>IgnoreAllWarnings</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>EnableAllWarnings</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WarningsAsErrors</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ErrorsAsFatal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>SuppressSystemWarnings</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>DiagnosticMapping</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>const_iterator</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>DiagnosticMapping</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr>;

<expr><name>void</name> <macro><name>setMapping</name><argument_list>(<argument>diag::kind Diag</argument>, <argument>DiagnosticMapping Info</argument>)</argument_list></macro> <block>{
<expr><name><name>DiagMap</name><index>[<expr><name>Diag</name></expr>]</index></name> <operator>=</operator> <name>Info</name></expr>;
}</block>

<name>DiagnosticMapping</name> <macro><name>lookupMapping</name><argument_list>(<argument>diag::kind Diag</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DiagMap</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>Diag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>DiagnosticMapping</name> <operator>&amp;</operator><macro><name>getOrAddMapping</name><argument_list>(<argument>diag::kind Diag</argument>)</argument_list></macro></expr>;

<expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>DiagMap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>DiagMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
}</expr>;


<expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>DiagState</name></expr></argument>&gt;</argument_list></name> <name>DiagStates</name></expr>;



<expr><name>class</name> <name>DiagStateMap</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>void</name> <call><name>appendFirst</name><argument_list>(<argument><expr><name>DiagState</name> <operator>*</operator><name>State</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <macro><name>append</name><argument_list>(<argument>SourceManager &amp;SrcMgr</argument>, <argument>SourceLocation Loc</argument>, <argument>DiagState *State</argument>)</argument_list></macro></expr>;


<expr><name>DiagState</name> <operator>*</operator><macro><name>lookup</name><argument_list>(<argument>SourceManager &amp;SrcMgr</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Files</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Files</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>FirstDiagState</name> <operator>=</operator> <name>CurDiagState</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>CurDiagStateLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;
}</block>


<name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>(<argument>SourceManager &amp;SrcMgr</argument>,
<argument>StringRef DiagName = StringRef()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>DiagState</name> <operator>*</operator><macro><name>getCurDiagState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurDiagState</name></expr>;</return> }</block>


<name>SourceLocation</name> <macro><name>getCurDiagStateLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurDiagStateLoc</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>ASTReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTWriter</name></expr>;






struct <expr><name>DiagStatePoint</name> <block>{
<expr><name>DiagState</name> <operator>*</operator><name>State</name></expr>;
<expr><name>unsigned</name> <name>Offset</name></expr>;

<macro><name>DiagStatePoint</name><argument_list>(<argument>DiagState *State</argument>, <argument>unsigned Offset</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>State</name><argument_list>(<argument><expr><name>State</name></expr></argument>)</argument_list></call></expr>, <macro><name>Offset</name><argument_list>(<argument>Offset</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;



struct <expr><name>File</name> <block>{



<expr><name>File</name> <operator>*</operator><name>Parent</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name>unsigned</name> <name>ParentOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>bool</name> <name>HasLocalTransitions</name> <operator>=</operator> <name>false</name></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DiagStatePoint</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>StateTransitions</name></expr>;

<expr><name>DiagState</name> <operator>*</operator><macro><name>lookup</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;


<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>File</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;


<expr><name>DiagState</name> <operator>*</operator><name>FirstDiagState</name></expr>;


<expr><name>DiagState</name> <operator>*</operator><name>CurDiagState</name></expr>;


<expr><name>SourceLocation</name> <name>CurDiagStateLoc</name></expr>;


<expr><name>File</name> <operator>*</operator><macro><name>getFile</name><argument_list>(<argument>SourceManager &amp;SrcMgr</argument>, <argument>FileID ID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>DiagStateMap</name> <name>DiagStatesByLoc</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DiagState</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>DiagStateOnPushStack</name></expr>;

<expr><name>DiagState</name> <operator>*</operator><macro><name>GetCurDiagState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DiagStatesByLoc</name><operator>.</operator><name>getCurDiagState</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>PushDiagStatePoint</name><argument_list>(<argument>DiagState *State</argument>, <argument>SourceLocation L</argument>)</argument_list></macro></expr>;



<expr><name>DiagState</name> <operator>*</operator><macro><name>GetDiagStateForLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceMgr</name> <operator>?</operator> <call><name><name>DiagStatesByLoc</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><operator>*</operator><name>SourceMgr</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name><name>DiagStatesByLoc</name><operator>.</operator><name>getCurDiagState</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>bool</name> <name>ErrorOccurred</name></expr>;



<expr><name>bool</name> <name>UncompilableErrorOccurred</name></expr>;


<expr><name>bool</name> <name>FatalErrorOccurred</name></expr>;


<expr><name>bool</name> <name>UnrecoverableErrorOccurred</name></expr>;



<expr><name>unsigned</name> <name>TrapNumErrorsOccurred</name></expr>;
<expr><name>unsigned</name> <name>TrapNumUnrecoverableErrorsOccurred</name></expr>;





<expr><name>DiagnosticIDs</name><operator>::</operator><name>Level</name> <name>LastDiagLevel</name></expr>;


<expr><name>unsigned</name> <name>NumWarnings</name></expr>;


<expr><name>unsigned</name> <name>NumErrors</name></expr>;











<expr><name>using</name> <name>ArgToStringFnTy</name> <operator>=</operator> <macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator>
<name>ArgumentKind</name> <name>Kind</name>, <name>intptr_t</name> <name>Val</name>,
<name>StringRef</name> <name>Modifier</name>, <name>StringRef</name> <name>Argument</name>,
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentValue</name></expr></argument>&gt;</argument_list></name> <name>PrevArgs</name>,
<name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Output</name>,
<name>void</name> <operator>*</operator><name>Cookie</name>,
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name> <name>QualTypeVals</name><operator>)</operator></expr>;

<expr><name>void</name> <operator>*</operator><name>ArgToStringCookie</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>ArgToStringFnTy</name> <name>ArgToStringFn</name></expr>;




<expr><name>unsigned</name> <name>DelayedDiagID</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DelayedDiagArg1</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DelayedDiagArg2</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DelayedDiagArg3</name></expr>;






<expr><name>std</name><operator>::</operator><name>string</name> <name>FlagValue</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>DiagnosticsEngine</name><argument_list>(<argument>IntrusiveRefCntPtr&lt;DiagnosticIDs&gt; Diags</argument>,
<argument>IntrusiveRefCntPtr&lt;DiagnosticOptions&gt; DiagOpts</argument>,
<argument>DiagnosticConsumer *client = nullptr</argument>,
<argument>bool ShouldOwnClient = true</argument>)</argument_list></macro></expr>;
<expr><call><name>DiagnosticsEngine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticsEngine</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>DiagnosticsEngine</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
<expr><operator>~</operator><call><name>DiagnosticsEngine</name><argument_list>()</argument_list></call></expr>;

<expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>(<argument>StringRef DiagName</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticIDs</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getDiagnosticIDs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Diags</name></expr>;</return>
}</block>


<name>DiagnosticOptions</name> <operator>&amp;</operator><macro><name>getDiagnosticOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>DiagOpts</name></expr>;</return> }</block>

<name>using</name> <name>diag_mapping_range</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>DiagState</name><operator>::</operator><name>const_iterator</name></expr></argument>&gt;</argument_list></name></expr>;


<expr><name>diag_mapping_range</name> <macro><name>getDiagnosticMappings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>DiagState</name> <operator>&amp;</operator><name>DS</name> <operator>=</operator> <operator>*</operator><call><name>GetCurDiagState</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name>diag_mapping_range</name><argument_list>(<argument><expr><call><name><name>DS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DS</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>DiagnosticConsumer</name> <operator>*</operator><macro><name>getClient</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Client</name></expr>;</return> }</block>
<specifier>const</specifier> <name>DiagnosticConsumer</name> <operator>*</operator><macro><name>getClient</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Client</name></expr>;</return> }</block>


<name>bool</name> <macro><name>ownsClient</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Owner</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block>



<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>takeClient</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Owner</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>hasSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SourceMgr</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block>

<name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>SourceMgr</name> <operator>&amp;&amp;</operator> <literal type="string">"SourceManager not set!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>SourceMgr</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setSourceManager</name><argument_list>(<argument>SourceManager *SrcMgr</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>DiagStatesByLoc</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Leftover diag state from a different SourceManager."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>SourceMgr</name> <operator>=</operator> <name>SrcMgr</name></expr>;
}</block>








<name>void</name> <macro><name>pushMappings</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;






<expr><name>bool</name> <macro><name>popMappings</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;





<expr><name>void</name> <macro><name>setClient</name><argument_list>(<argument>DiagnosticConsumer *client</argument>, <argument>bool ShouldOwnClient = true</argument>)</argument_list></macro></expr>;





<expr><name>void</name> <macro><name>setErrorLimit</name><argument_list>(<argument>unsigned Limit</argument>)</argument_list></macro> <block>{ <expr><name>ErrorLimit</name> <operator>=</operator> <name>Limit</name></expr>; }</block>



<name>void</name> <macro><name>setTemplateBacktraceLimit</name><argument_list>(<argument>unsigned Limit</argument>)</argument_list></macro> <block>{
<expr><name>TemplateBacktraceLimit</name> <operator>=</operator> <name>Limit</name></expr>;
}</block>



<name>unsigned</name> <macro><name>getTemplateBacktraceLimit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>TemplateBacktraceLimit</name></expr>;</return>
}</block>



<name>void</name> <macro><name>setConstexprBacktraceLimit</name><argument_list>(<argument>unsigned Limit</argument>)</argument_list></macro> <block>{
<expr><name>ConstexprBacktraceLimit</name> <operator>=</operator> <name>Limit</name></expr>;
}</block>



<name>unsigned</name> <macro><name>getConstexprBacktraceLimit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ConstexprBacktraceLimit</name></expr>;</return>
}</block>




<name>void</name> <macro><name>setIgnoreAllWarnings</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{
<expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IgnoreAllWarnings</name> <operator>=</operator> <name>Val</name></expr>;
}</block>
<name>bool</name> <macro><name>getIgnoreAllWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IgnoreAllWarnings</name></expr>;</return>
}</block>





<name>void</name> <macro><name>setEnableAllWarnings</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{
<expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>EnableAllWarnings</name> <operator>=</operator> <name>Val</name></expr>;
}</block>
<name>bool</name> <macro><name>getEnableAllWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>EnableAllWarnings</name></expr>;</return>
}</block>


<name>void</name> <macro><name>setWarningsAsErrors</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{
<expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>WarningsAsErrors</name> <operator>=</operator> <name>Val</name></expr>;
}</block>
<name>bool</name> <macro><name>getWarningsAsErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>WarningsAsErrors</name></expr>;</return>
}</block>


<name>void</name> <macro><name>setErrorsAsFatal</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ErrorsAsFatal</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getErrorsAsFatal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ErrorsAsFatal</name></expr>;</return> }</block>




<name>void</name> <macro><name>setFatalsAsError</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><name>FatalsAsError</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getFatalsAsError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FatalsAsError</name></expr>;</return> }</block>


<name>void</name> <macro><name>setSuppressSystemWarnings</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{
<expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>SuppressSystemWarnings</name> <operator>=</operator> <name>Val</name></expr>;
}</block>
<name>bool</name> <macro><name>getSuppressSystemWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>SuppressSystemWarnings</name></expr>;</return>
}</block>




<name>void</name> <macro><name>setSuppressAllDiagnostics</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><name>SuppressAllDiagnostics</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getSuppressAllDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SuppressAllDiagnostics</name></expr>;</return> }</block>



<name>void</name> <macro><name>setElideType</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><name>ElideType</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getElideType</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>ElideType</name></expr>;</return> }</block>



<name>void</name> <macro><name>setPrintTemplateTree</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><name>PrintTemplateTree</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getPrintTemplateTree</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>PrintTemplateTree</name></expr>;</return> }</block>



<name>void</name> <macro><name>setShowColors</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{ <expr><name>ShowColors</name> <operator>=</operator> <name>Val</name></expr>; }</block>
<name>bool</name> <macro><name>getShowColors</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>ShowColors</name></expr>;</return> }</block>





<name>void</name> <macro><name>setShowOverloads</name><argument_list>(<argument>OverloadsShown Val</argument>)</argument_list></macro> <block>{
<expr><name>ShowOverloads</name> <operator>=</operator> <name>Val</name></expr>;
}</block>
<name>OverloadsShown</name> <macro><name>getShowOverloads</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ShowOverloads</name></expr>;</return> }</block>








<name>unsigned</name> <macro><name>getNumOverloadCandidatesToShow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getShowOverloads</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Ovl_All</name></expr>:</case>



<return>return <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>Ovl_Best</name></expr>:</case>
<return>return <expr><name>NumOverloadsToShow</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("invalid OverloadsShown kind"</block></switch>)</block></expr>;
}</block>



<name>void</name> <macro><name>overloadCandidatesShown</name><argument_list>(<argument>unsigned N</argument>)</argument_list></macro> <block>{



<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NumOverloadsToShow</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}







void setLastDiagnosticIgnored(bool Ignored</block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name>LastDiagLevel</name> <operator>==</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Fatal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FatalErrorOccurred</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>LastDiagLevel</name> <operator>=</operator> <ternary><condition><expr><name>Ignored</name></expr> ?</condition><then> <expr><name>DiagnosticIDs</name><operator>::</operator><name>Ignored</name></expr> </then><else>: <expr><name>DiagnosticIDs</name><operator>::</operator><name>Warning</name></expr></else></ternary></block></block></expr>;
}</block>




<name>bool</name> <macro><name>isLastDiagnosticIgnored</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LastDiagLevel</name> <operator>==</operator> <name>DiagnosticIDs</name><operator>::</operator><name>Ignored</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>setExtensionHandlingBehavior</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>H</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ExtBehavior</name> <operator>=</operator> <name>H</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>diag</name><operator>::</operator><name>Severity</name> <macro><name>getExtensionHandlingBehavior</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetCurDiagState</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ExtBehavior</name></expr>;</return>
}</block></expr></expr_stmt>





<function><type><name>void</name></type> <name>IncrementAllExtensionsSilenced</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>AllExtensionsSilenced</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>DecrementAllExtensionsSilenced</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>--</operator><name>AllExtensionsSilenced</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>hasAllExtensionsSilenced</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>AllExtensionsSilenced</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>









<decl_stmt><decl><type><name>void</name></type> <name>setSeverity</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>Diag</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Map</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list></decl>;</decl_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>setSeverityForGroup</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Flavor</name> <name>Flavor</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Group</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Map</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>Loc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>setDiagnosticGroupWarningAsError</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Enabled</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>setDiagnosticGroupErrorAsFatal</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Enabled</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>setSeverityForAll</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Flavor</name> <name>Flavor</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Map</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>Loc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ErrorOccurred</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasUncompilableErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>UncompilableErrorOccurred</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasFatalErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FatalErrorOccurred</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasUnrecoverableErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FatalErrorOccurred</name> <operator>||</operator> <name>UnrecoverableErrorOccurred</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumErrors</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getNumWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumWarnings</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setNumWarnings</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumWarnings</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>NumWarnings</name></name> <operator>=</operator> <name>NumWarnings</name></expr>;</expr_stmt>
</block_content>}</block></function>









<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<name>unsigned</name></type> <name>getCustomDiagID</name><argument_list>(<argument><expr><name>Level</name> <name>L</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>FormatString</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>-&gt;</operator><name>getCustomDiagID</name></name><argument_list>(<argument><expr><operator>(</operator><name>DiagnosticIDs</name><operator>::</operator><name>Level</name><operator>)</operator><name>L</name></expr></argument>,
<argument><expr><call><name>StringRef</name><argument_list>(<argument><expr><name>FormatString</name></expr></argument>, <argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>ConvertArgToString</name><argument_list>(<argument><expr><name>ArgumentKind</name> <name>Kind</name></expr></argument>, <argument><expr><name>intptr_t</name> <name>Val</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Modifier</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Argument</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentValue</name></expr></argument>&gt;</argument_list></name> <name>PrevArgs</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Output</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name> <name>QualTypeVals</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>ArgToStringFn</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>Val</name></expr></argument>, <argument><expr><name>Modifier</name></expr></argument>, <argument><expr><name>Argument</name></expr></argument>, <argument><expr><name>PrevArgs</name></expr></argument>, <argument><expr><name>Output</name></expr></argument>,
<argument><expr><name>ArgToStringCookie</name></expr></argument>, <argument><expr><name>QualTypeVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetArgToStringFn</name><parameter_list>(<parameter><decl><type><name>ArgToStringFnTy</name></type> <name>Fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Cookie</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ArgToStringFn</name> <operator>=</operator> <name>Fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ArgToStringCookie</name> <operator>=</operator> <name>Cookie</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>notePriorDiagnosticFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>LastDiagLevel</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>LastDiagLevel</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>













<decl_stmt><decl><type><name>bool</name></type> <name>isIgnored</name><argument_list>(<argument><expr><name>unsigned</name> <name>DiagID</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>-&gt;</operator><name>getDiagnosticSeverity</name></name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>diag</name><operator>::</operator><name>Severity</name><operator>::</operator><name>Ignored</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><name>Level</name></type> <name>getDiagnosticLevel</name><argument_list>(<argument><expr><name>unsigned</name> <name>DiagID</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><name>Level</name><operator>)</operator><call><name><name>Diags</name><operator>-&gt;</operator><name>getDiagnosticLevel</name></name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<function_decl><type><specifier>inline</specifier> <name>DiagnosticBuilder</name></type> <name>Report</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <name>DiagnosticBuilder</name></type> <name>Report</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StoredDiagnostic</name> <modifier>&amp;</modifier></type><name>storedDiag</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isDiagnosticInFlight</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CurDiagID</name> <operator>!=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


























<function_decl><type><name>void</name></type> <name>SetDelayedDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Arg1</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Arg2</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Arg3</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CurDiagID</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>StringRef</name> <macro><name>getFlagValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FlagValue</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>






<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Diagnostic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DiagnosticErrorTrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DiagnosticIDs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>PartialDiagnostic</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>ReportDelayed</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>CurDiagLoc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>CurDiagID</name></decl>;</decl_stmt>

<enum>enum <block>{





<decl><name>MaxArguments</name> <init>= <expr><name>DiagnosticStorage</name><operator>::</operator><name>MaxArguments</name></expr></init></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>DiagnosticStorage</name></type> <name>DiagStorage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DiagnosticMapping</name></type> <name>makeUserMapping</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Map</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>L</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isPragma</name> <init>= <expr><call><name><name>L</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticMapping</name></type> <name>Mapping</name> <init>=
<expr><name>DiagnosticMapping</name><operator>::</operator><call><name>Make</name><argument_list>(<argument><expr><name>Map</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>isPragma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>isPragma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mapping</name><operator>.</operator><name>setNoWarningAsError</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Mapping</name><operator>.</operator><name>setNoErrorAsFatal</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Mapping</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function><type><name>bool</name></type> <name>ProcessDiag</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>-&gt;</operator><name>ProcessDiag</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Sema</name></decl>;</decl_stmt>




<function_decl><type><name>bool</name></type> <name>EmitCurrentDiagnostic</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Force</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>unsigned</name> <macro><name>getCurrentDiagID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurDiagID</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getCurrentDiagLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurDiagLoc</name></expr>;</return> }</block></expr></expr_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticErrorTrap</name> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumErrors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumUnrecoverableErrors</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>DiagnosticErrorTrap</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diag</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Diag</name><argument_list>(<argument>Diag</argument>)</argument_list></macro> <block>{ <expr><call><name>reset</name><argument_list>()</argument_list></call></expr>; }</block>



<name>bool</name> <macro><name>hasErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Diag</name><operator>.</operator><name>TrapNumErrorsOccurred</name></name> <operator>&gt;</operator> <name>NumErrors</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasUnrecoverableErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Diag</name><operator>.</operator><name>TrapNumUnrecoverableErrorsOccurred</name></name> <operator>&gt;</operator> <name>NumUnrecoverableErrors</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NumErrors</name> <operator>=</operator> <name><name>Diag</name><operator>.</operator><name>TrapNumErrorsOccurred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumUnrecoverableErrors</name> <operator>=</operator> <name><name>Diag</name><operator>.</operator><name>TrapNumUnrecoverableErrorsOccurred</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>StreamingDiagnostic</name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><name>class</name></type> <name>DiagStorageAllocator</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumCached</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticStorage</name></type> <name><name>Cached</name><index>[<expr><name>NumCached</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticStorage</name> <modifier>*</modifier></type><name><name>FreeList</name><index>[<expr><name>NumCached</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumFreeListEntries</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DiagStorageAllocator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>DiagStorageAllocator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>DiagnosticStorage</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NumFreeListEntries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>new</name> <name>DiagnosticStorage</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DiagnosticStorage</name> <modifier>*</modifier></type><name>Result</name> <init>= <expr><name><name>FreeList</name><index>[<expr><operator>--</operator><name>NumFreeListEntries</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>-&gt;</operator><name>NumDiagArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>-&gt;</operator><name>DiagRanges</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>-&gt;</operator><name>FixItHints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>DiagnosticStorage</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>&gt;=</operator> <name>Cached</name> <operator>&amp;&amp;</operator> <name>S</name> <operator>&lt;=</operator> <name>Cached</name> <operator>+</operator> <name>NumCached</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>FreeList</name><index>[<expr><name>NumFreeListEntries</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>S</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>delete</name></type> <name>S</name></decl>;</decl_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>mutable</name> <name>DiagnosticStorage</name> <modifier>*</modifier></type><name>DiagStorage</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DiagStorageAllocator</name> <modifier>*</modifier></type><name>Allocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>DiagnosticStorage</name> <operator>*</operator><macro><name>getStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DiagStorage</name></expr>;</return></block_content></block></if></if_stmt>

<call><name>assert</name><argument_list>(<argument><expr><name>Allocator</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name><name>Allocator</name><operator>-&gt;</operator><name>Allocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DiagStorage</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>freeStorage</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>freeStorageSlow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeStorageSlow</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Allocator</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>Deallocate</name></name><argument_list>(<argument><expr><name>DiagStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>AddTaggedVal</name><argument_list>(<argument><expr><name>intptr_t</name> <name>V</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ArgumentKind</name> <name>Kind</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name> <operator>&lt;</operator> <name>DiagnosticStorage</name><operator>::</operator><name>MaxArguments</name> <operator>&amp;&amp;</operator>
<literal type="string">"Too many arguments to diagnostic!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsKind</name><index>[<expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name></expr>]</index></name> <operator>=</operator> <name>Kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsVal</name><index>[<expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddString</name><argument_list>(<argument><expr><name>StringRef</name> <name>V</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name> <operator>&lt;</operator> <name>DiagnosticStorage</name><operator>::</operator><name>MaxArguments</name> <operator>&amp;&amp;</operator>
<literal type="string">"Too many arguments to diagnostic!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsKind</name><index>[<expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name></expr>]</index></name> <operator>=</operator>
<name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsStr</name><index>[<expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddSourceRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CharSourceRange</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagRanges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddFixItHint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FixItHint</name> <operator>&amp;</operator><name>Hint</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Hint</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>DiagStorage</name><operator>-&gt;</operator><name>FixItHints</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>








<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>StreamingDiagnostic</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><name>DiagnosticStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DiagStorage</name><argument_list>(<argument>Storage</argument>)</argument_list></macro> <block>{}</block>



<name>explicit</name> <call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><name>DiagStorageAllocator</name> <operator>&amp;</operator><name>Alloc</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Allocator</name><argument_list>(<argument>&amp;Alloc</argument>)</argument_list></macro> <block>{}</block>

<call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>Diag</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><name>StreamingDiagnostic</name> <operator>&amp;&amp;</operator><name>Diag</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>StreamingDiagnostic</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>freeStorage</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
};

















<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name> <range>: <expr><name>public</name> <name>StreamingDiagnostic</name> <block>{
<expr><name>friend</name> <name>class</name> <name>DiagnosticsEngine</name></expr>;
<expr><name>friend</name> <name>class</name> <name>PartialDiagnostic</name></expr>;

<expr><name>mutable</name> <name>DiagnosticsEngine</name> <operator>*</operator><name>DiagObj</name> <operator>=</operator> <name>nullptr</name></expr>;






<expr><name>mutable</name> <name>bool</name> <name>IsActive</name> <operator>=</operator> <name>false</name></expr>;



<expr><name>mutable</name> <name>bool</name> <name>IsForceEmit</name> <operator>=</operator> <name>false</name></expr>;

<expr><call><name>DiagnosticBuilder</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>explicit</name> <call><name>DiagnosticBuilder</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>diagObj</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diagObj</name><operator>-&gt;</operator><name>DiagStorage</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DiagObj</name><argument_list>(<argument><expr><name>diagObj</name></expr></argument>)</argument_list></call></expr>,
<macro><name>IsActive</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>diagObj</name> <operator>&amp;&amp;</operator> <literal type="string">"DiagnosticBuilder requires a valid DiagnosticsEngine!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>DiagStorage</name> <operator>&amp;&amp;</operator>
<literal type="string">"DiagnosticBuilder requires a valid DiagnosticStorage!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagRanges</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>DiagStorage</name><operator>-&gt;</operator><name>FixItHints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>protected</name><operator>:</operator>

<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>DiagObj</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>IsActive</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>IsForceEmit</name> <operator>=</operator> <name>false</name></expr>;
}</block>


<name>bool</name> <macro><name>isActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsActive</name></expr>;</return> }</block>








<name>bool</name> <macro><name>Emit</name><argument_list>()</argument_list></macro> <block>{


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isActive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<name>bool</name> <name>Result</name> <operator>=</operator> <call><name><name>DiagObj</name><operator>-&gt;</operator><name>EmitCurrentDiagnostic</name></name><argument_list>(<argument><expr><name>IsForceEmit</name></expr></argument>)</argument_list></call></block></expr>;


<expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;

<return>return <expr><name>Result</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>public</name>:</label>


<expr_stmt><expr><call><name>DiagnosticBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>StreamingDiagnostic</name><argument_list>()</argument_list></macro> <block>{
<expr><name>DiagObj</name> <operator>=</operator> <name><name>D</name><operator>.</operator><name>DiagObj</name></name></expr>;
<expr><name>DiagStorage</name> <operator>=</operator> <name><name>D</name><operator>.</operator><name>DiagStorage</name></name></expr>;
<expr><name>IsActive</name> <operator>=</operator> <name><name>D</name><operator>.</operator><name>IsActive</name></name></expr>;
<expr><name>IsForceEmit</name> <operator>=</operator> <name><name>D</name><operator>.</operator><name>IsForceEmit</name></name></expr>;
<expr><call><name><name>D</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>V</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isActive</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Clients must not add to cleared diagnostic!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>DB</name> <operator>&lt;&lt;</operator> <name>V</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <operator>=</operator> <name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name>std</name><operator>::</operator><name><name>is_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>T</name> <operator>&amp;&amp;</operator><name>V</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isActive</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Clients must not add to cleared diagnostic!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>DB</name> <operator>&lt;&lt;</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>DiagnosticBuilder</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>DiagnosticBuilder</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Emit</name><argument_list>()</argument_list></call></expr>; }</block>


<specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><macro><name>setForceEmit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>IsForceEmit</name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addFlagValue</name><argument_list>(<argument><expr><name>StringRef</name> <name>V</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><name><name>DiagObj</name><operator>-&gt;</operator><name>FlagValue</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
};

<struct>struct <name>AddFlagValue</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>Val</name></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <macro><name>AddFlagValue</name><argument_list>(<argument>StringRef V</argument>)</argument_list></macro> : <macro><name>Val</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>





<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>AddFlagValue</name> <name>V</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>addFlagValue</name></name><argument_list>(<argument><expr><name><name>V</name><operator>.</operator><name>Val</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>StringRef</name> <name>S</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddString</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><name>Str</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_c_string</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>int</name> <name>I</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_sint</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator> <name>T</name> <name>I</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_sint</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>unsigned</name> <name>I</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_uint</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>tok</name><operator>::</operator><name>TokenKind</name> <name>I</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_tokenkind</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><name>II</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>remove_const_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>DeclContext</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator> <name>T</name> <operator>*</operator><name>DC</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_declcontext</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>SourceRange</name> <name>R</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddSourceRange</name></name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><name>SourceRange</name></type> <name>R</name> <range>: <expr><name>Ranges</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddSourceRange</name></name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>DB</name></expr>;</return>
}

inline <expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>CharSourceRange</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddSourceRange</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>FixItHint</name> <operator>&amp;</operator><name>Hint</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddFixItHint</name></name><argument_list>(<argument><expr><name>Hint</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>FixItHint</name> <modifier>&amp;</modifier></type><name>Hint</name> <range>: <expr><name>Hints</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddFixItHint</name></name><argument_list>(<argument><expr><name>Hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>DB</name></expr>;</return>
}

inline <expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Opt</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DB</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>Opt</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>DB</name></expr>;</return>
}

inline <expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Opt</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DB</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>Opt</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>DB</name></expr>;</return>
}

inline <expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Opt</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DB</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>Opt</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>DB</name></expr>;</return>
}



using <expr_stmt><expr><name>DiagNullabilityKind</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>DiagNullabilityKind</name> <name>nullability</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DiagnosticBuilder</name> <name>DiagnosticsEngine</name><operator>::</operator><macro><name>Report</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CurDiagID</name> <operator>==</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Multiple diagnostics in flight at once!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>CurDiagLoc</name> <operator>=</operator> <name>Loc</name></expr>;
<expr><name>CurDiagID</name> <operator>=</operator> <name>DiagID</name></expr>;
<expr><call><name><name>FlagValue</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name>DiagnosticBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>llvm</name><operator>::</operator><name>Error</name> <operator>&amp;&amp;</operator><name>E</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DiagnosticBuilder</name> <name>DiagnosticsEngine</name><operator>::</operator><macro><name>Report</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Report</name><argument_list>(<argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>Diagnostic</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DiagnosticsEngine</name> <modifier>*</modifier></type><name>DiagObj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>StoredDiagMessage</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Diagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticsEngine</name> <operator>*</operator><name>DO</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>DiagObj</name><argument_list>(<argument>DO</argument>)</argument_list></macro> <block>{}</block>
<macro><name>Diagnostic</name><argument_list>(<argument>const DiagnosticsEngine *DO</argument>, <argument>StringRef storedDiagMessage</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DiagObj</name><argument_list>(<argument><expr><name>DO</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>StoredDiagMessage</name><argument_list>(<argument>storedDiagMessage</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>DiagnosticsEngine</name> <operator>*</operator><macro><name>getDiags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DiagObj</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>CurDiagID</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>CurDiagLoc</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>DiagObj</name><operator>-&gt;</operator><name>hasSourceManager</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>DiagObj</name><operator>-&gt;</operator><name>getSourceManager</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>NumDiagArgs</name></name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ArgumentKind</name> <macro><name>getArgKind</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Argument index out of range!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>DiagnosticsEngine</name><operator>::</operator><name>ArgumentKind</name><operator>)</operator>
<name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsKind</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getArgStdStr</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsStr</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getArgCStr</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_c_string</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsVal</name><index>[<expr><name>Idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>getArgSInt</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_sint</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsVal</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getArgUInt</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_uint</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsVal</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>getArgIdentifier</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsVal</name><index>[<expr><name>Idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>intptr_t</name></type> <name>getRawArg</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getArgKind</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name> <operator>&amp;&amp;</operator>
<literal type="string">"invalid argument accessor!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagArgumentsVal</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CharSourceRange</name> <modifier>&amp;</modifier></type><name>getRange</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumRanges</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid diagnostic range index!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagRanges</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>DiagRanges</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumFixItHints</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>FixItHints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FixItHint</name> <modifier>&amp;</modifier></type><name>getFixItHint</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumFixItHints</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid index!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>FixItHints</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <macro><name>getFixItHints</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>DiagObj</name><operator>-&gt;</operator><name>DiagStorage</name><operator>.</operator><name>FixItHints</name></name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>FormatDiagnostic</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>OutStr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>FormatDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>DiagStr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>DiagEnd</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>OutStr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>StoredDiagnostic</name> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ID</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Message</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>FixIts</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StoredDiagnostic</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>StoredDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level Level</argument>, <argument>const Diagnostic &amp;Info</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>StoredDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level Level</argument>, <argument>unsigned ID</argument>,
<argument>StringRef Message</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>StoredDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level Level</argument>, <argument>unsigned ID</argument>,
<argument>StringRef Message</argument>, <argument>FullSourceLoc Loc</argument>,
<argument>ArrayRef&lt;CharSourceRange&gt; Ranges</argument>,
<argument>ArrayRef&lt;FixItHint&gt; Fixits</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Message</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <macro><name>getLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Level</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>FullSourceLoc</name> <operator>&amp;</operator><macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Message</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Loc</name></name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>range_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>range_iterator</name> <macro><name>range_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>range_iterator</name> <macro><name>range_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>range_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>Ranges</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>fixit_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fixit_iterator</name> <macro><name>fixit_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FixIts</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>fixit_iterator</name> <macro><name>fixit_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FixIts</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>fixit_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FixIts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <macro><name>getFixIts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>FixIts</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticConsumer</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumWarnings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumErrors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DiagnosticConsumer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DiagnosticConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumErrors</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getNumWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumWarnings</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>virtual</name> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>NumWarnings</name> <operator>=</operator> <name>NumErrors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>












<function><type><name>virtual</name> <name>void</name></type> <name>BeginSourceFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Preprocessor</name> <modifier>*</modifier></type><name>PP</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>EndSourceFile</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>






<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IncludeInDiagnosticCounts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>HandleDiagnostic</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>DiagLevel</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Diagnostic</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>IgnoringDiagConsumer</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level DiagLevel</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name> <block>{

}</block></expr>
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ForwardingDiagnosticConsumer</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{
<expr><name>DiagnosticConsumer</name> <operator>&amp;</operator><name>Target</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ForwardingDiagnosticConsumer</name><argument_list>(<argument><expr><name>DiagnosticConsumer</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Target</name><argument_list>(<argument>Target</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><macro><name>ForwardingDiagnosticConsumer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level DiagLevel</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IncludeInDiagnosticCounts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<struct>struct <name>TemplateDiffTypes</name> <block>{
<decl_stmt><decl><type><name>intptr_t</name></type> <name>FromType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>ToType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>PrintTree</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>PrintFromType</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ElideType</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowColors</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TemplateDiffUsed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>ToggleHighlight</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>ProcessWarningOptions</name><parameter_list>(<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DiagnosticOptions</name> <modifier>&amp;</modifier></type><name>Opts</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ReportDiags</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
