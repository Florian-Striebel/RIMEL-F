<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_LIVEVARIABLES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_LIVEVARIABLES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableSet.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CFG</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFGBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LiveVariables</name> <range>: <expr><name>public</name> <name>ManagedAnalysis</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>class</name> <name>LivenessValues</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>liveExprs</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>liveDecls</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BindingDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>liveBindings</name></expr>;

<expr><name>bool</name> <macro><name>equals</name><argument_list>(<argument>const LivenessValues &amp;V</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><call><name>LivenessValues</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>liveExprs</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>liveDecls</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>, <macro><name>liveBindings</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>LivenessValues</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>liveExprs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LiveDecls</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BindingDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LiveBindings</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>liveExprs</name><argument_list>(<argument><expr><name>liveExprs</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>liveDecls</name><argument_list>(<argument><expr><name>LiveDecls</name></expr></argument>)</argument_list></call></expr>,
<macro><name>liveBindings</name><argument_list>(<argument>LiveBindings</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isLive</name><argument_list>(<argument>const Expr *E</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>isLive</name><argument_list>(<argument>const VarDecl *D</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>friend</name> <name>class</name> <name>LiveVariables</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>Observer</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>Observer</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>void</name> <macro><name>observeStmt</name><argument_list>(<argument>const Stmt *S</argument>,
<argument>const CFGBlock *currentBlock</argument>,
<argument>const LivenessValues&amp; V</argument>)</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>void</name> <macro><name>observerKill</name><argument_list>(<argument>const DeclRefExpr *DR</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;

<expr><operator>~</operator><macro><name>LiveVariables</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LiveVariables</name></expr></argument>&gt;</argument_list></name>
<macro><name>computeLiveness</name><argument_list>(<argument>AnalysisDeclContext &amp;analysisContext</argument>, <argument>bool killAtAssign</argument>)</argument_list></macro></expr>;



<expr><name>bool</name> <call><name>isLive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>B</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;





<expr><name>bool</name> <call><name>isLive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;



<expr><name>bool</name> <call><name>isLive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>Loc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>Val</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <call><name>dumpBlockLiveness</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <call><name>dumpExprLiveness</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>runOnAllBlocks</name><argument_list>(<argument><expr><name>Observer</name> <operator>&amp;</operator><name>obs</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LiveVariables</name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>AnalysisDeclContext &amp;analysisContext</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>computeLiveness</name><argument_list>(<argument><expr><name>analysisContext</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>void</name> <operator>*</operator><call><name>getTag</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>LiveVariables</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <operator>*</operator><name>impl</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RelaxedLiveVariables</name> <range>: <expr><name>public</name> <name>LiveVariables</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LiveVariables</name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>AnalysisDeclContext &amp;analysisContext</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>computeLiveness</name><argument_list>(<argument><expr><name>analysisContext</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>void</name> <operator>*</operator><call><name>getTag</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
