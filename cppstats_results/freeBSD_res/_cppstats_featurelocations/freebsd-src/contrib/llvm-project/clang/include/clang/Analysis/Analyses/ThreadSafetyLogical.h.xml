<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyLogical.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYLOGICAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYLOGICAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/Analyses/ThreadSafetyTIL.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>threadSafety</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>lexpr</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LExpr</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Opcode</name> <block>{
<decl><name>Terminal</name></decl>,
<decl><name>And</name></decl>,
<decl><name>Or</name></decl>,
<decl><name>Not</name></decl>
}</block>;</enum>
<expr_stmt><expr><name>Opcode</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>implies</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LExpr</name> <operator>*</operator><name>RHS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<macro><name>LExpr</name><argument_list>(<argument>Opcode Kind</argument>)</argument_list></macro> : <macro><name>Kind</name><argument_list>(<argument>Kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Opcode</name></type> <name>Kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Terminal</name> <range>: <expr><name>public</name> <name>LExpr</name> <block>{
<expr><name>til</name><operator>::</operator><name>SExpr</name> <operator>*</operator><name>Expr</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Terminal</name><argument_list>(<argument><expr><name>til</name><operator>::</operator><name>SExpr</name> <operator>*</operator><name>Expr</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>LExpr</name><argument_list>(<argument><expr><name>LExpr</name><operator>::</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>, <macro><name>Expr</name><argument_list>(<argument>Expr</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>til</name><operator>::</operator><name>SExpr</name> <operator>*</operator><macro><name>expr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Expr</name></expr>;</return> }</block>
<name>til</name><operator>::</operator><name>SExpr</name> <operator>*</operator><macro><name>expr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Expr</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const LExpr *E</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>E</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LExpr</name><operator>::</operator><name>Terminal</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>BinOp</name> <operator>:</operator> <name>public</name> <name>LExpr</name> <block>{
<expr><name>LExpr</name> <operator>*</operator><name>LHS</name></expr>, <expr><operator>*</operator><name>RHS</name></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>BinOp</name><argument_list>(<argument>LExpr *LHS</argument>, <argument>LExpr *RHS</argument>, <argument>Opcode Code</argument>)</argument_list></macro> <operator>:</operator> <call><name>LExpr</name><argument_list>(<argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>LHS</name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call></expr>, <macro><name>RHS</name><argument_list>(<argument>RHS</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>LExpr</name> <operator>*</operator><macro><name>left</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LHS</name></expr>;</return> }</block>
<name>LExpr</name> <operator>*</operator><macro><name>left</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>LHS</name></expr>;</return> }</block>

<specifier>const</specifier> <name>LExpr</name> <operator>*</operator><macro><name>right</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RHS</name></expr>;</return> }</block>
<name>LExpr</name> <operator>*</operator><macro><name>right</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>RHS</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>And</name> <operator>:</operator> <name>public</name> <name>BinOp</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>And</name><argument_list>(<argument><expr><name>LExpr</name> <operator>*</operator><name>LHS</name></expr></argument>, <argument><expr><name>LExpr</name> <operator>*</operator><name>RHS</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>BinOp</name><argument_list>(<argument>LHS</argument>, <argument>RHS</argument>, <argument>LExpr::And</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const LExpr *E</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>E</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LExpr</name><operator>::</operator><name>And</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>Or</name> <operator>:</operator> <name>public</name> <name>BinOp</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Or</name><argument_list>(<argument><expr><name>LExpr</name> <operator>*</operator><name>LHS</name></expr></argument>, <argument><expr><name>LExpr</name> <operator>*</operator><name>RHS</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>BinOp</name><argument_list>(<argument>LHS</argument>, <argument>RHS</argument>, <argument>LExpr::Or</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const LExpr *E</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>E</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LExpr</name><operator>::</operator><name>Or</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>Not</name> <operator>:</operator> <name>public</name> <name>LExpr</name> <block>{
<expr><name>LExpr</name> <operator>*</operator><name>Exp</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Not</name><argument_list>(<argument><expr><name>LExpr</name> <operator>*</operator><name>Exp</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>LExpr</name><argument_list>(<argument><expr><name>LExpr</name><operator>::</operator><name>Not</name></expr></argument>)</argument_list></call></expr>, <macro><name>Exp</name><argument_list>(<argument>Exp</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>LExpr</name> <operator>*</operator><macro><name>exp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Exp</name></expr>;</return> }</block>
<name>LExpr</name> <operator>*</operator><macro><name>exp</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Exp</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const LExpr *E</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>E</name><operator>-&gt;</operator><name>kind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LExpr</name><operator>::</operator><name>Not</name></expr>;</return> }</block>
}</expr>;



<expr><name>bool</name> <call><name>implies</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LExpr</name> <operator>*</operator><name>LHS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LExpr</name> <operator>*</operator><name>RHS</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <name>LExpr</name><operator>::</operator><macro><name>implies</name><argument_list>(<argument>const LExpr *RHS</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>lexpr</name><operator>::</operator><call><name>implies</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

}
}
}</expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
