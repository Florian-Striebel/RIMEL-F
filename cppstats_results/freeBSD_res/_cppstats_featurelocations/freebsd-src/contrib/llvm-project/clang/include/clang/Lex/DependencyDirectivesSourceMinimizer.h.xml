<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/DependencyDirectivesSourceMinimizer.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_DEPENDENCY_DIRECTIVES_SOURCE_MINIMIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_DEPENDENCY_DIRECTIVES_SOURCE_MINIMIZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>minimize_source_to_dependency_directives</name> <block>{<block_content>



<enum>enum <name>TokenKind</name> <block>{
<decl><name>pp_none</name></decl>,
<decl><name>pp_include</name></decl>,
<decl><name>pp___include_macros</name></decl>,
<decl><name>pp_define</name></decl>,
<decl><name>pp_undef</name></decl>,
<decl><name>pp_import</name></decl>,
<decl><name>pp_pragma_import</name></decl>,
<decl><name>pp_pragma_once</name></decl>,
<decl><name>pp_include_next</name></decl>,
<decl><name>pp_if</name></decl>,
<decl><name>pp_ifdef</name></decl>,
<decl><name>pp_ifndef</name></decl>,
<decl><name>pp_elif</name></decl>,
<decl><name>pp_elifdef</name></decl>,
<decl><name>pp_elifndef</name></decl>,
<decl><name>pp_else</name></decl>,
<decl><name>pp_endif</name></decl>,
<decl><name>decl_at_import</name></decl>,
<decl><name>cxx_export_decl</name></decl>,
<decl><name>cxx_module_decl</name></decl>,
<decl><name>cxx_import_decl</name></decl>,
<decl><name>pp_eof</name></decl>,
}</block>;</enum>




<struct>struct <name>Token</name> <block>{

<decl_stmt><decl><type><name>TokenKind</name></type> <name>K</name> <init>= <expr><name>pp_none</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>Offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>Token</name><argument_list>(<argument>TokenKind K</argument>, <argument>int Offset</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>K</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Offset</name><argument_list>(<argument>Offset</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>



<struct>struct <name>SkippedRange</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>Offset</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>Length</name></decl>;</decl_stmt>
}</block>;</struct>





<decl_stmt><decl><type><name>bool</name></type> <name>computeSkippedRanges</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <name>Input</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>SkippedRange</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Range</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>minimizeSourceToDependencyDirectives</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Input</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Output</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>minimize_source_to_dependency_directives</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name>
<operator>&amp;</operator><name>Tokens</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diags</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>InputSourceLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
