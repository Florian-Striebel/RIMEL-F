<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/CXXFieldCollector.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_CXXFIELDCOLLECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_CXXFIELDCOLLECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CXXFieldCollector</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FieldDecl</name><modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>Fields</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>FieldCount</name></decl>;</decl_stmt>















<label><name>public</name>:</label>

<function><type><name>void</name></type> <name>StartClass</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>FieldCount</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>FieldDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Fields</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><call><name><name>FieldCount</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>size_t</name> <macro><name>getCurNumFields</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>FieldCount</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"no currently-parsed class"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>FieldCount</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>FieldDecl</name> <modifier>*</modifier><modifier>*</modifier></type><name>getCurFields</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><operator>*</operator><operator>(</operator><call><name><name>Fields</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getCurNumFields</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return> </block_content>}</block></function>


<function><type><name>void</name></type> <name>FinishClass</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Fields</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>Fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getCurNumFields</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>FieldCount</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
