<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/SemaInternal.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_SEMAINTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_SEMAINTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Lookup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/SemaDiagnostic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<expr_stmt><expr><specifier>inline</specifier> <name>PartialDiagnostic</name> <name>Sema</name><operator>::</operator><macro><name>PDiag</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>PartialDiagnostic</name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><call><name><name>Context</name><operator>.</operator><name>getDiagAllocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type>
<name>FTIHasSingleVoidParameter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclaratorChunk</name><operator>::</operator><name>FunctionTypeInfo</name> <operator>&amp;</operator><name>FTI</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>FTI</name><operator>.</operator><name>NumParams</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>FTI</name><operator>.</operator><name>isVariadic</name></name> <operator>&amp;&amp;</operator>
<name><name>FTI</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Ident</name> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name><name>FTI</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Param</name> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>FTI</name><operator>.</operator><name>Params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Param</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isVoidType</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type>
<name>FTIHasNonVoidParameters</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclaratorChunk</name><operator>::</operator><name>FunctionTypeInfo</name> <operator>&amp;</operator><name>FTI</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name><name>FTI</name><operator>.</operator><name>NumParams</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FTIHasSingleVoidParameter</name><argument_list>(<argument><expr><name>FTI</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function><type><specifier>inline</specifier> <name>bool</name></type> <name>DeclAttrsMatchCUDAMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>LangOpts</name><operator>.</operator><name>CUDA</name></name> <operator>||</operator> <operator>!</operator><name>D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isDeviceSideDecl</name> <init>= <expr><name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDADeviceAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>||</operator>
<name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDASharedAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>||</operator>
<name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDAGlobalAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>isDeviceSideDecl</name> <operator>==</operator> <name><name>LangOpts</name><operator>.</operator><name>CUDAIsDevice</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>InheritableAttr</name> <modifier>*</modifier></type><name>getDLLAttr</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>DLLImportAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>DLLExportAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"A declaration cannot be both dllimport and dllexport."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Import</name> <operator>=</operator> <name><name>D</name><operator>-&gt;</operator><name>getAttr</name></name><operator>&lt;</operator><name>DLLImportAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Import</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Export</name> <operator>=</operator> <name><name>D</name><operator>-&gt;</operator><name>getAttr</name></name><operator>&lt;</operator><name>DLLExportAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Export</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDepthAndIndex</name><argument_list>(<argument>NamedDecl *ND</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>TTP</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>TemplateTypeParmDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getDepth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>NTTP</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>NonTypeTemplateParmDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>NTTP</name><operator>-&gt;</operator><name>getDepth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>NTTP</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>TTP</name> <init>= <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>TemplateTemplateParmDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getDepth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDepthAndIndex</name><argument_list>(<argument>UnexpandedParameterPack UPP</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>TTP</name> <init>= <expr><name><name>UPP</name><operator>.</operator><name>first</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>TemplateTypeParmType</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getDepth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TTP</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name>getDepthAndIndex</name><argument_list>(<argument><expr><name><name>UPP</name><operator>.</operator><name>first</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>NamedDecl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}

class <label><name>TypoCorrectionConsumer</name> :</label> <decl_stmt><decl><type><name>public</name></type> <name>VisibleDeclConsumer</name> <block>{<block_content>
<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TypoCorrection</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>TypoResultList</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>TypoResultList</name></expr></argument>&gt;</argument_list></name> <name>TypoResultsMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>TypoResultsMap</name></expr></argument>&gt;</argument_list></name> <name>TypoEditDistanceMap</name></expr>;</expr_stmt></typedef>

<label><name>public</name>:</label>
<macro><name>TypoCorrectionConsumer</name><argument_list>(<argument>Sema &amp;SemaRef</argument>,
<argument>const DeclarationNameInfo &amp;TypoName</argument>,
<argument>Sema::LookupNameKind LookupKind</argument>,
<argument>Scope *S</argument>, <argument>CXXScopeSpec *SS</argument>,
<argument>std::unique_ptr&lt;CorrectionCandidateCallback&gt; CCC</argument>,
<argument>DeclContext *MemberContext</argument>,
<argument>bool EnteringContext</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Typo</name><argument_list>(<argument><expr><call><name><name>TypoName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsIdentifierInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CurrentTCIndex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SavedTCIndex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SemaRef</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>S</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SS</name><argument_list>(<argument><expr><ternary><condition><expr><name>SS</name></expr> ?</condition><then> <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>CXXScopeSpec</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>SS</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>CorrectionValidator</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>CCC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MemberContext</name><argument_list>(<argument><expr><name>MemberContext</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Result</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>, <argument><expr><name>TypoName</name></expr></argument>, <argument><expr><name>LookupKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Namespaces</name><argument_list>(<argument><expr><name><name>SemaRef</name><operator>.</operator><name>Context</name></name></expr></argument>, <argument><expr><name><name>SemaRef</name><operator>.</operator><name>CurContext</name></name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>EnteringContext</name><argument_list>(<argument><expr><name>EnteringContext</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SearchNamespaces</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>Result</name><operator>.</operator><name>suppressDiagnostics</name></name><argument_list>()</argument_list></call></expr>;

<expr><call><name><name>ValidatedCorrections</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TypoCorrection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>includeHiddenDecls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>FoundDecl</name><argument_list>(<argument><expr><name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>, <argument><expr><name>NamedDecl</name> <operator>*</operator><name>Hiding</name></expr></argument>, <argument><expr><name>DeclContext</name> <operator>*</operator><name>Ctx</name></expr></argument>,
<argument><expr><name>bool</name> <name>InBaseClass</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>FoundName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addKeywordResult</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Keyword</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addCorrection</name><parameter_list>(<parameter><decl><type><name>TypoCorrection</name></type> <name>Correction</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>CorrectionResults</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ValidatedCorrections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>TypoResultList</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>CorrectionResults</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><index>[<expr><name>Name</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>unsigned</name></type> <name>getBestEditDistance</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Normalized</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>CorrectionResults</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>BestED</name> <init>= <expr><call><name><name>CorrectionResults</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>Normalized</name></expr> ?</condition><then> <expr><name>TypoCorrection</name><operator>::</operator><call><name>NormalizeEditDistance</name><argument_list>(<argument><expr><name>BestED</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>BestED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>void</name></type>
<name>addNamespaces</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>NamespaceDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>KnownNamespaces</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<function_decl><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>getNextCorrection</name><parameter_list>()</parameter_list>;</function_decl>


<function><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>getCurrentCorrection</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>CurrentTCIndex</name> <operator>&lt;</operator> <call><name><name>ValidatedCorrections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><name><name>ValidatedCorrections</name><index>[<expr><name>CurrentTCIndex</name></expr>]</index></name></expr>
</then><else>: <expr><name><name>ValidatedCorrections</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>peekNextCorrection</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Current</name> <init>= <expr><name>CurrentTCIndex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>TC</name> <init>= <expr><call><name>getNextCorrection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>CurrentTCIndex</name> <operator>=</operator> <name>Current</name></expr>;</expr_stmt>
<return>return <expr><name>TC</name></expr>;</return>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>hasMadeAnyCorrectionProgress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurrentTCIndex</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>void</name></type> <name>resetCorrectionStream</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CurrentTCIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>finished</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>CorrectionResults</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name>CurrentTCIndex</name> <operator>&gt;=</operator> <call><name><name>ValidatedCorrections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>saveCurrentPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>SavedTCIndex</name> <operator>=</operator> <name>CurrentTCIndex</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>restoreSavedPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CurrentTCIndex</name> <operator>=</operator> <name>SavedTCIndex</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>SemaRef</name><operator>.</operator><name>Context</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>LookupResult</name> <operator>&amp;</operator><macro><name>getLookupResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Result</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAddressOfOperand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CorrectionValidator</name><operator>-&gt;</operator><name>IsAddressOfOperand</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CXXScopeSpec</name> <operator>*</operator><macro><name>getSS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SS</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Scope</name> <operator>*</operator><macro><name>getScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>S</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>CorrectionCandidateCallback</name> <operator>*</operator><macro><name>getCorrectionValidator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>CorrectionValidator</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>NamespaceSpecifierSet</name> <block>{<block_content>
<struct>struct <name>SpecifierInfo</name> <block>{
<decl_stmt><decl><type><name>DeclContext</name><modifier>*</modifier></type> <name>DeclCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NestedNameSpecifier</name><modifier>*</modifier></type> <name>NameSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EditDistance</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name><modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>DeclContextList</name>;</typedef>
<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SpecifierInfo</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>SpecifierInfoList</name>;</typedef>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclContextList</name></type> <name>CurContextChain</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CurNameSpecifier</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name><modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>CurContextIdentifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name><modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>CurNameSpecifierIdentifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>SpecifierInfoList</name></expr></argument>&gt;</argument_list></name> <name>DistanceMap</name></expr>;</expr_stmt>



<function_decl><type><specifier>static</specifier> <name>DeclContextList</name></type> <name>buildContextChain</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>buildNestedNameSpecifier</name><parameter_list>(<parameter><decl><type><name>DeclContextList</name> <modifier>&amp;</modifier></type><name>DeclChain</name></decl></parameter>,
<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>NNS</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>NamespaceSpecifierSet</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>, <argument><expr><name>DeclContext</name> <operator>*</operator><name>CurContext</name></expr></argument>,
<argument><expr><name>CXXScopeSpec</name> <operator>*</operator><name>CurScopeSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>addNameSpecifier</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>iterator</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>iterator_facade_base</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr></argument>,
<argument><expr><name>SpecifierInfo</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>SpecifierInfoList</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>OuterBack</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>SpecifierInfoList</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>Outer</name></expr>;

<expr><name>SpecifierInfoList</name><operator>::</operator><name>iterator</name> <name>Inner</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>iterator</name><argument_list>(<argument>NamespaceSpecifierSet &amp;Set</argument>, <argument>bool IsAtEnd</argument>)</argument_list></macro>
<operator>:</operator> <call><name>OuterBack</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>prev</name><argument_list>(<argument><expr><call><name><name>Set</name><operator>.</operator><name>DistanceMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Outer</name><argument_list>(<argument><expr><call><name><name>Set</name><operator>.</operator><name>DistanceMap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>Inner</name><argument_list>(<argument>!IsAtEnd ? Outer-&gt;second.begin() : OuterBack-&gt;second.end()</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Set</name><operator>.</operator><name>DistanceMap</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><operator>++</operator><name>Inner</name></expr>;
<if_stmt><if>if <condition>(<expr><name>Inner</name> <operator>==</operator> <call><name><name>Outer</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Outer</name> <operator>!=</operator> <name>OuterBack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>Outer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Inner</name> <operator>=</operator> <call><name><name>Outer</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>SpecifierInfo</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><operator>*</operator><name>Inner</name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Inner</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Inner</name></name></expr>;</return> }</block>
}</expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name>void</name> <macro><name>addName</name><argument_list>(<argument>StringRef Name</argument>, <argument>NamedDecl *ND</argument>,
<argument>NestedNameSpecifier *NNS = nullptr</argument>, <argument>bool isKeyword = false</argument>)</argument_list></macro></expr>;




<expr><name>bool</name> <call><name>resolveCorrection</name><argument_list>(<argument><expr><name>TypoCorrection</name> <operator>&amp;</operator><name>Candidate</name></expr></argument>)</argument_list></call></expr>;





<expr><name>void</name> <call><name>performQualifiedLookups</name><argument_list>()</argument_list></call></expr>;


<expr><name>IdentifierInfo</name> <operator>*</operator><name>Typo</name></expr>;






<expr><name>TypoEditDistanceMap</name> <name>CorrectionResults</name></expr>;

<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TypoCorrection</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>ValidatedCorrections</name></expr>;
<expr><name>size_t</name> <name>CurrentTCIndex</name></expr>;
<expr><name>size_t</name> <name>SavedTCIndex</name></expr>;

<expr><name>Sema</name> <operator>&amp;</operator><name>SemaRef</name></expr>;
<expr><name>Scope</name> <operator>*</operator><name>S</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CXXScopeSpec</name></expr></argument>&gt;</argument_list></name> <name>SS</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <name>CorrectionValidator</name></expr>;
<expr><name>DeclContext</name> <operator>*</operator><name>MemberContext</name></expr>;
<expr><name>LookupResult</name> <name>Result</name></expr>;
<expr><name>NamespaceSpecifierSet</name> <name>Namespaces</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TypoCorrection</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>QualifiedResults</name></expr>;
<expr><name>bool</name> <name>EnteringContext</name></expr>;
<expr><name>bool</name> <name>SearchNamespaces</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>Sema</name><operator>::</operator><name>TypoExprState</name><operator>::</operator><macro><name>TypoExprState</name><argument_list>()</argument_list></macro> <block>{}</block>

<specifier>inline</specifier> <name>Sema</name><operator>::</operator><name>TypoExprState</name><operator>::</operator><macro><name>TypoExprState</name><argument_list>(<argument>TypoExprState &amp;&amp;other</argument>)</argument_list></macro> <name>noexcept</name> <block>{
<expr><operator>*</operator><name>this</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>inline</specifier> <name>Sema</name><operator>::</operator><name>TypoExprState</name> <operator>&amp;</operator><name>Sema</name><operator>::</operator><name>TypoExprState</name><operator>::</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name>Sema</name><operator>::</operator><name>TypoExprState</name> <operator>&amp;&amp;</operator><name>other</name><operator>)</operator> <name>noexcept</name> <block>{
<expr><name>Consumer</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Consumer</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>DiagHandler</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>DiagHandler</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>RecoveryHandler</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>RecoveryHandler</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
