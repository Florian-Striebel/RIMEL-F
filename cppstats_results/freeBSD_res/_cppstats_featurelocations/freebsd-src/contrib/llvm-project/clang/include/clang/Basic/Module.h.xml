<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Module.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_MODULE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_MODULE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DirectoryEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>ModuleId</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ASTFileSignature</name></name></type> <range>: <expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>BaseT</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>size</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>BaseT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;

<macro><name>ASTFileSignature</name><argument_list>(<argument>BaseT S = {{<literal type="number">0</literal>}}</argument>)</argument_list></macro> <operator>:</operator> <macro><name>BaseT</name><argument_list>(<argument>std::move(S)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>!=</operator> <macro><name>BaseT</name><argument_list>(<argument>{{<literal type="number">0</literal>}}</argument>)</argument_list></macro></expr>;</return> }</block>


<name>uint64_t</name> <macro><name>truncatedValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>uint64_t</name> <name>Value</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"No need to truncate."</literal></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Value</name> <operator>|=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><name>I</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>I</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block></expr>
<return>return <expr><name>Value</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>ASTFileSignature</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>Bytes</name><operator>.</operator><name>bytes_begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Bytes</name><operator>.</operator><name>bytes_end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASTFileSignature</name></type> <name>createDISentinel</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Sentinel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Sentinel</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Sentinel</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIt</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ASTFileSignature</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>InputIt</name></type> <name>First</name></decl></parameter>, <parameter><decl><type><name>InputIt</name></type> <name>Last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>First</name></expr></argument>, <argument><expr><name>Last</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name> <operator>&amp;&amp;</operator>
<literal type="string">"Wrong amount of bytes to create an ASTFileSignature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Signature</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>copy</name><argument_list>(<argument><expr><name>First</name></expr></argument>, <argument><expr><name>Last</name></expr></argument>, <argument><expr><call><name><name>Signature</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Signature</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Module</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DefinitionLoc</name></decl>;</decl_stmt>

<enum>enum <name>ModuleKind</name> <block>{


<decl><name>ModuleMapModule</name></decl>,


<decl><name>ModuleInterfaceUnit</name></decl>,


<decl><name>GlobalModuleFragment</name></decl>,


<decl><name>PrivateModuleFragment</name></decl>,
}</block>;</enum>


<decl_stmt><decl><type><name>ModuleKind</name></type> <name>Kind</name> <init>= <expr><name>ModuleMapModule</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>Directory</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PresumedModuleMapFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Umbrella</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Signature</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>UmbrellaAsWritten</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>UmbrellaRelativeToRootModuleDirectory</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ExportAsModule</name></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isModulePurview</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>ModuleInterfaceUnit</name> <operator>||</operator> <name>Kind</name> <operator>==</operator> <name>PrivateModuleFragment</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>SubModules</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>SubModuleIndex</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>ASTFile</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallSetVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>TopHeaders</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>TopHeaderNames</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>VisibleModulesCache</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>VisibilityID</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>HeaderKind</name> <block>{
<decl><name>HK_Normal</name></decl>,
<decl><name>HK_Textual</name></decl>,
<decl><name>HK_Private</name></decl>,
<decl><name>HK_PrivateTextual</name></decl>,
<decl><name>HK_Excluded</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>NumHeaderKinds</name> <init>= <expr><name>HK_Excluded</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<struct>struct <name>Header</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>NameAsWritten</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PathRelativeToRootModuleDirectory</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>Entry</name></decl>;</decl_stmt>

<function><type><name>explicit</name> <name>operator</name></type> <name>bool</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Entry</name></expr>;</return> </block_content>}</block></function>
}</block>;</struct>



<struct>struct <name>DirectoryName</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>NameAsWritten</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PathRelativeToRootModuleDirectory</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>Entry</name></decl>;</decl_stmt>

<function><type><name>explicit</name> <name>operator</name></type> <name>bool</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Entry</name></expr>;</return> </block_content>}</block></function>
}</block>;</struct>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Header</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name><name>Headers</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>



<struct>struct <name>UnresolvedHeaderDirective</name> <block>{
<decl_stmt><decl><type><name>HeaderKind</name></type> <name>Kind</name> <init>= <expr><name>HK_Normal</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>FileNameLoc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsUmbrella</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasBuiltinHeader</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>off_t</name></expr></argument>&gt;</argument_list></name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>time_t</name></expr></argument>&gt;</argument_list></name></type> <name>ModTime</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnresolvedHeaderDirective</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>UnresolvedHeaders</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnresolvedHeaderDirective</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>MissingHeaders</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>Requirement</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Requirement</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Requirements</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>ShadowingModule</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>IsUnimportable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HasIncompatibleModuleFile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>IsAvailable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFromModuleFile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFramework</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExplicit</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsSystem</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExternC</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsInferred</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>InferSubmodules</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>InferExplicitSubmodules</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>InferExportWildcard</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>ConfigMacrosExhaustive</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NoUndeclaredIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ModuleMapIsPrivate</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<enum>enum <name>NameVisibilityKind</name> <block>{

<decl><name>Hidden</name></decl>,

<decl><name>AllVisible</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>NameVisibilityKind</name></type> <name>NameVisibility</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>InferredSubmoduleLoc</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallSetVector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Imports</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>ExportDecl</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ExportDecl</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Exports</name></decl>;</decl_stmt>



<struct>struct <name>UnresolvedExportDecl</name> <block>{

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>ExportLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ModuleId</name></type> <name>Id</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Wildcard</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnresolvedExportDecl</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>UnresolvedExports</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>DirectUses</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleId</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>UnresolvedDirectUses</name></decl>;</decl_stmt>



<struct>struct <name>LinkLibrary</name> <block>{
<expr_stmt><expr><call><name>LinkLibrary</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>LinkLibrary</name><argument_list>(<argument>const std::string &amp;Library</argument>, <argument>bool IsFramework</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Library</name><argument_list>(<argument><expr><name>Library</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsFramework</name><argument_list>(<argument>IsFramework</argument>)</argument_list></macro> <expr><block>{}</block>





<name>std</name><operator>::</operator><name>string</name> <name>Library</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsFramework</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>LinkLibrary</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>LinkLibraries</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>UseExportAsModuleLinkName</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ConfigMacros</name></expr>;</expr_stmt>


<struct>struct <name>UnresolvedConflict</name> <block>{

<decl_stmt><decl><type><name>ModuleId</name></type> <name>Id</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Message</name></expr>;</expr_stmt>
}</block>;</struct>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UnresolvedConflict</name></expr></argument>&gt;</argument_list></name> <name>UnresolvedConflicts</name></expr>;</expr_stmt>


<struct>struct <name>Conflict</name> <block>{

<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>Other</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Message</name></expr>;</expr_stmt>
}</block>;</struct>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Conflict</name></expr></argument>&gt;</argument_list></name> <name>Conflicts</name></expr>;</expr_stmt>


<macro><name>Module</name><argument_list>(<argument>StringRef Name</argument>, <argument>SourceLocation DefinitionLoc</argument>, <argument>Module *Parent</argument>,
<argument>bool IsFramework</argument>, <argument>bool IsExplicit</argument>, <argument>unsigned VisibilityID</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Module</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isUnimportable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsUnimportable</name></expr>;</return> }</block></expr></expr_stmt>














<decl_stmt><decl><type><name>bool</name></type> <name>isUnimportable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>,
<argument><expr><name>Requirement</name> <operator>&amp;</operator><name>Req</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><operator>&amp;</operator><name>ShadowingModule</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isAvailable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsAvailable</name></expr>;</return> }</block></expr></expr_stmt>


















<decl_stmt><decl><type><name>bool</name></type> <name>isAvailable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>,
<argument><expr><name>Requirement</name> <operator>&amp;</operator><name>Req</name></expr></argument>,
<argument><expr><name>UnresolvedHeaderDirective</name> <operator>&amp;</operator><name>MissingHeader</name></expr></argument>,
<argument><expr><name>Module</name> <operator>*</operator><operator>&amp;</operator><name>ShadowingModule</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSubModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Parent</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>isSubModuleOf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>Other</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isPartOfFramework</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>Mod</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name>Mod</name></expr>;</condition> <incr><expr><name>Mod</name> <operator>=</operator> <name><name>Mod</name><operator>-&gt;</operator><name>Parent</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>Mod</name><operator>-&gt;</operator><name>IsFramework</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isSubFramework</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsFramework</name> <operator>&amp;&amp;</operator> <name>Parent</name> <operator>&amp;&amp;</operator> <call><name><name>Parent</name><operator>-&gt;</operator><name>isPartOfFramework</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Parent</name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Parent</name><operator>-&gt;</operator><name>SubModuleIndex</name><index>[<expr><name>Name</name></expr>]</index></name> <operator>=</operator> <call><name><name>Parent</name><operator>-&gt;</operator><name>SubModules</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Parent</name><operator>-&gt;</operator><name>SubModules</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getFullModuleName</name><argument_list>(<argument>bool AllowStringLiterals = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>fullModuleNameIs</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>nameParts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function><type><name>Module</name> <modifier>*</modifier></type><name>getTopLevelModule</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getTopLevelModule</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><macro><name>getTopLevelModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getTopLevelModuleName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTopLevelModule</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Name</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <macro><name>getASTFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTopLevelModule</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ASTFile</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setASTFile</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>File</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>File</name> <operator>||</operator> <operator>!</operator><call><name>getASTFile</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>getASTFile</name><argument_list>()</argument_list></call> <operator>==</operator> <name>File</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"file path changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getTopLevelModule</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ASTFile</name> <operator>=</operator> <name>File</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>DirectoryName</name> <macro><name>getUmbrellaDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>Header</name> <macro><name>getUmbrellaHeader</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>FE</name> <operator>=</operator> <name><name>Umbrella</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Header</name><block>{<expr><name>UmbrellaAsWritten</name></expr>, <expr><name>UmbrellaRelativeToRootModuleDirectory</name></expr>,
<expr><name>FE</name></expr>}</block></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>Header</name><block>{}</block></expr>;</return>
}



bool <macro><name>hasUmbrellaDir</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><name>Umbrella</name> <operator>&amp;&amp;</operator> <name><name>Umbrella</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>addTopHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>addTopHeaderFilename</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>TopHeaderNames</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getTopHeaders</name><parameter_list>(<parameter><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>FileMgr</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>bool</name></type> <name>directlyUses</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>Requested</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>















<function_decl><type><name>void</name></type> <name>addRequirement</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Feature</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>RequiredState</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>Target</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>markUnavailable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Unimportable</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>findSubmodule</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>findOrInferSubmodule</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>bool</name></type> <name>isModuleVisible</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>VisibleModulesCache</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>buildVisibleModulesCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>VisibleModulesCache</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getVisibilityID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>VisibilityID</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>submodule_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>submodule_const_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>submodule_iterator</name></type> <name>submodule_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>SubModules</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>submodule_const_iterator</name> <macro><name>submodule_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><call><name><name>SubModules</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<function><type><name>submodule_iterator</name></type> <name>submodule_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>SubModules</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>submodule_const_iterator</name> <macro><name>submodule_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SubModules</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>submodule_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>submodules</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>submodule_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>submodule_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>submodule_const_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>submodules</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>submodule_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>submodule_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>getExportedModules</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Exported</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>StringRef</name></type> <name>getModuleInputBufferName</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"&lt;module-includes&gt;"</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Indent</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>bool</name> <name>Dump</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>void</name> <macro><name>buildVisibleModulesCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
};


<decl_stmt><decl><type><name>class</name></type> <name>VisibleModuleSet</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VisibleModuleSet</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>VisibleModuleSet</name><argument_list>(<argument><expr><name>VisibleModuleSet</name> <operator>&amp;&amp;</operator><name>O</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ImportLocs</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>ImportLocs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Generation</name><argument_list>(<argument>O.Generation ? <literal type="number">1</literal> : <literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>O</name><operator>.</operator><name>ImportLocs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><operator>++</operator><name><name>O</name><operator>.</operator><name>Generation</name></name></expr>;
}</block>



<name>VisibleModuleSet</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>VisibleModuleSet</name> <operator>&amp;&amp;</operator><name>O</name><operator>)</operator> <block>{
<expr><name>ImportLocs</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>ImportLocs</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>O</name><operator>.</operator><name>ImportLocs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><operator>++</operator><name><name>O</name><operator>.</operator><name>Generation</name></name></expr>;
<expr><operator>++</operator><name>Generation</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getGeneration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Generation</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isVisible</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getImportLoc</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getImportLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name><name>M</name><operator>-&gt;</operator><name>getVisibilityID</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>ImportLocs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><name><name>ImportLocs</name><index>[<expr><call><name><name>M</name><operator>-&gt;</operator><name>getVisibilityID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>
</then><else>: <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>VisibleCallback</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>Module</name> <operator>*</operator><name>M</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>using</name></type> <name>ConflictCallback</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Path</name>, <name>Module</name> <operator>*</operator><name>Conflict</name>,
<name>StringRef</name> <name>Message</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setVisible</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>VisibleCallback</name> <name>Vis</name> <operator>=</operator> <index>[]</index><operator>(</operator><name>Module</name> <operator>*</operator><operator>)</operator> <block>{}</block></expr></argument>,
<argument><expr><name>ConflictCallback</name> <name>Cb</name> <operator>=</operator> <index>[]</index><operator>(</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>,</operator> <name>Module</name> <operator>*</operator><operator>,</operator>
<name>StringRef</name><operator>)</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>ImportLocs</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Generation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ASTSourceDescriptor</name> <block>{<block_content>
<decl_stmt><decl><type><name>StringRef</name></type> <name>PCHModuleName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>ASTFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>ClangModule</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTSourceDescriptor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>ASTSourceDescriptor</name><argument_list>(<argument>StringRef Name</argument>, <argument>StringRef Path</argument>, <argument>StringRef ASTFile</argument>,
<argument>ASTFileSignature Signature</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>PCHModuleName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Path</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ASTFile</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ASTFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Signature</name><argument_list>(<argument>Signature</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>ASTSourceDescriptor</name><argument_list>(<argument><expr><name>Module</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getModuleName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Path</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getASTFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ASTFile</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ASTFileSignature</name> <macro><name>getSignature</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Signature</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Module</name> <operator>*</operator><macro><name>getModuleOrNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ClangModule</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
