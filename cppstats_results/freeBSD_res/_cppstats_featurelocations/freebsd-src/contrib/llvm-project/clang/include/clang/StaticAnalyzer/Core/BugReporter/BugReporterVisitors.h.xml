<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGREPORTERVISITORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGREPORTERVISITORS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/ProgramPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BinaryOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFGBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PathSensitiveBugReport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BugReporterContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemRegion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PathDiagnosticPiece</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PathDiagnosticPieceRef</name> <init>= <expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticPiece</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>BugReporterVisitor</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>BugReporterVisitor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>BugReporterVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BugReporterVisitor</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>BugReporterVisitor</name><argument_list>(<argument>BugReporterVisitor &amp;&amp;</argument>)</argument_list></macro> <expr><block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>BugReporterVisitor</name><argument_list>()</argument_list></call></expr>;











<expr><name>virtual</name> <name>PathDiagnosticPieceRef</name> <call><name>VisitNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>Succ</name></expr></argument>,
<argument><expr><name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>,
<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>void</name> <call><name>finalizeVisitor</name><argument_list>(<argument><expr><name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>EndPathNode</name></expr></argument>,
<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name></expr></argument>)</argument_list></call></expr>;






<expr><name>virtual</name> <name>PathDiagnosticPieceRef</name> <call><name>getEndPath</name><argument_list>(<argument><expr><name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>,
<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><specifier>static</specifier> <name>PathDiagnosticPieceRef</name>
<call><name>getDefaultEndPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>bugreporter</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TrackingKind</name> <block>{<block_content>


<expr_stmt><expr><name>Thorough</name></expr><operator>,</operator>




<expr><name>Condition</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>TrackingOptions</name> <block>{

<decl_stmt><decl><type><name>TrackingKind</name></type> <name>Kind</name> <init>= <expr><name>TrackingKind</name><operator>::</operator><name>Thorough</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>EnableNullFPSuppression</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>StoreInfo</name> <block>{
<enum>enum <name>Kind</name> <block>{


<decl><name>Initialization</name></decl>,



<decl><name>Assignment</name></decl>,


<decl><name>CallArgument</name></decl>,




<decl><name>BlockCapture</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>Kind</name></type> <name>StoreKind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ExplodedNode</name> <modifier>*</modifier></type><name>StoreSite</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>SourceOfTheValue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SVal</name></type> <name>Value</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>Dest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Origin</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>Tracker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TrackerRef</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>Tracker</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ExpressionHandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StoreHandler</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>Tracker</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>Tracker</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>private</name><operator>:</operator>
<name>using</name> <name>ExpressionHandlerPtr</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ExpressionHandler</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>StoreHandlerPtr</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StoreHandler</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>Report</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ExpressionHandlerPtr</name></expr></argument>&gt;</argument_list></name> <name>ExpressionHandlers</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>StoreHandlerPtr</name></expr></argument>&gt;</argument_list></name> <name>StoreHandlers</name></expr>;

<expr><name>protected</name><operator>:</operator>

<call><name>Tracker</name><argument_list>(<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>Report</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>Tracker</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>TrackerRef</name> <macro><name>create</name><argument_list>(<argument>PathSensitiveBugReport &amp;Report</argument>)</argument_list></macro> <block>{
<return>return <expr><name>new</name> <call><name>Tracker</name><argument_list>(<argument><expr><name>Report</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>PathSensitiveBugReport</name> <operator>&amp;</operator><macro><name>getReport</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Report</name></expr>;</return> }</block>



struct <name>Result</name> <block>{

<expr><name>bool</name> <name>FoundSomethingToTrack</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>WasInterrupted</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>void</name> <macro><name>combineWith</name><argument_list>(<argument>const Result &amp;Other</argument>)</argument_list></macro> <block>{


<expr><name>FoundSomethingToTrack</name> <operator>|=</operator> <name><name>Other</name><operator>.</operator><name>FoundSomethingToTrack</name></name></expr>;

<expr><name>WasInterrupted</name> <operator>|=</operator> <name><name>Other</name><operator>.</operator><name>WasInterrupted</name></name></expr>;
}</block></expr>
}</block></expr>;






<expr><name>virtual</name> <name>Result</name> <macro><name>track</name><argument_list>(<argument>const Expr *E</argument>, <argument>const ExplodedNode *N</argument>,
<argument>TrackingOptions Opts = {}</argument>)</argument_list></macro></expr>;














<expr><name>virtual</name> <name>Result</name> <macro><name>track</name><argument_list>(<argument>SVal V</argument>, <argument>const MemRegion *R</argument>, <argument>TrackingOptions Opts = {}</argument>,
<argument>const StackFrameContext *Origin = nullptr</argument>)</argument_list></macro></expr>;







<expr><name>virtual</name> <name>PathDiagnosticPieceRef</name> <macro><name>handle</name><argument_list>(<argument>StoreInfo SI</argument>, <argument>BugReporterContext &amp;BRC</argument>,
<argument>TrackingOptions Opts</argument>)</argument_list></macro></expr>;





<expr><name>void</name> <macro><name>addHighPriorityHandler</name><argument_list>(<argument>ExpressionHandlerPtr SH</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ExpressionHandlers</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>SH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>





<name>void</name> <macro><name>addLowPriorityHandler</name><argument_list>(<argument>ExpressionHandlerPtr SH</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ExpressionHandlers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>SH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>





<name>void</name> <macro><name>addHighPriorityHandler</name><argument_list>(<argument>StoreHandlerPtr SH</argument>)</argument_list></macro> <block>{
<expr><call><name><name>StoreHandlers</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>SH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>





<name>void</name> <macro><name>addLowPriorityHandler</name><argument_list>(<argument>StoreHandlerPtr SH</argument>)</argument_list></macro> <block>{
<expr><call><name><name>StoreHandlers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>SH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>HandlerType</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>addHighPriorityHandler</name><argument_list>(<argument>Args &amp;&amp;... ConstructorArgs</argument>)</argument_list></macro> <block>{
<expr><call><name>addHighPriorityHandler</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>HandlerType</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ConstructorArgs</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>HandlerType</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>addLowPriorityHandler</name><argument_list>(<argument>Args &amp;&amp;... ConstructorArgs</argument>)</argument_list></macro> <block>{
<expr><call><name>addLowPriorityHandler</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>HandlerType</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ConstructorArgs</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ExpressionHandler</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Tracker</name> <modifier>&amp;</modifier></type><name>ParentTracker</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExpressionHandler</name><argument_list>(<argument><expr><name>Tracker</name> <operator>&amp;</operator><name>ParentTracker</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ParentTracker</name><argument_list>(<argument>ParentTracker</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><macro><name>ExpressionHandler</name><argument_list>()</argument_list></macro> <block>{}</block>







<name>virtual</name> <name>Tracker</name><operator>::</operator><name>Result</name> <macro><name>handle</name><argument_list>(<argument>const Expr *E</argument>, <argument>const ExplodedNode *Original</argument>,
<argument>const ExplodedNode *ExprNode</argument>,
<argument>TrackingOptions Opts</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function><type><name>Tracker</name> <modifier>&amp;</modifier></type><name>getParentTracker</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>ParentTracker</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>StoreHandler</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Tracker</name> <modifier>&amp;</modifier></type><name>ParentTracker</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StoreHandler</name><argument_list>(<argument><expr><name>Tracker</name> <operator>&amp;</operator><name>ParentTracker</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ParentTracker</name><argument_list>(<argument>ParentTracker</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><macro><name>StoreHandler</name><argument_list>()</argument_list></macro> <block>{}</block>








<name>virtual</name> <name>PathDiagnosticPieceRef</name> <macro><name>handle</name><argument_list>(<argument>StoreInfo SI</argument>, <argument>BugReporterContext &amp;BRC</argument>,
<argument>TrackingOptions Opts</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>Tracker</name> <modifier>&amp;</modifier></type><name>getParentTracker</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>ParentTracker</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<function_decl><type><name>PathDiagnosticPieceRef</name></type> <name>constructNote</name><parameter_list>(<parameter><decl><type><name>StoreInfo</name></type> <name>SI</name></decl></parameter>, <parameter><decl><type><name>BugReporterContext</name> <modifier>&amp;</modifier></type><name>BRC</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>NodeText</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TrackingBugReporterVisitor</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>TrackerRef</name> <name>ParentTracker</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>TrackingBugReporterVisitor</name><argument_list>(<argument>TrackerRef ParentTracker</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>ParentTracker</name><argument_list>(<argument>ParentTracker</argument>)</argument_list></macro> <block>{}</block>

<name>Tracker</name> <operator>&amp;</operator><macro><name>getParentTracker</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>ParentTracker</name></expr>;</return> }</block>
}</expr>;












<expr><name>bool</name> <macro><name>trackExpressionValue</name><argument_list>(<argument>const ExplodedNode *N</argument>, <argument>const Expr *E</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>, <argument>TrackingOptions Opts = {}</argument>)</argument_list></macro></expr>;














<expr><name>void</name> <macro><name>trackStoredValue</name><argument_list>(<argument>KnownSVal V</argument>, <argument>const MemRegion *R</argument>,
<argument>PathSensitiveBugReport &amp;Report</argument>, <argument>TrackingOptions Opts = {}</argument>,
<argument>const StackFrameContext *Origin = nullptr</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><call><name>getDerefExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call></expr>;

}</block>

<name>class</name> <name>TrackConstraintBRVisitor</name> <name>final</name> <operator>:</operator> <name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>DefinedSVal</name> <name>Constraint</name></expr>;
<expr><name>bool</name> <name>Assumption</name></expr>;
<expr><name>bool</name> <name>IsSatisfied</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>IsZeroCheck</name></expr>;



<expr><name>bool</name> <name>IsTrackingTurnedOn</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>TrackConstraintBRVisitor</name><argument_list>(<argument>DefinedSVal constraint</argument>, <argument>bool assumption</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Constraint</name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Assumption</name><argument_list>(<argument><expr><name>assumption</name></expr></argument>)</argument_list></call></expr>,
<macro><name>IsZeroCheck</name><argument_list>(<argument>!Assumption &amp;&amp; Constraint.getAs&lt;Loc&gt;()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getTag</name><argument_list>()</argument_list></call></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>

<name>bool</name> <macro><name>isUnderconstrained</name><argument_list>(<argument>const ExplodedNode *N</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>NilReceiverBRVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><specifier>static</specifier> <specifier>const</specifier> <name>Expr</name> <operator>*</operator><call><name>getNilReceiver</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>ConditionBRVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{

<expr><name>constexpr</name> <specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringLiteral</name> <name>GenericTrueMessage</name> <operator>=</operator>
<literal type="string">"Assuming the condition is true"</literal></expr>;
<expr><name>constexpr</name> <specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringLiteral</name> <name>GenericFalseMessage</name> <operator>=</operator>
<literal type="string">"Assuming the condition is false"</literal></expr>;

<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;
}</block>



<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getTag</name><argument_list>()</argument_list></call></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>PathDiagnosticPieceRef</name> <call><name>VisitNodeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>,
<argument><expr><name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>,
<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>BR</name></expr></argument>)</argument_list></call></expr>;

<expr><name>PathDiagnosticPieceRef</name>
<call><name>VisitTerminator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>Term</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>SrcBlk</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>DstBlk</name></expr></argument>,
<argument><expr><name>PathSensitiveBugReport</name> <operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>BugReporterContext</name> <operator>&amp;</operator><name>BRC</name></expr></argument>)</argument_list></call></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitTrueTest</name><argument_list>(<argument>const Expr *Cond</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>)</argument_list></macro></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitTrueTest</name><argument_list>(<argument>const Expr *Cond</argument>, <argument>const DeclRefExpr *DR</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>,
<argument>bool IsAssuming</argument>)</argument_list></macro></expr>;

<expr><name>PathDiagnosticPieceRef</name>
<macro><name>VisitTrueTest</name><argument_list>(<argument>const Expr *Cond</argument>, <argument>const BinaryOperator *BExpr</argument>,
<argument>BugReporterContext &amp;BRC</argument>, <argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>, <argument>bool IsAssuming</argument>)</argument_list></macro></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitTrueTest</name><argument_list>(<argument>const Expr *Cond</argument>, <argument>const MemberExpr *ME</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>,
<argument>bool IsAssuming</argument>)</argument_list></macro></expr>;

<expr><name>PathDiagnosticPieceRef</name>
<macro><name>VisitConditionVariable</name><argument_list>(<argument>StringRef LhsString</argument>, <argument>const Expr *CondVarExpr</argument>,
<argument>BugReporterContext &amp;BRC</argument>, <argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>)</argument_list></macro></expr>;










<expr><name>bool</name> <macro><name>printValue</name><argument_list>(<argument>const Expr *CondVarExpr</argument>, <argument>raw_ostream &amp;Out</argument>,
<argument>const ExplodedNode *N</argument>, <argument>bool TookTrue</argument>, <argument>bool IsAssuming</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>patternMatch</name><argument_list>(<argument>const Expr *Ex</argument>,
<argument>const Expr *ParentEx</argument>,
<argument>raw_ostream &amp;Out</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>,
<argument>const ExplodedNode *N</argument>,
<argument>Optional&lt;bool&gt; &amp;prunable</argument>,
<argument>bool IsSameFieldName</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <call><name>isPieceMessageGeneric</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PathDiagnosticPiece</name> <operator>*</operator><name>Piece</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>LikelyFalsePositiveSuppressionBRVisitor</name></type> <name>final</name>
<range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>getTag</name><argument_list>()</argument_list></macro> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>Tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><call><name>getTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *</argument>, <argument>BugReporterContext &amp;</argument>,
<argument>PathSensitiveBugReport &amp;</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>void</name> <macro><name>finalizeVisitor</name><argument_list>(<argument>BugReporterContext &amp;BRC</argument>, <argument>const ExplodedNode *N</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name> <name>UndefOrNullArgVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{

<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>R</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>UndefOrNullArgVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>InR</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>R</name><argument_list>(<argument>InR</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>Tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tag</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>SuppressInlineDefensiveChecksVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{


<expr><name>DefinedSVal</name> <name>V</name></expr>;


<expr><name>bool</name> <name>IsSatisfied</name> <operator>=</operator> <name>false</name></expr>;






<expr><name>bool</name> <name>IsTrackingTurnedOn</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>SuppressInlineDefensiveChecksVisitor</name><argument_list>(<argument>DefinedSVal Val</argument>, <argument>const ExplodedNode *N</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getTag</name><argument_list>()</argument_list></call></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *Succ</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>FalsePositiveRefutationBRVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>private</name><operator>:</operator>

<name>ConstraintMap</name> <name>Constraints</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>FalsePositiveRefutationBRVisitor</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>finalizeVisitor</name><argument_list>(<argument>BugReporterContext &amp;BRC</argument>, <argument>const ExplodedNode *EndPathNode</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>addConstraints</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>bool OverwriteConstraintsOnExistingSyms</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TagVisitor</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
