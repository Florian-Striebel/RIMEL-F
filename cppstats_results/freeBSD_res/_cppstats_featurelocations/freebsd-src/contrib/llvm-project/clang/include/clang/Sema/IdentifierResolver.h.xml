<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/IdentifierResolver.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_IDENTIFIERRESOLVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_IDENTIFIERRESOLVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclarationName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Scope</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>IdentifierResolver</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>IdDeclInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>DeclsTy</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>DeclsTy</name><operator>::</operator><name>iterator</name> <macro><name>decls_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>DeclsTy</name><operator>::</operator><name>iterator</name> <macro><name>decls_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>AddDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>RemoveDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>InsertDecl</name><argument_list>(<argument><expr><name>DeclsTy</name><operator>::</operator><name>iterator</name> <name>Pos</name></expr></argument>, <argument><expr><name>NamedDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Pos</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>DeclsTy</name></type> <name>Decls</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>



<decl_stmt><decl><type><name>class</name></type> <name>iterator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>IdentifierResolver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>NamedDecl</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>NamedDecl</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>NamedDecl</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator_category</name> <init>= <expr><name>std</name><operator>::</operator><name>input_iterator_tag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name>std</name><operator>::</operator><name>ptrdiff_t</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uintptr_t</name></type> <name>Ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>BaseIter</name> <init>= <expr><name>IdDeclInfo</name><operator>::</operator><name>DeclsTy</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>


<macro><name>iterator</name><argument_list>(<argument>NamedDecl *D</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Ptr</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Invalid Ptr!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>



<macro><name>iterator</name><argument_list>(<argument>BaseIter I</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>bool</name> <macro><name>isIterator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Ptr</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>BaseIter</name> <macro><name>getIterator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIterator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Ptr not an iterator!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>BaseIter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>incrementSlowCase</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isIterator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><call><name>getIterator</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIterator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>incrementSlowCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>explicit</name></type> <name>IdentifierResolver</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>IdentifierResolver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>iterator</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>











<decl_stmt><decl><type><name>bool</name></type> <name>isDeclInScope</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>DeclContext</name> <operator>*</operator><name>Ctx</name></expr></argument>, <argument><expr><name>Scope</name> <operator>*</operator><name>S</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <name>AllowInlineNamespace</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>AddDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>RemoveDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>InsertDeclAfter</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>Pos</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>bool</name></type> <name>tryAddTopLevelDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IdDeclInfoMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdDeclInfoMap</name> <modifier>*</modifier></type><name>IdDeclInfos</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>updatingIdentifier</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>II</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readingIdentifier</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>II</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>isDeclPtr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>IdDeclInfo</name> <modifier>*</modifier></type><name>toIdDeclInfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <literal type="string">"Ptr not a IdDeclInfo* !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>IdDeclInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
