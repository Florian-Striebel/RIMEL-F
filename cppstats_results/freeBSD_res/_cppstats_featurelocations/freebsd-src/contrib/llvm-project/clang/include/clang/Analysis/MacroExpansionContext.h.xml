<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/MacroExpansionContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_MACROEXPANSIONCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_MACROEXPANSIONCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MacroExpansionRangeRecorder</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
















































<decl_stmt><decl><type><name>class</name></type> <name>MacroExpansionContext</name> <block>{<block_content>
<label><name>public</name>:</label>



<function_decl><type><name>explicit</name></type> <name>MacroExpansionContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>registerForPreprocessor</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>getExpandedText</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>MacroExpansionLoc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>getOriginalText</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>MacroExpansionLoc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpExpansionRangesToStream</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpExpandedTextsToStream</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dumpExpansionRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dumpExpandedTexts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>detail</name><operator>::</operator><name>MacroExpansionRangeRecorder</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>MacroExpansionText</name> <init>= <expr><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">40</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ExpansionMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>MacroExpansionText</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ExpansionRangeMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ExpansionMap</name></type> <name>ExpandedTokens</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ExpansionRangeMap</name></type> <name>ExpansionRanges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Preprocessor</name> <modifier>*</modifier></type><name>PP</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>*</modifier></type><name>SM</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>onTokenLexed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
