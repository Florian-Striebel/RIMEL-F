<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ExternalASTSource.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_EXTERNALASTSOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_EXTERNALASTSOURCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PointerLikeTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTSourceDescriptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXCtorInitializer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclarationName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ExternalASTSource</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>ExternalASTSource</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name>ExternalSemaSource</name></expr>;



<expr><name>uint32_t</name> <name>CurrentGeneration</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ExternalASTSource</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>ExternalASTSource</name><argument_list>()</argument_list></call></expr>;



<expr><name>class</name> <name>Deserializing</name> <block>{
<expr><name>ExternalASTSource</name> <operator>*</operator><name>Source</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>Deserializing</name><argument_list>(<argument><expr><name>ExternalASTSource</name> <operator>*</operator><name>source</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Source</name><argument_list>(<argument>source</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Source</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Source</name><operator>-&gt;</operator><name>StartedDeserializing</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>Deserializing</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Source</name><operator>-&gt;</operator><name>FinishedDeserializing</name></name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr>;




<expr><name>uint32_t</name> <macro><name>getGeneration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurrentGeneration</name></expr>;</return> }</block>








<name>virtual</name> <name>Decl</name> <operator>*</operator><macro><name>GetExternalDecl</name><argument_list>(<argument>uint32_t ID</argument>)</argument_list></macro></expr>;







<expr><name>virtual</name> <name>Selector</name> <macro><name>GetExternalSelector</name><argument_list>(<argument>uint32_t ID</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>uint32_t</name> <call><name>GetNumExternalSelectors</name><argument_list>()</argument_list></call></expr>;









<expr><name>virtual</name> <name>Stmt</name> <operator>*</operator><macro><name>GetExternalDeclStmt</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>CXXCtorInitializer</name> <operator>*</operator><operator>*</operator><macro><name>GetExternalCXXCtorInitializers</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>CXXBaseSpecifier</name> <operator>*</operator><macro><name>GetExternalCXXBaseSpecifiers</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro></expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>updateOutOfDateIdentifier</name><argument_list>(<argument>IdentifierInfo &amp;II</argument>)</argument_list></macro> <block>{}</block>








<name>virtual</name> <name>bool</name>
<macro><name>FindExternalVisibleDeclsByName</name><argument_list>(<argument>const DeclContext *DC</argument>, <argument>DeclarationName Name</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>completeVisibleDeclsMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator><name>DC</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name> <name>Module</name> <operator>*</operator><macro><name>getModule</name><argument_list>(<argument>unsigned ID</argument>)</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>


<name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ASTSourceDescriptor</name></expr></argument>&gt;</argument_list></name> <macro><name>getSourceDescriptor</name><argument_list>(<argument>unsigned ID</argument>)</argument_list></macro></expr>;

enum <expr><name>ExtKind</name> <block>{ <expr><name>EK_Always</name></expr>, <expr><name>EK_Never</name></expr>, <expr><name>EK_ReplyHazy</name></expr> }</block></expr>;

<expr><name>virtual</name> <name>ExtKind</name> <call><name>hasExternalDefinitions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;








<expr><name>virtual</name> <name>void</name>
<call><name>FindExternalLexicalDecls</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator><name>DC</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Decl</name><operator>::</operator><name>Kind</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>IsKindWeWant</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <macro><name>FindExternalLexicalDecls</name><argument_list>(<argument>const DeclContext *DC</argument>,
<argument>SmallVectorImpl&lt;Decl *&gt; &amp;Result</argument>)</argument_list></macro> <block>{
<expr><call><name>FindExternalLexicalDecls</name><argument_list>(<argument><expr><name>DC</name></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><name>Decl</name><operator>::</operator><name>Kind</name><operator>)</operator> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;
}</block>




<name>virtual</name> <name>void</name> <macro><name>FindFileRegionDecls</name><argument_list>(<argument>FileID File</argument>, <argument>unsigned Offset</argument>,
<argument>unsigned Length</argument>,
<argument>SmallVectorImpl&lt;Decl *&gt; &amp;Decls</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>CompleteRedeclChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>void</name> <call><name>CompleteType</name><argument_list>(<argument><expr><name>TagDecl</name> <operator>*</operator><name>Tag</name></expr></argument>)</argument_list></call></expr>;







<expr><name>virtual</name> <name>void</name> <call><name>CompleteType</name><argument_list>(<argument><expr><name>ObjCInterfaceDecl</name> <operator>*</operator><name>Class</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name> <name>void</name> <call><name>ReadComments</name><argument_list>()</argument_list></call></expr>;






<expr><name>virtual</name> <name>void</name> <call><name>StartedDeserializing</name><argument_list>()</argument_list></call></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>FinishedDeserializing</name><argument_list>()</argument_list></call></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>StartTranslationUnit</name><argument_list>(<argument><expr><name>ASTConsumer</name> <operator>*</operator><name>Consumer</name></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>void</name> <call><name>PrintStats</name><argument_list>()</argument_list></call></expr>;




























<expr><name>virtual</name> <name>bool</name> <call><name>layoutRecordType</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>Record</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>Size</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>Alignment</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FieldOffsets</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CharUnits</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BaseOffsets</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CharUnits</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>VirtualBaseOffsets</name></expr></argument>)</argument_list></call></expr>;





struct <expr><name>MemoryBufferSizes</name> <block>{
<expr><name>size_t</name> <name>malloc_bytes</name></expr>;
<expr><name>size_t</name> <name>mmap_bytes</name></expr>;

<macro><name>MemoryBufferSizes</name><argument_list>(<argument>size_t malloc_bytes</argument>, <argument>size_t mmap_bytes</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>malloc_bytes</name><argument_list>(<argument><expr><name>malloc_bytes</name></expr></argument>)</argument_list></call></expr>, <macro><name>mmap_bytes</name><argument_list>(<argument>mmap_bytes</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;



<expr><name>MemoryBufferSizes</name> <macro><name>getMemoryBufferSizes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>MemoryBufferSizes</name> <call><name>sizes</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getMemoryBufferSizes</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>sizes</name></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>getMemoryBufferSizes</name><argument_list>(<argument>MemoryBufferSizes &amp;sizes</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>virtual</name> <name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ClassID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ExternalASTSource *S</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>


<name>protected</name><operator>:</operator>
<specifier>static</specifier> <name>DeclContextLookupResult</name>
<macro><name>SetExternalVisibleDeclsForName</name><argument_list>(<argument>const DeclContext *DC</argument>,
<argument>DeclarationName Name</argument>,
<argument>ArrayRef&lt;NamedDecl*&gt; Decls</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>DeclContextLookupResult</name>
<macro><name>SetNoExternalVisibleDeclsForName</name><argument_list>(<argument>const DeclContext *DC</argument>,
<argument>DeclarationName Name</argument>)</argument_list></macro></expr>;


<expr><name>uint32_t</name> <call><name>incrementGeneration</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>







<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>typename</name> <name>OffsT</name></expr><operator>,</operator> <expr><name>T</name><operator>*</operator> <operator>(</operator><name>ExternalASTSource</name><operator>::</operator><operator>*</operator><name>Get</name><operator>)</operator><operator>(</operator><name>OffsT</name> <name>Offset</name><operator>)</operator><operator>&gt;</operator>
struct <name>LazyOffsetPtr</name> <block>{





<expr><name>mutable</name> <name>uint64_t</name> <name>Ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>LazyOffsetPtr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>LazyOffsetPtr</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>reinterpret_cast&lt;uint64_t&gt;(Ptr)</argument>)</argument_list></macro> <block>{}</block>

<name>explicit</name> <macro><name>LazyOffsetPtr</name><argument_list>(<argument>uint64_t Offset</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>(Offset &lt;&lt; <literal type="number">1</literal>) | <literal type="number">0x01</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>Offset</name> <operator>&amp;&amp;</operator> <literal type="string">"Offsets must require &lt; 63 bits"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>LazyOffsetPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>T</name> <operator>*</operator><name>Ptr</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>Ptr</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>LazyOffsetPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>uint64_t</name> <name>Offset</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>Offset</name> <operator>&amp;&amp;</operator> <literal type="string">"Offsets must require &lt; 63 bits"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <operator>(</operator><name>Offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>get</name><argument_list>(<argument><expr><name>ExternalASTSource</name> <operator>*</operator><name>Source</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isOffset</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Source</name> <operator>&amp;&amp;</operator>
<literal type="string">"Cannot deserialize a lazy pointer without an AST source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>Source</name><operator>-&gt;*</operator><name>Get</name><operator>)</operator><operator>(</operator><name>Ptr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Owner</name></expr><operator>,</operator> <expr><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><call><call><name>void</name> <argument_list>(<argument><expr><name>ExternalASTSource</name><operator>::</operator><operator>*</operator><name>Update</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>Owner</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name>LazyGenerationalUpdatePtr</name> <block>{


struct <expr><name>LazyData</name> <block>{
<expr><name>ExternalASTSource</name> <operator>*</operator><name>ExternalSource</name></expr>;
<expr><name>uint32_t</name> <name>LastGeneration</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>T</name> <name>LastValue</name></expr>;

<macro><name>LazyData</name><argument_list>(<argument>ExternalASTSource *Source</argument>, <argument>T Value</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>ExternalSource</name><argument_list>(<argument><expr><name>Source</name></expr></argument>)</argument_list></call></expr>, <macro><name>LastValue</name><argument_list>(<argument>Value</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;


<expr><name>using</name> <name>ValueType</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LazyData</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>ValueType</name> <name>Value</name></expr>;

<macro><name>LazyGenerationalUpdatePtr</name><argument_list>(<argument>ValueType V</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Value</name><argument_list>(<argument>V</argument>)</argument_list></macro> <expr><block>{}</block>


<specifier>static</specifier> <name>ValueType</name> <macro><name>makeValue</name><argument_list>(<argument>const ASTContext &amp;Ctx</argument>, <argument>T Value</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>LazyGenerationalUpdatePtr</name><argument_list>(<argument>const ASTContext &amp;Ctx</argument>, <argument>T Value = T()</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Value</name><argument_list>(<argument>makeValue(Ctx, Value)</argument>)</argument_list></macro> <block>{}</block>



enum <name>NotUpdatedTag</name> <block>{ <expr><name>NotUpdated</name></expr> }</block></expr>;
<macro><name>LazyGenerationalUpdatePtr</name><argument_list>(<argument>NotUpdatedTag</argument>, <argument>T Value = T()</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Value</name><argument_list>(<argument>Value</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <macro><name>markIncomplete</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>Value</name><operator>.</operator><name>template</name></name> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>LazyData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>LastGeneration</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block>


<name>void</name> <macro><name>set</name><argument_list>(<argument>T NewValue</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>LazyVal</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>template</name></name> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>LazyData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>LazyVal</name><operator>-&gt;</operator><name>LastValue</name></name> <operator>=</operator> <name>NewValue</name></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<name>Value</name> <operator>=</operator> <name>NewValue</name></expr>;
}</block>


<name>void</name> <macro><name>setNotUpdated</name><argument_list>(<argument>T NewValue</argument>)</argument_list></macro> <block>{ <expr><name>Value</name> <operator>=</operator> <name>NewValue</name></expr>; }</block>


<name>T</name> <macro><name>get</name><argument_list>(<argument>Owner O</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>LazyVal</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>template</name></name> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>LazyData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>LazyVal</name><operator>-&gt;</operator><name>LastGeneration</name></name> <operator>!=</operator> <call><name><name>LazyVal</name><operator>-&gt;</operator><name>ExternalSource</name><operator>-&gt;</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>LazyVal</name><operator>-&gt;</operator><name>LastGeneration</name></name> <operator>=</operator> <call><name><name>LazyVal</name><operator>-&gt;</operator><name>ExternalSource</name><operator>-&gt;</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>LazyVal</name><operator>-&gt;</operator><name>ExternalSource</name></name><operator>-&gt;*</operator><name>Update</name><operator>)</operator><operator>(</operator><name>O</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><name><name>LazyVal</name><operator>-&gt;</operator><name>LastValue</name></name></expr>;</return>
}
return <function_decl><type><name><name>Value</name><operator>.</operator><name>template</name></name></type> <name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
}


T <macro><name>getNotUpdated</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>LazyVal</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>template</name></name> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>LazyData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>LazyVal</name><operator>-&gt;</operator><name>LastValue</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>Value</name><operator>.</operator><name>template</name></name> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}

void <expr_stmt><expr><operator>*</operator><macro><name>getOpaqueValue</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Value</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>LazyGenerationalUpdatePtr</name></type> <name>getFromOpaqueValue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LazyGenerationalUpdatePtr</name><argument_list>(<argument><expr><name>ValueType</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Owner</name></expr><operator>,</operator> <expr><name>typename</name> <name>T</name></expr><operator>,</operator>
<expr><call><call><name>void</name> <argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>ExternalASTSource</name><operator>::</operator><operator>*</operator><name>Update</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>Owner</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;
<argument><expr><name>clang</name><operator>::</operator><name><name>LazyGenerationalUpdatePtr</name><argument_list type="generic">&lt;<argument><expr><name>Owner</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Update</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>Ptr</name> <operator>=</operator> <name>clang</name><operator>::</operator><name><name>LazyGenerationalUpdatePtr</name><argument_list type="generic">&lt;<argument><expr><name>Owner</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Update</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>Ptr P</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>P</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr> }</block>
<specifier>static</specifier> <name>Ptr</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{ <return>return <expr><name>Ptr</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>=
<expr><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>NumLowBitsAvailable</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

}

namespace <macro><name>clang</name></macro> <block>{<block_content>







<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>Source</name></expr></argument>,
<argument><expr><name>void</name> <operator>(</operator><name>Source</name><operator>::</operator><operator>*</operator><name>Loader</name><operator>)</operator><operator>(</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator></expr></argument>,
<argument><expr><name>unsigned</name> <name>LoadedStorage</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>unsigned</name> <name>LocalStorage</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>LazyVector</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LoadedStorage</name></expr></argument>&gt;</argument_list></name></type> <name>Loaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LocalStorage</name></expr></argument>&gt;</argument_list></name></type> <name>Local</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
















<decl_stmt><decl><type><name>class</name></type> <name>iterator</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>iterator_adaptor_base</name><argument_list type="generic">&lt;
<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>T</name> <operator>*</operator></expr></argument>, <argument><expr><name>T</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name>LazyVector</name></expr>;

<expr><name>LazyVector</name> <operator>*</operator><name>Self</name></expr>;

<macro><name>iterator</name><argument_list>(<argument>LazyVector *Self</argument>, <argument>int Position</argument>)</argument_list></macro>
<operator>:</operator> <expr><name>iterator</name><operator>::</operator><call><name>iterator_adaptor_base</name><argument_list>(<argument><expr><name>Position</name></expr></argument>)</argument_list></call></expr>, <macro><name>Self</name><argument_list>(<argument>Self</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isLoaded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>I</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block>

<name>public</name><operator>:</operator>
<call><name>iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>iterator</name><argument_list>(<argument>nullptr</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>

<name>typename</name> <name>iterator</name><operator>::</operator><name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isLoaded</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Self</name><operator>-&gt;</operator><name>Loaded</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>I</name></name></expr>]</index></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>Self</name><operator>-&gt;</operator><name>Local</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>I</name></name></expr>]</index></expr>;</return>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name>Source</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>LocalOnly</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>LocalOnly</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>source</name><operator>-&gt;*</operator><name>Loader</name><operator>)</operator><operator>(</operator><name>Loaded</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Loaded</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>Local</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>LocalValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Local</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>LocalValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>From</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>To</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>From</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>To</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Loaded</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>*</operator><name>From</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>*</operator><name>To</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>From</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Loaded</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>*</operator><name>From</name></expr></argument>, <argument><expr><call><name><name>Loaded</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>From</name> <operator>=</operator> <call><name>begin</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>Local</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>*</operator><name>From</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>*</operator><name>To</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>LazyDeclStmtPtr</name> <init>=
<expr><name><name>LazyOffsetPtr</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ExternalASTSource</name><operator>::</operator><name>GetExternalDeclStmt</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>LazyDeclPtr</name> <init>=
<expr><name><name>LazyOffsetPtr</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ExternalASTSource</name><operator>::</operator><name>GetExternalDecl</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>LazyCXXCtorInitializersPtr</name> <init>=
<expr><name><name>LazyOffsetPtr</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ExternalASTSource</name><operator>::</operator><name>GetExternalCXXCtorInitializers</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>LazyCXXBaseSpecifiersPtr</name> <init>=
<expr><name><name>LazyOffsetPtr</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ExternalASTSource</name><operator>::</operator><name>GetExternalCXXBaseSpecifiers</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
