<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_CONSUMED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_CONSUMED_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/Analyses/PostOrderCFGView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBindTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PostOrderCFGView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>consumed</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ConsumedStmtVisitor</name></decl>;</decl_stmt>

<enum>enum <name>ConsumedState</name> <block>{

<decl><name>CS_None</name></decl>,

<decl><name>CS_Unknown</name></decl>,
<decl><name>CS_Unconsumed</name></decl>,
<decl><name>CS_Consumed</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>using</name></type> <name>OptionalNotes</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>DelayedDiag</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>, <argument><expr><name>OptionalNotes</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>DiagList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>DelayedDiag</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConsumedWarningsHandlerBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ConsumedWarningsHandlerBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>emitDiagnostics</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>warnLoopStateMismatch</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>VariableName</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>










<function><type><name>virtual</name> <name>void</name></type> <name>warnParamReturnTypestateMismatch</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>VariableName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExpectedState</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ObservedState</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>warnParamTypestateMismatch</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LOC</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExpectedState</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ObservedState</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>warnReturnTypestateForUnconsumableType</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>TypeName</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>










<function><type><name>virtual</name> <name>void</name></type> <name>warnReturnTypestateMismatch</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExpectedState</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ObservedState</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>warnUseOfTempInInvalidState</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>MethodName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>











<function><type><name>virtual</name> <name>void</name></type> <name>warnUseInInvalidState</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>MethodName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>VariableName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConsumedStateMap</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>VarMapType</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>ConsumedState</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TmpMapType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator></expr></argument>, <argument><expr><name>ConsumedState</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>Reachable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>From</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VarMapType</name></type> <name>VarMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TmpMapType</name></type> <name>TmpMap</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ConsumedStateMap</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ConsumedStateMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConsumedStateMap</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Reachable</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Reachable</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>From</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>From</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VarMap</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>VarMap</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TmpMap</name><argument_list>()</argument_list></macro> <expr><block>{}</block>



<name>void</name> <macro><name>checkParamsForReturnTypestate</name><argument_list>(<argument>SourceLocation BlameLoc</argument>,
<argument>ConsumedWarningsHandlerBase &amp;WarningsHandler</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>clearTemporaries</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>ConsumedState</name></type> <name>getState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>Var</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>ConsumedState</name></type> <name>getState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>Tmp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConsumedStateMap</name> <modifier>&amp;</modifier></type><name>Other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>intersectAtLoopHead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>LoopHead</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>LoopBack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConsumedStateMap</name> <modifier>*</modifier></type><name>LoopBackStates</name></decl></parameter>,
<parameter><decl><type><name>ConsumedWarningsHandlerBase</name> <modifier>&amp;</modifier></type><name>WarningsHandler</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isReachable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Reachable</name></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>markUnreachable</name><parameter_list>()</parameter_list>;</function_decl>




<function><type><name>void</name></type> <name>setSource</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>From</name></name> <operator>=</operator> <name>Source</name></expr>;</expr_stmt> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>Var</name></decl></parameter>, <parameter><decl><type><name>ConsumedState</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>Tmp</name></decl></parameter>, <parameter><decl><type><name>ConsumedState</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>Tmp</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ConsumedStateMap</name> <operator>*</operator><name>Other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConsumedBlockInfo</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConsumedStateMap</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>StateMapsArray</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name> <name>VisitOrder</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ConsumedBlockInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>ConsumedBlockInfo</name><argument_list>(<argument>unsigned int NumBlocks</argument>, <argument>PostOrderCFGView *SortedGraph</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>StateMapsArray</name><argument_list>(<argument><expr><name>NumBlocks</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>VisitOrder</name><argument_list>(<argument>NumBlocks</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{
<expr><name>unsigned</name> <name>int</name> <name>VisitOrderCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>BI</name> <range>: <expr><operator>*</operator><name>SortedGraph</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>VisitOrder</name><index>[<expr><call><name><name>BI</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>VisitOrderCounter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
}</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>allBackEdgesVisited</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>CurrBlock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>TargetBlock</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>addInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Block</name></expr></argument>, <argument><expr><name>ConsumedStateMap</name> <operator>*</operator><name>StateMap</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConsumedStateMap</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>OwnedStateMap</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>addInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Block</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConsumedStateMap</name></expr></argument>&gt;</argument_list></name> <name>StateMap</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>ConsumedStateMap</name><modifier>*</modifier></type> <name>borrowInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>discardInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConsumedStateMap</name></expr></argument>&gt;</argument_list></name> <call><name>getInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>isBackEdge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>To</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isBackEdgeTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ConsumedAnalyzer</name> <block>{<block_content>
<decl_stmt><decl><type><name>ConsumedBlockInfo</name></type> <name>BlockInfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConsumedStateMap</name></expr></argument>&gt;</argument_list></name> <name>CurrStates</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ConsumedState</name></type> <name>ExpectedReturnState</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>determineExpectedReturnState</name><parameter_list>(<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>AC</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>splitState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>CurrBlock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConsumedStmtVisitor</name> <modifier>&amp;</modifier></type><name>Visitor</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>ConsumedWarningsHandlerBase</name> <modifier>&amp;</modifier></type><name>WarningsHandler</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ConsumedAnalyzer</name><argument_list>(<argument><expr><name>ConsumedWarningsHandlerBase</name> <operator>&amp;</operator><name>WarningsHandler</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WarningsHandler</name><argument_list>(<argument>WarningsHandler</argument>)</argument_list></macro> <block>{}</block>

<name>ConsumedState</name> <macro><name>getExpectedReturnState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ExpectedReturnState</name></expr>;</return> }</block></expr></expr_stmt>







<function_decl><type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>AC</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
