<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/AnyCall.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANY_CALL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANY_CALL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprObjC.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>AnyCall</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{

<decl><name>Function</name></decl>,


<decl><name>ObjCMethod</name></decl>,


<decl><name>Block</name></decl>,



<decl><name>Destructor</name></decl>,


<decl><name>Constructor</name></decl>,


<decl><name>InheritedConstructor</name></decl>,


<decl><name>Allocator</name></decl>,



<decl><name>Deallocator</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>





<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>K</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>E</name><argument_list>(<argument>CE</argument>)</argument_list></macro> <block>{
<expr><name>D</name> <operator>=</operator> <call><name><name>CE</name><operator>-&gt;</operator><name>getCalleeDecl</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>K</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name><name>CE</name><operator>-&gt;</operator><name>getCallee</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>getAs</name><argument_list type="generic">&lt;<argument><expr><name>BlockPointerType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>Block</name></expr>
</then><else>: <expr><name>Function</name></expr></else></ternary></expr>;
<if_stmt><if>if <condition>(<expr><name>D</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>K</name> <operator>==</operator> <name>Function</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>K</name> <operator>==</operator> <name>Block</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>BlockDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>D</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjCMessageExpr</name> <operator>*</operator><name>ME</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><call><name><name>ME</name><operator>-&gt;</operator><name>getMethodDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>ObjCMethod</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXNewExpr</name> <operator>*</operator><name>NE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><call><name><name>NE</name><operator>-&gt;</operator><name>getOperatorNew</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>Allocator</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXDeleteExpr</name> <operator>*</operator><name>NE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><call><name><name>NE</name><operator>-&gt;</operator><name>getOperatorDelete</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>Deallocator</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXConstructExpr</name> <operator>*</operator><name>NE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><call><name><name>NE</name><operator>-&gt;</operator><name>getConstructor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>Constructor</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXInheritedCtorInitExpr</name> <operator>*</operator><name>CIE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>CIE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><call><name><name>CIE</name><operator>-&gt;</operator><name>getConstructor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>InheritedConstructor</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXDestructorDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>Destructor</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXConstructorDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>Constructor</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjCMethodDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>D</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>K</name><argument_list>(<argument>ObjCMethod</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AnyCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>E</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>D</name><argument_list>(<argument>D</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>K</name> <operator>=</operator> <name>Constructor</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (isa &lt;CXXDestructorDecl&gt;(D</block></if></if_stmt>))</block> <block>{
<expr><name>K</name> <operator>=</operator> <name>Destructor</name></expr>;
}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>K</name> <operator>=</operator> <name>Function</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>AnyCall</name></expr></argument>&gt;</argument_list></name></type> <name>forExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>ME</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMessageExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CallExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CXNE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXNewExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>CXNE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CXDE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXDeleteExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>CXDE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CXCE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>CXCE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CXCIE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXInheritedCtorInitExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>CXCIE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>AnyCall</name></expr></argument>&gt;</argument_list></name></type> <name>forDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>MD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name>AnyCall</name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>parameters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>FD</name><operator>-&gt;</operator><name>parameters</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>MD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>parameters</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>BD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BlockDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>BD</name><operator>-&gt;</operator><name>parameters</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>param_const_iterator</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>param_const_iterator</name> <macro><name>param_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>parameters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>param_const_iterator</name> <macro><name>param_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>parameters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>param_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>parameters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>param_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>parameters</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>QualType</name></type> <name>getReturnType</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list> const <block>{<block_content>
<switch>switch <condition>(<expr><name>K</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Function</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CallExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getCallReturnType</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getReturnType</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>ObjCMethod</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMessageExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getCallReturnType</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getReturnType</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>Block</name></expr>:</case>


<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CallExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getCallReturnType</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>Destructor</name></expr>:</case>
<case>case <expr><name>Constructor</name></expr>:</case>
<case>case <expr><name>InheritedConstructor</name></expr>:</case>
<case>case <expr><name>Allocator</name></expr>:</case>
<case>case <expr><name>Deallocator</name></expr>:</case>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getReturnType</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown AnyCall::Kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>getIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>ND</name> <init>= <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ND</name><operator>-&gt;</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
}

const <expr_stmt><expr><name>Decl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>D</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>E</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>K</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>E</name><operator>-&gt;</operator><name>dump</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>D</name><operator>-&gt;</operator><name>dump</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}
}<empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
