<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclOpenMP.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLOPENMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLOPENMP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExternalASTSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/OpenMPClause.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>OMPDeclarativeDirective</name> <range>: <expr><name>public</name> <name>U</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTDeclReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTDeclWriter</name></expr>;


<expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getClauses</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>OMPChildren</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Params</name></expr></argument>&gt;</argument_list></name></type>
<name>OMPDeclarativeDirective</name><argument_list>(<argument><expr><name>Params</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <range>: <macro><name>U</name><argument_list>(<argument>std::forward&lt;Params&gt;(P)...</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Params</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>T</name> <operator>*</operator><macro><name>createDirective</name><argument_list>(<argument>const ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>ArrayRef&lt;OMPClause *&gt; Clauses</argument>, <argument>unsigned NumChildren</argument>,
<argument>Params &amp;&amp;... P</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><name>Inst</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>C</argument>, <argument>DC</argument>, <argument>size(Clauses.size(), NumChildren)</argument>)</argument_list></macro>
<call><name>T</name><argument_list>(<argument><expr><name>DC</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>Inst</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name>OMPChildren</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>Inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Clauses</name></expr></argument>,
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>NumChildren</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Inst</name><operator>-&gt;</operator><name>Data</name><operator>-&gt;</operator><name>setClauses</name></name><argument_list>(<argument><expr><name>Clauses</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Inst</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Params</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>T</name> <modifier>*</modifier></type><name>createEmptyDirective</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>unsigned</name> <name>ID</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>NumClauses</name></expr></argument>, <argument><expr><name>unsigned</name> <name>NumChildren</name></expr></argument>,
<argument><expr><name>Params</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Inst</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>C</argument>, <argument>ID</argument>, <argument>size(NumClauses, NumChildren)</argument>)</argument_list></macro>
<call><name>T</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Inst</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name>OMPChildren</name><operator>::</operator><call><name>CreateEmpty</name><argument_list>(
<argument><expr><name>Inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NumClauses</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NumChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Inst</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumClauses</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumChildren</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>OMPChildren</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>NumClauses</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>NumChildren</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumClauses</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumClauses</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>OMPClause</name> <modifier>*</modifier></type><name>getClause</name><argument_list>(<argument><expr><name>unsigned</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>clauses</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>clauses</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call></expr>;</return>
}
}<empty_stmt>;</empty_stmt>













<decl_stmt><decl><type><name>class</name> <name>OMPThreadPrivateDecl</name></type> <name>final</name> <range>: <expr><name>public</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<macro><name>OMPThreadPrivateDecl</name><argument_list>(<argument>DeclContext *DC = nullptr</argument>,
<argument>SourceLocation L = SourceLocation()</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>OMPDeclarativeDirective</name></macro><expr><operator>&lt;</operator><name>Decl</name><operator>&gt;</operator><operator>(</operator><name>OMPThreadPrivate</name>, <name>DC</name>, <name>L</name><operator>)</operator> <block>{}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getVars</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <operator>*</operator><operator>*</operator><name>Storage</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>, <argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getVars</name><argument_list>()</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><operator>*</operator><name>Storage</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeMutableArrayRef</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>, <argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <call><name>setVars</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>VL</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>OMPThreadPrivateDecl</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>SourceLocation L</argument>,
<argument>ArrayRef&lt;Expr *&gt; VL</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>OMPThreadPrivateDecl</name> <operator>*</operator><macro><name>CreateDeserialized</name><argument_list>(<argument>ASTContext &amp;C</argument>,
<argument>unsigned ID</argument>, <argument>unsigned N</argument>)</argument_list></macro></expr>;

<typedef>typedef <expr_stmt><expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>varlist_iterator</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>varlist_const_iterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>varlist_iterator</name></expr></argument>&gt;</argument_list></name> <name>varlist_range</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>varlist_const_iterator</name></expr></argument>&gt;</argument_list></name> <name>varlist_const_range</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>unsigned</name> <macro><name>varlist_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>varlist_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>varlist_range</name></type> <name>varlists</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>varlist_range</name><argument_list>(<argument><expr><call><name>varlist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varlist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>varlist_const_range</name> <macro><name>varlists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>varlist_const_range</name><argument_list>(<argument><expr><call><name>varlist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varlist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>varlist_iterator</name></type> <name>varlist_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>varlist_iterator</name></type> <name>varlist_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>varlist_const_iterator</name> <macro><name>varlist_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>varlist_const_iterator</name> <macro><name>varlist_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classofKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>K</name> <operator>==</operator> <name>OMPThreadPrivate</name></expr>;</return> </block_content>}</block></function>
};











<decl_stmt><decl><type><name>class</name> <name>OMPDeclareReductionDecl</name></type> <name>final</name> <range>: <expr><name>public</name> <name>ValueDecl</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>DeclContext</name> <block>{<block_content>


<label><name>public</name>:</label>
<enum>enum <name>InitKind</name> <block>{
<decl><name>CallInit</name></decl>,
<decl><name>DirectInit</name></decl>,
<decl><name>CopyInit</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclReader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Combiner</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Initializer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>In</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Out</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Priv</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Orig</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>LazyDeclPtr</name></type> <name>PrevDeclInScope</name></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<macro><name>OMPDeclareReductionDecl</name><argument_list>(<argument>Kind DK</argument>, <argument>DeclContext *DC</argument>, <argument>SourceLocation L</argument>,
<argument>DeclarationName Name</argument>, <argument>QualType Ty</argument>,
<argument>OMPDeclareReductionDecl *PrevDeclInScope</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>void</name></type> <name>setPrevDeclInScope</name><parameter_list>(<parameter><decl><type><name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>Prev</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>PrevDeclInScope</name> <operator>=</operator> <name>Prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>

<function_decl><type><specifier>static</specifier> <name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type>
<name>Create</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>PrevDeclInScope</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>CreateDeserialized</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>Expr</name> <modifier>*</modifier></type><name>getCombiner</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Combiner</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCombiner</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Combiner</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Expr</name> <modifier>*</modifier></type><name>getCombinerIn</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>In</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCombinerIn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>In</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Expr</name> <modifier>*</modifier></type><name>getCombinerOut</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Out</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCombinerOut</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Out</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCombiner</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Combiner</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setCombinerData</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>InE</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>OutE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>In</name> <operator>=</operator> <name>InE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Out</name> <operator>=</operator> <name>OutE</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>Expr</name> <modifier>*</modifier></type><name>getInitializer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Initializer</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getInitializer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Initializer</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>InitKind</name> <macro><name>getInitializerKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>OMPDeclareReductionDeclBits</name><operator>.</operator><name>InitializerKind</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Expr</name> <modifier>*</modifier></type><name>getInitOrig</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Orig</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getInitOrig</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Orig</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Expr</name> <modifier>*</modifier></type><name>getInitPriv</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Priv</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getInitPriv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Priv</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setInitializer</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>InitKind</name></type> <name>IK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Initializer</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>OMPDeclareReductionDeclBits</name><operator>.</operator><name>InitializerKind</name></name> <operator>=</operator> <name>IK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setInitializerData</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>OrigE</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>PrivE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Orig</name> <operator>=</operator> <name>OrigE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Priv</name> <operator>=</operator> <name>PrivE</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>getPrevDeclInScope</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>OMPDeclareReductionDecl</name> <operator>*</operator><macro><name>getPrevDeclInScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classofKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>K</name> <operator>==</operator> <name>OMPDeclareReduction</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>castToDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPDeclareReductionDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>OMPDeclareReductionDecl</name> <modifier>*</modifier></type><name>castFromDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPDeclareReductionDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>









<decl_stmt><decl><type><name>class</name> <name>OMPDeclareMapperDecl</name></type> <name>final</name> <range>: <expr><name>public</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>DeclContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclWriter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>MapperVarRef</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DeclarationName</name></type> <name>VarName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LazyDeclPtr</name></type> <name>PrevDeclInScope</name></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<macro><name>OMPDeclareMapperDecl</name><argument_list>(<argument>DeclContext *DC</argument>, <argument>SourceLocation L</argument>, <argument>DeclarationName Name</argument>,
<argument>QualType Ty</argument>, <argument>DeclarationName VarName</argument>,
<argument>OMPDeclareMapperDecl *PrevDeclInScope</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OMPDeclareMapper</name></expr></argument>, <argument><expr><name>DC</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>, <argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>DeclContext</name><argument_list>(<argument><expr><name>OMPDeclareMapper</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VarName</name><argument_list>(<argument><expr><name>VarName</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>PrevDeclInScope</name><argument_list>(<argument>PrevDeclInScope</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>setPrevDeclInScope</name><argument_list>(<argument>OMPDeclareMapperDecl *Prev</argument>)</argument_list></macro> <block>{
<expr><name>PrevDeclInScope</name> <operator>=</operator> <name>Prev</name></expr>;
}</block>

<name>public</name><operator>:</operator>

<specifier>static</specifier> <name>OMPDeclareMapperDecl</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>SourceLocation L</argument>, <argument>DeclarationName Name</argument>,
<argument>QualType T</argument>, <argument>DeclarationName VarName</argument>,
<argument>ArrayRef&lt;OMPClause *&gt; Clauses</argument>,
<argument>OMPDeclareMapperDecl *PrevDeclInScope</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>OMPDeclareMapperDecl</name> <modifier>*</modifier></type><name>CreateDeserialized</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>N</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>using</name></type> <name>clauselist_iterator</name> <init>= <expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_const_iterator</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_const_range</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>clauselist_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumClauses</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>clauselist_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>clauselist_range</name></type> <name>clauselists</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>clauselist_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>clauselist_const_range</name> <macro><name>clauselists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>clauselist_const_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>clauselist_iterator</name></type> <name>clauselist_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>clauselist_iterator</name></type> <name>clauselist_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>clauselist_const_iterator</name> <macro><name>clauselist_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>clauselist_const_iterator</name> <macro><name>clauselist_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>Expr</name> <modifier>*</modifier></type><name>getMapperVarRef</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getMapperVarRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setMapperVarRef</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>MapperVarRefE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>MapperVarRefE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>DeclarationName</name></type> <name>getVarName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>VarName</name></expr>;</return> </block_content>}</block></function>



<function_decl><type><name>OMPDeclareMapperDecl</name> <modifier>*</modifier></type><name>getPrevDeclInScope</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>OMPDeclareMapperDecl</name> <operator>*</operator><macro><name>getPrevDeclInScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classofKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>K</name> <operator>==</operator> <name>OMPDeclareMapper</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>castToDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPDeclareMapperDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPDeclareMapperDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>OMPDeclareMapperDecl</name> <modifier>*</modifier></type><name>castFromDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPDeclareMapperDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name> <name>OMPCapturedExprDecl</name></type> <name>final</name> <range>: <expr><name>public</name> <name>VarDecl</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTDeclReader</name></expr>;
<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<macro><name>OMPCapturedExprDecl</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>, <argument>IdentifierInfo *Id</argument>,
<argument>QualType Type</argument>, <argument>TypeSourceInfo *TInfo</argument>,
<argument>SourceLocation StartLoc</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>VarDecl</name><argument_list>(<argument>OMPCapturedExpr</argument>, <argument>C</argument>, <argument>DC</argument>, <argument>StartLoc</argument>, <argument>StartLoc</argument>, <argument>Id</argument>, <argument>Type</argument>, <argument>TInfo</argument>,
<argument>SC_None</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>setImplicit</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>OMPCapturedExprDecl</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>IdentifierInfo *Id</argument>, <argument>QualType T</argument>,
<argument>SourceLocation StartLoc</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>OMPCapturedExprDecl</name> <operator>*</operator><macro><name>CreateDeserialized</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned ID</argument>)</argument_list></macro></expr>;

<expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <name>LLVM_READONLY</name></expr>;


<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classofKind</name><argument_list>(<argument>Kind K</argument>)</argument_list></macro> <block>{ <return>return <expr><name>K</name> <operator>==</operator> <name>OMPCapturedExpr</name></expr>;</return> }</block>
}</expr>;








<expr><name>class</name> <name>OMPRequiresDecl</name> <name>final</name> <operator>:</operator> <name>public</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTDeclReader</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<macro><name>OMPRequiresDecl</name><argument_list>(<argument>DeclContext *DC</argument>, <argument>SourceLocation L</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>OMPDeclarativeDirective</name></macro><expr><operator>&lt;</operator><name>Decl</name><operator>&gt;</operator><operator>(</operator><name>OMPRequires</name>, <name>DC</name>, <name>L</name><operator>)</operator> <block>{}</block>

<name>public</name><operator>:</operator>

<specifier>static</specifier> <name>OMPRequiresDecl</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>SourceLocation L</argument>, <argument>ArrayRef&lt;OMPClause *&gt; CL</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>OMPRequiresDecl</name> <operator>*</operator><macro><name>CreateDeserialized</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned ID</argument>,
<argument>unsigned N</argument>)</argument_list></macro></expr>;

<expr><name>using</name> <name>clauselist_iterator</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>clauselist_const_iterator</name> <operator>=</operator> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>clauselist_range</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_iterator</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>clauselist_const_range</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_const_iterator</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>unsigned</name> <macro><name>clauselist_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumClauses</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>clauselist_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>clauselist_range</name> <macro><name>clauselists</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>clauselist_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>clauselist_const_range</name> <macro><name>clauselists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>clauselist_const_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>clauselist_iterator</name> <macro><name>clauselist_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>clauselist_iterator</name> <macro><name>clauselist_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>clauselist_const_iterator</name> <macro><name>clauselist_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>clauselist_const_iterator</name> <macro><name>clauselist_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classofKind</name><argument_list>(<argument>Kind K</argument>)</argument_list></macro> <block>{ <return>return <expr><name>K</name> <operator>==</operator> <name>OMPRequires</name></expr>;</return> }</block>
}</expr>;














<expr><name>class</name> <name>OMPAllocateDecl</name> <name>final</name> <operator>:</operator> <name>public</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name><name>OMPDeclarativeDirective</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTDeclReader</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<macro><name>OMPAllocateDecl</name><argument_list>(<argument>DeclContext *DC</argument>, <argument>SourceLocation L</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>OMPDeclarativeDirective</name></macro><expr><operator>&lt;</operator><name>Decl</name><operator>&gt;</operator><operator>(</operator><name>OMPAllocate</name>, <name>DC</name>, <name>L</name><operator>)</operator> <block>{}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getVars</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <operator>*</operator><operator>*</operator><name>Storage</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>, <argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getVars</name><argument_list>()</argument_list></macro> <block>{
<expr><name>auto</name> <operator>*</operator><operator>*</operator><name>Storage</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeMutableArrayRef</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>, <argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <call><name>setVars</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>VL</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>OMPAllocateDecl</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>DeclContext *DC</argument>,
<argument>SourceLocation L</argument>, <argument>ArrayRef&lt;Expr *&gt; VL</argument>,
<argument>ArrayRef&lt;OMPClause *&gt; CL</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>OMPAllocateDecl</name> <operator>*</operator><macro><name>CreateDeserialized</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned ID</argument>,
<argument>unsigned NVars</argument>, <argument>unsigned NClauses</argument>)</argument_list></macro></expr>;

<typedef>typedef <expr_stmt><expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>varlist_iterator</name></expr>;</expr_stmt></typedef></block></expr>
<typedef>typedef <expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>varlist_const_iterator</name></expr>;</expr_stmt></typedef></block></expr>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>varlist_iterator</name></expr></argument>&gt;</argument_list></name> <name>varlist_range</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>varlist_const_iterator</name></expr></argument>&gt;</argument_list></name> <name>varlist_const_range</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_iterator</name> <init>= <expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_const_iterator</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>OMPClause</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>clauselist_const_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>clauselist_const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>varlist_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumChildren</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>varlist_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>clauselist_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getNumClauses</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>clauselist_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>varlist_range</name></type> <name>varlists</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>varlist_range</name><argument_list>(<argument><expr><call><name>varlist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varlist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>varlist_const_range</name> <macro><name>varlists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>varlist_const_range</name><argument_list>(<argument><expr><call><name>varlist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varlist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>varlist_iterator</name></type> <name>varlist_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>varlist_iterator</name></type> <name>varlist_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>varlist_const_iterator</name> <macro><name>varlist_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>varlist_const_iterator</name> <macro><name>varlist_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getVars</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>clauselist_range</name></type> <name>clauselists</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>clauselist_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>clauselist_const_range</name> <macro><name>clauselists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>clauselist_const_range</name><argument_list>(<argument><expr><call><name>clauselist_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>clauselist_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>clauselist_iterator</name></type> <name>clauselist_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>clauselist_iterator</name></type> <name>clauselist_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>clauselist_const_iterator</name> <macro><name>clauselist_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>clauselist_const_iterator</name> <macro><name>clauselist_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Data</name><operator>-&gt;</operator><name>getClauses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classofKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>K</name> <operator>==</operator> <name>OMPAllocate</name></expr>;</return> </block_content>}</block></function>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
