<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_SOURCE_CODE_BUILDERS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_SOURCE_CODE_BUILDERS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>





<function_decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>reallyIgnoreImplicit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>mayEverNeedParens</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>inline</specifier> <name>bool</name></type> <name>needParensBeforeDotOrArrow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>mayEverNeedParens</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>bool</name></type> <name>needParensAfterUnaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>buildParens</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>&amp;</operator><name>E</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>buildDereference</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>&amp;</operator><name>E</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>buildAddressOf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>&amp;</operator><name>E</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>buildDot</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>buildArrow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>&amp;</operator><name>E</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
