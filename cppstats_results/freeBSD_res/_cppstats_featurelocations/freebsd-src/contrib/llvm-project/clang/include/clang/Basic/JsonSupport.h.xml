<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/JsonSupport.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_JSONSUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_JSONSUPPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Indent</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>Space</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsDot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Space</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>IsDot</name></expr> ?</condition><then> <expr><literal type="string">"&amp;nbsp;"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>Out</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>JsonFormat</name><argument_list>(<argument>StringRef RawSR</argument>, <argument>bool AddQuotes</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>RawSR</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"null"</literal></expr>;</return></block_content></block></if></if_stmt>


<name>std</name><operator>::</operator><name>string</name> <name>Str</name> <operator>=</operator> <call><name><name>RawSR</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Pos</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Pos</name> <operator>==</operator> <name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>TempPos</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Pos</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>Pos</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>TempPos</name> <operator>!=</operator> <call><name><name>Str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Pos</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>Pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>Pos</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>Pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Pos</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\"'</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Pos</name> <operator>==</operator> <name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>TempPos</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Pos</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>Pos</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>TempPos</name> <operator>!=</operator> <call><name><name>Str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Pos</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>Pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>Pos</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>Str</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Str</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Str</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>AddQuotes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Str</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="char">'\"'</literal> <operator>+</operator> <name>Str</name> <operator>+</operator> <literal type="char">'\"'</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>printSourceLocationAsJson</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AddBraces</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Loc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PresumedLoc</name></type> <name>PLoc</name> <init>= <expr><call><name><name>SM</name><operator>.</operator><name>getPresumedLoc</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>PLoc</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>AddBraces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"{ "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>filename</name><argument_list>(<argument><expr><call><name><name>PLoc</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>auto</name></type> <name>RemoveIt</name> <init>=
<expr><name>std</name><operator>::</operator><call><name>remove_if</name><argument_list>(<argument><expr><call><name><name>filename</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><name>auto</name> <name>Char</name><operator>)</operator> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <name><name>ForbiddenChars</name><index>[]</index></name> <operator>=</operator> <literal type="string">"&lt;&gt;*?\"|"</literal></expr>;</block></expr></argument></argument_list></call></expr></init></decl></decl_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>ForbiddenChars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>ForbiddenChars</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Char</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>std</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>ForbiddenChars</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>)</block_content></block>;</function>
<expr_stmt><expr><call><name><name>filename</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>RemoveIt</name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><call><name>replace</name><argument_list>(<argument><expr><call><name><name>filename</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"\"line\": "</literal> <operator>&lt;&lt;</operator> <call><name><name>PLoc</name><operator>.</operator><name>getLine</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">", \"column\": "</literal> <operator>&lt;&lt;</operator> <call><name><name>PLoc</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">", \"file\": \""</literal> <operator>&lt;&lt;</operator> <name>filename</name> <operator>&lt;&lt;</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>AddBraces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">" }"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
}




Out <expr_stmt><expr><operator>&lt;&lt;</operator> <literal type="string">"{ "</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printSourceLocationAsJson</name><argument_list>(<argument><expr><name>Out</name></expr></argument>, <argument><expr><call><name><name>SM</name><operator>.</operator><name>getExpansionLoc</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">", \"spelling\": "</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printSourceLocationAsJson</name><argument_list>(<argument><expr><name>Out</name></expr></argument>, <argument><expr><call><name><name>SM</name><operator>.</operator><name>getSpellingLoc</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">" }"</literal></expr>;</expr_stmt>
}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
