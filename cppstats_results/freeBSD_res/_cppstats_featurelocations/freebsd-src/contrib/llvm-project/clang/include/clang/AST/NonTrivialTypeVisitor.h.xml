<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/NonTrivialTypeVisitor.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_NON_TRIVIAL_TYPE_VISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_NON_TRIVIAL_TYPE_VISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Derived</name></expr><operator>,</operator> <expr><name>class</name> <name>RetTy</name> <operator>=</operator> <name>void</name><operator>&gt;</operator> struct <name>DestructedTypeVisitor</name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>RetTy</name> <macro><name>visit</name><argument_list>(<argument>QualType FT</argument>, <argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitWithKind</name><argument_list>(<argument><expr><call><name><name>FT</name><operator>.</operator><name>isDestructedType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FT</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>RetTy</name> <macro><name>visitWithKind</name><argument_list>(<argument>QualType::DestructionKind DK</argument>, <argument>QualType FT</argument>,
<argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>DK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QualType</name><operator>::</operator><name>DK_objc_strong_lifetime</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCStrong</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>DK_nontrivial_c_struct</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitStruct</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>DK_none</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitTrivial</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>DK_cxx_destructor</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitCXXDestructor</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>DK_objc_weak_lifetime</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCWeak</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

llvm_unreachable("unknown destruction kind"</block></switch>)</block></expr>;
}</block>

<name>Derived</name> <operator>&amp;</operator><macro><name>asDerived</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Derived</name></expr><operator>,</operator> <expr><name>class</name> <name>RetTy</name> <operator>=</operator> <name>void</name><operator>&gt;</operator>
struct <name>DefaultInitializedTypeVisitor</name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>RetTy</name> <macro><name>visit</name><argument_list>(<argument>QualType FT</argument>, <argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitWithKind</name><argument_list>(
<argument><expr><call><name><name>FT</name><operator>.</operator><name>isNonTrivialToPrimitiveDefaultInitialize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FT</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>RetTy</name> <macro><name>visitWithKind</name><argument_list>(<argument>QualType::PrimitiveDefaultInitializeKind PDIK</argument>,
<argument>QualType FT</argument>, <argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>PDIK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QualType</name><operator>::</operator><name>PDIK_ARCStrong</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCStrong</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PDIK_ARCWeak</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCWeak</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PDIK_Struct</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitStruct</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PDIK_Trivial</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitTrivial</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>

<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"unknown default-initialize kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

Derived <expr_stmt><expr><operator>&amp;</operator><macro><name>asDerived</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Derived</name></expr><operator>,</operator> <expr><name>bool</name> <name>IsMove</name></expr><operator>,</operator> <expr><name>class</name> <name>RetTy</name> <operator>=</operator> <name>void</name><operator>&gt;</operator>
struct <name>CopiedTypeVisitor</name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>RetTy</name> <macro><name>visit</name><argument_list>(<argument>QualType FT</argument>, <argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<expr><name>QualType</name><operator>::</operator><name>PrimitiveCopyKind</name> <name>PCK</name> <operator>=</operator>
<name>IsMove</name> <operator>?</operator> <call><name><name>FT</name><operator>.</operator><name>isNonTrivialToPrimitiveDestructiveMove</name></name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name><name>FT</name><operator>.</operator><name>isNonTrivialToPrimitiveCopy</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitWithKind</name><argument_list>(<argument><expr><name>PCK</name></expr></argument>, <argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>RetTy</name> <macro><name>visitWithKind</name><argument_list>(<argument>QualType::PrimitiveCopyKind PCK</argument>, <argument>QualType FT</argument>,
<argument>Ts &amp;&amp;... Args</argument>)</argument_list></macro> <block>{
<expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>preVisit</name><argument_list>(<argument><expr><name>PCK</name></expr></argument>, <argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;

<switch>switch <condition>(<expr><name>PCK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QualType</name><operator>::</operator><name>PCK_ARCStrong</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCStrong</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PCK_ARCWeak</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitARCWeak</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PCK_Struct</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitStruct</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PCK_Trivial</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitTrivial</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>QualType</name><operator>::</operator><name>PCK_VolatileTrivial</name></expr>:</case>
<return>return <expr><call><name>asDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitVolatileTrivial</name><argument_list>(<argument><expr><name>FT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>

<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"unknown primitive copy kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

Derived <expr_stmt><expr><operator>&amp;</operator><macro><name>asDerived</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
