<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/NodeIntrospection.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_NODEINTROSPECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_NODEINTROSPECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXCtorInitializer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifierLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateArgumentLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<struct_decl>struct <name>DeclarationNameInfo</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LocationCall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SharedLocationCall</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>LocationCall</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LocationCall</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ThreadSafeRefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>LocationCall</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>LocationCallFlags</name> <block>{ <expr><name>NoFlags</name></expr>, <expr><name>ReturnsPointer</name></expr>, <expr><name>IsCast</name></expr> }</block></expr>;
<macro><name>LocationCall</name><argument_list>(<argument>SharedLocationCall on</argument>, <argument>std::string name</argument>,
<argument>LocationCallFlags flags = NoFlags</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>m_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_on</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>m_name</name><argument_list>(<argument>std::move(name)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>LocationCall</name> <operator>*</operator><macro><name>on</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_on</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>StringRef</name> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block>
<name>bool</name> <macro><name>returnsPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name> <operator>&amp;</operator> <name>ReturnsPointer</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isCast</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name> <operator>&amp;</operator> <name>IsCast</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>LocationCallFlags</name> <name>m_flags</name></expr>;
<expr><name>SharedLocationCall</name> <name>m_on</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LocationCallFormatterCpp</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LocationCall</name> <operator>&amp;</operator><name>Call</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>format</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LocationCall</name> <operator>&amp;</operator><name>Call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
<struct>struct <name>RangeLessThan</name> <block>{
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>UniqueMultiMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>internal</name><operator>::</operator><name>RangeLessThan</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SourceLocationMap</name> <init>= <expr><name><name>UniqueMultiMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SourceRangeMap</name> <init>= <expr><name><name>UniqueMultiMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>, <argument><expr><name>SharedLocationCall</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>NodeLocationAccessors</name> <block>{
<decl_stmt><decl><type><name>SourceLocationMap</name></type> <name>LocationAccessors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceRangeMap</name></type> <name>RangeAccessors</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>namespace</name></type> <name>NodeIntrospection</name> <block>{<block_content>
<function_decl><type><name>bool</name></type> <name>hasIntrospectionSupport</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>Stmt</name> <specifier>const</specifier> <operator>*</operator><name>Object</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>Decl</name> <specifier>const</specifier> <operator>*</operator><name>Object</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>CXXCtorInitializer</name> <specifier>const</specifier> <operator>*</operator><name>Object</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>TemplateArgumentLoc</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>CXXBaseSpecifier</name> <specifier>const</specifier> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>TypeLoc</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>DeclarationNameInfo</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeLocationAccessors</name></type> <name>GetLocations</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>DynTypedNode</name> <specifier>const</specifier> <operator>&amp;</operator><name>Node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
