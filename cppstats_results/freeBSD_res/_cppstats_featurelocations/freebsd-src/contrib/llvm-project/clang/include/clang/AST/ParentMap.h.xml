<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ParentMap.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_PARENTMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_PARENTMAP_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ParentMap</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>Impl</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ParentMap</name><argument_list>(<argument><expr><name>Stmt</name><operator>*</operator> <name>ASTRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ParentMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>addStmt</name><parameter_list>(<parameter><decl><type><name>Stmt</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>getParent</name><argument_list>(<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>getParentIgnoreParens</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>getParentIgnoreParenCasts</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>getParentIgnoreParenImpCasts</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>getOuterParenParent</name><argument_list>(<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>getParent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name><operator>*</operator> <name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getParent</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>getParentIgnoreParens</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getParentIgnoreParens</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>getParentIgnoreParenCasts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getParentIgnoreParenCasts</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasParent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>getParent</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isConsumedExpr</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isConsumedExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isConsumedExpr</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
