<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Scope.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_SCOPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_SCOPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UsingDirectiveDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Scope</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>ScopeFlags</name> <block>{


<decl><name>FnScope</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,



<decl><name>BreakScope</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,



<decl><name>ContinueScope</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,



<decl><name>DeclScope</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,


<decl><name>ControlScope</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,


<decl><name>ClassScope</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,





<decl><name>BlockScope</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,





<decl><name>TemplateParamScope</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,



<decl><name>FunctionPrototypeScope</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,





<decl><name>FunctionDeclarationScope</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,



<decl><name>AtCatchScope</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,



<decl><name>ObjCMethodScope</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,


<decl><name>SwitchScope</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,


<decl><name>TryScope</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,


<decl><name>FnTryCatchScope</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,


<decl><name>OpenMPDirectiveScope</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,


<decl><name>OpenMPLoopDirectiveScope</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>,




<decl><name>OpenMPSimdDirectiveScope</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>,


<decl><name>EnumScope</name> <init>= <expr><literal type="number">0x40000</literal></expr></init></decl>,


<decl><name>SEHTryScope</name> <init>= <expr><literal type="number">0x80000</literal></expr></init></decl>,


<decl><name>SEHExceptScope</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>,


<decl><name>SEHFilterScope</name> <init>= <expr><literal type="number">0x200000</literal></expr></init></decl>,


<decl><name>CompoundStmtScope</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>,



<decl><name>ClassInheritanceScope</name> <init>= <expr><literal type="number">0x800000</literal></expr></init></decl>,


<decl><name>CatchScope</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>,




<decl><name>ConditionVarScope</name> <init>= <expr><literal type="number">0x2000000</literal></expr></init></decl>,
}</block>;</enum>

<label><name>private</name>:</label>


<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>AnyParent</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Flags</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>Depth</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>MSLastManglingNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>MSCurManglingNumber</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrototypeDepth</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrototypeIndex</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>FnParent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>MSLastManglingParent</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>BreakParent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ContinueParent</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>BlockParent</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>TemplateParamParent</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>using</name></type> <name>DeclSetTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclSetTy</name></type> <name>DeclsInScope</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Entity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>UsingDirectivesTy</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UsingDirectiveDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UsingDirectivesTy</name></type> <name>UsingDirectives</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DiagnosticErrorTrap</name></type> <name>ErrorTrap</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>NRVO</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setFlags</name><parameter_list>(<parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>F</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>Scope</name><argument_list>(<argument>Scope *Parent</argument>, <argument>unsigned ScopeFlags</argument>, <argument>DiagnosticsEngine &amp;Diag</argument>)</argument_list></macro>
: <macro><name>ErrorTrap</name><argument_list>(<argument>Diag</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>Parent</name></expr></argument>, <argument><expr><name>ScopeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><name>unsigned</name> <macro><name>getFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>F</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>setFlags</name><argument_list>(<argument><expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isBlockScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>BlockScope</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AnyParent</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Scope</name> <modifier>*</modifier></type><name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>AnyParent</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getFnParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FnParent</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Scope</name> <modifier>*</modifier></type><name>getFnParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>FnParent</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getMSLastManglingParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>MSLastManglingParent</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>Scope</name> <modifier>*</modifier></type><name>getMSLastManglingParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MSLastManglingParent</name></expr>;</return> </block_content>}</block></function>



<function><type><name>Scope</name> <modifier>*</modifier></type><name>getContinueParent</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>ContinueParent</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getContinueParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getContinueParent</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setIsConditionVarScope</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>InConditionVarScope</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Flags</name> <operator>=</operator> <operator>(</operator><name>Flags</name> <operator>&amp;</operator> <operator>~</operator><name>ConditionVarScope</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name>InConditionVarScope</name></expr> ?</condition><then> <expr><name>ConditionVarScope</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isConditionVarScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>ConditionVarScope</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>Scope</name> <modifier>*</modifier></type><name>getBreakParent</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>BreakParent</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getBreakParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getBreakParent</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Scope</name> <modifier>*</modifier></type><name>getBlockParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>BlockParent</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getBlockParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BlockParent</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Scope</name> <modifier>*</modifier></type><name>getTemplateParamParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>TemplateParamParent</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><macro><name>getTemplateParamParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TemplateParamParent</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Depth</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getFunctionPrototypeDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PrototypeDepth</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>unsigned</name></type> <name>getNextFunctionPrototypeIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFunctionPrototypeScope</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PrototypeIndex</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>decl_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>DeclSetTy</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>decl_range</name> <macro><name>decls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>decl_range</name><argument_list>(<argument><expr><call><name><name>DeclsInScope</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DeclsInScope</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>decl_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>DeclsInScope</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>AddDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>DeclsInScope</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>DeclsInScope</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>incrementMSManglingNumber</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>Scope</name> <modifier>*</modifier></type><name>MSLMP</name> <init>= <expr><call><name>getMSLastManglingParent</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>MSLMP</name><operator>-&gt;</operator><name>MSLastManglingNumber</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MSCurManglingNumber</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>decrementMSManglingNumber</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>Scope</name> <modifier>*</modifier></type><name>MSLMP</name> <init>= <expr><call><name>getMSLastManglingParent</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>MSLMP</name><operator>-&gt;</operator><name>MSLastManglingNumber</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MSCurManglingNumber</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getMSLastManglingNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>Scope</name> <modifier>*</modifier></type><name>MSLMP</name> <init>= <expr><call><name>getMSLastManglingParent</name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>MSLMP</name><operator>-&gt;</operator><name>MSLastManglingNumber</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getMSCurManglingNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>MSCurManglingNumber</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isDeclScope</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>DeclsInScope</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>DeclContext</name> <operator>*</operator><macro><name>getEntity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isTemplateParamScope</name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <name>Entity</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>DeclContext</name> <operator>*</operator><macro><name>getLookupEntity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Entity</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setEntity</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isTemplateParamScope</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"entity associated with template param scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Entity</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>setLookupEntity</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Entity</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt> </block_content>}</block></function>





<expr_stmt><expr><name>bool</name> <macro><name>hasUnrecoverableErrorOccurred</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ErrorTrap</name><operator>.</operator><name>hasUnrecoverableErrorOccurred</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isFunctionScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>FnScope</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isClassScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>ClassScope</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInCXXInlineMethodScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>Scope</name> <modifier>*</modifier></type><name>FnS</name> <init>= <expr><call><name>getFnParent</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>FnS</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"TUScope not created?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>FnS</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isClassScope</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInObjcMethodScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name>S</name></expr>;</condition> <incr><expr><name>S</name> <operator>=</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>ObjCMethodScope</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></for>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInObjcMethodOuterScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>Scope</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><name>this</name></expr></init></decl>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>ObjCMethodScope</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isTemplateParamScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>TemplateParamScope</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isFunctionPrototypeScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>FunctionPrototypeScope</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isFunctionDeclarationScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>FunctionDeclarationScope</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAtCatchScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>AtCatchScope</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSwitchScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name>S</name></expr>;</condition> <incr><expr><name>S</name> <operator>=</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>SwitchScope</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>S</name><operator>-&gt;</operator><name>getFlags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>Scope</name><operator>::</operator><name>FnScope</name> <operator>|</operator> <name>Scope</name><operator>::</operator><name>ClassScope</name> <operator>|</operator>
<name>Scope</name><operator>::</operator><name>BlockScope</name> <operator>|</operator> <name>Scope</name><operator>::</operator><name>TemplateParamScope</name> <operator>|</operator>
<name>Scope</name><operator>::</operator><name>FunctionPrototypeScope</name> <operator>|</operator>
<name>Scope</name><operator>::</operator><name>AtCatchScope</name> <operator>|</operator> <name>Scope</name><operator>::</operator><name>ObjCMethodScope</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></for>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOpenMPDirectiveScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>OpenMPDirectiveScope</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isOpenMPLoopDirectiveScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>OpenMPLoopDirectiveScope</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isOpenMPDirectiveScope</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"OpenMP loop directive scope is not a directive scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isOpenMPSimdDirectiveScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>OpenMPSimdDirectiveScope</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isOpenMPLoopScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>Scope</name> <operator>*</operator><name>P</name> <operator>=</operator> <call><name>getParent</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>P</name> <operator>&amp;&amp;</operator> <call><name><name>P</name><operator>-&gt;</operator><name>isOpenMPLoopDirectiveScope</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isTryScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>TryScope</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSEHTryScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>SEHTryScope</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSEHExceptScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>SEHExceptScope</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isCompoundStmtScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Scope</name><operator>::</operator><name>CompoundStmtScope</name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>Contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Scope</name><operator>&amp;</operator> <name>rhs</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Depth</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>Depth</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>containedInPrototypeScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>PushUsingDirective</name><parameter_list>(<parameter><decl><type><name>UsingDirectiveDecl</name> <modifier>*</modifier></type><name>UDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>UsingDirectives</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>UDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>using_directives_range</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>UsingDirectivesTy</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><name>using_directives_range</name></type> <name>using_directives</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>using_directives_range</name><argument_list>(<argument><expr><call><name><name>UsingDirectives</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>UsingDirectives</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addNRVOCandidate</name><parameter_list>(<parameter><decl><type><name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>NRVO</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>NRVO</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>NRVO</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>VD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>NRVO</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>VD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setNoNRVO</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setNoNRVO</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>NRVO</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>NRVO</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>mergeNRVOIntoParent</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>AddFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Flags</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>dumpImpl</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
