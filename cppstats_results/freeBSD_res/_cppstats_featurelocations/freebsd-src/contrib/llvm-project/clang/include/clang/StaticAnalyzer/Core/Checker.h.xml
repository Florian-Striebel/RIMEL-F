<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_CHECKER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_CHECKER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/ProgramPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/CheckerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BugReporter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>check</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>DECL</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ASTDecl</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkDecl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>AnalysisManager</name><modifier>&amp;</modifier></type> <name>mgr</name></decl></parameter>,
<parameter><decl><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>BR</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkASTDecl</name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DECL</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>BR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_handlesDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>DECL</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForDecl</name></name><argument_list>(<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckDeclFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkDecl</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_handlesDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ASTCodeBody</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkBody</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>AnalysisManager</name><modifier>&amp;</modifier></type> <name>mgr</name></decl></parameter>,
<parameter><decl><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>BR</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkASTCodeBody</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>BR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForBody</name></name><argument_list>(<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckDeclFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkBody</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EndOfTranslationUnit</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkEndOfTranslationUnit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TranslationUnitDecl</name> <modifier>*</modifier></type><name>TU</name></decl></parameter>,
<parameter><decl><type><name>AnalysisManager</name><modifier>&amp;</modifier></type> <name>mgr</name></decl></parameter>,
<parameter><decl><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>BR</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkEndOfTranslationUnit</name><argument_list>(<argument><expr><name>TU</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>BR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForEndOfTranslationUnit</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckEndOfTranslationUnit</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkEndOfTranslationUnit</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>STMT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>PreStmt</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkStmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPreStmt</name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>STMT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_handlesStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>STMT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPreStmt</name></name><argument_list>(<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckStmtFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkStmt</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_handlesStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>STMT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>PostStmt</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkStmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPostStmt</name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>STMT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_handlesStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>STMT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPostStmt</name></name><argument_list>(<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckStmtFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkStmt</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_handlesStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PreObjCMessage</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkObjCMessage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCMethodCall</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPreObjCMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPreObjCMessage</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckObjCMessageFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkObjCMessage</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCMessageNil</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkObjCMessage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCMethodCall</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkObjCMessageNil</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForObjCMessageNil</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckObjCMessageFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkObjCMessage</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PostObjCMessage</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkObjCMessage</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCMethodCall</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPostObjCMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPostObjCMessage</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckObjCMessageFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkObjCMessage</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PreCall</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkCall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPreCall</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPreCall</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckCallFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkCall</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PostCall</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkCall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPostCall</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPostCall</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckCallFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkCall</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Location</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkLocation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SVal</name> <modifier>&amp;</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isLoad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkLocation</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>isLoad</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForLocation</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckLocationFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkLocation</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Bind</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkBind</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SVal</name> <modifier>&amp;</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVal</name> <modifier>&amp;</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkBind</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForBind</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckBindFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkBind</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EndAnalysis</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkEndAnalysis</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>ExplodedGraph</name> <modifier>&amp;</modifier></type><name>G</name></decl></parameter>,
<parameter><decl><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>BR</name></decl></parameter>, <parameter><decl><type><name>ExprEngine</name> <modifier>&amp;</modifier></type><name>Eng</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkEndAnalysis</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>BR</name></expr></argument>, <argument><expr><name>Eng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForEndAnalysis</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckEndAnalysisFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkEndAnalysis</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BeginFunction</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkBeginFunction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkBeginFunction</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForBeginFunction</name></name><argument_list>(<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckBeginFunctionFunc</name><argument_list>(
<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkBeginFunction</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EndFunction</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkEndFunction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ReturnStmt</name> <modifier>*</modifier></type><name>RS</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkEndFunction</name><argument_list>(<argument><expr><name>RS</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForEndFunction</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckEndFunctionFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkEndFunction</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BranchCondition</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkBranchCondition</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Condition</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkBranchCondition</name><argument_list>(<argument><expr><name>Condition</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForBranchCondition</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckBranchConditionFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkBranchCondition</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NewAllocator</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkNewAllocator</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXAllocatorCall</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkNewAllocator</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForNewAllocator</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckNewAllocatorFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkNewAllocator</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LiveSymbols</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkLiveSymbols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>SymbolReaper</name> <modifier>&amp;</modifier></type><name>SR</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkLiveSymbols</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForLiveSymbols</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckLiveSymbolsFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkLiveSymbols</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DeadSymbols</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkDeadSymbols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><name>SymbolReaper</name> <modifier>&amp;</modifier></type><name>SR</name></decl></parameter>, <parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkDeadSymbols</name><argument_list>(<argument><expr><name>SR</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForDeadSymbols</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckDeadSymbolsFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkDeadSymbols</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RegionChanges</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>_checkRegionChanges</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InvalidatedSymbols</name> <modifier>*</modifier></type><name>invalidated</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Explicits</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Regions</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator> <name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkRegionChanges</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>invalidated</name></expr></argument>,
<argument><expr><name>Explicits</name></expr></argument>, <argument><expr><name>Regions</name></expr></argument>,
<argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>Call</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForRegionChanges</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckRegionChangesFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkRegionChanges</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PointerEscape</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>_checkPointerEscape</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Checker</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InvalidatedSymbols</name> <modifier>&amp;</modifier></type><name>Escaped</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>PointerEscapeKind</name></type> <name>Kind</name></decl></parameter>,
<parameter><decl><type><name>RegionAndSymbolInvalidationTraits</name> <modifier>*</modifier></type><name>ETraits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ETraits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>Checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPointerEscape</name><argument_list>(<argument><expr><name>State</name></expr></argument>,
<argument><expr><name>Escaped</name></expr></argument>,
<argument><expr><name>Call</name></expr></argument>,
<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>InvalidatedSymbols</name></type> <name>RegularEscape</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>InvalidatedSymbols</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Escaped</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>E</name> <operator>=</operator> <call><name><name>Escaped</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ETraits</name><operator>-&gt;</operator><name>hasTrait</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>,
<argument><expr><name>RegionAndSymbolInvalidationTraits</name><operator>::</operator><name>TK_PreserveContents</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>ETraits</name><operator>-&gt;</operator><name>hasTrait</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>,
<argument><expr><name>RegionAndSymbolInvalidationTraits</name><operator>::</operator><name>TK_SuppressEscape</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>RegularEscape</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name><name>RegularEscape</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>State</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>Checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkPointerEscape</name><argument_list>(<argument><expr><name>State</name></expr></argument>,
<argument><expr><name>RegularEscape</name></expr></argument>,
<argument><expr><name>Call</name></expr></argument>,
<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPointerEscape</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckPointerEscapeFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkPointerEscape</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConstPointerEscape</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>_checkConstPointerEscape</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Checker</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InvalidatedSymbols</name> <modifier>&amp;</modifier></type><name>Escaped</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>PointerEscapeKind</name></type> <name>Kind</name></decl></parameter>,
<parameter><decl><type><name>RegionAndSymbolInvalidationTraits</name> <modifier>*</modifier></type><name>ETraits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ETraits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>State</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>InvalidatedSymbols</name></type> <name>ConstEscape</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>InvalidatedSymbols</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Escaped</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>E</name> <operator>=</operator> <call><name><name>Escaped</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>ETraits</name><operator>-&gt;</operator><name>hasTrait</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>,
<argument><expr><name>RegionAndSymbolInvalidationTraits</name><operator>::</operator><name>TK_PreserveContents</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>ETraits</name><operator>-&gt;</operator><name>hasTrait</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>,
<argument><expr><name>RegionAndSymbolInvalidationTraits</name><operator>::</operator><name>TK_SuppressEscape</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ConstEscape</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name><name>ConstEscape</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>State</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>Checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkConstPointerEscape</name><argument_list>(<argument><expr><name>State</name></expr></argument>,
<argument><expr><name>ConstEscape</name></expr></argument>,
<argument><expr><name>Call</name></expr></argument>,
<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForPointerEscape</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>CheckPointerEscapeFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>,
<argument><expr><name><name>_checkConstPointerEscape</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>EVENT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Event</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_checkEvent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>checkEvent</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>EVENT</name> <operator>*</operator><operator>)</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>mgr</name><operator>.</operator><name>_registerListenerForEvent</name></name><operator>&lt;</operator><name>EVENT</name><operator>&gt;</operator><operator>(</operator>
<name>CheckerManager</name><operator>::</operator><call><name>CheckEventFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_checkEvent</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>eval</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Assume</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ProgramStateRef</name></type> <name>_evalAssume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SVal</name> <modifier>&amp;</modifier></type><name>cond</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>assumption</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>evalAssume</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>assumption</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForEvalAssume</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>EvalAssumeFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_evalAssume</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Call</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>_evalCall</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>CheckerContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CHECKER</name> <operator>*</operator><operator>)</operator><name>checker</name><operator>)</operator><operator>-&gt;</operator><call><name>evalCall</name><argument_list>(<argument><expr><name>Call</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>_registerForEvalCall</name></name><argument_list>(
<argument><expr><name>CheckerManager</name><operator>::</operator><call><name>EvalCallFunc</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name><name>_evalCall</name><argument_list type="generic">&lt;<argument><expr><name>CHECKER</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CheckerBase</name> <range>: <expr><name>public</name> <name>ProgramPointTag</name> <block>{
<expr><name>CheckerNameRef</name> <name>Name</name></expr>;
<expr><name>friend</name> <name>class</name> <operator>::</operator><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CheckerManager</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>StringRef</name> <macro><name>getTagDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>CheckerNameRef</name> <macro><name>getCheckerName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>printState</name><argument_list>(<argument>raw_ostream &amp;Out</argument>, <argument>ProgramStateRef State</argument>,
<argument>const char *NL</argument>, <argument>const char *Sep</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ }</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>raw_ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name><operator>,</operator> <specifier>const</specifier> <name>CheckerBase</name> <operator>&amp;</operator><name>Checker</name><operator>)</operator></expr>;</expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CheckerProgramPointTag</name> <range>: <expr><name>public</name> <name>SimpleProgramPointTag</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CheckerProgramPointTag</name><argument_list>(<argument>StringRef CheckerName</argument>, <argument>StringRef Msg</argument>)</argument_list></macro></expr>;
<macro><name>CheckerProgramPointTag</name><argument_list>(<argument>const CheckerBase *Checker</argument>, <argument>StringRef Msg</argument>)</argument_list></macro>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECK1</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>CHECKs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Checker</name> <range>: <expr><name>public</name> <name>CHECK1</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>CHECKs</name><modifier>...</modifier></decl>, <decl><type ref="prev"/><name>public</name> <name>CheckerBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CHECK1</name><operator>::</operator><call><name>_register</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Checker</name><argument_list type="generic">&lt;<argument><expr><name>CHECKs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>_register</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECK1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>Checker</name><argument_list type="generic">&lt;<argument><expr><name>CHECK1</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name> <name>CHECK1</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>CheckerBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>_register</name><parameter_list>(<parameter><decl><type><name>CHECKER</name> <modifier>*</modifier></type><name>checker</name></decl></parameter>, <parameter><decl><type><name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CHECK1</name><operator>::</operator><call><name>_register</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>EVENT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>EventDispatcher</name> <block>{<block_content>
<decl_stmt><decl><type><name>CheckerManager</name> <modifier>*</modifier></type><name>Mgr</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>EventDispatcher</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Mgr</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{ }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CHECKER</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>_register</name><argument_list>(<argument>CHECKER *checker</argument>, <argument>CheckerManager &amp;mgr</argument>)</argument_list></macro> <block>{
<expr><name><name>mgr</name><operator>.</operator><name>_registerDispatcherForEvent</name></name><operator>&lt;</operator><name>EVENT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>EventDispatcher</name><argument_list type="generic">&lt;<argument><expr><name>EVENT</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Mgr</name> <operator>=</operator> <operator>&amp;</operator><name>mgr</name></expr>;
}</block>

<name>void</name> <macro><name>dispatchEvent</name><argument_list>(<argument>const EVENT &amp;event</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name><name>Mgr</name><operator>-&gt;</operator><name>_dispatchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>ImplicitNullDerefEvent</name> <block>{
<decl_stmt><decl><type><name>SVal</name></type> <name>Location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsLoad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>SinkNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BugReporter</name> <modifier>*</modifier></type><name>BR</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsDirectDereference</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>Tag</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>DefaultBool</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DefaultBool</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>val</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>
<name>operator</name> <name>bool</name><operator>&amp;</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>operator</name> <specifier>const</specifier> <name>bool</name><operator>&amp;</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>DefaultBool</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>bool</name> <name>b</name><operator>)</operator> <block>{ <expr><name>val</name> <operator>=</operator> <name>b</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></init></decl></decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
