<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/PlistSupport.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_PLISTSUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_PLISTSUPPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>markup</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>FIDMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>AddFID</name><parameter_list>(<parameter><decl><type><name>FIDMap</name> <modifier>&amp;</modifier></type><name>FIDs</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>V</name></decl></parameter>,
<parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FIDMap</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>FIDs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>FIDs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NewValue</name> <init>= <expr><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>FIDs</name><index>[<expr><name>FID</name></expr>]</index></name> <operator>=</operator> <name>NewValue</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NewValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>AddFID</name><parameter_list>(<parameter><decl><type><name>FIDMap</name> <modifier>&amp;</modifier></type><name>FIDs</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>V</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FileID</name></type> <name>FID</name> <init>= <expr><call><name><name>SM</name><operator>.</operator><name>getFileID</name></name><argument_list>(<argument><expr><call><name><name>SM</name><operator>.</operator><name>getExpansionLoc</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>AddFID</name><argument_list>(<argument><expr><name>FIDs</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>GetFID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FIDMap</name> <modifier>&amp;</modifier></type><name>FIDs</name></decl></parameter>, <parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FIDMap</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>FIDs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>FIDs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>GetFID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FIDMap</name> <modifier>&amp;</modifier></type><name>FIDs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FileID</name></type> <name>FID</name> <init>= <expr><call><name><name>SM</name><operator>.</operator><name>getFileID</name></name><argument_list>(<argument><expr><call><name><name>SM</name><operator>.</operator><name>getExpansionLoc</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>GetFID</name><argument_list>(<argument><expr><name>FIDs</name></expr></argument>, <argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Indent</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raw_ostream</name> <modifier>&amp;</modifier></type><name>EmitPlistHeader</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PlistHeader</name> <init>=
<expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
<literal type="string">"&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" "</literal>
<literal type="string">"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n"</literal>
<literal type="string">"&lt;plist version=\"1.0\"&gt;\n"</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>o</name> <operator>&lt;&lt;</operator> <name>PlistHeader</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raw_ostream</name> <modifier>&amp;</modifier></type><name>EmitInteger</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;integer&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/integer&gt;"</literal></expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raw_ostream</name> <modifier>&amp;</modifier></type><name>EmitString</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;string&gt;"</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>StringRef</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>E</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>I</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&amp;amp;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&amp;lt;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&amp;gt;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&amp;apos;"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&amp;quot;"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/string&gt;"</literal></expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>EmitLocation</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FIDMap</name> <modifier>&amp;</modifier></type><name>FM</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>L</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FullSourceLoc</name></type> <name>Loc</name><argument_list>(<argument><expr><call><name><name>SM</name><operator>.</operator><name>getExpansionLoc</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>SourceManager</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"&lt;dict&gt;\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" &lt;key&gt;line&lt;/key&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EmitInteger</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name><name>Loc</name><operator>.</operator><name>getExpansionLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" &lt;key&gt;col&lt;/key&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EmitInteger</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name><name>Loc</name><operator>.</operator><name>getExpansionColumnNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" &lt;key&gt;file&lt;/key&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EmitInteger</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>GetFID</name><argument_list>(<argument><expr><name>FM</name></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/dict&gt;\n"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>EmitRange</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>,
<parameter><decl><type><name>CharSourceRange</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FIDMap</name> <modifier>&amp;</modifier></type><name>FM</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>R</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>isCharRange</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"cannot handle a token range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"&lt;array&gt;\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EmitLocation</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><call><name><name>R</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FM</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>EmitLocation</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><call><name><name>R</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocWithOffset</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FM</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/array&gt;\n"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
