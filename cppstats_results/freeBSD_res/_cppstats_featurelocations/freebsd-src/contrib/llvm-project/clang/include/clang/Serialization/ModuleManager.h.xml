<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ModuleManager.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_MODULEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_MODULEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ModuleFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalModuleIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InMemoryModuleCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerReader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>ModuleManager</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Chain</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>PCHChain</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Roots</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Modules</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>FileMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>InMemoryModuleCache</name></expr></argument>&gt;</argument_list></name></type> <name>ModuleCache</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>PCHContainerReader</name> <modifier>&amp;</modifier></type><name>PCHContainerRdr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>HeaderSearch</name> <modifier>&amp;</modifier></type><name>HeaderSearchInfo</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>InMemoryBuffers</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>VisitOrder</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>ModulesInCommonWithGlobalIndex</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>GlobalModuleIndex</name> <modifier>*</modifier></type><name>GlobalIndex</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<struct>struct <name>VisitState</name> <block>{
<macro><name>explicit</name></macro> <macro><name>VisitState</name><argument_list>(<argument>unsigned N</argument>)</argument_list></macro> : <macro><name>VisitNumber</name><argument_list>(<argument>N</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>Stack</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>VisitState</name><argument_list>()</argument_list></macro> <block>{
<expr><name>delete</name> <name>NextState</name></expr>;
}</block>



<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Stack</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>VisitNumber</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NextVisitNumber</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VisitState</name> <modifier>*</modifier></type><name>NextState</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>VisitState</name> <modifier>*</modifier></type><name>FirstVisitState</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>VisitState</name> <modifier>*</modifier></type><name>allocateVisitState</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>returnVisitState</name><parameter_list>(<parameter><decl><type><name>VisitState</name> <modifier>*</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleIterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>pointee_iterator</name><argument_list type="generic">&lt;
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleConstIterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>pointee_iterator</name><argument_list type="generic">&lt;
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleReverseIterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>pointee_iterator</name><argument_list type="generic">&lt;
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reverse_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleOffset</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>explicit</name></type> <name>ModuleManager</name><parameter_list>(<parameter><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>FileMgr</name></decl></parameter>, <parameter><decl><type><name>InMemoryModuleCache</name> <modifier>&amp;</modifier></type><name>ModuleCache</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>PCHContainerReader</name> <modifier>&amp;</modifier></type><name>PCHContainerRdr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>HeaderSearch</name> <modifier>&amp;</modifier></type><name>HeaderSearchInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>ModuleManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>ModuleIterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>ModuleIterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>ModuleConstIterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ModuleConstIterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>ModuleReverseIterator</name></type> <name>rbegin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>ModuleReverseIterator</name></type> <name>rend</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></argument>&gt;</argument_list></name>
<macro><name>pch_modules</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>PCHChain</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>PCHChain</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>ModuleFile</name> <modifier>&amp;</modifier></type><name>getPrimaryModule</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name><name>Chain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>



<expr_stmt><expr><name>ModuleFile</name> <operator>&amp;</operator><macro><name>getPrimaryModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name><name>Chain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>ModuleFile</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>Index</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>*</operator><name><name>Chain</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>ModuleFile</name> <modifier>*</modifier></type><name>lookupByFileName</name><argument_list>(<argument><expr><name>StringRef</name> <name>FileName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>ModuleFile</name> <modifier>*</modifier></type><name>lookupByModuleName</name><argument_list>(<argument><expr><name>StringRef</name> <name>ModName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>ModuleFile</name> <modifier>*</modifier></type><name>lookup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <macro><name>lookupBuffer</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<enum>enum <name>AddModuleResult</name> <block>{

<decl><name>AlreadyLoaded</name></decl>,


<decl><name>NewlyLoaded</name></decl>,


<decl><name>Missing</name></decl>,


<decl><name>OutOfDate</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>using</name></type> <name>ASTFileSignatureReader</name> <init>= <expr><call><call><name>ASTFileSignature</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>StringRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



































<decl_stmt><decl><type><name>AddModuleResult</name></type> <name>addModule</name><argument_list>(<argument><expr><name>StringRef</name> <name>FileName</name></expr></argument>, <argument><expr><name>ModuleKind</name> <name>Type</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ImportLoc</name></expr></argument>,
<argument><expr><name>ModuleFile</name> <operator>*</operator><name>ImportedBy</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Generation</name></expr></argument>,
<argument><expr><name>off_t</name> <name>ExpectedSize</name></expr></argument>, <argument><expr><name>time_t</name> <name>ExpectedModTime</name></expr></argument>,
<argument><expr><name>ASTFileSignature</name> <name>ExpectedSignature</name></expr></argument>,
<argument><expr><name>ASTFileSignatureReader</name> <name>ReadSignature</name></expr></argument>,
<argument><expr><name>ModuleFile</name> <operator>*</operator><operator>&amp;</operator><name>Module</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ErrorStr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>removeModules</name><parameter_list>(<parameter><decl><type><name>ModuleIterator</name></type> <name>First</name></decl></parameter>, <parameter><decl><type><name>ModuleMap</name> <modifier>*</modifier></type><name>modMap</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>addInMemoryBuffer</name><argument_list>(<argument><expr><name>StringRef</name> <name>FileName</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>setGlobalIndex</name><parameter_list>(<parameter><decl><type><name>GlobalModuleIndex</name> <modifier>*</modifier></type><name>Index</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>moduleFileAccepted</name><parameter_list>(<parameter><decl><type><name>ModuleFile</name> <modifier>*</modifier></type><name>MF</name></decl></parameter>)</parameter_list>;</function_decl>




















<decl_stmt><decl><type><name>void</name></type> <name>visit</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>ModuleFile</name> <operator>&amp;</operator><name>M</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Visitor</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSetImpl</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>ModuleFilesHit</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


















<function_decl><type><name>bool</name></type> <name>lookupModuleFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FileName</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>ExpectedSize</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>ExpectedModTime</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>viewGraph</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>InMemoryModuleCache</name> <operator>&amp;</operator><macro><name>getModuleCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ModuleCache</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
