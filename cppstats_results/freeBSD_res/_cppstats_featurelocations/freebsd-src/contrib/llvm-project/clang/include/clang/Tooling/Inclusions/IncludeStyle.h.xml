<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_INCLUSIONS_INCLUDESTYLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_INCLUSIONS_INCLUDESTYLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<struct>struct <name>IncludeStyle</name> <block>{

<enum>enum <name>IncludeBlocksStyle</name> <block>{







<decl><name>IBS_Preserve</name></decl>,







<decl><name>IBS_Merge</name></decl>,









<decl><name>IBS_Regroup</name></decl>,
}</block>;</enum>



<decl_stmt><decl><type><name>IncludeBlocksStyle</name></type> <name>IncludeBlocks</name></decl>;</decl_stmt>


<struct>struct <name>IncludeCategory</name> <block>{

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Regex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SortPriority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RegexIsCaseSensitive</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>IncludeCategory</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Regex</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Regex</name></name> <operator>&amp;&amp;</operator> <name>Priority</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Priority</name></name> <operator>&amp;&amp;</operator>
<name>RegexIsCaseSensitive</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>RegexIsCaseSensitive</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>














































<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>IncludeCategory</name></expr></argument>&gt;</argument_list></name> <name>IncludeCategories</name></expr>;</expr_stmt>












<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>IncludeIsMainRegex</name></expr>;</expr_stmt>



















<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>IncludeIsMainSourceRegex</name></expr>;</expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>LLVM_YAML_IS_SEQUENCE_VECTOR</name><argument_list>(<argument>clang::tooling::IncludeStyle::IncludeCategory</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>yaml</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>IncludeStyle</name><operator>::</operator><name>IncludeCategory</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <call><name>mapping</name><argument_list>(<argument><expr><name>IO</name> <operator>&amp;</operator><name>IO</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>IncludeStyle</name><operator>::</operator><name>IncludeCategory</name> <operator>&amp;</operator><name>Category</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>ScalarEnumerationTraits</name><argument_list type="generic">&lt;
<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>IncludeStyle</name><operator>::</operator><name>IncludeBlocksStyle</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name>
<call><name>enumeration</name><argument_list>(<argument><expr><name>IO</name> <operator>&amp;</operator><name>IO</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>IncludeStyle</name><operator>::</operator><name>IncludeBlocksStyle</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
