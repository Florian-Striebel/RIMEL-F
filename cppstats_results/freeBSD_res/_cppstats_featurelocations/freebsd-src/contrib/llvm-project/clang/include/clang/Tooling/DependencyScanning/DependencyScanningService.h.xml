<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_SERVICE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_SERVICE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dependencies</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ScanningMode</name> <block>{<block_content>



<expr_stmt><expr><name>CanonicalPreprocessing</name></expr><operator>,</operator>





<expr><name>MinimizedSourcePreprocessing</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ScanningOutputFormat</name> <block>{<block_content>



<expr_stmt><expr><name>Make</name></expr><operator>,</operator>



<expr><name>Full</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningService</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>DependencyScanningService</name><argument_list>(<argument>ScanningMode Mode</argument>, <argument>ScanningOutputFormat Format</argument>,
<argument>bool ReuseFileManager = true</argument>,
<argument>bool SkipExcludedPPRanges = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>ScanningMode</name> <macro><name>getMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ScanningOutputFormat</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Format</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>canReuseFileManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ReuseFileManager</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>canSkipExcludedPPRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SkipExcludedPPRanges</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>DependencyScanningFilesystemSharedCache</name> <modifier>&amp;</modifier></type><name>getSharedCache</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>SharedCache</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScanningMode</name></type> <name>Mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScanningOutputFormat</name></type> <name>Format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ReuseFileManager</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>SkipExcludedPPRanges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DependencyScanningFilesystemSharedCache</name></type> <name>SharedCache</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
