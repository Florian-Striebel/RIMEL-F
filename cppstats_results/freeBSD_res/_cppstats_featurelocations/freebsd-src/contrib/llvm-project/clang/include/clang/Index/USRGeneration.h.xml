<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Index/USRGeneration.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_USRGENERATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_USRGENERATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroDefinitionRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>StringRef</name></type> <name>getUSRSpacePrefix</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"c:"</literal></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>bool</name></type> <name>generateUSRForDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForObjCClass</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Cls</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>CategoryContextExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForObjCCategory</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Cls</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Cat</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ClsExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>CatExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>generateUSRForObjCIvar</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Ivar</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForObjCMethod</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Sel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsInstanceMethod</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForObjCProperty</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Prop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isClassProp</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForObjCProtocol</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Prot</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForGlobalEnum</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>EnumName</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ExtSymbolDefinedIn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>generateUSRForEnumConstant</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>EnumConstantName</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>generateUSRForMacro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MacroDefinitionRecord</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>generateUSRForMacro</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>MacroName</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>generateUSRForType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>, <parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>generateFullUSRForModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>generateFullUSRForTopLevelModuleName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>ModName</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>generateUSRFragmentForModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>generateUSRFragmentForModuleName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>ModName</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
