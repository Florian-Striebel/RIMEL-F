<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_MULTIPLEINCLUDEOPT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_MULTIPLEINCLUDEOPT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>MultipleIncludeOpt</name> <block>{<block_content>





<decl_stmt><decl><type><name>bool</name></type> <name>ReadAnyTokens</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ImmediatelyAfterTopLevelIfndef</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>DidMacroExpansion</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>TheMacro</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>DefinedMacro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>MacroLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DefinedLoc</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>MultipleIncludeOpt</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>ReadAnyTokens</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DidMacroExpansion</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>TheMacro</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DefinedMacro</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>GetMacroLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>MacroLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>GetDefinedLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DefinedLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>resetImmediatelyAfterTopLevelIfndef</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetDefinedMacro</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>DefinedMacro</name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DefinedLoc</name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list> <block>{<block_content>


<expr_stmt><expr><name>ReadAnyTokens</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DefinedMacro</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>TheMacro</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>getHasReadAnyTokensVal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ReadAnyTokens</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>getImmediatelyAfterTopLevelIfndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ImmediatelyAfterTopLevelIfndef</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>ReadToken</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ReadAnyTokens</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ExpandedMacro</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>DidMacroExpansion</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>








<function><type><name>void</name></type> <name>EnterTopLevelIfndef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>TheMacro</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>DidMacroExpansion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ReadAnyTokens</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>TheMacro</name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MacroLoc</name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EnterTopLevelConditional</name><parameter_list>()</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ExitTopLevelConditional</name><parameter_list>()</parameter_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>TheMacro</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ReadAnyTokens</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ImmediatelyAfterTopLevelIfndef</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>GetControllingMacroAtEndOfFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ReadAnyTokens</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TheMacro</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>GetDefinedMacro</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DefinedMacro</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
