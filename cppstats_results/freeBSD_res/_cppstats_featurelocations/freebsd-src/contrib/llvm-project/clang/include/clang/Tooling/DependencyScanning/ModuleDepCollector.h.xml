<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_MODULE_DEP_COLLECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_MODULE_DEP_COLLECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/CompilerInvocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/Utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/HeaderSearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PPCallbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dependencies</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DependencyConsumer</name></decl>;</decl_stmt>


<struct>struct <name>PrebuiltModuleDep</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PCMFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleMapFile</name></expr>;</expr_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>PrebuiltModuleDep</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ModuleName</name><argument_list>(<argument><expr><call><name><name>M</name><operator>-&gt;</operator><name>getTopLevelModuleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>PCMFile</name><argument_list>(<argument><expr><call><name><name>M</name><operator>-&gt;</operator><name>getASTFile</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ModuleMapFile</name><argument_list>(<argument>M-&gt;PresumedModuleMapFile</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>ModuleID</name> <block>{


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleName</name></expr>;</expr_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ContextHash</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ModuleID</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>ModuleName</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>ModuleName</name></name> <operator>&amp;&amp;</operator> <name>ContextHash</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>ContextHash</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>ModuleIDHasher</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>ModuleID</name> <operator>&amp;</operator><name>MID</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><name><name>MID</name><operator>.</operator><name>ModuleName</name></name></expr></argument>, <argument><expr><name><name>MID</name><operator>.</operator><name>ContextHash</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>ModuleDeps</name> <block>{

<decl_stmt><decl><type><name>ModuleID</name></type> <name>ID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsSystem</name></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ClangModuleMapFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ImplicitModulePCMPath</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>FileDeps</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PrebuiltModuleDep</name></expr></argument>&gt;</argument_list></name> <name>PrebuiltModuleDeps</name></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleID</name></expr></argument>&gt;</argument_list></name> <name>ClangModuleDeps</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ImportedByMainFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CompilerInvocation</name></type> <name>Invocation</name></decl>;</decl_stmt>











<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getCanonicalCommandLine</name><argument_list>(
<argument>std::function&lt;StringRef(ModuleID)&gt; LookupPCMPath</argument>,
<argument>std::function&lt;const ModuleDeps &amp;(ModuleID)&gt; LookupModuleDeps</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getCanonicalCommandLineWithoutModulePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>


<decl_stmt><decl><type><name>void</name></type> <name>collectPCMAndModuleMapPaths</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleID</name></expr></argument>&gt;</argument_list></name> <name>Modules</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name><operator>(</operator><name>ModuleID</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>LookupPCMPath</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ModuleDeps</name> <operator>&amp;</operator><operator>(</operator><name>ModuleID</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>LookupModuleDeps</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>PCMPaths</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ModMapPaths</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleDepCollector</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name> <name>ModuleDepCollectorPP</name></type> <name>final</name> <range>: <expr><name>public</name> <name>PPCallbacks</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ModuleDepCollectorPP</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name>ModuleDepCollector</name> <operator>&amp;</operator><name>MDC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Instance</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>, <macro><name>MDC</name><argument_list>(<argument>MDC</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>FileChanged</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>FileChangeReason Reason</argument>,
<argument>SrcMgr::CharacteristicKind FileType</argument>,
<argument>FileID PrevFID</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>InclusionDirective</name><argument_list>(<argument>SourceLocation HashLoc</argument>, <argument>const Token &amp;IncludeTok</argument>,
<argument>StringRef FileName</argument>, <argument>bool IsAngled</argument>,
<argument>CharSourceRange FilenameRange</argument>, <argument>const FileEntry *File</argument>,
<argument>StringRef SearchPath</argument>, <argument>StringRef RelativePath</argument>,
<argument>const Module *Imported</argument>,
<argument>SrcMgr::CharacteristicKind FileType</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>moduleImport</name><argument_list>(<argument>SourceLocation ImportLoc</argument>, <argument>ModuleIdPath Path</argument>,
<argument>const Module *Imported</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>EndOfMainFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>

<name>CompilerInstance</name> <operator>&amp;</operator><name>Instance</name></expr>;

<expr><name>ModuleDepCollector</name> <operator>&amp;</operator><name>MDC</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>DirectModularDeps</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>DirectPrebuiltModularDeps</name></expr>;

<expr><name>void</name> <call><name>handleImport</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>Imported</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <call><name>addDirectPrebuiltModuleDeps</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><name>ModuleDeps</name> <operator>&amp;</operator><name>MD</name></expr></argument>)</argument_list></call></expr>;




<expr><name>ModuleID</name> <call><name>handleTopLevelModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>addAllSubmoduleDeps</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><name>ModuleDeps</name> <operator>&amp;</operator><name>MD</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>AddedModules</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>addModuleDep</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><name>ModuleDeps</name> <operator>&amp;</operator><name>MD</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>AddedModules</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>ModuleDepCollector</name></type> <name>final</name> <range>: <expr><name>public</name> <name>DependencyCollector</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ModuleDepCollector</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DependencyOutputOptions</name></expr></argument>&gt;</argument_list></name> <name>Opts</name></expr></argument>,
<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name>DependencyConsumer</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><name>CompilerInvocation</name> <operator>&amp;&amp;</operator><name>OriginalCI</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>attachToPreprocessor</name><argument_list>(<argument>Preprocessor &amp;PP</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>attachToASTReader</name><argument_list>(<argument>ASTReader &amp;R</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>ModuleDepCollectorPP</name></expr>;


<expr><name>CompilerInstance</name> <operator>&amp;</operator><name>Instance</name></expr>;

<expr><name>DependencyConsumer</name> <operator>&amp;</operator><name>Consumer</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>MainFile</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>ContextHash</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>FileDeps</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><name>ModuleDeps</name></expr></argument>&gt;</argument_list></name> <name>ModularDeps</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DependencyOutputOptions</name></expr></argument>&gt;</argument_list></name> <name>Opts</name></expr>;

<expr><name>CompilerInvocation</name> <name>OriginalInvocation</name></expr>;


<expr><name>bool</name> <call><name>isPrebuiltModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list></call></expr>;




<expr><name>CompilerInvocation</name>
<macro><name>makeInvocationForModuleBuildWithoutPaths</name><argument_list>(<argument>const ModuleDeps &amp;Deps</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
