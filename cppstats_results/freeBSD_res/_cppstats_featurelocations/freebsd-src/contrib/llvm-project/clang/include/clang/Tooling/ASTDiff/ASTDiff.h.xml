<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/ASTDiff/ASTDiff.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_ASTDIFF_ASTDIFF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_ASTDIFF_ASTDIFF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/ASTDiff/ASTDiffInternal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>diff</name> <block>{<block_content>

<enum>enum <name>ChangeKind</name> <block>{
<decl><name>None</name></decl>,
<decl><name>Delete</name></decl>,
<decl><name>Update</name></decl>,
<decl><name>Insert</name></decl>,
<decl><name>Move</name></decl>,
<decl><name>UpdateMove</name></decl>
}</block>;</enum>


<struct>struct <name>Node</name> <block>{
<decl_stmt><decl><type><name>NodeId</name></type> <name>Parent</name></decl>, <decl><type ref="prev"/><name>LeftMostDescendant</name></decl>, <decl><type ref="prev"/><name>RightMostDescendant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Depth</name></decl>, <decl><type ref="prev"/><name>Height</name></decl>, <decl><type ref="prev"/><name>Shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>ASTNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NodeId</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>Children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChangeKind</name></type> <name>Change</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ASTNodeKind</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getTypeLabel</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isLeaf</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Children</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getQualifiedIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ASTDiff</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTDiff</name><argument_list>(<argument><expr><name>SyntaxTree</name> <operator>&amp;</operator><name>Src</name></expr></argument>, <argument><expr><name>SyntaxTree</name> <operator>&amp;</operator><name>Dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ComparisonOptions</name> <operator>&amp;</operator><name>Options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ASTDiff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>NodeId</name></type> <name>getMapped</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntaxTree</name> <operator>&amp;</operator><name>SourceTree</name></expr></argument>, <argument><expr><name>NodeId</name> <name>Id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Impl</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name> <name>DiffImpl</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SyntaxTree</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>SyntaxTree</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>AST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator>
<call><name>SyntaxTree</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator><name>Node</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>AST</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TreeImpl</name><argument_list>(<argument>std::make_unique&lt;Impl&gt;(this, Node, AST)</argument>)</argument_list></macro> <block>{}</block>
<call><name>SyntaxTree</name><argument_list>(<argument><expr><name>SyntaxTree</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SyntaxTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeId</name> <macro><name>getRootId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PreorderIterator</name> <init>= <expr><name>NodeId</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>PreorderIterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>PreorderIterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Node</name> <modifier>&amp;</modifier></type><name>getNode</name><argument_list>(<argument><expr><name>NodeId</name> <name>Id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>findPositionInParent</name><argument_list>(<argument><expr><name>NodeId</name> <name>Id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getSourceRangeOffsets</name><argument_list>(<argument>const Node &amp;N</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getNodeValue</name><argument_list>(<argument>NodeId Id</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getNodeValue</name><argument_list>(<argument>const Node &amp;Node</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Impl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name> <name>TreeImpl</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ComparisonOptions</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>MinHeight</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>double</name></type> <name>MinSimilarity</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>MaxSize</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>StopAfterTopDown</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isMatchingAllowed</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Node</name> <operator>&amp;</operator><name>N1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Node</name> <operator>&amp;</operator><name>N2</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>N1</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><call><name><name>N2</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
