<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/Utils.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_UTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/OptionUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/DependencyOutputOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/OptSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileCollector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Triple</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExternalSemaSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FrontendOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOutputOptions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>ApplyHeaderSearchOptions</name><argument_list>(<argument><expr><name>HeaderSearch</name> <operator>&amp;</operator><name>HS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>HeaderSearchOptions</name> <operator>&amp;</operator><name>HSOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Lang</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>InitializePreprocessor</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PreprocessorOptions</name> <modifier>&amp;</modifier></type><name>PPOpts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>PCHContainerReader</name> <modifier>&amp;</modifier></type><name>PCHContainerRdr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FrontendOptions</name> <modifier>&amp;</modifier></type><name>FEOpts</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>DoPrintPreprocessedInput</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>*</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>PreprocessorOutputOptions</name> <modifier>&amp;</modifier></type><name>Opts</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>class</name></type> <name>DependencyCollector</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DependencyCollector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>attachToPreprocessor</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>attachToASTReader</name><parameter_list>(<parameter><decl><type><name>ASTReader</name> <modifier>&amp;</modifier></type><name>R</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getDependencies</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Dependencies</name></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>virtual</name> <name>bool</name></type> <name>sawDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>FromModule</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsSystem</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsModuleFile</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsMissing</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>virtual</name> <name>void</name></type> <name>finishedMainFile</name><parameter_list>(<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>bool</name></type> <name>needSystemDependencies</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>maybeAddDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>FromModule</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsSystem</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsModuleFile</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsMissing</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>


<function_decl><type><name>bool</name></type> <name>addDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>Seen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Dependencies</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>DependencyFileGenerator</name> <range>: <expr><name>public</name> <name>DependencyCollector</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DependencyFileGenerator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DependencyOutputOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>attachToPreprocessor</name><argument_list>(<argument>Preprocessor &amp;PP</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>finishedMainFile</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>needSystemDependencies</name><argument_list>()</argument_list></macro> <name>final</name> <name>override</name> <block>{ <return>return <expr><name>IncludeSystemHeaders</name></expr>;</return> }</block>

<name>bool</name> <macro><name>sawDependency</name><argument_list>(<argument>StringRef Filename</argument>, <argument>bool FromModule</argument>, <argument>bool IsSystem</argument>,
<argument>bool IsModuleFile</argument>, <argument>bool IsMissing</argument>)</argument_list></macro> <name>final</name> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>outputDependencyFile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>outputDependencyFile</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>OutputFile</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Targets</name></expr>;
<expr><name>bool</name> <name>IncludeSystemHeaders</name></expr>;
<expr><name>bool</name> <name>PhonyTarget</name></expr>;
<expr><name>bool</name> <name>AddMissingHeaderDeps</name></expr>;
<expr><name>bool</name> <name>SeenMissingHeader</name></expr>;
<expr><name>bool</name> <name>IncludeModuleFiles</name></expr>;
<expr><name>DependencyOutputFormat</name> <name>OutputFormat</name></expr>;
<expr><name>unsigned</name> <name>InputFileIndex</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ModuleDependencyCollector</name> <range>: <expr><name>public</name> <name>DependencyCollector</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>DestDir</name></expr>;
<expr><name>bool</name> <name>HasErrors</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>Seen</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>YAMLVFSWriter</name> <name>VFSWriter</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>FileCollector</name><operator>::</operator><name>PathCanonicalizer</name> <name>Canonicalizer</name></expr>;

<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>copyToRoot</name><argument_list>(<argument>StringRef Src</argument>, <argument>StringRef Dst = {}</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ModuleDependencyCollector</name><argument_list>(<argument>std::string DestDir</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>DestDir</name><argument_list>(<argument>std::move(DestDir)</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><macro><name>ModuleDependencyCollector</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><call><name>writeFileMap</name><argument_list>()</argument_list></call></expr>; }</block>

<name>StringRef</name> <macro><name>getDest</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>DestDir</name></expr>;</return> }</block>
<name>virtual</name> <name>bool</name> <macro><name>insertSeen</name><argument_list>(<argument>StringRef Filename</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>Seen</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return> }</block>
<name>virtual</name> <name>void</name> <macro><name>addFile</name><argument_list>(<argument>StringRef Filename</argument>, <argument>StringRef FileDst = {}</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>addFileMapping</name><argument_list>(<argument>StringRef VPath</argument>, <argument>StringRef RPath</argument>)</argument_list></macro> <block>{
<expr><call><name><name>VFSWriter</name><operator>.</operator><name>addFileMapping</name></name><argument_list>(<argument><expr><name>VPath</name></expr></argument>, <argument><expr><name>RPath</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>attachToPreprocessor</name><argument_list>(<argument>Preprocessor &amp;PP</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>attachToASTReader</name><argument_list>(<argument>ASTReader &amp;R</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>writeFileMap</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>hasErrors</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>HasErrors</name></expr>;</return> }</block>
}</expr>;



<expr><name>void</name> <macro><name>AttachDependencyGraphGen</name><argument_list>(<argument>Preprocessor &amp;PP</argument>, <argument>StringRef OutputFile</argument>,
<argument>StringRef SysRoot</argument>)</argument_list></macro></expr>;













<expr><name>void</name> <macro><name>AttachHeaderIncludeGen</name><argument_list>(<argument>Preprocessor &amp;PP</argument>,
<argument>const DependencyOutputOptions &amp;DepOpts</argument>,
<argument>bool ShowAllHeaders = false</argument>,
<argument>StringRef OutputPath = {}</argument>,
<argument>bool ShowDepth = true</argument>, <argument>bool MSStyle = false</argument>)</argument_list></macro></expr>;



<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>ExternalSemaSource</name></expr></argument>&gt;</argument_list></name>
<call><name>createChainedIncludesSource</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>ExternalSemaSource</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Reader</name></expr></argument>)</argument_list></call></expr>;













<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInvocation</name></expr></argument>&gt;</argument_list></name> <macro><name>createInvocationFromCommandLine</name><argument_list>(
<argument>ArrayRef&lt;const char *&gt; Args</argument>,
<argument>IntrusiveRefCntPtr&lt;DiagnosticsEngine&gt; Diags =
IntrusiveRefCntPtr&lt;DiagnosticsEngine&gt;()</argument>,
<argument>IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; VFS = nullptr</argument>,
<argument>bool ShouldRecoverOnErrors = false</argument>,
<argument>std::vector&lt;std::string&gt; *CC1Args = nullptr</argument>)</argument_list></macro></expr>;



}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
