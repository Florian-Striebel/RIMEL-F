<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/TypoCorrection.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_TYPOCORRECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_TYPOCORRECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/DeclSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemberExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TypoCorrection</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>InvalidDistance</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MaximumDistance</name> <init>= <expr><literal type="number">10000U</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>CharDistanceWeight</name> <init>= <expr><literal type="number">100U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>QualifierDistanceWeight</name> <init>= <expr><literal type="number">110U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>CallbackDistanceWeight</name> <init>= <expr><literal type="number">150U</literal></expr></init></decl>;</decl_stmt>

<macro><name>TypoCorrection</name><argument_list>(<argument>const DeclarationName &amp;Name</argument>, <argument>NamedDecl *NameDecl</argument>,
<argument>NestedNameSpecifier *NNS = nullptr</argument>, <argument>unsigned CharDistance = <literal type="number">0</literal></argument>,
<argument>unsigned QualifierDistance = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CorrectionName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CorrectionNameSpec</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>CharDistance</name><argument_list>(<argument><expr><name>CharDistance</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>QualifierDistance</name><argument_list>(<argument>QualifierDistance</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>NameDecl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>NameDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<macro><name>TypoCorrection</name><argument_list>(<argument>NamedDecl *Name</argument>, <argument>NestedNameSpecifier *NNS = nullptr</argument>,
<argument>unsigned CharDistance = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CorrectionName</name><argument_list>(<argument><expr><call><name><name>Name</name><operator>-&gt;</operator><name>getDeclName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CorrectionNameSpec</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CharDistance</name><argument_list>(<argument>CharDistance</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>Name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<macro><name>TypoCorrection</name><argument_list>(<argument>DeclarationName Name</argument>, <argument>NestedNameSpecifier *NNS = nullptr</argument>,
<argument>unsigned CharDistance = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CorrectionName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CorrectionNameSpec</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CharDistance</name><argument_list>(<argument>CharDistance</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>TypoCorrection</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><name>DeclarationName</name> <macro><name>getCorrection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CorrectionName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getCorrectionAsIdentifierInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>CorrectionName</name><operator>.</operator><name>getAsIdentifierInfo</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getCorrectionSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CorrectionNameSpec</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCorrectionSpecifier</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>NNS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CorrectionNameSpec</name> <operator>=</operator> <name>NNS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ForceSpecifierReplacement</name> <operator>=</operator> <operator>(</operator><name>NNS</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WillReplaceSpecifier</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ForceReplacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ForceSpecifierReplacement</name> <operator>=</operator> <name>ForceReplacement</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>WillReplaceSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ForceSpecifierReplacement</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setQualifierDistance</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ED</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>QualifierDistance</name> <operator>=</operator> <name>ED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setCallbackDistance</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ED</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CallbackDistance</name> <operator>=</operator> <name>ED</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>NormalizeEditDistance</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ED</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ED</name> <operator>&gt;</operator> <name>MaximumDistance</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>InvalidDistance</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ED</name> <operator>+</operator> <name>CharDistanceWeight</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>CharDistanceWeight</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><name>unsigned</name></type> <name>getEditDistance</name><argument_list>(<argument><expr><name>bool</name> <name>Normalized</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CharDistance</name> <operator>&gt;</operator> <name>MaximumDistance</name> <operator>||</operator> <name>QualifierDistance</name> <operator>&gt;</operator> <name>MaximumDistance</name> <operator>||</operator>
<name>CallbackDistance</name> <operator>&gt;</operator> <name>MaximumDistance</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>InvalidDistance</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ED</name> <init>=
<expr><name>CharDistance</name> <operator>*</operator> <name>CharDistanceWeight</name> <operator>+</operator>
<name>QualifierDistance</name> <operator>*</operator> <name>QualifierDistanceWeight</name> <operator>+</operator>
<name>CallbackDistance</name> <operator>*</operator> <name>CallbackDistanceWeight</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ED</name> <operator>&gt;</operator> <name>MaximumDistance</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>InvalidDistance</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><ternary><condition><expr><name>Normalized</name></expr> ?</condition><then> <expr><call><name>NormalizeEditDistance</name><argument_list>(<argument><expr><name>ED</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getFoundDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasCorrectionDecl</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>*</operator><operator>(</operator><call><name><name>CorrectionDecls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getCorrectionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <operator>*</operator><name>D</name> <operator>=</operator> <call><name>getFoundDecl</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><name>D</name></expr> ?</condition><then> <expr><call><name><name>D</name><operator>-&gt;</operator><name>getUnderlyingDecl</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>DeclClass</name></expr></argument>&gt;</argument_list></name>
<name>DeclClass</name> <operator>*</operator><macro><name>getCorrectionDeclAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>DeclClass</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getCorrectionDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>ClearCorrectionDecls</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setCorrectionDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>CDecl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addCorrectionDecl</name><argument_list>(<argument><expr><name>CDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setCorrectionDecls</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Decls</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>addCorrectionDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>CDecl</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getAsString</name><argument_list>(<argument>const LangOptions &amp;LO</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getQuoted</name><argument_list>(<argument>const LangOptions &amp;LO</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><literal type="string">"'"</literal> <operator>+</operator> <call><name>getAsString</name><argument_list>(<argument><expr><name>LO</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>bool</name><argument_list>(<argument><expr><name>CorrectionName</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>





<function><type><name>void</name></type> <name>makeKeyword</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ForceSpecifierReplacement</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isKeyword</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>CorrectionDecls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>CorrectionDecls</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>StrLen</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>isKeyword</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call><index>[<expr><name>StrLen</name></expr>]</index></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isKeyword</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getCorrectionAsIdentifierInfo</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isStr</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isResolved</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>CorrectionDecls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isOverloaded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCorrectionRange</name><parameter_list>(<parameter><decl><type><name>CXXScopeSpec</name> <modifier>*</modifier></type><name>SS</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DeclarationNameInfo</name> <modifier>&amp;</modifier></type><name>TypoName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CorrectionRange</name> <operator>=</operator> <call><name><name>TypoName</name><operator>.</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ForceSpecifierReplacement</name> <operator>&amp;&amp;</operator> <name>SS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SS</name><operator>-&gt;</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>CorrectionRange</name><operator>.</operator><name>setBegin</name></name><argument_list>(<argument><expr><call><name><name>SS</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>SourceRange</name> <macro><name>getCorrectionRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CorrectionRange</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>decl_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>decl_iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>isKeyword</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>decl_iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>const_decl_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>const_decl_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isKeyword</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name><name>CorrectionDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>:</operator> <call><name><name>CorrectionDecls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>const_decl_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CorrectionDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>requiresImport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RequiresImport</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setRequiresImport</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Req</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>RequiresImport</name> <operator>=</operator> <name>Req</name></expr>;</expr_stmt> </block_content>}</block></function>



<function><type><name>void</name></type> <name>addExtraDiagnostic</name><parameter_list>(<parameter><decl><type><name>PartialDiagnostic</name></type> <name>PD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>ExtraDiagnostics</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>PD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnostic</name></expr></argument>&gt;</argument_list></name> <macro><name>getExtraDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExtraDiagnostics</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>hasCorrectionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><operator>!</operator><call><name>isKeyword</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>CorrectionDecls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>DeclarationName</name></type> <name>CorrectionName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>CorrectionNameSpec</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>CorrectionDecls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CharDistance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>QualifierDistance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CallbackDistance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>CorrectionRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ForceSpecifierReplacement</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>RequiresImport</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnostic</name></expr></argument>&gt;</argument_list></name> <name>ExtraDiagnostics</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CorrectionCandidateCallback</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>InvalidDistance</name> <init>= <expr><name>TypoCorrection</name><operator>::</operator><name>InvalidDistance</name></expr></init></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>CorrectionCandidateCallback</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>Typo</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>TypoNNS</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Typo</name><argument_list>(<argument><expr><name>Typo</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>TypoNNS</name><argument_list>(<argument>TypoNNS</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>CorrectionCandidateCallback</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>











<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ValidateCandidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>candidate</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>virtual</name> <name>unsigned</name></type> <name>RankCandidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>candidate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>MatchesTypo</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ValidateCandidate</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>InvalidDistance</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <call><name>clone</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>setTypoName</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Typo</name> <operator>=</operator> <name>II</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setTypoNNS</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>NNS</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>TypoNNS</name> <operator>=</operator> <name>NNS</name></expr>;</expr_stmt> </block_content>}</block></function>




<decl_stmt><decl><type><name>bool</name></type> <name>WantTypeSpecifiers</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WantExpressionKeywords</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WantCXXNamedCasts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WantFunctionLikeCasts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WantRemainingKeywords</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WantObjCSuper</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsObjCIvarLookup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsAddressOfOperand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<function><type><name>bool</name></type> <name>MatchesTypo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypoCorrection</name> <modifier>&amp;</modifier></type><name>candidate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Typo</name> <operator>&amp;&amp;</operator> <call><name><name>candidate</name><operator>.</operator><name>isResolved</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>candidate</name><operator>.</operator><name>requiresImport</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>candidate</name><operator>.</operator><name>getCorrectionAsIdentifierInfo</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Typo</name> <operator>&amp;&amp;</operator>


<call><name><name>candidate</name><operator>.</operator><name>getCorrectionSpecifier</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TypoNNS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Typo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>TypoNNS</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>DefaultFilterCCC</name></type> <name>final</name> <range>: <expr><name>public</name> <name>CorrectionCandidateCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>DefaultFilterCCC</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>Typo</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>TypoNNS</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>CorrectionCandidateCallback</name><argument_list>(<argument>Typo</argument>, <argument>TypoNNS</argument>)</argument_list></macro> <block>{}</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <macro><name>clone</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>DefaultFilterCCC</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>C</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>DeclFilterCCC</name> <name>final</name> <operator>:</operator> <name>public</name> <name>CorrectionCandidateCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>ValidateCandidate</name><argument_list>(<argument>const TypoCorrection &amp;candidate</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name><name>candidate</name><operator>.</operator><name>getCorrectionDeclAs</name></name><operator>&lt;</operator><name>C</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <macro><name>clone</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>DeclFilterCCC</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;




<expr><name>class</name> <name>FunctionCallFilterCCC</name> <operator>:</operator> <name>public</name> <name>CorrectionCandidateCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>FunctionCallFilterCCC</name><argument_list>(<argument>Sema &amp;SemaRef</argument>, <argument>unsigned NumArgs</argument>,
<argument>bool HasExplicitTemplateArgs</argument>,
<argument>MemberExpr *ME = nullptr</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>ValidateCandidate</name><argument_list>(<argument>const TypoCorrection &amp;candidate</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <macro><name>clone</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>FunctionCallFilterCCC</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>unsigned</name> <name>NumArgs</name></expr>;
<expr><name>bool</name> <name>HasExplicitTemplateArgs</name></expr>;
<expr><name>DeclContext</name> <operator>*</operator><name>CurContext</name></expr>;
<expr><name>MemberExpr</name> <operator>*</operator><name>MemberFn</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>NoTypoCorrectionCCC</name> <name>final</name> <operator>:</operator> <name>public</name> <name>CorrectionCandidateCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>NoTypoCorrectionCCC</name><argument_list>()</argument_list></macro> <block>{
<expr><name>WantTypeSpecifiers</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>WantExpressionKeywords</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>WantCXXNamedCasts</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>WantFunctionLikeCasts</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>WantRemainingKeywords</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>bool</name> <macro><name>ValidateCandidate</name><argument_list>(<argument>const TypoCorrection &amp;candidate</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CorrectionCandidateCallback</name></expr></argument>&gt;</argument_list></name> <macro><name>clone</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>NoTypoCorrectionCCC</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
