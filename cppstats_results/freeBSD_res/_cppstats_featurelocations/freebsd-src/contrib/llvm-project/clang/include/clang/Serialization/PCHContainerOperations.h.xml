<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_PCHCONTAINEROPERATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_PCHCONTAINEROPERATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>raw_pwrite_stream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>

<struct>struct <name>PCHBuffer</name> <block>{
<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Signature</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>Data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsComplete</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerWriter</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PCHContainerWriter</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreatePCHContainerGenerator</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>const std::string &amp;MainFileName</argument>,
<argument>const std::string &amp;OutputFileName</argument>,
<argument>std::unique_ptr&lt;llvm::raw_pwrite_stream&gt; OS</argument>,
<argument>std::shared_ptr&lt;PCHBuffer&gt; Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerReader</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PCHContainerReader</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>ExtractPCH</name><argument_list>(<argument>llvm::MemoryBufferRef Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>RawPCHContainerWriter</name> <range>: <expr><name>public</name> <name>PCHContainerWriter</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"raw"</literal></expr>;</return> }</block>



<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreatePCHContainerGenerator</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>const std::string &amp;MainFileName</argument>,
<argument>const std::string &amp;OutputFileName</argument>,
<argument>std::unique_ptr&lt;llvm::raw_pwrite_stream&gt; OS</argument>,
<argument>std::shared_ptr&lt;PCHBuffer&gt; Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>RawPCHContainerReader</name> <range>: <expr><name>public</name> <name>PCHContainerReader</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"raw"</literal></expr>;</return> }</block>


<name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>ExtractPCH</name><argument_list>(<argument>llvm::MemoryBufferRef Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerOperations</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerWriter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Writers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerReader</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Readers</name></expr>;</expr_stmt>
<label><name>public</name>:</label>


<expr_stmt><expr><call><name>PCHContainerOperations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>registerWriter</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerWriter</name></expr></argument>&gt;</argument_list></name> <name>Writer</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>Writers</name><index>[<expr><call><name><name>Writer</name><operator>-&gt;</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>registerReader</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerReader</name></expr></argument>&gt;</argument_list></name> <name>Reader</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>Readers</name><index>[<expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PCHContainerWriter</name> <modifier>*</modifier></type><name>getWriterOrNull</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Format</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>Writers</name><index>[<expr><name>Format</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PCHContainerReader</name> <modifier>*</modifier></type><name>getReaderOrNull</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Format</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>Readers</name><index>[<expr><name>Format</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><specifier>const</specifier> <name>PCHContainerReader</name> <modifier>&amp;</modifier></type><name>getRawReader</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><call><name>getReaderOrNull</name><argument_list>(<argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
