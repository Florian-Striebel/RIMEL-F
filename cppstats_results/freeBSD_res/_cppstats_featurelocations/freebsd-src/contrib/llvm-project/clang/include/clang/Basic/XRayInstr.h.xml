<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/XRayInstr.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_XRAYINSTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_XRAYINSTR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>XRayInstrMask</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>XRayInstrKind</name> <block>{<block_content>


<enum>enum <name>XRayInstrOrdinal</name> : <type><name>XRayInstrMask</name></type> <block>{
<decl><name>XRIO_FunctionEntry</name></decl>,
<decl><name>XRIO_FunctionExit</name></decl>,
<decl><name>XRIO_Custom</name></decl>,
<decl><name>XRIO_Typed</name></decl>,
<decl><name>XRIO_Count</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>FunctionEntry</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>XRIO_FunctionEntry</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>FunctionExit</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>XRIO_FunctionExit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>Custom</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>XRIO_Custom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>Typed</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>XRIO_Typed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>XRayInstrMask</name></type> <name>All</name> <init>= <expr><name>FunctionEntry</name> <operator>|</operator> <name>FunctionExit</name> <operator>|</operator> <name>Custom</name> <operator>|</operator> <name>Typed</name></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<struct>struct <name>XRayInstrSet</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>has</name><argument_list>(<argument><expr><name>XRayInstrMask</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>isPowerOf2_32</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Mask</name> <operator>&amp;</operator> <name>K</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasOneOf</name><argument_list>(<argument><expr><name>XRayInstrMask</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Mask</name> <operator>&amp;</operator> <name>K</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>XRayInstrMask</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Mask</name> <operator>=</operator> <ternary><condition><expr><name>Value</name></expr> ?</condition><then> <expr><operator>(</operator><name>Mask</name> <operator>|</operator> <name>K</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>Mask</name> <operator>&amp;</operator> <operator>~</operator><name>K</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>XRayInstrMask</name></type> <name>K</name> <init>= <expr><name>XRayInstrKind</name><operator>::</operator><name>All</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Mask</name> <operator>&amp;=</operator> <operator>~</operator><name>K</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mask</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>full</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mask</name> <operator>==</operator> <name>XRayInstrKind</name><operator>::</operator><name>All</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>XRayInstrMask</name></type> <name>Mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>XRayInstrMask</name></type> <name>parseXRayInstrValue</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>serializeXRayInstrValue</name><parameter_list>(<parameter><decl><type><name>XRayInstrSet</name></type> <name>Set</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Values</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
