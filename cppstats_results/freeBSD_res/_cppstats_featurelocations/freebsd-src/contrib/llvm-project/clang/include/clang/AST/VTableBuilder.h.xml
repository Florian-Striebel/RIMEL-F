<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/VTableBuilder.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_VTABLEBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_VTABLEBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/BaseSubobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CXXInheritance.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/GlobalDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/RecordLayout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Thunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>VTableComponent</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>CK_VCallOffset</name></decl>,
<decl><name>CK_VBaseOffset</name></decl>,
<decl><name>CK_OffsetToTop</name></decl>,
<decl><name>CK_RTTI</name></decl>,
<decl><name>CK_FunctionPointer</name></decl>,


<decl><name>CK_CompleteDtorPointer</name></decl>,


<decl><name>CK_DeletingDtorPointer</name></decl>,






<decl><name>CK_UnusedFunctionPointer</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>VTableComponent</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeVCallOffset</name><parameter_list>(<parameter><decl><type><name>CharUnits</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_VCallOffset</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeVBaseOffset</name><parameter_list>(<parameter><decl><type><name>CharUnits</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_VBaseOffset</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeOffsetToTop</name><parameter_list>(<parameter><decl><type><name>CharUnits</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_OffsetToTop</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeRTTI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_RTTI</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Don't use MakeFunction with destructors!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_FunctionPointer</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeCompleteDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDestructorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_CompleteDtorPointer</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeDeletingDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDestructorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_DeletingDtorPointer</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTableComponent</name></type> <name>MakeUnusedFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Don't use MakeUnusedFunction with destructors!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VTableComponent</name><argument_list>(<argument><expr><name>CK_UnusedFunctionPointer</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>Kind</name><operator>)</operator><operator>(</operator><name>Value</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getVCallOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_VCallOffset</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getVBaseOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_VBaseOffset</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getOffsetToTop</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_OffsetToTop</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getRTTIDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isRTTIKind</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator><macro><name>getFunctionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFunctionPointerKind</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>isDestructorKind</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getDestructorDecl</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CXXDestructorDecl</name> <operator>*</operator><macro><name>getDestructorDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isDestructorKind</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator><macro><name>getUnusedFunctionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_UnusedFunctionPointer</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isDestructorKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isDestructorKind</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUsedFunctionPointerKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isUsedFunctionPointerKind</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isFunctionPointerKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isFunctionPointerKind</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isRTTIKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isRTTIKind</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>GlobalDecl</name> <macro><name>getGlobalDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isUsedFunctionPointerKind</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"GlobalDecl can be created only from virtual function"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>auto</name> <operator>*</operator><name>DtorDecl</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFunctionDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CK_FunctionPointer</name></expr>:</case>
<return>return <expr><call><name>GlobalDecl</name><argument_list>(<argument><expr><call><name>getFunctionDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CK_CompleteDtorPointer</name></expr>:</case>
<return>return <expr><call><name>GlobalDecl</name><argument_list>(<argument><expr><name>DtorDecl</name></expr></argument>, <argument><expr><name>CXXDtorType</name><operator>::</operator><name>Dtor_Complete</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CK_DeletingDtorPointer</name></expr>:</case>
<return>return <expr><call><name>GlobalDecl</name><argument_list>(<argument><expr><name>DtorDecl</name></expr></argument>, <argument><expr><name>CXXDtorType</name><operator>::</operator><name>Dtor_Deleting</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CK_VCallOffset</name></expr>:</case>
<case>case <expr><name>CK_VBaseOffset</name></expr>:</case>
<case>case <expr><name>CK_OffsetToTop</name></expr>:</case>
<case>case <expr><name>CK_RTTI</name></expr>:</case>
<case>case <expr><name>CK_UnusedFunctionPointer</name></expr>:</case>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Only function pointers kinds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
llvm_unreachable("Should already return"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isFunctionPointerKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>ComponentKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>isUsedFunctionPointerKind</name><argument_list>(<argument><expr><name>ComponentKind</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>ComponentKind</name> <operator>==</operator> <name>CK_UnusedFunctionPointer</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isUsedFunctionPointerKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>ComponentKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ComponentKind</name> <operator>==</operator> <name>CK_FunctionPointer</name> <operator>||</operator>
<call><name>isDestructorKind</name><argument_list>(<argument><expr><name>ComponentKind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isDestructorKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>ComponentKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ComponentKind</name> <operator>==</operator> <name>CK_CompleteDtorPointer</name> <operator>||</operator>
<name>ComponentKind</name> <operator>==</operator> <name>CK_DeletingDtorPointer</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isRTTIKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>ComponentKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ComponentKind</name> <operator>==</operator> <name>CK_RTTI</name></expr>;</return>
</block_content>}</block></function>

<macro><name>VTableComponent</name><argument_list>(<argument>Kind ComponentKind</argument>, <argument>CharUnits Offset</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ComponentKind</name> <operator>==</operator> <name>CK_VCallOffset</name> <operator>||</operator>
<name>ComponentKind</name> <operator>==</operator> <name>CK_VBaseOffset</name> <operator>||</operator>
<name>ComponentKind</name> <operator>==</operator> <name>CK_OffsetToTop</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Offset</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Offset is too big!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Offset</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Offset is too small!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Value</name> <operator>=</operator> <operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><call><name><name>Offset</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>ComponentKind</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>VTableComponent</name><argument_list>(<argument>Kind ComponentKind</argument>, <argument>uintptr_t Ptr</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>isRTTIKind</name><argument_list>(<argument><expr><name>ComponentKind</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isFunctionPointerKind</name><argument_list>(<argument><expr><name>ComponentKind</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Ptr</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Pointer not sufficiently aligned!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Value</name> <operator>=</operator> <name>Ptr</name> <operator>|</operator> <name>ComponentKind</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_VCallOffset</name> <operator>||</operator> <call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_VBaseOffset</name> <operator>||</operator>
<call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_OffsetToTop</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Value</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uintptr_t</name> <macro><name>getPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_RTTI</name> <operator>||</operator> <call><name>isFunctionPointerKind</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid component kind!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7ULL</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<decl_stmt><decl><type><name>int64_t</name></type> <name>Value</name></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>VTableLayout</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ThunkInfo</name></expr></argument>&gt;</argument_list></name> <name>VTableThunkTy</name></expr>;</expr_stmt></typedef>
<struct>struct <name>AddressPointLocation</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>VTableIndex</name></decl>, <decl><type ref="prev"/><name>AddressPointIndex</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>AddressPointLocation</name></expr></argument>&gt;</argument_list></name>
<name>AddressPointsMapTy</name></expr>;</expr_stmt></typedef>




<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>AddressPointsIndexMapTy</name></expr>;</expr_stmt></typedef>

<label><name>private</name>:</label>




<decl_stmt><decl><type><name><name>OwningArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>VTableIndices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>OwningArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableComponent</name></expr></argument>&gt;</argument_list></name></type> <name>VTableComponents</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>OwningArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableThunkTy</name></expr></argument>&gt;</argument_list></name></type> <name>VTableThunks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AddressPointsMapTy</name></type> <name>AddressPoints</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AddressPointsIndexMapTy</name></type> <name>AddressPointIndices</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VTableLayout</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>VTableIndices</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableComponent</name></expr></argument>&gt;</argument_list></name> <name>VTableComponents</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableThunkTy</name></expr></argument>&gt;</argument_list></name> <name>VTableThunks</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AddressPointsMapTy</name> <operator>&amp;</operator><name>AddressPoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>VTableLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableComponent</name></expr></argument>&gt;</argument_list></name> <macro><name>vtable_components</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>VTableComponents</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VTableThunkTy</name></expr></argument>&gt;</argument_list></name> <macro><name>vtable_thunks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>VTableThunks</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>AddressPointLocation</name></type> <name>getAddressPoint</name><argument_list>(<argument><expr><name>BaseSubobject</name> <name>Base</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>AddressPoints</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Did not find address point!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>AddressPoints</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AddressPointsMapTy</name> <operator>&amp;</operator><macro><name>getAddressPoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>AddressPoints</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AddressPointsIndexMapTy</name> <operator>&amp;</operator><macro><name>getAddressPointIndices</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>AddressPointIndices</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>getNumVTables</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>VTableIndices</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>VTableIndices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>getVTableOffset</name><argument_list>(<argument><expr><name>size_t</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>VTableIndices</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>VTableIndices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>getVTableSize</name><argument_list>(<argument><expr><name>size_t</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>VTableIndices</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vtable_components</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>thisIndex</name> <init>= <expr><name><name>VTableIndices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nextIndex</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>VTableIndices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><call><name>vtable_components</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name><name>VTableIndices</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><name>nextIndex</name> <operator>-</operator> <name>thisIndex</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>VTableContextBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ThunkInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>ThunkInfoVectorTy</name>;</typedef>

<expr_stmt><expr><name>bool</name> <macro><name>isMicrosoft</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsMicrosoftABI</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>VTableContextBase</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>protected</name><operator>:</operator></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>ThunkInfoVectorTy</name></expr></argument>&gt;</argument_list></name> <name>ThunksMapTy</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>ThunksMapTy</name></type> <name>Thunks</name></decl>;</decl_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>computeVTableRelatedInformation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<macro><name>VTableContextBase</name><argument_list>(<argument>bool MS</argument>)</argument_list></macro> : <macro><name>IsMicrosoftABI</name><argument_list>(<argument>MS</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>public</name>:</label>
<function><type><name>virtual</name> <specifier>const</specifier> <name>ThunkInfoVectorTy</name> <modifier>*</modifier></type><name>getThunkInfo</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name> <init>= <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>GD</name><operator>.</operator><name>getDecl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getCanonicalDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>computeVTableRelatedInformation</name><argument_list>(<argument><expr><call><name><name>MD</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>ThunksMapTy</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Thunks</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <call><name><name>Thunks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>IsMicrosoftABI</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hasVtableSlot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ItaniumVTableContext</name> <range>: <expr><name>public</name> <name>VTableContextBase</name> <block>{
<expr><name>private</name><operator>:</operator></expr>



<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>GlobalDecl</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <name>MethodVTableIndicesTy</name></expr>;</expr_stmt></typedef>
<name>MethodVTableIndicesTy</name> <name>MethodVTableIndices</name></block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VTableLayout</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>VTableLayoutMapTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>VTableLayoutMapTy</name></type> <name>VTableLayouts</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ClassPairTy</name></expr>;</expr_stmt></typedef>





<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>ClassPairTy</name></expr></argument>, <argument><expr><name>CharUnits</name></expr></argument>&gt;</argument_list></name>
<name>VirtualBaseClassOffsetOffsetsMapTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>VirtualBaseClassOffsetOffsetsMapTy</name></type> <name>VirtualBaseClassOffsetOffsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>computeVTableRelatedInformation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>VTableComponentLayout</name> <block>{

<decl><name>Pointer</name></decl>,



<decl><name>Relative</name></decl>,
}</block>;</enum>

<macro><name>ItaniumVTableContext</name><argument_list>(<argument>ASTContext &amp;Context</argument>,
<argument>VTableComponentLayout ComponentLayout = Pointer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>ItaniumVTableContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><specifier>const</specifier> <name>VTableLayout</name> <modifier>&amp;</modifier></type><name>getVTableLayout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>computeVTableRelatedInformation</name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>VTableLayouts</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No layout for this record decl!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name><name>VTableLayouts</name><index>[<expr><name>RD</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>VTableLayout</name></expr></argument>&gt;</argument_list></name> <macro><name>createConstructionVTableLayout</name><argument_list>(
<argument>const CXXRecordDecl *MostDerivedClass</argument>, <argument>CharUnits MostDerivedClassOffset</argument>,
<argument>bool MostDerivedClassIsVirtual</argument>, <argument>const CXXRecordDecl *LayoutClass</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>uint64_t</name></type> <name>getMethodVTableIndex</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CharUnits</name></type> <name>getVirtualBaseOffsetOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>VBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTableContextBase</name> <modifier>*</modifier></type><name>VT</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name><name>VT</name><operator>-&gt;</operator><name>isMicrosoft</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>VTableComponentLayout</name> <macro><name>getVTableComponentLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ComponentLayout</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isPointerLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ComponentLayout</name> <operator>==</operator> <name>Pointer</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isRelativeLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ComponentLayout</name> <operator>==</operator> <name>Relative</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>VTableComponentLayout</name></type> <name>ComponentLayout</name></decl>;</decl_stmt>
};




<struct>struct <name>VPtrInfo</name> <block>{
<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>BasePath</name>;</typedef>

<expr_stmt><expr><call><name>VPtrInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ObjectWithVPtr</name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IntroducingObject</name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NextBaseToMangle</name><argument_list>(<argument>RD</argument>)</argument_list></macro> <expr><block>{}</block>




<specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>ObjectWithVPtr</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>IntroducingObject</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>NonVirtualOffset</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>BasePath</name></type> <name>MangledPath</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>NextBaseToMangle</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BasePath</name></type> <name>ContainingVBases</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BasePath</name></type> <name>PathToIntroducingObject</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>FullOffsetInMDC</name></decl>;</decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getVBaseWithVPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ContainingVBases</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <call><name><name>ContainingVBases</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>VPtrInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>VPtrInfoVector</name>;</typedef>




<struct>struct <name>VirtualBaseInfo</name> <block>{


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>VBTableIndices</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>VPtrInfoVector</name></type> <name>VBPtrPaths</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>MethodVFTableLocation</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>VBTableIndex</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>VBase</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>VFPtrOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>Index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MethodVFTableLocation</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>VBTableIndex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VBase</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VFPtrOffset</name><argument_list>(<argument><expr><name>CharUnits</name><operator>::</operator><call><name>Zero</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Index</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>MethodVFTableLocation</name><argument_list>(<argument>uint64_t VBTableIndex</argument>, <argument>const CXXRecordDecl *VBase</argument>,
<argument>CharUnits VFPtrOffset</argument>, <argument>uint64_t Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>VBTableIndex</name><argument_list>(<argument><expr><name>VBTableIndex</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VBase</name><argument_list>(<argument><expr><name>VBase</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VFPtrOffset</name><argument_list>(<argument><expr><name>VFPtrOffset</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>MethodVFTableLocation</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>VBTableIndex</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>VBTableIndex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>VBase</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>VBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VBTableIndex</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>VBTableIndex</name></name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>VFPtrOffset</name></expr></argument>, <argument><expr><name>Index</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>VFPtrOffset</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>Index</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl/></struct>};

<decl_stmt><decl><type><name>class</name></type> <name>MicrosoftVTableContext</name> <range>: <expr><name>public</name> <name>VTableContextBase</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>private</name><operator>:</operator>
<name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr>;

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>GlobalDecl</name></expr></argument>, <argument><expr><name>MethodVFTableLocation</name></expr></argument>&gt;</argument_list></name>
<name>MethodVFTableLocationsTy</name></expr>;</expr_stmt></typedef>
<name>MethodVFTableLocationsTy</name> <name>MethodVFTableLocations</name></block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>VPtrInfoVector</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>VFPtrLocationsMapTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>VFPtrLocationsMapTy</name></type> <name>VFPtrLocations</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CharUnits</name></expr></argument>&gt;</argument_list></name> <name>VFTableIdTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>VFTableIdTy</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VTableLayout</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>VFTableLayoutMapTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>VFTableLayoutMapTy</name></type> <name>VFTableLayouts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>VirtualBaseInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>VBaseInfo</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>enumerateVFPtrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>ForClass</name></decl></parameter>, <parameter><decl><type><name>VPtrInfoVector</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>computeVTableRelatedInformation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>dumpMethodLocations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MethodVFTableLocationsTy</name> <modifier>&amp;</modifier></type><name>NewMethods</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>VirtualBaseInfo</name> <modifier>&amp;</modifier></type>
<name>computeVBTableRelatedInformation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>computeVTablePaths</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ForVBTables</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><name>VPtrInfoVector</name> <modifier>&amp;</modifier></type><name>Paths</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MicrosoftVTableContext</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>VTableContextBase</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Context</name><argument_list>(<argument>Context</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>MicrosoftVTableContext</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>VPtrInfoVector</name> <modifier>&amp;</modifier></type><name>getVFPtrOffsets</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>VTableLayout</name> <modifier>&amp;</modifier></type><name>getVFTableLayout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><name>CharUnits</name></type> <name>VFPtrOffset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MethodVFTableLocation</name></type> <name>getMethodVFTableLocation</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>ThunkInfoVectorTy</name> <modifier>*</modifier></type><name>getThunkInfo</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list> override <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>GD</name><operator>.</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>GD</name><operator>.</operator><name>getDtorType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Dtor_Complete</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VTableContextBase</name><operator>::</operator><call><name>getThunkInfo</name><argument_list>(<argument><expr><name>GD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function_decl><type><name>unsigned</name></type> <name>getVBTableIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Derived</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>VBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>VPtrInfoVector</name> <modifier>&amp;</modifier></type><name>enumerateVBTables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTableContextBase</name> <modifier>*</modifier></type><name>VT</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>VT</name><operator>-&gt;</operator><name>isMicrosoft</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
