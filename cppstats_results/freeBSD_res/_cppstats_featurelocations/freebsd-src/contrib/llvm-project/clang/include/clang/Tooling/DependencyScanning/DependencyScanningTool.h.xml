<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_TOOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_TOOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/DependencyScanningService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/DependencyScanningWorker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/ModuleDepCollector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/JSONCompilationDatabase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name><block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name><block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dependencies</name><block>{<block_content>


<struct>struct <name>FullDependencies</name> <block>{



<decl_stmt><decl><type><name>ModuleID</name></type> <name>ID</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>FileDeps</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PrebuiltModuleDep</name></expr></argument>&gt;</argument_list></name> <name>PrebuiltModuleDeps</name></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleID</name></expr></argument>&gt;</argument_list></name> <name>ClangModuleDeps</name></expr>;</expr_stmt>












<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAdditionalArgs</name><argument_list>(
<argument>std::function&lt;StringRef(ModuleID)&gt; LookupPCMPath</argument>,
<argument>std::function&lt;const ModuleDeps &amp;(ModuleID)&gt; LookupModuleDeps</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAdditionalArgsWithoutModulePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>FullDependenciesResult</name> <block>{
<decl_stmt><decl><type><name>FullDependencies</name></type> <name>FullDeps</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleDeps</name></expr></argument>&gt;</argument_list></name> <name>DiscoveredModules</name></expr>;</expr_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningTool</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>DependencyScanningTool</name><argument_list>(<argument><expr><name>DependencyScanningService</name> <operator>&amp;</operator><name>Service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDependencyFile</name><argument_list>(<argument>const tooling::CompilationDatabase &amp;Compilations</argument>,
<argument>StringRef CWD</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>FullDependenciesResult</name></expr></argument>&gt;</argument_list></name>
<macro><name>getFullDependencies</name><argument_list>(<argument>const tooling::CompilationDatabase &amp;Compilations</argument>,
<argument>StringRef CWD</argument>, <argument>const llvm::StringSet&lt;&gt; &amp;AlreadySeen</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>DependencyScanningWorker</name></type> <name>Worker</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
