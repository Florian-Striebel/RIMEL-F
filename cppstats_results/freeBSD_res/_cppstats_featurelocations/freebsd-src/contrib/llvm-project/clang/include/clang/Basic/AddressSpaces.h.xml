<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/AddressSpaces.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_ADDRESSSPACES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_ADDRESSSPACES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>LangAS</name> <range>: <expr><name>unsigned</name> <block>{


<expr><name>Default</name> <operator>=</operator> <literal type="number">0</literal></expr>,





<expr><name>opencl_global</name></expr>,
<expr><name>opencl_local</name></expr>,
<expr><name>opencl_constant</name></expr>,
<expr><name>opencl_private</name></expr>,
<expr><name>opencl_generic</name></expr>,
<expr><name>opencl_global_device</name></expr>,
<expr><name>opencl_global_host</name></expr>,


<expr><name>cuda_device</name></expr>,
<expr><name>cuda_constant</name></expr>,
<expr><name>cuda_shared</name></expr>,


<expr><name>sycl_global</name></expr>,
<expr><name>sycl_global_device</name></expr>,
<expr><name>sycl_global_host</name></expr>,
<expr><name>sycl_local</name></expr>,
<expr><name>sycl_private</name></expr>,


<expr><name>ptr32_sptr</name></expr>,
<expr><name>ptr32_uptr</name></expr>,
<expr><name>ptr64</name></expr>,




<expr><name>FirstTargetAddressSpace</name></expr>
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>LangASMap</name> <init>= <expr><name><name>unsigned</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>LangAS</name><operator>::</operator><name>FirstTargetAddressSpace</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isTargetAddressSpace</name><parameter_list>(<parameter><decl><type><name>LangAS</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>AS</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>LangAS</name><operator>::</operator><name>FirstTargetAddressSpace</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>toTargetAddressSpace</name><parameter_list>(<parameter><decl><type><name>LangAS</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isTargetAddressSpace</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>AS</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>LangAS</name><operator>::</operator><name>FirstTargetAddressSpace</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>LangAS</name></type> <name>getLangASFromTargetAS</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>TargetAS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>LangAS</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>TargetAS</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>LangAS</name><operator>::</operator><name>FirstTargetAddressSpace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isPtrSizeAddressSpace</name><parameter_list>(<parameter><decl><type><name>LangAS</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>AS</name> <operator>==</operator> <name>LangAS</name><operator>::</operator><name>ptr32_sptr</name> <operator>||</operator> <name>AS</name> <operator>==</operator> <name>LangAS</name><operator>::</operator><name>ptr32_uptr</name> <operator>||</operator>
<name>AS</name> <operator>==</operator> <name>LangAS</name><operator>::</operator><name>ptr64</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
