<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_CONSTANTINITFUTURE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_CONSTANTINITFUTURE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Constant.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ConstantInitBuilderBase</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>ConstantInitBuilderBase</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>T</name> <operator>=</operator> <operator>::</operator><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>ConstantInitBuilderBase</name><operator>*</operator></expr>;

<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>T p</argument>)</argument_list></macro> <block>{ <return>return <expr><name>p</name></expr>;</return> }</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>T</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *p</argument>)</argument_list></macro> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
<specifier>static</specifier> <name>constexpr</name> <name>int</name> <name>NumLowBitsAvailable</name> <operator>=</operator> <literal type="number">2</literal></expr>;
}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>ConstantInitFuture</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>PairTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>ConstantInitBuilderBase</name><operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PairTy</name></type> <name>Data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ConstantInitBuilderBase</name></decl>;</decl_stmt>
<function_decl><type><name>explicit</name></type> <name>ConstantInitFuture</name><parameter_list>(<parameter><decl><type><name>ConstantInitBuilderBase</name> <modifier>*</modifier></type><name>builder</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>ConstantInitFuture</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>


<decl_stmt><decl><type><name>explicit</name></type> <name>ConstantInitFuture</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>initializer</name></expr></argument>)</argument_list> <range>: <macro><name>Data</name><argument_list>(<argument>initializer</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>initializer</name> <operator>&amp;&amp;</operator> <literal type="string">"creating null future"</literal></expr></argument>)</argument_list></call></expr>;
}</block>


<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>bool</name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></range></decl></decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>abandon</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>installInGlobal</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>global</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getOpaqueValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>ConstantInitFuture</name></type> <name>getFromOpaqueValue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ConstantInitFuture</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>PairTy</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>PairTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>NumLowBitsAvailable</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt; <argument><expr><operator>::</operator><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>ConstantInitFuture</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>T</name> <operator>=</operator> <operator>::</operator><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>ConstantInitFuture</name></expr>;

<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>T future</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>future</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>T</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *p</argument>)</argument_list></macro> <block>{
<return>return <expr><name>T</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>constexpr</name> <name>int</name> <name>NumLowBitsAvailable</name> <operator>=</operator> <name>T</name><operator>::</operator><name>NumLowBitsAvailable</name></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
