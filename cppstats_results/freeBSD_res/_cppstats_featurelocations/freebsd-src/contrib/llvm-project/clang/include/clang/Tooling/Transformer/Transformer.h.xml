<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_TRANSFORMER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_TRANSFORMER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/AtomicChange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/RewriteRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>Transformer</name> <range>: <expr><name>public</name> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>ChangeConsumer</name> <operator>=</operator>
<name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>AtomicChange</name></expr></argument>&gt;</argument_list></name> <name>Change</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;






<macro><name>Transformer</name><argument_list>(<argument>transformer::RewriteRule Rule</argument>, <argument>ChangeConsumer Consumer</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Rule</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Rule</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>Consumer</name><argument_list>(<argument>std::move(Consumer)</argument>)</argument_list></macro> <expr><block>{}</block>



<name>void</name> <call><name>registerMatchers</name><argument_list>(<argument><expr><name>ast_matchers</name><operator>::</operator><name>MatchFinder</name> <operator>*</operator><name>MatchFinder</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>transformer</name><operator>::</operator><name>RewriteRule</name> <name>Rule</name></expr>;

<expr><name>ChangeConsumer</name> <name>Consumer</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
