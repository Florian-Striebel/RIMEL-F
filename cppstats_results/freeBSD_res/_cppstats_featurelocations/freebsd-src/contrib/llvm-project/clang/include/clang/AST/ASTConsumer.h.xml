<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTConsumer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTCONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTCONSUMER_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclGroupRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTMutationListener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTDeserializationListener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SemaConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ImportDecl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name> <block>{<block_content>


<decl_stmt><decl><type><name>bool</name></type> <name>SemaConsumer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SemaConsumer</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTConsumer</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>SemaConsumer</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{ }</block>

<name>virtual</name> <operator>~</operator><macro><name>ASTConsumer</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>void</name> <macro><name>Initialize</name><argument_list>(<argument>ASTContext &amp;Context</argument>)</argument_list></macro> <block>{}</block>





<name>virtual</name> <name>bool</name> <macro><name>HandleTopLevelDecl</name><argument_list>(<argument>DeclGroupRef D</argument>)</argument_list></macro></expr>;</expr_stmt>



<function><type><name>virtual</name> <name>void</name></type> <name>HandleInlineFunctionDefinition</name><parameter_list>(<parameter><decl><type><name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>HandleInterestingDecl</name><parameter_list>(<parameter><decl><type><name>DeclGroupRef</name></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>virtual</name> <name>void</name></type> <name>HandleTranslationUnit</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>HandleTagDeclDefinition</name><parameter_list>(<parameter><decl><type><name>TagDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>HandleTagDeclRequiredDefinition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>HandleCXXImplicitFunctionInstantiation</name><parameter_list>(<parameter><decl><type><name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>HandleTopLevelDeclInObjCContainer</name><parameter_list>(<parameter><decl><type><name>DeclGroupRef</name></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>HandleImplicitImportDecl</name><parameter_list>(<parameter><decl><type><name>ImportDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>










<function><type><name>virtual</name> <name>void</name></type> <name>CompleteTentativeDefinition</name><parameter_list>(<parameter><decl><type><name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>CompleteExternalDeclaration</name><parameter_list>(<parameter><decl><type><name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>AssignInheritanceModel</name><parameter_list>(<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>HandleCXXStaticMemberVarInstantiation</name><parameter_list>(<parameter><decl><type><name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>HandleVTable</name><parameter_list>(<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>ASTMutationListener</name> <modifier>*</modifier></type><name>GetASTMutationListener</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>



<function><type><name>virtual</name> <name>ASTDeserializationListener</name> <modifier>*</modifier></type><name>GetASTDeserializationListener</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>bool</name></type> <name>shouldSkipFunctionBody</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
