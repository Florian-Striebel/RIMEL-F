<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentBriefParser.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTBRIEFPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTBRIEFPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentLexer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>BriefParser</name> <block>{<block_content>
<decl_stmt><decl><type><name>Lexer</name> <modifier>&amp;</modifier></type><name>L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandTraits</name> <modifier>&amp;</modifier></type><name>Traits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Token</name></type> <name>Tok</name></decl>;</decl_stmt>

<function><type><name>SourceLocation</name></type> <name>ConsumeToken</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name> <init>= <expr><call><name><name>Tok</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>lex</name></name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Loc</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BriefParser</name><argument_list>(<argument><expr><name>Lexer</name> <operator>&amp;</operator><name>L</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CommandTraits</name> <operator>&amp;</operator><name>Traits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>Parse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
