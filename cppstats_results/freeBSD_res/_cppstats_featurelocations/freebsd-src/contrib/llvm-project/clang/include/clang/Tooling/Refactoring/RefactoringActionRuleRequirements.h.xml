<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULE_REQUIREMENTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULE_REQUIREMENTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/ASTSelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringOption.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringRuleContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>














<decl_stmt><decl><type><name>class</name></type> <name>RefactoringActionRuleRequirement</name> <block>{<block_content>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SourceSelectionRequirement</name> <range>: <expr><name>public</name> <name>RefactoringActionRuleRequirement</name> <block>{}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SourceRangeSelectionRequirement</name> <range>: <expr><name>public</name> <name>SourceSelectionRequirement</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>evaluate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Context</name><operator>.</operator><name>getSelectionRange</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Context</name><operator>.</operator><name>getSelectionRange</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>Context</name><operator>.</operator><name>createDiagnosticError</name></name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>err_refactor_no_selection</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ASTSelectionRequirement</name> <range>: <expr><name>public</name> <name>SourceRangeSelectionRequirement</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name> <macro><name>evaluate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>CodeRangeASTSelectionRequirement</name> <range>: <expr><name>public</name> <name>ASTSelectionRequirement</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>CodeRangeASTSelection</name></expr></argument>&gt;</argument_list></name>
<macro><name>evaluate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>RefactoringOptionsRequirement</name> <range>: <expr><name>public</name> <name>RefactoringActionRuleRequirement</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>RefactoringOptionsRequirement</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>virtual</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOption</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getRefactoringOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>OptionType</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OptionRequirement</name> <range>: <expr><name>public</name> <name>RefactoringOptionsRequirement</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionRequirement</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Opt</name><argument_list>(<argument>createRefactoringOption&lt;OptionType&gt;()</argument>)</argument_list></macro> <block>{}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOption</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getRefactoringOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <name>override</name> <block>{
<return>return <expr><name>Opt</name></expr>;</return>
}</block>

<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>OptionType</name><operator>::</operator><name>ValueType</name></expr></argument>&gt;</argument_list></name>
<macro><name>evaluate</name><argument_list>(<argument>RefactoringRuleContext &amp;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>OptionType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Opt</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>





<name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOption</name></expr></argument>&gt;</argument_list></name> <name>Opt</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
