<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_APSINTTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_APSINTTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>APSIntType</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>BitWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsUnsigned</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>APSIntType</name><argument_list>(<argument>uint32_t Width</argument>, <argument>bool Unsigned</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>BitWidth</name><argument_list>(<argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsUnsigned</name><argument_list>(<argument>Unsigned</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>APSIntType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>BitWidth</name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getBitWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsUnsigned</name><argument_list>(<argument>Value.isUnsigned()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>uint32_t</name> <macro><name>getBitWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BitWidth</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsUnsigned</name></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>apply</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list> const <block>{<block_content>


<expr_stmt><expr><name>Value</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>extOrTrunc</name></name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Value</name><operator>.</operator><name>setIsUnsigned</name></name><argument_list>(<argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>convert</name><argument_list>(<argument>const llvm::APSInt &amp;Value</argument>)</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>APSInt</name> <call><name>Result</name><argument_list>(<argument><expr><name>Value</name></expr></argument>, <argument><expr><call><name><name>Value</name><operator>.</operator><name>isUnsigned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>apply</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Result</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getZeroValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>APSInt</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getMinValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>APSInt</name><operator>::</operator><call><name>getMinValue</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getMaxValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>APSInt</name><operator>::</operator><call><name>getMaxValue</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getValue</name><argument_list>(<argument>uint64_t RawValue</argument>)</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><operator>(</operator><name>llvm</name><operator>::</operator><call><name>APSInt</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>RawValue</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>




<enum>enum <name>RangeTestResultKind</name> <block>{
<decl><name>RTR_Below</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>RTR_Within</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>RTR_Above</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>







<decl_stmt><decl><type><name>RangeTestResultKind</name></type> <name>testInRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Val</name></expr></argument>,
<argument><expr><name>bool</name> <name>AllowMixedSign</name></expr></argument>)</argument_list> const <name>LLVM_READONLY</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>APSIntType</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>BitWidth</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>BitWidth</name></name> <operator>&amp;&amp;</operator> <name>IsUnsigned</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>IsUnsigned</name></name></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>APSIntType</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsUnsigned</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>BitWidth</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>IsUnsigned</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
