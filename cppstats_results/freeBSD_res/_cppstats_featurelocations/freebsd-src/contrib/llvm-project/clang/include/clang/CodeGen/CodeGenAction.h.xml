<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_CODEGENACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_CODEGENACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendAction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>LLVMContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BackendConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenerator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenAction</name> <range>: <expr><name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>private</name><operator>:</operator>

<name>friend</name> <name>class</name> <name>BackendConsumer</name></expr>;


struct <expr><name>LinkModule</name> <block>{

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name> <name>Module</name></expr>;




<expr><name>bool</name> <name>PropagateAttrs</name></expr>;


<expr><name>bool</name> <name>Internalize</name></expr>;


<expr><name>unsigned</name> <name>LinkFlags</name></expr>;
}</block></expr>;

<expr><name>unsigned</name> <name>Act</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name> <name>TheModule</name></expr>;


<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>LinkModule</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>LinkModules</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>VMContext</name></expr>;
<expr><name>bool</name> <name>OwnsVMContext</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name> <macro><name>loadModule</name><argument_list>(<argument>llvm::MemoryBufferRef MBRef</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>



<macro><name>CodeGenAction</name><argument_list>(<argument>unsigned _Act</argument>, <argument>llvm::LLVMContext *_VMContext = nullptr</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>hasIRSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>EndSourceFileAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>CodeGenAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Module</name></expr></argument>&gt;</argument_list></name> <call><name>takeModule</name><argument_list>()</argument_list></call></expr>;


<expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><call><name>takeLLVMContext</name><argument_list>()</argument_list></call></expr>;

<expr><name>CodeGenerator</name> <operator>*</operator><macro><name>getCodeGenerator</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>BackendConsumer</name> <operator>*</operator><name>BEConsumer</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitAssemblyAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitAssemblyAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitBCAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitBCAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitLLVMAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitLLVMAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitLLVMOnlyAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitLLVMOnlyAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitCodeGenOnlyAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitCodeGenOnlyAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EmitObjAction</name> <range>: <expr><name>public</name> <name>CodeGenAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>EmitObjAction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>*</operator><name>_VMContext</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
