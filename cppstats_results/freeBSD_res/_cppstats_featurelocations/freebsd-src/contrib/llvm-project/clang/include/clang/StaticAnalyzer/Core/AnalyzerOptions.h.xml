<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_ANALYZEROPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_ANALYZEROPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/PathDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSwitch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CheckerBase</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>


<enum>enum <name>Analyses</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>SCOPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>NumAnalyses</name></decl>
}</block>;</enum>


<enum>enum <name>AnalysisStores</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_STORE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>CREATFN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME##Model,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>NumStores</name></decl>
}</block>;</enum>


<enum>enum <name>AnalysisConstraints</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_CONSTRAINTS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>CREATFN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME##Model,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>NumConstraints</name></decl>
}</block>;</enum>



<enum>enum <name>AnalysisDiagClients</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_DIAGNOSTICS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>CREATFN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PD_##NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>PD_NONE</name></decl>,
<decl><name>NUM_ANALYSIS_DIAG_CLIENTS</name></decl>
}</block>;</enum>


<enum>enum <name>AnalysisPurgeMode</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_PURGE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>NumPurgeModes</name></decl>
}</block>;</enum>


<enum>enum <name>AnalysisInliningMode</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_INLINING_MODE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>
<decl><name>NumInliningModes</name></decl>
}</block>;</enum>






<enum>enum <name>CXXInlineableMemberKind</name> <block>{



<decl><name>CIMK_None</name></decl>,


<decl><name>CIMK_MemberFunctions</name></decl>,





<decl><name>CIMK_Constructors</name></decl>,


<decl><name>CIMK_Destructors</name></decl>
}</block>;</enum>


<enum>enum <name>IPAKind</name> <block>{

<decl><name>IPAK_None</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>IPAK_BasicInlining</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>IPAK_Inlining</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>IPAK_DynamicDispatch</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,



<decl><name>IPAK_DynamicDispatchBifurcate</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ExplorationStrategyKind</name> <block>{<block_content>
<expr_stmt><expr><name>DFS</name></expr><operator>,</operator>
<expr><name>BFS</name></expr><operator>,</operator>
<expr><name>UnexploredFirst</name></expr><operator>,</operator>
<expr><name>UnexploredFirstQueue</name></expr><operator>,</operator>
<expr><name>UnexploredFirstLocationQueue</name></expr><operator>,</operator>
<expr><name>BFSBlockDFSContents</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>UserModeKind</name> <block>{

<decl><name>UMK_Shallow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>UMK_Deep</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>























<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>AnalyzerOptions</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>ConfigTable</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr>;



<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getRegisteredCheckers</name><argument_list>(<argument>bool IncludeExperimental = false</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getRegisteredPackages</name><argument_list>(<argument>bool IncludeExperimental = false</argument>)</argument_list></macro></expr>;


















<expr><specifier>static</specifier> <name>void</name> <macro><name>printFormattedEntry</name><argument_list>(<argument>llvm::raw_ostream &amp;Out</argument>,
<argument>std::pair&lt;StringRef</argument>, <argument>StringRef&gt; EntryDescPair</argument>,
<argument>size_t InitialPad</argument>, <argument>size_t EntryWidth</argument>,
<argument>size_t MinLineWidth = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>CheckersAndPackages</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SilencedCheckersAndPackages</name></expr>;



<expr><name>ConfigTable</name> <name>Config</name></expr>;
<expr><name>AnalysisStores</name> <name>AnalysisStoreOpt</name> <operator>=</operator> <name>RegionStoreModel</name></expr>;
<expr><name>AnalysisConstraints</name> <name>AnalysisConstraintsOpt</name> <operator>=</operator> <name>RangeConstraintsModel</name></expr>;
<expr><name>AnalysisDiagClients</name> <name>AnalysisDiagOpt</name> <operator>=</operator> <name>PD_HTML</name></expr>;
<expr><name>AnalysisPurgeMode</name> <name>AnalysisPurgeOpt</name> <operator>=</operator> <name>PurgeStmt</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>AnalyzeSpecificFunction</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DumpExplodedGraphTo</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>FullCompilerInvocation</name></expr>;


<expr><name>unsigned</name> <name>maxBlockVisitOnPath</name></expr>;






<expr><name>unsigned</name> <name>DisableAllCheckers</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>ShowCheckerHelp</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShowCheckerHelpAlpha</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShowCheckerHelpDeveloper</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>ShowCheckerOptionList</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShowCheckerOptionAlphaList</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShowCheckerOptionDeveloperList</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>ShowEnabledCheckerList</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShowConfigOptionsList</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>ShouldEmitErrorsOnInvalidConfigValue</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>AnalyzeAll</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>AnalyzerDisplayProgress</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>AnalyzeNestedBlocks</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>eagerlyAssumeBinOpBifurcation</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>TrimGraph</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>visualizeExplodedGraphWithGraphViz</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>UnoptimizedCFG</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>PrintStats</name> <operator>:</operator> <literal type="number">1</literal></expr>;



<expr><name>unsigned</name> <name>NoRetryExhausted</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>bool</name> <name>AnalyzerWerror</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>InlineMaxStackDepth</name></expr>;


<expr><name>AnalysisInliningMode</name> <name>InliningMode</name> <operator>=</operator> <name>NoRedundancy</name></expr>;


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZER_OPTION_DEPENDS_ON_USER_MODE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>SHALLOW_VAL</name></type></parameter>, <parameter><type><name>DEEP_VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ANALYZER_OPTION(TYPE, NAME, CMDFLAG, DESC, SHALLOW_VAL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZER_OPTION</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>DEFAULT_VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TYPE NAME;</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/AnalyzerOptions.def"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ANALYZER_OPTION</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ANALYZER_OPTION_DEPENDS_ON_USER_MODE</name></cpp:undef>



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringLiteral</name></expr></argument>&gt;</argument_list></name> <name>AnalyzerConfigCmdFlags</name> <operator>=</operator> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZER_OPTION_DEPENDS_ON_USER_MODE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>SHALLOW_VAL</name></type></parameter>, <parameter><type><name>DEEP_VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ANALYZER_OPTION(TYPE, NAME, CMDFLAG, DESC, SHALLOW_VAL)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZER_OPTION</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>DEFAULT_VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>llvm::StringLiteral(CMDFLAG),</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/AnalyzerOptions.def"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ANALYZER_OPTION</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ANALYZER_OPTION_DEPENDS_ON_USER_MODE</name></cpp:undef>
}</block></expr>;

<expr><name>bool</name> <macro><name>isUnknownAnalyzerConfig</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>is_sorted</name><argument_list>(<argument><expr><name>AnalyzerConfigCmdFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<return>return <expr><operator>!</operator><name>std</name><operator>::</operator><call><name>binary_search</name><argument_list>(<argument><expr><call><name><name>AnalyzerConfigCmdFlags</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>AnalyzerConfigCmdFlags</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<call><name>AnalyzerOptions</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>DisableAllCheckers</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ShowCheckerHelp</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ShowCheckerHelpAlpha</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ShowCheckerHelpDeveloper</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ShowCheckerOptionList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ShowCheckerOptionAlphaList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ShowCheckerOptionDeveloperList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ShowEnabledCheckerList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ShowConfigOptionsList</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AnalyzeAll</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>AnalyzerDisplayProgress</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AnalyzeNestedBlocks</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>eagerlyAssumeBinOpBifurcation</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>TrimGraph</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>visualizeExplodedGraphWithGraphViz</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>UnoptimizedCFG</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PrintStats</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NoRetryExhausted</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>AnalyzerWerror</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><name>llvm</name><operator>::</operator><call><name>sort</name><argument_list>(<argument><expr><name>AnalyzerConfigCmdFlags</name></expr></argument>)</argument_list></call></expr>;
}</block>
















<name>bool</name> <macro><name>getCheckerBooleanOption</name><argument_list>(<argument>StringRef CheckerName</argument>, <argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>getCheckerBooleanOption</name><argument_list>(<argument>const ento::CheckerBase *C</argument>, <argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;















<expr><name>int</name> <macro><name>getCheckerIntegerOption</name><argument_list>(<argument>StringRef CheckerName</argument>, <argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>int</name> <macro><name>getCheckerIntegerOption</name><argument_list>(<argument>const ento::CheckerBase *C</argument>, <argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;















<expr><name>StringRef</name> <macro><name>getCheckerStringOption</name><argument_list>(<argument>StringRef CheckerName</argument>, <argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>StringRef</name> <macro><name>getCheckerStringOption</name><argument_list>(<argument>const ento::CheckerBase *C</argument>,
<argument>StringRef OptionName</argument>,
<argument>bool SearchInParents = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>UserModeKind</name> <macro><name>getUserMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ExplorationStrategyKind</name> <macro><name>getExplorationStrategy</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>IPAKind</name> <macro><name>getIPAMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;







<expr><name>bool</name> <macro><name>mayInlineCXXMemberFunction</name><argument_list>(<argument>CXXInlineableMemberKind K</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ento</name><operator>::</operator><name>PathDiagnosticConsumerOptions</name> <macro><name>getDiagOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>FullCompilerInvocation</name></expr>,
<expr><name>ShouldDisplayMacroExpansions</name></expr>,
<expr><name>ShouldSerializeStats</name></expr>,
<expr><name>ShouldWriteStableReportFilename</name></expr>,
<expr><name>AnalyzerWerror</name></expr>,
<expr><name>ShouldApplyFixIts</name></expr>,
<expr><name>ShouldDisplayCheckerNameForText</name></expr>}</block></expr>;</return>
}</block>
}</expr>;

<expr><name>using</name> <name>AnalyzerOptionsRef</name> <operator>=</operator> <name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>AnalyzerOptions</name></expr></argument>&gt;</argument_list></name></expr>;









<expr><specifier>inline</specifier> <name>UserModeKind</name> <name>AnalyzerOptions</name><operator>::</operator><macro><name>getUserMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>K</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name><name>StringSwitch</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>UserModeKind</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UserMode</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"shallow"</literal></expr></argument>, <argument><expr><name>UMK_Shallow</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"deep"</literal></expr></argument>, <argument><expr><name>UMK_Deep</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Default</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>K</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"User mode is invalid."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>K</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<name>AnalyzerOptions</name><operator>::</operator><macro><name>getRegisteredCheckers</name><argument_list>(<argument>bool IncludeExperimental</argument>)</argument_list></macro> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>llvm</name><operator>::</operator><name>StringLiteral</name> <name><name>StaticAnalyzerCheckerNames</name><index>[]</index></name> <operator>=</operator> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHECKERS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKER</name><parameter_list>(<parameter><type><name>FULLNAME</name></type></parameter>, <parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>HELPTEXT</name></type></parameter>, <parameter><type><name>DOC_URI</name></type></parameter>, <parameter><type><name>IS_HIDDEN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>llvm::StringLiteral(FULLNAME),</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Checkers/Checkers.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECKER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_CHECKERS</name></cpp:undef>
}</block></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Checkers</name></expr>;
<for>for <control>(<init><decl><type><name>StringRef</name></type> <name>CheckerName</name> <range>: <expr><name>StaticAnalyzerCheckerNames</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>CheckerName</name><operator>.</operator><name>startswith</name></name><argument_list>(<argument><expr><literal type="string">"debug."</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>IncludeExperimental</name> <operator>||</operator> <operator>!</operator><call><name><name>CheckerName</name><operator>.</operator><name>startswith</name></name><argument_list>(<argument><expr><literal type="string">"alpha."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Checkers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>CheckerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return Checkers</block><empty_stmt>;</empty_stmt></for>
}</block>

<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<name>AnalyzerOptions</name><operator>::</operator><macro><name>getRegisteredPackages</name><argument_list>(<argument>bool IncludeExperimental</argument>)</argument_list></macro> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>llvm</name><operator>::</operator><name>StringLiteral</name> <name><name>StaticAnalyzerPackageNames</name><index>[]</index></name> <operator>=</operator> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PACKAGES</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE</name><parameter_list>(<parameter><type><name>FULLNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>llvm::StringLiteral(FULLNAME),</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Checkers/Checkers.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_PACKAGES</name></cpp:undef>
}</block></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Packages</name></expr>;
<for>for <control>(<init><decl><type><name>StringRef</name></type> <name>PackageName</name> <range>: <expr><name>StaticAnalyzerPackageNames</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PackageName</name> <operator>!=</operator> <literal type="string">"debug"</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>IncludeExperimental</name> <operator>||</operator> <name>PackageName</name> <operator>!=</operator> <literal type="string">"alpha"</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Packages</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>PackageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return Packages</block><empty_stmt>;</empty_stmt></for>
}</block>

}</expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
