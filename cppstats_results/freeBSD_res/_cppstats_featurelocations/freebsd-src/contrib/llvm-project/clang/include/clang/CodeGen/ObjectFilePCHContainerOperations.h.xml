<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_OBJECT_FILE_PCH_CONTAINER_OPERATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_OBJECT_FILE_PCH_CONTAINER_OPERATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/PCHContainerOperations.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>ObjectFilePCHContainerWriter</name> <range>: <expr><name>public</name> <name>PCHContainerWriter</name> <block>{
<expr><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"obj"</literal></expr>;</return> }</block>




<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreatePCHContainerGenerator</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>const std::string &amp;MainFileName</argument>,
<argument>const std::string &amp;OutputFileName</argument>,
<argument>std::unique_ptr&lt;llvm::raw_pwrite_stream&gt; OS</argument>,
<argument>std::shared_ptr&lt;PCHBuffer&gt; Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ObjectFilePCHContainerReader</name> <range>: <expr><name>public</name> <name>PCHContainerReader</name> <block>{
<expr><name>StringRef</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"obj"</literal></expr>;</return> }</block>


<name>StringRef</name> <macro><name>ExtractPCH</name><argument_list>(<argument>llvm::MemoryBufferRef Buffer</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
