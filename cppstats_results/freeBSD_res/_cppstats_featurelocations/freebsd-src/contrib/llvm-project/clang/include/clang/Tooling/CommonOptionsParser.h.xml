<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/CommonOptionsParser.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_COMMONOPTIONSPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_COMMONOPTIONSPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/ArgumentsAdjusters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/CompilationDatabase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CommandLine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>





























<decl_stmt><decl><type><name>class</name></type> <name>CommonOptionsParser</name> <block>{<block_content>

<label><name>protected</name>:</label>








<macro><name>CommonOptionsParser</name><argument_list>(
<argument>int &amp;argc</argument>, <argument>const char **argv</argument>, <argument>llvm::cl::OptionCategory &amp;Category</argument>,
<argument>llvm::cl::NumOccurrencesFlag OccurrencesFlag = llvm::cl::OneOrMore</argument>,
<argument>const char *Overview = nullptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>


<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>CommonOptionsParser</name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>int &amp;argc</argument>, <argument>const char **argv</argument>, <argument>llvm::cl::OptionCategory &amp;Category</argument>,
<argument>llvm::cl::NumOccurrencesFlag OccurrencesFlag = llvm::cl::OneOrMore</argument>,
<argument>const char *Overview = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>


<function><type><name>CompilationDatabase</name> <modifier>&amp;</modifier></type><name>getCompilations</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><name>Compilations</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSourcePathList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourcePathList</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>ArgumentsAdjuster</name></type> <name>getArgumentsAdjuster</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Adjuster</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>HelpMessage</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>CommonOptionsParser</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>init</name><argument_list>(<argument>int &amp;argc</argument>, <argument>const char **argv</argument>,
<argument>llvm::cl::OptionCategory &amp;Category</argument>,
<argument>llvm::cl::NumOccurrencesFlag OccurrencesFlag</argument>,
<argument>const char *Overview</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name> <name>Compilations</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SourcePathList</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ArgumentsAdjuster</name></type> <name>Adjuster</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ArgumentsAdjustingCompilations</name> <range>: <expr><name>public</name> <name>CompilationDatabase</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ArgumentsAdjustingCompilations</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name> <name>Compilations</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Compilations</name><argument_list>(<argument>std::move(Compilations)</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>appendArgumentsAdjuster</name><argument_list>(<argument>ArgumentsAdjuster Adjuster</argument>)</argument_list></macro></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name>
<macro><name>getCompileCommands</name><argument_list>(<argument>StringRef FilePath</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllCompileCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name> <name>Compilations</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArgumentsAdjuster</name></expr></argument>&gt;</argument_list></name> <name>Adjusters</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name>
<macro><name>adjustCommands</name><argument_list>(<argument>std::vector&lt;CompileCommand&gt; Commands</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
