<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/VTTBuilder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_VTTBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_VTTBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/BaseSubobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>VTTVTable</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>BaseAndIsVirtual</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>BaseOffset</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VTTVTable</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>VTTVTable</name><argument_list>(<argument>const CXXRecordDecl *Base</argument>, <argument>CharUnits BaseOffset</argument>, <argument>bool BaseIsVirtual</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>BaseAndIsVirtual</name><argument_list>(<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>BaseIsVirtual</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseOffset</name><argument_list>(<argument>BaseOffset</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>VTTVTable</name><argument_list>(<argument>BaseSubobject Base</argument>, <argument>bool BaseIsVirtual</argument>)</argument_list></macro>
<operator>:</operator> <call><name>BaseAndIsVirtual</name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BaseIsVirtual</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>BaseOffset</name><argument_list>(<argument>Base.getBaseOffset()</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BaseAndIsVirtual</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getBaseOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BaseOffset</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BaseAndIsVirtual</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BaseSubobject</name> <macro><name>getBaseSubobject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>BaseSubobject</name><argument_list>(<argument><expr><call><name>getBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getBaseOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>VTTComponent</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>VTableIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BaseSubobject</name></type> <name>VTableBase</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VTTComponent</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>VTTComponent</name><argument_list>(<argument>uint64_t VTableIndex</argument>, <argument>BaseSubobject VTableBase</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>VTableIndex</name><argument_list>(<argument><expr><name>VTableIndex</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>VTableBase</name><argument_list>(<argument>VTableBase</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>VTTBuilder</name> <block>{<block_content>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>MostDerivedClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>VTTVTablesVectorTy</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>VTTVTable</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VTTVTablesVectorTy</name></type> <name>VTTVTables</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>VTTComponentsVectorTy</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>VTTComponent</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VTTComponentsVectorTy</name></type> <name>VTTComponents</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>ASTRecordLayout</name> <modifier>&amp;</modifier></type><name>MostDerivedClassLayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>VisitedVirtualBasesSetTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>AddressPointsMapTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>SubVTTIndicies</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>SecondaryVirtualPointerIndices</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>GenerateDefinition</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>AddVTablePointer</name><parameter_list>(<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>VTableIndex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>VTableClass</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>LayoutSecondaryVTTs</name><parameter_list>(<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>LayoutSecondaryVirtualPointers</name><parameter_list>(<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>BaseIsMorallyVirtual</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>VTableIndex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>VTableClass</name></decl></parameter>,
<parameter><decl><type><name>VisitedVirtualBasesSetTy</name> <modifier>&amp;</modifier></type><name>VBases</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>LayoutSecondaryVirtualPointers</name><parameter_list>(<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>VTableIndex</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>LayoutVirtualVTTs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><name>VisitedVirtualBasesSetTy</name> <modifier>&amp;</modifier></type><name>VBases</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>LayoutVTT</name><parameter_list>(<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>BaseIsVirtual</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>VTTBuilder</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>const CXXRecordDecl *MostDerivedClass</argument>,
<argument>bool GenerateDefinition</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>VTTComponentsVectorTy</name> <operator>&amp;</operator><macro><name>getVTTComponents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>VTTComponents</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>VTTVTablesVectorTy</name> <operator>&amp;</operator><macro><name>getVTTVTables</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>VTTVTables</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSubVTTIndicies</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SubVTTIndicies</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobject</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator>
<macro><name>getSecondaryVirtualPointerIndices</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SecondaryVirtualPointerIndices</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
