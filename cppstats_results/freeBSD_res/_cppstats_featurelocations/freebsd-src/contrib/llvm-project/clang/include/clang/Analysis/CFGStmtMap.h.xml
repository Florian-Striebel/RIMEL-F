<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/CFGStmtMap.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_CFGSTMTMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_CFGSTMTMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ParentMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CFGStmtMap</name> <block>{<block_content>
<decl_stmt><decl><type><name>ParentMap</name> <modifier>*</modifier></type><name>PM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>M</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFGStmtMap</name><argument_list>(<argument><expr><name>ParentMap</name> <operator>*</operator><name>pm</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>PM</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>M</name><argument_list>(<argument>m</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<operator>~</operator><call><name>CFGStmtMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><specifier>static</specifier> <name>CFGStmtMap</name> <modifier>*</modifier></type><name>Build</name><parameter_list>(<parameter><decl><type><name>CFG</name><modifier>*</modifier></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>ParentMap</name> <modifier>*</modifier></type><name>PM</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>getBlock</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>getBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator> <name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>CFGStmtMap</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getBlock</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
