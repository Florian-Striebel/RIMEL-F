<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTDumper.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTDUMPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTDUMPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTNodeTraverser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TextNodeDumper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTDumper</name> <range>: <expr><name>public</name> <name><name>ASTNodeTraverser</name><argument_list type="generic">&lt;<argument><expr><name>ASTDumper</name></expr></argument>, <argument><expr><name>TextNodeDumper</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>TextNodeDumper</name> <name>NodeDumper</name></expr>;

<expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr>;

<expr><specifier>const</specifier> <name>bool</name> <name>ShowColors</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ASTDumper</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>const ASTContext &amp;Context</argument>, <argument>bool ShowColors</argument>)</argument_list></macro>
<operator>:</operator> <call><name>NodeDumper</name><argument_list>(<argument><expr><name>OS</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>, <argument><expr><name>ShowColors</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>OS</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>, <macro><name>ShowColors</name><argument_list>(<argument>ShowColors</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ASTDumper</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>bool ShowColors</argument>)</argument_list></macro>
<operator>:</operator> <call><name>NodeDumper</name><argument_list>(<argument><expr><name>OS</name></expr></argument>, <argument><expr><name>ShowColors</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>OS</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>, <macro><name>ShowColors</name><argument_list>(<argument>ShowColors</argument>)</argument_list></macro> <expr><block>{}</block>

<name>TextNodeDumper</name> <operator>&amp;</operator><macro><name>doGetNodeDelegate</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>NodeDumper</name></expr>;</return> }</block>

<name>void</name> <macro><name>dumpLookups</name><argument_list>(<argument>const DeclContext *DC</argument>, <argument>bool DumpDecls</argument>)</argument_list></macro></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecializationDecl</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>dumpTemplateDeclSpecialization</name><argument_list>(<argument>const SpecializationDecl *D</argument>,
<argument>bool DumpExplicitInst</argument>, <argument>bool DumpRefOnly</argument>)</argument_list></macro></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TemplateDecl</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>dumpTemplateDecl</name><argument_list>(<argument>const TemplateDecl *D</argument>, <argument>bool DumpExplicitInst</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>VisitFunctionTemplateDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionTemplateDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>VisitClassTemplateDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ClassTemplateDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>VisitVarTemplateDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarTemplateDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
