<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_DIAGNOSTICS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_DIAGNOSTICS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/Dynamic/VariantValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dynamic</name> <block>{<block_content>

<struct>struct <name>SourceLocation</name> <block>{
<expr_stmt><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Line</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>Column</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<name>unsigned</name> <name>Line</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Column</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SourceRange</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>End</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>ParserValue</name> <block>{
<expr_stmt><expr><call><name>ParserValue</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>Range</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>Value</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<name>StringRef</name> <name>Text</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VariantValue</name></type> <name>Value</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>Diagnostics</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>ContextType</name> <block>{
<decl><name>CT_MatcherArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CT_MatcherConstruct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>ErrorType</name> <block>{
<decl><name>ET_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ET_RegistryMatcherNotFound</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ET_RegistryWrongArgCount</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ET_RegistryWrongArgType</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>ET_RegistryNotBindable</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>ET_RegistryAmbiguousOverload</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>ET_RegistryValueNotFound</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>ET_RegistryUnknownEnumWithReplace</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>ET_RegistryNonNodeMatcher</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>ET_RegistryMatcherNoWithSupport</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>ET_ParserStringError</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>ET_ParserNoOpenParen</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,
<decl><name>ET_ParserNoCloseParen</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,
<decl><name>ET_ParserNoComma</name> <init>= <expr><literal type="number">103</literal></expr></init></decl>,
<decl><name>ET_ParserNoCode</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,
<decl><name>ET_ParserNotAMatcher</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,
<decl><name>ET_ParserInvalidToken</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>,
<decl><name>ET_ParserMalformedBindExpr</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>,
<decl><name>ET_ParserTrailingCode</name> <init>= <expr><literal type="number">108</literal></expr></init></decl>,
<decl><name>ET_ParserNumberError</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,
<decl><name>ET_ParserOverloadedType</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>,
<decl><name>ET_ParserMalformedChainedExpr</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>,
<decl><name>ET_ParserFailedToBuildMatcher</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>class</name></type> <name>ArgStream</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ArgStream</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Out</name><argument_list>(<argument>Out</argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>ArgStream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Arg</name><operator>)</operator> <block>{
<return>return <expr><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><call><name>Twine</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ArgStream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Arg</name><operator>)</operator></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Out</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<struct>struct <name>Context</name> <block>{
<label><name>public</name>:</label>

<enum>enum <name>ConstructMatcherEnum</name> <block>{ <decl><name>ConstructMatcher</name></decl> }</block>;</enum>
<macro><name>Context</name><argument_list>(<argument>ConstructMatcherEnum</argument>, <argument>Diagnostics *Error</argument>, <argument>StringRef MatcherName</argument>,
<argument>SourceRange MatcherRange</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<enum>enum <name>MatcherArgEnum</name> <block>{ <decl><name>MatcherArg</name></decl> }</block>;</enum>
<macro><name>Context</name><argument_list>(<argument>MatcherArgEnum</argument>, <argument>Diagnostics *Error</argument>, <argument>StringRef MatcherName</argument>,
<argument>SourceRange MatcherRange</argument>, <argument>unsigned ArgNumber</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Diagnostics</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Error</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>OverloadContext</name> <block>{
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>OverloadContext</name><argument_list>(<argument><expr><name>Diagnostics</name><operator>*</operator> <name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>OverloadContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>revertErrors</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Diagnostics</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>BeginIndex</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><name>ArgStream</name></type> <name>addError</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>Range</name></decl></parameter>, <parameter><decl><type><name>ErrorType</name></type> <name>Error</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>ContextFrame</name> <block>{
<decl_stmt><decl><type><name>ContextType</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Args</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>ErrorContent</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ContextFrame</name></expr></argument>&gt;</argument_list></name> <name>ContextStack</name></expr>;</expr_stmt>
<struct>struct <name>Message</name> <block>{
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ErrorType</name></type> <name>Type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Args</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Message</name></expr></argument>&gt;</argument_list></name> <name>Messages</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ErrorContent</name></expr></argument>&gt;</argument_list></name> <macro><name>errors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Errors</name></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>printToStream</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>printToStreamFull</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toStringFull</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>

<function_decl><type><name>ArgStream</name></type> <name>pushContextFrame</name><parameter_list>(<parameter><decl><type><name>ContextType</name></type> <name>Type</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>Range</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ContextFrame</name></expr></argument>&gt;</argument_list></name> <name>ContextStack</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ErrorContent</name></expr></argument>&gt;</argument_list></name> <name>Errors</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
