<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_COREENGINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_COREENGINE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/ProgramPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/BlockCounter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/WorkList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBindTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LabelDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FunctionSummariesTy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExprEngine</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>CoreEngine</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CommonNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EndOfFunctionNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ExprEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>IndirectGotoNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>NodeBuilder</name></decl>;</decl_stmt>
<macro><name>friend</name></macro> <struct_decl>struct <name>NodeBuilderContext</name>;</struct_decl>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SwitchNodeBuilder</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>BlocksExhausted</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>BlockEdge</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>BlocksAborted</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ExprEngine</name> <modifier>&amp;</modifier></type><name>ExprEng</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>ExplodedGraph</name></type> <name>G</name></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <name>WList</name></expr>;</expr_stmt>




<expr_stmt><expr><name>BlockCounter</name><operator>::</operator><name>Factory</name> <name>BCounterFactory</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>BlocksExhausted</name></type> <name>blocksExhausted</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BlocksAborted</name></type> <name>blocksAborted</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>FunctionSummariesTy</name> <modifier>*</modifier></type><name>FunctionSummaries</name></decl>;</decl_stmt>




<expr_stmt><expr><name>DataTag</name><operator>::</operator><name>Factory</name> <name>DataTags</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>generateNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>&amp;</modifier></type><name>Loc</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleBlockEdge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockEdge</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>HandleBlockEntrance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockEntrance</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>HandleBlockExit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleCallEnter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallEnter</name> <modifier>&amp;</modifier></type><name>CE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandlePostStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>StmtIdx</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Term</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>HandleCleanupTemporaryBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>HandleStaticInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclStmt</name> <modifier>*</modifier></type><name>DS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleVirtualBaseBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateCallExitBeginNode</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ReturnStmt</name> <modifier>*</modifier></type><name>RS</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>CoreEngine</name><argument_list>(<argument><expr><name>ExprEngine</name> <operator>&amp;</operator><name>exprengine</name></expr></argument>,
<argument><expr><name>FunctionSummariesTy</name> <operator>*</operator><name>FS</name></expr></argument>,
<argument><expr><name>AnalyzerOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoreEngine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoreEngine</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CoreEngine</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CoreEngine</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<function><type><name>ExplodedGraph</name> <modifier>&amp;</modifier></type><name>getGraph</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>G</name></expr>;</return> </block_content>}</block></function>



<function_decl><type><name>bool</name></type> <name>ExecuteWorkList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Steps</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>InitState</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>ExecuteWorkListWithInitialState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Steps</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>InitState</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>dispatchWorkItem</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name><modifier>*</modifier></type> <name>Pred</name></decl></parameter>, <parameter><decl><type><name>ProgramPoint</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>WorkListUnit</name><modifier>&amp;</modifier></type> <name>WU</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>wasBlockAborted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>blocksAborted</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>wasBlocksExhausted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>blocksExhausted</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasWorkRemaining</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>wasBlocksExhausted</name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>WList</name><operator>-&gt;</operator><name>hasWork</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name>wasBlockAborted</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>addAbortedBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExplodedNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>blocksAborted</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>WorkList</name> <operator>*</operator><macro><name>getWorkList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>WList</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>BlocksExhausted</name><operator>::</operator><name>const_iterator</name> <macro><name>blocks_exhausted_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>blocksExhausted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BlocksExhausted</name><operator>::</operator><name>const_iterator</name> <macro><name>blocks_exhausted_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>blocksExhausted</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BlocksAborted</name><operator>::</operator><name>const_iterator</name> <macro><name>blocks_aborted_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>blocksAborted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>BlocksAborted</name><operator>::</operator><name>const_iterator</name> <macro><name>blocks_aborted_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>blocksAborted</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Set</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Idx</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>enqueueEndOfFunction</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ReturnStmt</name> <modifier>*</modifier></type><name>RS</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>enqueueStmtNode</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>DataTag</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator><macro><name>getDataTags</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>DataTags</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>NodeBuilderContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CoreEngine</name> <modifier>&amp;</modifier></type><name>Eng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NodeBuilderContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoreEngine</name> <operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>B</name></expr></argument>, <argument><expr><name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Eng</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Block</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>LC</name><argument_list>(<argument>N-&gt;getLocationContext()</argument>)</argument_list></macro> <expr><block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>; }</block>


<specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><macro><name>getBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Block</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>blockCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Eng</name><operator>.</operator><name>WList</name><operator>-&gt;</operator><name>getBlockCounter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNumVisited</name><argument_list>(
<argument><expr><call><name><name>LC</name><operator>-&gt;</operator><name>getStackFrame</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>










<decl_stmt><decl><type><name>class</name></type> <name>NodeBuilder</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>NodeBuilderContext</name> <modifier>&amp;</modifier></type><name>C</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Finalized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HasGeneratedNodes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Frontier</name></decl>;</decl_stmt>


<function><type><name>virtual</name> <name>bool</name></type> <name>checkResults</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>Finalized</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasNoSinksInFrontier</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>I</name> <range>: <expr><name>Frontier</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>I</name><operator>-&gt;</operator><name>isSink</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>finalizeResults</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function_decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateNodeImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>MarkAsSink</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>NodeBuilder</name><argument_list>(<argument>ExplodedNode *SrcNode</argument>, <argument>ExplodedNodeSet &amp;DstSet</argument>,
<argument>const NodeBuilderContext &amp;Ctx</argument>, <argument>bool F = true</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>C</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Finalized</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Frontier</name><argument_list>(<argument>DstSet</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>Frontier</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>SrcNode</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>NodeBuilder</name><argument_list>(<argument>const ExplodedNodeSet &amp;SrcSet</argument>, <argument>ExplodedNodeSet &amp;DstSet</argument>,
<argument>const NodeBuilderContext &amp;Ctx</argument>, <argument>bool F = true</argument>)</argument_list></macro>
<operator>:</operator> <call><name>C</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Finalized</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Frontier</name><argument_list>(<argument>DstSet</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>Frontier</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>SrcSet</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasNoSinksInFrontier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>virtual</name> <operator>~</operator><call><name>NodeBuilder</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>generateNodeImpl</name><argument_list>(<argument><expr><name>PP</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>generateSink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>generateNodeImpl</name><argument_list>(<argument><expr><name>PP</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>getResults</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>finalizeResults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>checkResults</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Frontier</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>ExplodedNodeSet</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>


<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>finalizeResults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>checkResults</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Frontier</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>finalizeResults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Frontier</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>NodeBuilderContext</name> <modifier>&amp;</modifier></type><name>getContext</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>C</name></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>hasGeneratedNodes</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>HasGeneratedNodes</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>takeNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>I</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Frontier</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>takeNodes</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Frontier</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>addNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Frontier</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>addNodes</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Frontier</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>NodeBuilderWithSinks</name><range>: <expr><name>public</name> <name>NodeBuilder</name> <block>{
<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ExplodedNode</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>sinksGenerated</name></expr>;
<expr><name>ProgramPoint</name> <operator>&amp;</operator><name>Location</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>NodeBuilderWithSinks</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>Pred</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>DstSet</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeBuilderContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>ProgramPoint</name> <operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NodeBuilder</name><argument_list>(<argument><expr><name>Pred</name></expr></argument>, <argument><expr><name>DstSet</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>, <macro><name>Location</name><argument_list>(<argument>L</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateNode</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>ExplodedNode *Pred</argument>,
<argument>const ProgramPointTag *Tag = nullptr</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>ProgramPoint</name> <operator>&amp;</operator><name>LocalLoc</name> <operator>=</operator> <operator>(</operator><name>Tag</name> <operator>?</operator> <call><name><name>Location</name><operator>.</operator><name>withTag</name></name><argument_list>(<argument><expr><name>Tag</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>Location</name><operator>)</operator></expr>;
<return>return <expr><name>NodeBuilder</name><operator>::</operator><call><name>generateNode</name><argument_list>(<argument><expr><name>LocalLoc</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateSink</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>ExplodedNode *Pred</argument>,
<argument>const ProgramPointTag *Tag = nullptr</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>ProgramPoint</name> <operator>&amp;</operator><name>LocalLoc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>Tag</name></expr> ?</condition><then> <expr><call><name><name>Location</name><operator>.</operator><name>withTag</name></name><argument_list>(<argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Location</name></expr></else></ternary><operator>)</operator></expr>;
<expr><name>ExplodedNode</name> <operator>*</operator><name>N</name> <operator>=</operator> <name>NodeBuilder</name><operator>::</operator><call><name>generateSink</name><argument_list>(<argument><expr><name>LocalLoc</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&amp;&amp;</operator> <call><name><name>N</name><operator>-&gt;</operator><name>isSink</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sinksGenerated</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>N</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ExplodedNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSinks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>sinksGenerated</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>StmtNodeBuilder</name><range>: <expr><name>public</name> <name>NodeBuilder</name> <block>{
<expr><name>NodeBuilder</name> <operator>*</operator><name>EnclosingBldr</name></expr>;

<expr><name>public</name><operator>:</operator>



<call><name>StmtNodeBuilder</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>SrcNode</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>DstSet</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeBuilderContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>,
<argument><expr><name>NodeBuilder</name> <operator>*</operator><name>Enclosing</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NodeBuilder</name><argument_list>(<argument><expr><name>SrcNode</name></expr></argument>, <argument><expr><name>DstSet</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>, <macro><name>EnclosingBldr</name><argument_list>(<argument>Enclosing</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>EnclosingBldr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EnclosingBldr</name><operator>-&gt;</operator><name>takeNodes</name></name><argument_list>(<argument><expr><name>SrcNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<call><name>StmtNodeBuilder</name><argument_list>(<argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>SrcSet</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>DstSet</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeBuilderContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>,
<argument><expr><name>NodeBuilder</name> <operator>*</operator><name>Enclosing</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NodeBuilder</name><argument_list>(<argument><expr><name>SrcSet</name></expr></argument>, <argument><expr><name>DstSet</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>, <macro><name>EnclosingBldr</name><argument_list>(<argument>Enclosing</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>EnclosingBldr</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>I</name> <range>: <expr><name>SrcSet</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EnclosingBldr</name><operator>-&gt;</operator><name>takeNodes</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
}</block>

<operator>~</operator><macro><name>StmtNodeBuilder</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>using</name> <name>NodeBuilder</name><operator>::</operator><name>generateNode</name></expr>;
<expr><name>using</name> <name>NodeBuilder</name><operator>::</operator><name>generateSink</name></expr>;

<expr><name>ExplodedNode</name> <operator>*</operator><macro><name>generateNode</name><argument_list>(<argument>const Stmt *S</argument>,
<argument>ExplodedNode *Pred</argument>,
<argument>ProgramStateRef St</argument>,
<argument>const ProgramPointTag *tag = nullptr</argument>,
<argument>ProgramPoint::Kind K = ProgramPoint::PostStmtKind</argument>)</argument_list></macro><block>{
<expr><specifier>const</specifier> <name>ProgramPoint</name> <operator>&amp;</operator><name>L</name> <operator>=</operator> <name>ProgramPoint</name><operator>::</operator><call><name>getProgramPoint</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>K</name></expr></argument>,
<argument><expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NodeBuilder</name><operator>::</operator><call><name>generateNode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>St</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateSink</name><argument_list>(<argument>const Stmt *S</argument>,
<argument>ExplodedNode *Pred</argument>,
<argument>ProgramStateRef St</argument>,
<argument>const ProgramPointTag *tag = nullptr</argument>,
<argument>ProgramPoint::Kind K = ProgramPoint::PostStmtKind</argument>)</argument_list></macro><block>{
<expr><specifier>const</specifier> <name>ProgramPoint</name> <operator>&amp;</operator><name>L</name> <operator>=</operator> <name>ProgramPoint</name><operator>::</operator><call><name>getProgramPoint</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>K</name></expr></argument>,
<argument><expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NodeBuilder</name><operator>::</operator><call><name>generateSink</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>St</name></expr></argument>, <argument><expr><name>Pred</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>BranchNodeBuilder</name><operator>:</operator> <name>public</name> <name>NodeBuilder</name> <block>{
<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>DstT</name></expr>;
<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>DstF</name></expr>;

<expr><name>bool</name> <name>InFeasibleTrue</name></expr>;
<expr><name>bool</name> <name>InFeasibleFalse</name></expr>;

<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>BranchNodeBuilder</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>SrcNode</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>DstSet</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeBuilderContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>dstT</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>dstF</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NodeBuilder</name><argument_list>(<argument><expr><name>SrcNode</name></expr></argument>, <argument><expr><name>DstSet</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DstT</name><argument_list>(<argument><expr><name>dstT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DstF</name><argument_list>(<argument><expr><name>dstF</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>InFeasibleTrue</name><argument_list>(<argument><expr><operator>!</operator><name>DstT</name></expr></argument>)</argument_list></call></expr>, <macro><name>InFeasibleFalse</name><argument_list>(<argument>!DstF</argument>)</argument_list></macro> <expr><block>{


<expr><call><name>takeNodes</name><argument_list>(<argument><expr><name>SrcNode</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>BranchNodeBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExplodedNodeSet</name> <operator>&amp;</operator><name>SrcSet</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>DstSet</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeBuilderContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>dstT</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>dstF</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NodeBuilder</name><argument_list>(<argument><expr><name>SrcSet</name></expr></argument>, <argument><expr><name>DstSet</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DstT</name><argument_list>(<argument><expr><name>dstT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DstF</name><argument_list>(<argument><expr><name>dstF</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>InFeasibleTrue</name><argument_list>(<argument><expr><operator>!</operator><name>DstT</name></expr></argument>)</argument_list></call></expr>, <macro><name>InFeasibleFalse</name><argument_list>(<argument>!DstF</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>takeNodes</name><argument_list>(<argument><expr><name>SrcSet</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateNode</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>bool branch</argument>,
<argument>ExplodedNode *Pred</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><macro><name>getTargetBlock</name><argument_list>(<argument>bool branch</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>branch</name> <operator>?</operator> <name>DstT</name> <operator>:</operator> <name>DstF</name></expr>;</return>
}</block>

<name>void</name> <macro><name>markInfeasible</name><argument_list>(<argument>bool branch</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>branch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>InFeasibleTrue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>InFeasibleFalse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>bool</name> <macro><name>isFeasible</name><argument_list>(<argument>bool branch</argument>)</argument_list></macro> <block>{
<return>return <expr><name>branch</name> <operator>?</operator> <operator>!</operator><name>InFeasibleTrue</name> <operator>:</operator> <operator>!</operator><name>InFeasibleFalse</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>IndirectGotoNodeBuilder</name> <block>{
<expr><name>CoreEngine</name><operator>&amp;</operator> <name>Eng</name></expr>;
<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Src</name></expr>;
<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>&amp;</operator><name>DispatchBlock</name></expr>;
<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr>;
<expr><name>ExplodedNode</name> <operator>*</operator><name>Pred</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>IndirectGotoNodeBuilder</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>pred</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>src</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>e</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>dispatch</name></expr></argument>, <argument><expr><name>CoreEngine</name><operator>*</operator> <name>eng</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Eng</name><argument_list>(<argument><expr><operator>*</operator><name>eng</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Src</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>DispatchBlock</name><argument_list>(<argument><expr><operator>*</operator><name>dispatch</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>E</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>, <macro><name>Pred</name><argument_list>(<argument>pred</argument>)</argument_list></macro> <expr><block>{}</block>

<name>class</name> <name>iterator</name> <block>{
<expr><name>friend</name> <name>class</name> <name>IndirectGotoNodeBuilder</name></expr>;

<expr><name>CFGBlock</name><operator>::</operator><name>const_succ_iterator</name> <name>I</name></expr>;

<macro><name>iterator</name><argument_list>(<argument>CFGBlock::const_succ_iterator i</argument>)</argument_list></macro> <operator>:</operator> <macro><name>I</name><argument_list>(<argument>i</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><operator>++</operator><name>I</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>I</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>I</name></name></expr>;</return> }</block>

<specifier>const</specifier> <name>LabelDecl</name> <operator>*</operator><macro><name>getLabel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>LabelStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><macro><name>getBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>I</name></expr>;</return>
}</block>
}</expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>DispatchBlock</name><operator>.</operator><name>succ_begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>DispatchBlock</name><operator>.</operator><name>succ_end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateNode</name><argument_list>(<argument>const iterator &amp;I</argument>,
<argument>ProgramStateRef State</argument>,
<argument>bool isSink = false</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>E</name></expr>;</return> }</block>

<name>ProgramStateRef</name> <macro><name>getState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Pred</name><operator>-&gt;</operator><name>State</name></name></expr>;</return> }</block>

<specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><macro><name>getLocationContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>SwitchNodeBuilder</name> <block>{
<expr><name>CoreEngine</name><operator>&amp;</operator> <name>Eng</name></expr>;
<expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Src</name></expr>;
<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>Condition</name></expr>;
<expr><name>ExplodedNode</name> <operator>*</operator><name>Pred</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>SwitchNodeBuilder</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>pred</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>src</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>condition</name></expr></argument>, <argument><expr><name>CoreEngine</name><operator>*</operator> <name>eng</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Eng</name><argument_list>(<argument><expr><operator>*</operator><name>eng</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Src</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Condition</name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>, <macro><name>Pred</name><argument_list>(<argument>pred</argument>)</argument_list></macro> <expr><block>{}</block>

<name>class</name> <name>iterator</name> <block>{
<expr><name>friend</name> <name>class</name> <name>SwitchNodeBuilder</name></expr>;

<expr><name>CFGBlock</name><operator>::</operator><name>const_succ_reverse_iterator</name> <name>I</name></expr>;

<macro><name>iterator</name><argument_list>(<argument>CFGBlock::const_succ_reverse_iterator i</argument>)</argument_list></macro> <operator>:</operator> <macro><name>I</name><argument_list>(<argument>i</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><operator>++</operator><name>I</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>I</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>I</name></name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>iterator</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>I</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>I</name></name></expr>;</return> }</block>

<specifier>const</specifier> <name>CaseStmt</name> <operator>*</operator><macro><name>getCase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CaseStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><macro><name>getBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>I</name></expr>;</return>
}</block>
}</expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Src</name><operator>-&gt;</operator><name>succ_rbegin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Src</name><operator>-&gt;</operator><name>succ_rend</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>SwitchStmt</name> <operator>*</operator><macro><name>getSwitch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>SwitchStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Src</name><operator>-&gt;</operator><name>getTerminator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ExplodedNode</name> <operator>*</operator><macro><name>generateCaseStmtNode</name><argument_list>(<argument>const iterator &amp;I</argument>,
<argument>ProgramStateRef State</argument>)</argument_list></macro></expr>;

<expr><name>ExplodedNode</name> <operator>*</operator><macro><name>generateDefaultCaseNode</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>bool isSink = false</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCondition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Condition</name></expr>;</return> }</block>

<name>ProgramStateRef</name> <macro><name>getState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Pred</name><operator>-&gt;</operator><name>State</name></name></expr>;</return> }</block>

<specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><macro><name>getLocationContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Pred</name><operator>-&gt;</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr>

}</block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
