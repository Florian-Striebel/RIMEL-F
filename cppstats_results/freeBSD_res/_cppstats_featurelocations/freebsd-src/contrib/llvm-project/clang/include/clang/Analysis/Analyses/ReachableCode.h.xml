<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/ReachableCode.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_REACHABLECODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_REACHABLECODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>





<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BitVector</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFGBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>reachable_code</name> <block>{<block_content>


<enum>enum <name>UnreachableKind</name> <block>{
<decl><name>UK_Return</name></decl>,
<decl><name>UK_Break</name></decl>,
<decl><name>UK_Loop_Increment</name></decl>,
<decl><name>UK_Other</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>Callback</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Callback</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <macro><name>HandleUnreachable</name><argument_list>(<argument>UnreachableKind UK</argument>,
<argument>SourceLocation L</argument>,
<argument>SourceRange ConditionVal</argument>,
<argument>SourceRange R1</argument>,
<argument>SourceRange R2</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ScanReachableFromBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>Start</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BitVector</name> <operator>&amp;</operator><name>Reachable</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>FindUnreachableCode</name><parameter_list>(<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>AC</name></decl></parameter>, <parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>,
<parameter><decl><type><name>Callback</name> <modifier>&amp;</modifier></type><name>CB</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt></block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
