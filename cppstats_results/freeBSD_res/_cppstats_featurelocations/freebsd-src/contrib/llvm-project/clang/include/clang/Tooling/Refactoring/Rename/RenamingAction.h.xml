<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/Rename/RenamingAction.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_RENAME_RENAMING_ACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_RENAME_RENAMING_ACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/AtomicChange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRules.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/Rename/SymbolOccurrences.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RenamingAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>RenamingAction</name><argument_list>(<argument>const std::vector&lt;std::string&gt; &amp;NewNames</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;PrevNames</argument>,
<argument>const std::vector&lt;std::vector&lt;std::string&gt;&gt; &amp;USRList</argument>,
<argument>std::map&lt;std::string</argument>, <argument>tooling::Replacements&gt; &amp;FileToReplaces</argument>,
<argument>bool PrintLocations = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>NewNames</name><argument_list>(<argument><expr><name>NewNames</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>PrevNames</name><argument_list>(<argument><expr><name>PrevNames</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>USRList</name><argument_list>(<argument><expr><name>USRList</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>FileToReplaces</name><argument_list>(<argument><expr><name>FileToReplaces</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>PrintLocations</name><argument_list>(<argument>PrintLocations</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>newASTConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>NewNames</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>PrevNames</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>USRList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>PrintLocations</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>RenameOccurrences</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SourceChangeRefactoringRule</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>RenameOccurrences</name></expr></argument>&gt;</argument_list></name> <macro><name>initiate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>,
<argument>SourceRange SelectionRange</argument>,
<argument>std::string NewName</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>RefactoringDescriptor</name> <operator>&amp;</operator><call><name>describe</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><macro><name>getRenameDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<macro><name>RenameOccurrences</name><argument_list>(<argument>const NamedDecl *ND</argument>, <argument>std::string NewName</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ND</name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>, <macro><name>NewName</name><argument_list>(<argument>std::move(NewName)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChanges</name></expr></argument>&gt;</argument_list></name>
<macro><name>createSourceReplacements</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>NewName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>QualifiedRenameRule</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SourceChangeRefactoringRule</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>QualifiedRenameRule</name></expr></argument>&gt;</argument_list></name> <macro><name>initiate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>,
<argument>std::string OldQualifiedName</argument>,
<argument>std::string NewQualifiedName</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>RefactoringDescriptor</name> <operator>&amp;</operator><call><name>describe</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<macro><name>QualifiedRenameRule</name><argument_list>(<argument>const NamedDecl *ND</argument>,
<argument>std::string NewQualifiedName</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ND</name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>, <macro><name>NewQualifiedName</name><argument_list>(<argument>std::move(NewQualifiedName)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChanges</name></expr></argument>&gt;</argument_list></name>
<macro><name>createSourceReplacements</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>NewQualifiedName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChange</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>createRenameReplacements</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolOccurrences</name> <operator>&amp;</operator><name>Occurrences</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SymbolName</name> <operator>&amp;</operator><name>NewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>QualifiedRenamingAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>QualifiedRenamingAction</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>NewNames</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>USRList</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>NewNames</name><argument_list>(<argument><expr><name>NewNames</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>USRList</name><argument_list>(<argument><expr><name>USRList</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>FileToReplaces</name><argument_list>(<argument>FileToReplaces</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>newASTConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>NewNames</name></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>USRList</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
