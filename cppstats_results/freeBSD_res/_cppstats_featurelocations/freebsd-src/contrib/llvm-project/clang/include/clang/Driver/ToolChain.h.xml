<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/ToolChain.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_TOOLCHAIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_TOOLCHAIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DebugInfoOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Multilib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APFloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FloatingPointMode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/MC/MCTargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Target/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ArgList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DerivedArgList</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCRuntime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SanitizerArgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Tool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>XRayArgs</name></decl>;</decl_stmt>



<struct>struct <name>ParsedClangName</name> <block>{

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>TargetPrefix</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModeSuffix</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DriverMode</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>TargetIsValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ParsedClangName</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>ParsedClangName</name><argument_list>(<argument>std::string Suffix</argument>, <argument>const char *Mode</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>ModeSuffix</name><argument_list>(<argument><expr><name>Suffix</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DriverMode</name><argument_list>(<argument>Mode</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>ParsedClangName</name><argument_list>(<argument>std::string Target</argument>, <argument>std::string Suffix</argument>, <argument>const char *Mode</argument>,
<argument>bool IsRegistered</argument>)</argument_list></macro>
<operator>:</operator> <call><name>TargetPrefix</name><argument_list>(<argument><expr><name>Target</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ModeSuffix</name><argument_list>(<argument><expr><name>Suffix</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DriverMode</name><argument_list>(<argument><expr><name>Mode</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TargetIsValid</name><argument_list>(<argument>IsRegistered</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TargetPrefix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ModeSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>DriverMode</name> <operator>==</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>ToolChain</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>path_list</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<enum>enum <name>CXXStdlibType</name> <block>{
<decl><name>CST_Libcxx</name></decl>,
<decl><name>CST_Libstdcxx</name></decl>
}</block>;</enum>

<enum>enum <name>RuntimeLibType</name> <block>{
<decl><name>RLT_CompilerRT</name></decl>,
<decl><name>RLT_Libgcc</name></decl>
}</block>;</enum>

<enum>enum <name>UnwindLibType</name> <block>{
<decl><name>UNW_None</name></decl>,
<decl><name>UNW_CompilerRT</name></decl>,
<decl><name>UNW_Libgcc</name></decl>
}</block>;</enum>

<enum>enum <name>RTTIMode</name> <block>{
<decl><name>RM_Enabled</name></decl>,
<decl><name>RM_Disabled</name></decl>,
}</block>;</enum>

<enum>enum <name>FileType</name> <block>{ <decl><name>FT_Object</name></decl>, <decl><name>FT_Static</name></decl>, <decl><name>FT_Shared</name></decl> }</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>RegisterEffectiveTriple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Driver</name> <modifier>&amp;</modifier></type><name>D</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Triple</name> <name>Triple</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><specifier>const</specifier> <name>CachedRTTIArg</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTTIMode</name></type> <name>CachedRTTIMode</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>path_list</name></type> <name>LibraryPaths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>path_list</name></type> <name>FilePaths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>path_list</name></type> <name>ProgramPaths</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>Clang</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>Flang</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>Assemble</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>Link</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>StaticLibTool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>IfsMerge</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>OffloadBundler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tool</name></expr></argument>&gt;</argument_list></name> <name>OffloadWrapper</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getClang</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getFlang</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getAssemble</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getLink</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getStaticLibTool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getIfsMerge</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getClangAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getOffloadBundler</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>Tool</name> <operator>*</operator><macro><name>getOffloadWrapper</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SanitizerArgs</name></expr></argument>&gt;</argument_list></name> <name>SanitizerArguments</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>XRayArgs</name></expr></argument>&gt;</argument_list></name> <name>XRayArguments</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>Triple</name> <name>EffectiveTriple</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setEffectiveTriple</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name> <name>ET</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>EffectiveTriple</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CXXStdlibType</name></expr></argument>&gt;</argument_list></name> <name>cxxStdlibType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RuntimeLibType</name></expr></argument>&gt;</argument_list></name> <name>runtimeLibType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>UnwindLibType</name></expr></argument>&gt;</argument_list></name> <name>unwindLibType</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>MultilibSet</name></type> <name>Multilibs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Multilib</name></type> <name>SelectedMultilib</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setTripleEnvironment</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>EnvironmentType</name> <name>Env</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>Tool</name> <operator>*</operator><macro><name>buildStaticLibTool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>Tool</name> <modifier>*</modifier></type><name>getTool</name><argument_list>(<argument><expr><name>Action</name><operator>::</operator><name>ActionClass</name> <name>AC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>buildCompilerRTBasename</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>StringRef Component</argument>,
<argument>FileType Type</argument>,
<argument>bool AddArch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>addSystemInclude</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>addExternCSystemInclude</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>addExternCSystemIncludeIfExists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>addSystemIncludes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Paths</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ToolChain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><macro><name>getDriver</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>D</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><macro><name>getVFS</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><macro><name>getTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Triple</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>*</operator><macro><name>getAuxTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getInputFilename</name><argument_list>(<argument>const InputInfo &amp;Input</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ArchType</name> <macro><name>getArch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getArchName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Triple</name><operator>.</operator><name>getArchName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getPlatform</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Triple</name><operator>.</operator><name>getVendorName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getOS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Triple</name><operator>.</operator><name>getOSName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>StringRef</name> <macro><name>getDefaultUniversalArchName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getTripleString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Triple</name><operator>.</operator><name>getTriple</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><macro><name>getEffectiveTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>EffectiveTriple</name><operator>.</operator><name>getTriple</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No effective triple"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>EffectiveTriple</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>path_list</name> <modifier>&amp;</modifier></type><name>getLibraryPaths</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>LibraryPaths</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>path_list</name> <operator>&amp;</operator><macro><name>getLibraryPaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LibraryPaths</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>path_list</name> <modifier>&amp;</modifier></type><name>getFilePaths</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>FilePaths</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>path_list</name> <operator>&amp;</operator><macro><name>getFilePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FilePaths</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>path_list</name> <modifier>&amp;</modifier></type><name>getProgramPaths</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>ProgramPaths</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>path_list</name> <operator>&amp;</operator><macro><name>getProgramPaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ProgramPaths</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>MultilibSet</name> <operator>&amp;</operator><macro><name>getMultilibs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Multilibs</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><macro><name>getMultilib</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SelectedMultilib</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SanitizerArgs</name><operator>&amp;</operator> <macro><name>getSanitizerArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>XRayArgs</name><operator>&amp;</operator> <macro><name>getXRayArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><macro><name>getRTTIArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CachedRTTIArg</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>RTTIMode</name> <macro><name>getRTTIMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CachedRTTIMode</name></expr>;</return> }</block></expr></expr_stmt>















<function_decl><type><specifier>static</specifier> <name>ParsedClangName</name></type> <name>getTargetAndModeFromProgramName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>ProgName</name></decl></parameter>)</parameter_list>;</function_decl>











<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator><macro><name>TranslateOpenMPTargetArgs</name><argument_list>(
<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>bool SameTripleAsHost</argument>,
<argument>SmallVectorImpl&lt;llvm::opt::Arg *&gt; &amp;AllocatedArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>TranslateXarchArgs</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><operator>&amp;</operator><name>A</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator><name>DAL</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>AllocatedArgs</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateXarchArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>,
<argument>SmallVectorImpl&lt;llvm::opt::Arg *&gt; *AllocatedArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>Tool</name> <modifier>*</modifier></type><name>SelectTool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JobAction</name> <operator>&amp;</operator><name>JA</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetFilePath</name><argument_list>(<argument>const char *Name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetProgramPath</name><argument_list>(<argument>const char *Name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetLinkerPath</name><argument_list>(<argument>bool *LinkerIsLLD = nullptr</argument>,
<argument>bool *LinkerIsLLDDarwinNew = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetStaticLibToolPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printVerboseInfo</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>





<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isCrossCompiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>HasNativeLLVMSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>types</name><operator>::</operator><name>ID</name> <macro><name>LookupTypeForExtension</name><argument_list>(<argument>StringRef Ext</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsBlocksDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>useIntegratedAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>parseInlineAsmUsingAsmParser</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsMathErrnoDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsEncodeExtendedBlockSignatureDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsObjCNonFragileABIDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>UseObjCMixedDispatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>useRelaxRelocations</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>LangOptions</name><operator>::</operator><name>StackProtectorMode</name>
<macro><name>GetDefaultStackProtectorLevel</name><argument_list>(<argument>bool KernelOrKext</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LangOptions</name><operator>::</operator><name>SSPOff</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>LangOptions</name><operator>::</operator><name>TrivialAutoVarInitKind</name>
<macro><name>GetDefaultTrivialAutoVarInit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LangOptions</name><operator>::</operator><name>TrivialAutoVarInitKind</name><operator>::</operator><name>Uninitialized</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getDefaultLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="string">"ld"</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>RuntimeLibType</name> <macro><name>GetDefaultRuntimeLibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>RLT_Libgcc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>CXXStdlibType</name> <macro><name>GetDefaultCXXStdlibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>CST_Libstdcxx</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>UnwindLibType</name> <macro><name>GetDefaultUnwindLibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>UNW_None</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getCompilerRTPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getCompilerRT</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>StringRef Component</argument>,
<argument>FileType Type = ToolChain::FT_Static</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getCompilerRTArgString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Component</name></expr></argument>,
<argument><expr><name>FileType</name> <name>Type</name> <operator>=</operator> <name>ToolChain</name><operator>::</operator><name>FT_Static</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getCompilerRTBasename</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>StringRef Component</argument>,
<argument>FileType Type = ToolChain::FT_Static</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getRuntimePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getStdlibPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getArchSpecificLibPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>StringRef</name> <macro><name>getOSLibName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>needsProfileRT</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>needsGCovInstrumentation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>IsUnwindTablesDefault</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type>
<name>IsAArch64OutlineAtomicsDefault</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isNoExecStackDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>SupportsProfiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>void</name> <macro><name>CheckObjCARC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{}</block>


<name>virtual</name> <name>codegenoptions</name><operator>::</operator><name>DebugInfoFormat</name> <macro><name>getDefaultDebugFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>codegenoptions</name><operator>::</operator><name>DIF_DWARF</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>UseDwarfDebugFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>unsigned</name> <macro><name>GetDefaultDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">4</literal></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>unsigned</name> <macro><name>getMaxDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UINT_MAX</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>GetDefaultStandaloneDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>DebuggerKind</name> <macro><name>getDefaultDebuggerTuning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>DebuggerKind</name><operator>::</operator><name>GDB</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>supportsDebugInfoOption</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>adjustDebugInfoKind</name><argument_list>(<argument><expr><name>codegenoptions</name><operator>::</operator><name>DebugInfoKind</name> <operator>&amp;</operator><name>DebugInfoKind</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>ExceptionHandling</name>
<macro><name>GetExceptionModel</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>SupportsEmbeddedBitcode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getThreadModel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="string">"posix"</literal></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isThreadModelSupported</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StringRef</name> <name>Model</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getMultiarchTriple</name><argument_list>(<argument>const Driver &amp;D</argument>,
<argument>const llvm::Triple &amp;TargetTriple</argument>,
<argument>StringRef SysRoot</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TargetTriple</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name>
<macro><name>ComputeLLVMTriple</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>types::ID InputType = types::TY_INVALID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>ComputeEffectiveClangTriple</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>types::ID InputType = types::TY_INVALID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>ObjCRuntime</name></type> <name>getDefaultObjCRuntime</name><argument_list>(<argument><expr><name>bool</name> <name>isNonFragile</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasBlocksRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>computeSysRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>AddClangSystemIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addClangTargetOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>DeviceOffloadKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addClangWarningOptions</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>RuntimeLibType</name></type>
<name>GetRuntimeLibType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>CXXStdlibType</name></type> <name>GetCXXStdlibType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>UnwindLibType</name></type> <name>GetUnwindLibType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>detectLibcxxVersion</name><argument_list>(<argument>StringRef IncludePath</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>AddClangCXXStdlibIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>AddClangCXXStdlibIsystemArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ShouldLinkCXXStdlib</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddCXXStdlibLibArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AddFilePathLibArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddCCKextLibArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isFastMathRuntimeAvailable</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>addFastMathRuntimeIfAvailable</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addProfileRTLibs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddCudaIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddHIPIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddIAMCUIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>VersionTuple</name></type> <name>computeMSVCVersion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>&gt;</argument_list></name>
<macro><name>getHIPDeviceLibs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>SanitizerMask</name> <macro><name>getSupportedSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>SanitizerMask</name> <macro><name>getDefaultSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>SanitizerMask</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>canSplitThinLTOUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>DenormalMode</name> <macro><name>getDefaultDenormalModeForType</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const llvm::fltSemantics *FPType = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>DenormalMode</name><operator>::</operator><call><name>getIEEE</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>RegisterEffectiveTriple</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ToolChain</name> <modifier>&amp;</modifier></type><name>TC</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>RegisterEffectiveTriple</name><argument_list>(<argument>const ToolChain &amp;TC</argument>, <argument>llvm::Triple T</argument>)</argument_list></macro> : <macro><name>TC</name><argument_list>(<argument>TC</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>TC</name><operator>.</operator><name>setEffectiveTriple</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>RegisterEffectiveTriple</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>TC</name><operator>.</operator><name>setEffectiveTriple</name></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>Triple</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
