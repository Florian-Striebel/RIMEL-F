<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_REWRITE_FRONTEND_FIXITREWRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_REWRITE_FRONTEND_FIXITREWRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Edit/EditedSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Rewrite/Core/Rewriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FixItOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FixItOptions</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>FixItOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>RewriteFilename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Filename</name></expr></argument>, <argument><expr><name>int</name> <operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>InPlace</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>FixWhatYouCan</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>FixOnlyWarnings</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Silent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FixItRewriter</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{

<expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr>;

<expr><name>edit</name><operator>::</operator><name>EditedSource</name> <name>Editor</name></expr>;



<expr><name>Rewriter</name> <name>Rewrite</name></expr>;



<expr><name>DiagnosticConsumer</name> <operator>*</operator><name>Client</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Owner</name></expr>;



<expr><name>FixItOptions</name> <operator>*</operator><name>FixItOpts</name></expr>;


<expr><name>unsigned</name> <name>NumFailures</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>bool</name> <name>PrevDiagSilenced</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>FixItRewriter</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>, <argument><expr><name>FixItOptions</name> <operator>*</operator><name>FixItOpts</name></expr></argument>)</argument_list></call></expr>;


<expr><operator>~</operator><macro><name>FixItRewriter</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>bool</name> <macro><name>IsModified</name><argument_list>(<argument>FileID ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Rewrite</name><operator>.</operator><name>getRewriteBufferFor</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>Rewriter</name><operator>::</operator><name>buffer_iterator</name></expr>;


<expr><name>iterator</name> <macro><name>buffer_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Rewrite</name><operator>.</operator><name>buffer_begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>buffer_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Rewrite</name><operator>.</operator><name>buffer_end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>




<name>bool</name> <macro><name>WriteFixedFile</name><argument_list>(<argument>FileID ID</argument>, <argument>raw_ostream &amp;OS</argument>)</argument_list></macro></expr>;




<expr><name>bool</name> <call><name>WriteFixedFiles</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>RewrittenFiles</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;





<expr><name>bool</name> <macro><name>IncludeInDiagnosticCounts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level DiagLevel</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>Diag</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>unsigned DiagID</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
