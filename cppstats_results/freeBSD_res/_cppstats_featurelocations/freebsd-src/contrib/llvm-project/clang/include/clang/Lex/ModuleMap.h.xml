<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/ModuleMap.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_MODULEMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_MODULEMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/TinyPtrVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DirectoryEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ModuleMapCallbacks</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ModuleMapCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>







<function><type><name>virtual</name> <name>void</name></type> <name>moduleMapFileRead</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>FileStart</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>&amp;</modifier></type><name>File</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsSystem</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>moduleMapAddHeader</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>moduleMapAddUmbrellaHeader</name><parameter_list>(<parameter><decl><type><name>FileManager</name> <modifier>*</modifier></type><name>FileMgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>Header</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleMap</name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>*</modifier></type><name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HeaderSearch</name> <modifier>&amp;</modifier></type><name>HeaderInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMapCallbacks</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Callbacks</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>BuiltinIncludeDir</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>LangOptions</name></type> <name>MMapLangOpts</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>SourceModule</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Module</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>PendingSubmodules</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Modules</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>CachedModuleLoads</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>ShadowModules</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumCreatedModules</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>PendingLinkAsModule</name></expr>;</expr_stmt>

<label><name>public</name>:</label>


<function_decl><type><name>void</name></type> <name>resolveLinkAsDependencies</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>addLinkAsDependency</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>)</parameter_list>;</function_decl>


<enum>enum <name>ModuleHeaderRole</name> <block>{

<decl><name>NormalHeader</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,


<decl><name>PrivateHeader</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,



<decl><name>TextualHeader</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,







}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>ModuleHeaderRole</name></type> <name>headerKindToRole</name><argument_list>(<argument><expr><name>Module</name><operator>::</operator><name>HeaderKind</name> <name>Kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>Module</name><operator>::</operator><name>HeaderKind</name> <macro><name>headerRoleToKind</name><argument_list>(<argument>ModuleHeaderRole Role</argument>)</argument_list></macro></expr>;</expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>KnownHeader</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ModuleHeaderRole</name></expr></argument>&gt;</argument_list></name> <name>Storage</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>KnownHeader</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Storage</name><argument_list>(<argument>nullptr</argument>, <argument>NormalHeader</argument>)</argument_list></macro> <block>{}</block>
<macro><name>KnownHeader</name><argument_list>(<argument>Module *M</argument>, <argument>ModuleHeaderRole Role</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Storage</name><argument_list>(<argument>M</argument>, <argument>Role</argument>)</argument_list></macro> <block>{}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>KnownHeader</name> <operator>&amp;</operator><name>A</name><operator>,</operator> <specifier>const</specifier> <name>KnownHeader</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>Storage</name></name> <operator>==</operator> <name><name>B</name><operator>.</operator><name>Storage</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>KnownHeader</name> <operator>&amp;</operator><name>A</name><operator>,</operator> <specifier>const</specifier> <name>KnownHeader</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>Storage</name></name> <operator>!=</operator> <name><name>B</name><operator>.</operator><name>Storage</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Module</name> <operator>*</operator><macro><name>getModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ModuleHeaderRole</name> <macro><name>getRole</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAvailable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getModule</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isAvailable</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isAccessibleFrom</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><call><name>getRole</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>PrivateHeader</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>M</name> <operator>&amp;&amp;</operator> <call><name><name>M</name><operator>-&gt;</operator><name>getTopLevelModule</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getModule</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getTopLevelModule</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>AdditionalModMapsSet</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ModuleMapParser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>HeadersMap</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>KnownHeader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>HeadersMap</name></type> <name>Headers</name></decl>;</decl_stmt>


<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>LazyHeadersBySize</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>Module</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>LazyHeadersByModTime</name></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>UmbrellaDirs</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>CurrentModuleScopeID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>ModuleScopeIDs</name></expr>;</expr_stmt>


<struct>struct <name>Attributes</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsSystem</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExternC</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExhaustive</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NoUndeclaredIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Attributes</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>IsSystem</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExternC</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExhaustive</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>NoUndeclaredIncludes</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>InferredDirectory</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>InferModules</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Attributes</name></type> <name>Attrs</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>ModuleMapFile</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>ExcludedModules</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InferredDirectory</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>InferModules</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>InferredDirectory</name></expr></argument>&gt;</argument_list></name> <name>InferredDirectories</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>InferredModuleAllowedBy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><name>AdditionalModMapsSet</name></expr></argument>&gt;</argument_list></name> <name>AdditionalModMaps</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>ParsedModuleMap</name></expr>;</expr_stmt>













<expr_stmt><expr><name>Module</name><operator>::</operator><name>ExportDecl</name>
<macro><name>resolveExport</name><argument_list>(<argument>Module *Mod</argument>, <argument>const Module::UnresolvedExportDecl &amp;Unresolved</argument>,
<argument>bool Complain</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>












<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>resolveModuleId</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleId</name> <operator>&amp;</operator><name>Id</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>, <argument><expr><name>bool</name> <name>Complain</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>addUnresolvedHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>,
<argument><expr><name>Module</name><operator>::</operator><name>UnresolvedHeaderDirective</name> <name>Header</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>NeedsFramework</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type>
<name>findHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Module</name><operator>::</operator><name>UnresolvedHeaderDirective</name> <operator>&amp;</operator><name>Header</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>RelativePathName</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>NeedsFramework</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>resolveHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Module</name><operator>::</operator><name>UnresolvedHeaderDirective</name> <operator>&amp;</operator><name>Header</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>NeedsFramework</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>resolveAsBuiltinHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Module</name><operator>::</operator><name>UnresolvedHeaderDirective</name> <operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>HeadersMap</name><operator>::</operator><name>iterator</name> <call><name>findKnownHeader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<function_decl><type><name>KnownHeader</name></type> <name>findHeaderInUmbrellaDirs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>IntermediateDirs</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>KnownHeader</name></type> <name>findOrCreateModuleForHeaderInUmbrellaDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>bool</name></type> <name>isHeaderInUmbrellaDirs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>IntermediateDirs</name></decl>;</decl_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findHeaderInUmbrellaDirs</name><argument_list>(<argument><expr><name>File</name></expr></argument>, <argument><expr><name>IntermediateDirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>inferFrameworkModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>FrameworkDir</name></decl></parameter>,
<parameter><decl><type><name>Attributes</name></type> <name>Attrs</name></decl></parameter>, <parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>











<expr_stmt><expr><call><name>ModuleMap</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>*</operator><name>Target</name></expr></argument>,
<argument><expr><name>HeaderSearch</name> <operator>&amp;</operator><name>HeaderInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>ModuleMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>setTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>Target</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>setBuiltinIncludeDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>Dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BuiltinIncludeDir</name> <operator>=</operator> <name>Dir</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><macro><name>getBuiltinDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BuiltinIncludeDir</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isBuiltinHeader</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FileName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isBuiltinHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>addModuleMapCallbacks</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMapCallbacks</name></expr></argument>&gt;</argument_list></name> <name>Callback</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Callbacks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Callback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>















<function_decl><type><name>KnownHeader</name></type> <name>findModuleForHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AllowTextual</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>KnownHeader</name></expr></argument>&gt;</argument_list></name></type> <name>findAllModulesForHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>KnownHeader</name></expr></argument>&gt;</argument_list></name></type>
<name>findResolvedModulesForHeader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>resolveHeaderDirectives</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>resolveHeaderDirectives</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>















<function_decl><type><name>void</name></type> <name>diagnoseHeaderInclusion</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>RequestingModule</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>RequestingModuleIsModuleInterface</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>FilenameLoc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>bool</name></type> <name>isHeaderInUnavailableModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>Header</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isHeaderUnavailableInModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>Header</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>RequestingModule</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>findModule</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>lookupModuleUnqualified</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><name>Module</name> <modifier>*</modifier></type><name>lookupModuleQualified</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>















<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>findOrCreateModule</name><argument_list>(<argument>StringRef Name</argument>, <argument>Module *Parent</argument>,
<argument>bool IsFramework</argument>,
<argument>bool IsExplicit</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>createGlobalModuleFragmentForModuleUnit</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>createPrivateModuleFragmentForInterfaceUnit</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>createModuleForInterfaceUnit</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>,
<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>GlobalModule</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>createHeaderModule</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Module</name><operator>::</operator><name>Header</name></expr></argument>&gt;</argument_list></name></type> <name>Headers</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>inferFrameworkModule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>FrameworkDir</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsSystem</name></decl></parameter>, <parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>Module</name> <modifier>*</modifier></type><name>createShadowedModule</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsFramework</name></decl></parameter>,
<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>ShadowingModule</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type> <name>finishModuleDeclarationScope</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CurrentModuleScopeID</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>mayShadowNewModule</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>ExistingModule</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ExistingModule</name><operator>-&gt;</operator><name>Parent</name></name> <operator>&amp;&amp;</operator> <literal type="string">"expected top-level module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>ModuleScopeIDs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>ExistingModule</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"unknown module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ModuleScopeIDs</name><index>[<expr><name>ExistingModule</name></expr>]</index></name> <operator>&lt;</operator> <name>CurrentModuleScopeID</name></expr>;</return>
</block_content>}</block></function>








<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>getContainingModuleMapFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>Module</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>getModuleMapFileForUniquing</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>setInferredModuleAllowedBy</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>ModMap</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>AdditionalModMapsSet</name> <modifier>*</modifier></type><name>getAdditionalModuleMapFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>AdditionalModMaps</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <call><name><name>AdditionalModMaps</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>addAdditionalModuleMapFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>ModuleMap</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>bool</name></type> <name>resolveExports</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Complain</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>bool</name></type> <name>resolveUses</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Complain</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>bool</name></type> <name>resolveConflicts</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Complain</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>setUmbrellaHeader</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>UmbrellaHeader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>NameAsWritten</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>PathRelativeToRootModuleDirectory</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>setUmbrellaDir</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>UmbrellaDir</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>NameAsWritten</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>PathRelativeToRootModuleDirectory</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>addHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>, <argument><expr><name>Module</name><operator>::</operator><name>Header</name> <name>Header</name></expr></argument>,
<argument><expr><name>ModuleHeaderRole</name> <name>Role</name></expr></argument>, <argument><expr><name>bool</name> <name>Imported</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>excludeHeader</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>, <argument><expr><name>Module</name><operator>::</operator><name>Header</name> <name>Header</name></expr></argument>)</argument_list></decl>;</decl_stmt>





















<function_decl><type><name>bool</name></type> <name>parseModuleMapFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsSystem</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DirectoryEntry</name> <modifier>*</modifier></type><name>HomeDir</name></decl></parameter>,
<parameter><decl><type><name>FileID</name></type> <name>ID</name> <init>= <expr><call><name>FileID</name><argument_list>()</argument_list></call></expr></init></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Offset</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ExternModuleLoc</name> <init>= <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>using</name></type> <name>module_iterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>module_iterator</name> <macro><name>module_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Modules</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>module_iterator</name> <macro><name>module_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Modules</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>module_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>modules</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name>module_begin</name><argument_list>()</argument_list></call></expr>, <macro><name>module_end</name><argument_list>()</argument_list></macro>}</block></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>cacheModuleLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>II</name></decl></parameter>, <parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>CachedModuleLoads</name><index>[<expr><operator>&amp;</operator><name>II</name></expr>]</index></name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getCachedModuleLoad</name><argument_list>(<argument>const IdentifierInfo &amp;II</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>I</name> <operator>=</operator> <call><name><name>CachedModuleLoads</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>II</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <call><name><name>CachedModuleLoads</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
