<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/ExceptionSpecificationType.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_EXCEPTIONSPECIFICATIONTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_EXCEPTIONSPECIFICATIONTYPE_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<enum>enum <name>ExceptionSpecificationType</name> <block>{
<decl><name>EST_None</name></decl>,
<decl><name>EST_DynamicNone</name></decl>,
<decl><name>EST_Dynamic</name></decl>,
<decl><name>EST_MSAny</name></decl>,
<decl><name>EST_NoThrow</name></decl>,
<decl><name>EST_BasicNoexcept</name></decl>,
<decl><name>EST_DependentNoexcept</name></decl>,
<decl><name>EST_NoexceptFalse</name></decl>,
<decl><name>EST_NoexceptTrue</name></decl>,
<decl><name>EST_Unevaluated</name></decl>,
<decl><name>EST_Uninstantiated</name></decl>,
<decl><name>EST_Unparsed</name></decl>
}</block>;</enum>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isDynamicExceptionSpec</name><parameter_list>(<parameter><decl><type><name>ExceptionSpecificationType</name></type> <name>ESpecType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ESpecType</name> <operator>&gt;=</operator> <name>EST_DynamicNone</name> <operator>&amp;&amp;</operator> <name>ESpecType</name> <operator>&lt;=</operator> <name>EST_MSAny</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isComputedNoexcept</name><parameter_list>(<parameter><decl><type><name>ExceptionSpecificationType</name></type> <name>ESpecType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ESpecType</name> <operator>&gt;=</operator> <name>EST_DependentNoexcept</name> <operator>&amp;&amp;</operator>
<name>ESpecType</name> <operator>&lt;=</operator> <name>EST_NoexceptTrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isNoexceptExceptionSpec</name><parameter_list>(<parameter><decl><type><name>ExceptionSpecificationType</name></type> <name>ESpecType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ESpecType</name> <operator>==</operator> <name>EST_BasicNoexcept</name> <operator>||</operator> <name>ESpecType</name> <operator>==</operator> <name>EST_NoThrow</name> <operator>||</operator>
<call><name>isComputedNoexcept</name><argument_list>(<argument><expr><name>ESpecType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isUnresolvedExceptionSpec</name><parameter_list>(<parameter><decl><type><name>ExceptionSpecificationType</name></type> <name>ESpecType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ESpecType</name> <operator>==</operator> <name>EST_Unevaluated</name> <operator>||</operator> <name>ESpecType</name> <operator>==</operator> <name>EST_Uninstantiated</name></expr>;</return>
</block_content>}</block></function>


<enum>enum <name>CanThrowResult</name> <block>{
<decl><name>CT_Cannot</name></decl>,
<decl><name>CT_Dependent</name></decl>,
<decl><name>CT_Can</name></decl>
}</block>;</enum>

<function><type><specifier>inline</specifier> <name>CanThrowResult</name></type> <name>mergeCanThrow</name><parameter_list>(<parameter><decl><type><name>CanThrowResult</name></type> <name>CT1</name></decl></parameter>, <parameter><decl><type><name>CanThrowResult</name></type> <name>CT2</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><ternary><condition><expr><name>CT1</name> <operator>&gt;</operator> <name>CT2</name></expr> ?</condition><then> <expr><name>CT1</name></expr> </then><else>: <expr><name>CT2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
