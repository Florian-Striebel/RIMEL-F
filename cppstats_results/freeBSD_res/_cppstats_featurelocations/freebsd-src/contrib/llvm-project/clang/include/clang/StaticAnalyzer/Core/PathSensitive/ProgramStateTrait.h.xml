<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATETRAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATETRAIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>ProgramStatePartialTrait</name></expr>;</expr_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_TRAIT_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace { class Name {}; using Name ##Ty = Type; } namespace clang { namespace ento { template &lt;&gt; struct ProgramStateTrait&lt;Name&gt; : public ProgramStatePartialTrait&lt;Name ##Ty&gt; { static void *GDMIndex() { static int Index; return &amp;Index; } }; } }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_FACTORY_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace clang { namespace ento { template &lt;&gt; struct ProgramStateTrait&lt;Type&gt; : public ProgramStatePartialTrait&lt;Type&gt; { static void *GDMIndex() { static int Index; return &amp;Index; } }; } }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLANG_ENTO_PROGRAMSTATE_MAP</name><parameter_list>(<parameter><type><name>Key</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>llvm::ImmutableMap&lt;Key, Value&gt;</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_MAP_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Key</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGISTER_TRAIT_WITH_PROGRAMSTATE(Name, CLANG_ENTO_PROGRAMSTATE_MAP(Key, Value))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_MAP_FACTORY_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Key</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>using Name = llvm::ImmutableMap&lt;Key, Value&gt;; REGISTER_FACTORY_WITH_PROGRAMSTATE(Name)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_SET_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGISTER_TRAIT_WITH_PROGRAMSTATE(Name, llvm::ImmutableSet&lt;Elem&gt;)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_SET_FACTORY_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>using Name = llvm::ImmutableSet&lt;Elem&gt;; REGISTER_FACTORY_WITH_PROGRAMSTATE(Name)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_LIST_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGISTER_TRAIT_WITH_PROGRAMSTATE(Name, llvm::ImmutableList&lt;Elem&gt;)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_LIST_FACTORY_WITH_PROGRAMSTATE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>using Name = llvm::ImmutableList&lt;Elem&gt;; REGISTER_FACTORY_WITH_PROGRAMSTATE(Name)</cpp:value></cpp:define>





<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Key</name></expr><operator>,</operator> <expr><name>typename</name> <name>Data</name></expr><operator>,</operator> <expr><name>typename</name> <name>Info</name><operator>&gt;</operator>
struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>context_type</name> <operator>=</operator> <name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator></expr>;
<expr><name>using</name> <name>key_type</name> <operator>=</operator> <name>Key</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>Data</name></expr>;
<expr><name>using</name> <name>lookup_type</name> <operator>=</operator> <specifier>const</specifier> <name>value_type</name> <operator>*</operator></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><name>p</name> <operator>?</operator> <call><name>data_type</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>data_type</name><operator>::</operator><name>TreeTy</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>data_type</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type B</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>B</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>lookup_type</name> <macro><name>Lookup</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>B</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>data_type</name> <macro><name>Set</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>, <argument>value_type E</argument>,
<argument>context_type F</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>F</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>data_type</name> <macro><name>Remove</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>, <argument>context_type F</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>F</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>Contains</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>B</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>context_type</name> <macro><name>MakeContext</name><argument_list>(<argument>void *p</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>CreateContext</name><argument_list>(<argument>llvm::BumpPtrAllocator&amp; Alloc</argument>)</argument_list></macro> <block>{
<return>return <expr><name>new</name> <name>typename</name> <name>data_type</name><operator>::</operator><call><name>Factory</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>DeleteContext</name><argument_list>(<argument>void *Ctx</argument>)</argument_list></macro> <block>{
<macro><name>delete</name> <argument_list>(<argument>typename data_type::Factory *</argument>)</argument_list></macro> <expr><name>Ctx</name></expr>;
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Key</name></expr></argument>, <argument><expr><name>typename</name> <name>Info</name></expr></argument>&gt;</argument_list></name>
struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>context_type</name> <operator>=</operator> <name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator></expr>;
<expr><name>using</name> <name>key_type</name> <operator>=</operator> <name>Key</name></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>data_type</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>data_type</name><operator>::</operator><name>TreeTy</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>data_type</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type B</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>B</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>data_type</name> <macro><name>Add</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>, <argument>context_type F</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>F</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>data_type</name> <macro><name>Remove</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>, <argument>context_type F</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>F</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>Contains</name><argument_list>(<argument>data_type B</argument>, <argument>key_type K</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>B</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>context_type</name> <macro><name>MakeContext</name><argument_list>(<argument>void *p</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>CreateContext</name><argument_list>(<argument>llvm::BumpPtrAllocator &amp;Alloc</argument>)</argument_list></macro> <block>{
<return>return <expr><name>new</name> <name>typename</name> <name>data_type</name><operator>::</operator><call><name>Factory</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>DeleteContext</name><argument_list>(<argument>void *Ctx</argument>)</argument_list></macro> <block>{
<macro><name>delete</name> <argument_list>(<argument>typename data_type::Factory *</argument>)</argument_list></macro> <expr><name>Ctx</name></expr>;
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>key_type</name> <operator>=</operator> <name>T</name></expr>;
<expr><name>using</name> <name>context_type</name> <operator>=</operator> <name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>Add</name><argument_list>(<argument>data_type L</argument>, <argument>key_type K</argument>, <argument>context_type F</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>F</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>Contains</name><argument_list>(<argument>data_type L</argument>, <argument>key_type K</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>L</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>data_type</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>ImmutableListImpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>data_type</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableListImpl</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>D</name><operator>.</operator><name>getInternalPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>context_type</name> <macro><name>MakeContext</name><argument_list>(<argument>void *p</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>typename</name> <name>data_type</name><operator>::</operator><name>Factory</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>CreateContext</name><argument_list>(<argument>llvm::BumpPtrAllocator &amp;Alloc</argument>)</argument_list></macro> <block>{
<return>return <expr><name>new</name> <name>typename</name> <name>data_type</name><operator>::</operator><call><name>Factory</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>DeleteContext</name><argument_list>(<argument>void *Ctx</argument>)</argument_list></macro> <block>{
<macro><name>delete</name> <argument_list>(<argument>typename data_type::Factory *</argument>)</argument_list></macro> <expr><name>Ctx</name></expr>;
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>bool</name></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><name>data_type</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>*</operator><name>p</name></expr>
</then><else>: <expr><call><name>data_type</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type d</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>d</name></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>unsigned</name></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><name>data_type</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>*</operator><name>p</name></expr>
</then><else>: <expr><call><name>data_type</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type d</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>d</name></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>void</name> <operator>*</operator></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>*</operator><name>p</name></expr>
</then><else>: <expr><call><name>data_type</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type d</argument>)</argument_list></macro> <block>{
<return>return <expr><name>d</name></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>data_type</name> <operator>=</operator> <specifier>const</specifier> <name>void</name> <operator>*</operator></expr>;

<expr><specifier>static</specifier> <name>data_type</name> <macro><name>MakeData</name><argument_list>(<argument>void *const *p</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>*</operator><name>p</name></expr> </then><else>: <expr><call><name>data_type</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>MakeVoidPtr</name><argument_list>(<argument>data_type d</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr>
}</block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
