<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SIMPLECONSTRAINTMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SIMPLECONSTRAINTMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SimpleConstraintManager</name> <range>: <expr><name>public</name> <name>ConstraintManager</name> <block>{
<expr><name>ExprEngine</name> <operator>*</operator><name>EE</name></expr>;
<expr><name>SValBuilder</name> <operator>&amp;</operator><name>SVB</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>SimpleConstraintManager</name><argument_list>(<argument><expr><name>ExprEngine</name> <operator>*</operator><name>exprengine</name></expr></argument>, <argument><expr><name>SValBuilder</name> <operator>&amp;</operator><name>SB</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>EE</name><argument_list>(<argument><expr><name>exprengine</name></expr></argument>)</argument_list></call></expr>, <macro><name>SVB</name><argument_list>(<argument>SB</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SimpleConstraintManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;







<expr><name>ProgramStateRef</name> <macro><name>assume</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>DefinedSVal Cond</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ProgramStateRef</name> <macro><name>assumeInclusiveRange</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>NonLoc Value</argument>,
<argument>const llvm::APSInt &amp;From</argument>,
<argument>const llvm::APSInt &amp;To</argument>,
<argument>bool InRange</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>






<name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSym</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymInclusiveRange</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;From</argument>,
<argument>const llvm::APSInt &amp;To</argument>,
<argument>bool InRange</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymUnsupported</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>SymbolRef Sym</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>SValBuilder</name> <operator>&amp;</operator><macro><name>getSValBuilder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SVB</name></expr>;</return> }</block>
<name>BasicValueFactory</name> <operator>&amp;</operator><macro><name>getBasicVals</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SVB</name><operator>.</operator><name>getBasicValueFactory</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>SymbolManager</name> <operator>&amp;</operator><macro><name>getSymbolManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SVB</name><operator>.</operator><name>getSymbolManager</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>ProgramStateRef</name> <macro><name>assume</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>NonLoc Cond</argument>, <argument>bool Assumption</argument>)</argument_list></macro></expr>;

<expr><name>ProgramStateRef</name> <macro><name>assumeAux</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>NonLoc Cond</argument>,
<argument>bool Assumption</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
