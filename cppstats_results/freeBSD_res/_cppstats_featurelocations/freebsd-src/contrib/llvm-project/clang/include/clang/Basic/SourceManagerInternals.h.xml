<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/SourceManagerInternals.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SOURCEMANAGERINTERNALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SOURCEMANAGERINTERNALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>





<struct>struct <name>LineEntry</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>FileOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LineNo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>FilenameID</name></decl>;</decl_stmt>


<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileKind</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LineEntry</name></type> <name>get</name><argument_list>(<argument><expr><name>unsigned</name> <name>Offs</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Line</name></expr></argument>, <argument><expr><name>int</name> <name>Filename</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileKind</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>IncludeOffset</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>LineEntry</name></type> <name>E</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>FileOffset</name></name> <operator>=</operator> <name>Offs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>LineNo</name></name> <operator>=</operator> <name>Line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>FilenameID</name></name> <operator>=</operator> <name>Filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>FileKind</name></name> <operator>=</operator> <name>FileKind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>IncludeOffset</name></name> <operator>=</operator> <name>IncludeOffset</name></expr>;</expr_stmt>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>


<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{

<return>return <expr><name><name>lhs</name><operator>.</operator><name>FileOffset</name></name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>FileOffset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>E</name><operator>,</operator> <name>unsigned</name> <name>Offset</name><operator>)</operator> <block>{
<return>return <expr><name><name>E</name><operator>.</operator><name>FileOffset</name></name> <operator>&lt;</operator> <name>Offset</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>unsigned</name> <name>Offset</name><operator>,</operator> <specifier>const</specifier> <name>LineEntry</name> <operator>&amp;</operator><name>E</name><operator>)</operator> <block>{
<return>return <expr><name>Offset</name> <operator>&lt;</operator> <name><name>E</name><operator>.</operator><name>FileOffset</name></name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LineTableInfo</name> <block>{<block_content>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>FilenameIDs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMapEntry</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>FilenamesByID</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LineEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>LineEntries</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>FilenameIDs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>FilenamesByID</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>LineEntries</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>unsigned</name></type> <name>getLineTableFilenameID</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getFilename</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ID</name> <operator>&lt;</operator> <call><name><name>FilenamesByID</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid FilenameID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>FilenamesByID</name><index>[<expr><name>ID</name></expr>]</index></name><operator>-&gt;</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumFilenames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FilenamesByID</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddLineNote</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>LineNo</name></expr></argument>, <argument><expr><name>int</name> <name>FilenameID</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>EntryExit</name></expr></argument>, <argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><specifier>const</specifier> <name>LineEntry</name> <modifier>*</modifier></type><name>FindNearestLineEntry</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LineEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>LineEntries</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>LineEntries</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>



<decl_stmt><decl><type><name>void</name></type> <name>AddEntry</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LineEntry</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Entries</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
