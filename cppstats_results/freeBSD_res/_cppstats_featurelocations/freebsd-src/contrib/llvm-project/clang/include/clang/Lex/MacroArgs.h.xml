<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/MacroArgs.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_MACROARGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_MACROARGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>MacroArgs</name></type> <name>final</name>
<range>: <expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>MacroArgs</name></expr></argument>, <argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>friend</name> <name>TrailingObjects</name></expr>;




<expr><name>unsigned</name> <name>NumUnexpArgTokens</name></expr>;






<expr><name>bool</name> <name>VarargsElided</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>PreExpArgTokens</name></expr>;



<expr><name>MacroArgs</name> <operator>*</operator><name>ArgCache</name></expr>;


<expr><name>unsigned</name> <name>NumMacroArgs</name></expr>;

<macro><name>MacroArgs</name><argument_list>(<argument>unsigned NumToks</argument>, <argument>bool varargsElided</argument>, <argument>unsigned MacroArgs</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>NumUnexpArgTokens</name><argument_list>(<argument><expr><name>NumToks</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>VarargsElided</name><argument_list>(<argument><expr><name>varargsElided</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ArgCache</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>, <macro><name>NumMacroArgs</name><argument_list>(<argument>MacroArgs</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><call><name>MacroArgs</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>public</name><operator>:</operator>


<specifier>static</specifier> <name>MacroArgs</name> <operator>*</operator><macro><name>create</name><argument_list>(<argument>const MacroInfo *MI</argument>,
<argument>ArrayRef&lt;Token&gt; UnexpArgTokens</argument>,
<argument>bool VarargsElided</argument>, <argument>Preprocessor &amp;PP</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <call><name>destroy</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;



<expr><name>bool</name> <macro><name>ArgNeedsPreexpansion</name><argument_list>(<argument>const Token *ArgTok</argument>, <argument>Preprocessor &amp;PP</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><specifier>const</specifier> <name>Token</name> <operator>*</operator><macro><name>getUnexpArgument</name><argument_list>(<argument>unsigned Arg</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><specifier>static</specifier> <name>unsigned</name> <call><name>getArgLength</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>*</operator><name>ArgPtr</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator>
<macro><name>getPreExpArgument</name><argument_list>(<argument>unsigned Arg</argument>, <argument>Preprocessor &amp;PP</argument>)</argument_list></macro></expr>;



<expr><name>unsigned</name> <macro><name>getNumMacroArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumMacroArgs</name></expr>;</return> }</block>






<name>bool</name> <macro><name>isVarargsElidedUse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>VarargsElided</name></expr>;</return> }</block>














<name>bool</name> <call><name>invokedWithVariadicArgument</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>*</operator><specifier>const</specifier> <name>MI</name></expr></argument>, <argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;






<expr><specifier>static</specifier> <name>Token</name> <macro><name>StringifyArgument</name><argument_list>(<argument>const Token *ArgToks</argument>,
<argument>Preprocessor &amp;PP</argument>, <argument>bool Charify</argument>,
<argument>SourceLocation ExpansionLocStart</argument>,
<argument>SourceLocation ExpansionLocEnd</argument>)</argument_list></macro></expr>;




<expr><name>MacroArgs</name> <operator>*</operator><call><name>deallocate</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
