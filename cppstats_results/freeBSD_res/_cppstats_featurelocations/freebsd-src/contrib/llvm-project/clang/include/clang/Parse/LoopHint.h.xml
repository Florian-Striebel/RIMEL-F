<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Parse/LoopHint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_PARSE_LOOPHINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_PARSE_LOOPHINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Ownership.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/ParsedAttr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<struct>struct <name>LoopHint</name> <block>{

<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>IdentifierLoc</name> <modifier>*</modifier></type><name>PragmaNameLoc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>IdentifierLoc</name> <modifier>*</modifier></type><name>OptionLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>IdentifierLoc</name> <modifier>*</modifier></type><name>StateLoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>ValueExpr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LoopHint</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>PragmaNameLoc</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OptionLoc</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>StateLoc</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ValueExpr</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
