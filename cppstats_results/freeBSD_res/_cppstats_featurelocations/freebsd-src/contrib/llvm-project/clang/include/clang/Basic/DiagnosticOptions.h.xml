<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DIAGNOSTICOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DIAGNOSTICOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ArgList</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>



<enum>enum <name>OverloadsShown</name> : <type><name>unsigned</name></type> <block>{

<decl><name>Ovl_All</name></decl>,


<decl><name>Ovl_Best</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DiagnosticLevelMask</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>None</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>Note</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
<expr><name>Remark</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
<expr><name>Warning</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
<expr><name>Error</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
<expr><name>All</name> <operator>=</operator> <name>Note</name> <operator>|</operator> <name>Remark</name> <operator>|</operator> <name>Warning</name> <operator>|</operator> <name>Error</name></expr>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DiagnosticLevelMask</name> <name>operator</name><operator>~</operator><operator>(</operator><name>DiagnosticLevelMask</name> <name>M</name><operator>)</operator> <block>{
<expr><name>using</name> <name>UT</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>underlying_type</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>~</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>UT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DiagnosticLevelMask</name> <name>operator</name><operator>|</operator><operator>(</operator><name>DiagnosticLevelMask</name> <name>LHS</name><operator>,</operator>
<name>DiagnosticLevelMask</name> <name>RHS</name><operator>)</operator> <block>{
<expr><name>using</name> <name>UT</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>underlying_type</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>UT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>UT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>inline</specifier> <name>DiagnosticLevelMask</name> <name>operator</name></type>&amp;(<name>DiagnosticLevelMask</name> <name>LHS</name>,
<name>DiagnosticLevelMask</name> RHS</function>)</block_content> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>UT</name> <init>= <expr><name>std</name><operator>::</operator><name><name>underlying_type</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticLevelMask</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>UT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>UT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

raw_ostream&amp; operator&lt;&lt;(raw_ostream&amp; Out</block></decl>, <decl><type ref="prev"/><name>DiagnosticLevelMask</name> <name>M</name></decl>);</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticOptions</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name><block>{
<expr><name>friend</name> <name>bool</name> <call><name>ParseDiagnosticArgs</name><argument_list>(<argument><expr><name>DiagnosticOptions</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>DiagnosticsEngine</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;

<expr><name>friend</name> <name>class</name> <name>CompilerInvocation</name></expr>;

<expr><name>public</name><operator>:</operator>
enum <name>TextDiagnosticFormat</name> <block>{ <expr><name>Clang</name></expr>, <expr><name>MSVC</name></expr>, <expr><name>Vi</name></expr> }</block></expr>;


enum <expr><block>{
<expr><name>DefaultTabStop</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><name>MaxTabStop</name> <operator>=</operator> <literal type="number">100</literal></expr>,
<expr><name>DefaultMacroBacktraceLimit</name> <operator>=</operator> <literal type="number">6</literal></expr>,
<expr><name>DefaultTemplateBacktraceLimit</name> <operator>=</operator> <literal type="number">10</literal></expr>,
<expr><name>DefaultConstexprBacktraceLimit</name> <operator>=</operator> <literal type="number">10</literal></expr>,
<expr><name>DefaultSpellCheckingLimit</name> <operator>=</operator> <literal type="number">50</literal></expr>,
<expr><name>DefaultSnippetLineLimit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>;


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned Name : Bits;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.def"</cpp:file></cpp:include>

<expr><name>protected</name><operator>:</operator>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned Name : Bits;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.def"</cpp:file></cpp:include>

<name>public</name><operator>:</operator>

<name>std</name><operator>::</operator><name>string</name> <name>DiagnosticLogFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DiagnosticSerializationFile</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Warnings</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>UndefPrefixes</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Remarks</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>VerifyPrefixes</name></expr>;

<expr><name>public</name><operator>:</operator>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type get##Name() const { return static_cast&lt;Type&gt;(Name); } void set##Name(Type Value) { Name = static_cast&lt;unsigned&gt;(Value); }</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.def"</cpp:file></cpp:include>

<macro><name>DiagnosticOptions</name><argument_list>()</argument_list></macro> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Name = Default;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_DIAGOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set##Name(Default);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.def"</cpp:file></cpp:include>
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>TextDiagnosticFormat</name> <init>= <expr><name>DiagnosticOptions</name><operator>::</operator><name>TextDiagnosticFormat</name></expr></init></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
