<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerRegistryData.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_CHECKERREGISTRYDATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_CHECKERREGISTRYDATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CheckerManager</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>RegisterCheckerFn</name> <init>= <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>CheckerManager</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ShouldRegisterFunction</name> <init>= <expr><call><call><name>bool</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckerManager</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<struct>struct <name>CmdLineOption</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>OptionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>OptionName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>DefaultValStr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>DevelopmentStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsHidden</name></decl>;</decl_stmt>

<macro><name>CmdLineOption</name><argument_list>(<argument>StringRef OptionType</argument>, <argument>StringRef OptionName</argument>,
<argument>StringRef DefaultValStr</argument>, <argument>StringRef Description</argument>,
<argument>StringRef DevelopmentStatus</argument>, <argument>bool IsHidden</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>OptionType</name><argument_list>(<argument><expr><name>OptionType</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OptionName</name><argument_list>(<argument><expr><name>OptionName</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>DefaultValStr</name><argument_list>(<argument><expr><name>DefaultValStr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Description</name><argument_list>(<argument><expr><name>Description</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>DevelopmentStatus</name><argument_list>(<argument><expr><name>DevelopmentStatus</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsHidden</name><argument_list>(<argument>IsHidden</argument>)</argument_list></macro> <expr><block>{

<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>OptionType</name> <operator>==</operator> <literal type="string">"bool"</literal> <operator>||</operator> <name>OptionType</name> <operator>==</operator> <literal type="string">"string"</literal> <operator>||</operator>
<name>OptionType</name> <operator>==</operator> <literal type="string">"int"</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Unknown command line option type!"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>OptionType</name> <operator>!=</operator> <literal type="string">"bool"</literal> <operator>||</operator>
<operator>(</operator><name>DefaultValStr</name> <operator>==</operator> <literal type="string">"true"</literal> <operator>||</operator> <name>DefaultValStr</name> <operator>==</operator> <literal type="string">"false"</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid value for boolean command line option! Maybe incorrect "</literal>
<literal type="string">"parameters to the addCheckerOption or addPackageOption method?"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>int</name> <name>Tmp</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>OptionType</name> <operator>!=</operator> <literal type="string">"int"</literal> <operator>||</operator> <operator>!</operator><call><name><name>DefaultValStr</name><operator>.</operator><name>getAsInteger</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid value for integer command line option! Maybe incorrect "</literal>
<literal type="string">"parameters to the addCheckerOption or addPackageOption method?"</literal></expr></argument>)</argument_list></call></expr>;
<expr><operator>(</operator><name>void</name><operator>)</operator><name>Tmp</name></expr>;

<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>DevelopmentStatus</name> <operator>==</operator> <literal type="string">"alpha"</literal> <operator>||</operator> <name>DevelopmentStatus</name> <operator>==</operator> <literal type="string">"beta"</literal> <operator>||</operator>
<name>DevelopmentStatus</name> <operator>==</operator> <literal type="string">"released"</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid development status!"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpToStream</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>CmdLineOptionList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CmdLineOption</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct_decl>struct <name>CheckerInfo</name>;</struct_decl>

<decl_stmt><decl><type><name>using</name></type> <name>CheckerInfoList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CheckerInfo</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>CheckerInfoListRange</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>CheckerInfoList</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ConstCheckerInfoList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CheckerInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>CheckerInfoSet</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CheckerInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<struct>struct <name>CheckerInfo</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>StateFromCmdLine</name> <block>{<block_content>

<expr_stmt><expr><name>State_Unspecified</name></expr><operator>,</operator>

<expr><name>State_Disabled</name></expr><operator>,</operator>

<expr><name>State_Enabled</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>RegisterCheckerFn</name></type> <name>Initialize</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShouldRegisterFunction</name></type> <name>ShouldRegister</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>FullName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>DocumentationUri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CmdLineOptionList</name></type> <name>CmdLineOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsHidden</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StateFromCmdLine</name></type> <name>State</name> <init>= <expr><name>StateFromCmdLine</name><operator>::</operator><name>State_Unspecified</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConstCheckerInfoList</name></type> <name>Dependencies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstCheckerInfoList</name></type> <name>WeakDependencies</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isEnabled</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckerManager</name> <operator>&amp;</operator><name>mgr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>State</name> <operator>==</operator> <name>StateFromCmdLine</name><operator>::</operator><name>State_Enabled</name> <operator>&amp;&amp;</operator> <call><name>ShouldRegister</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isDisabled</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckerManager</name> <operator>&amp;</operator><name>mgr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>State</name> <operator>==</operator> <name>StateFromCmdLine</name><operator>::</operator><name>State_Disabled</name> <operator>||</operator> <operator>!</operator><call><name>ShouldRegister</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CheckerInfo</name> <operator>&amp;</operator><name>Rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>FullName</name> <operator>==</operator> <name><name>Rhs</name><operator>.</operator><name>FullName</name></name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>CheckerInfo</name><argument_list>(<argument>RegisterCheckerFn Fn</argument>, <argument>ShouldRegisterFunction sfn</argument>, <argument>StringRef Name</argument>,
<argument>StringRef Desc</argument>, <argument>StringRef DocsUri</argument>, <argument>bool IsHidden</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Initialize</name><argument_list>(<argument><expr><name>Fn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ShouldRegister</name><argument_list>(<argument><expr><name>sfn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FullName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Desc</name><argument_list>(<argument><expr><name>Desc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>DocumentationUri</name><argument_list>(<argument><expr><name>DocsUri</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsHidden</name><argument_list>(<argument>IsHidden</argument>)</argument_list></macro> <expr><block>{}</block>


<name>explicit</name> <macro><name>CheckerInfo</name><argument_list>(<argument>StringRef FullName</argument>)</argument_list></macro> <operator>:</operator> <macro><name>FullName</name><argument_list>(<argument>FullName</argument>)</argument_list></macro> <block>{}</block>

<name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpToStream</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>StateFromCmdLine</name> <init>= <expr><name>CheckerInfo</name><operator>::</operator><name>StateFromCmdLine</name></expr></init></decl>;</decl_stmt>



<struct>struct <name>PackageInfo</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>FullName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CmdLineOptionList</name></type> <name>CmdLineOptions</name></decl>;</decl_stmt>



<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>PackageInfo</name> <operator>&amp;</operator><name>Rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>FullName</name> <operator>==</operator> <name><name>Rhs</name><operator>.</operator><name>FullName</name></name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>explicit</name></macro> <macro><name>PackageInfo</name><argument_list>(<argument>StringRef FullName</argument>)</argument_list></macro> : <macro><name>FullName</name><argument_list>(<argument>FullName</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpToStream</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>PackageInfoList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PackageInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>checker_registry</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <name>FullNameLT</name> <block>{
<expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Lhs</name><operator>,</operator> <specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Rhs</name><operator>)</operator> <block>{
<return>return <expr><name><name>Lhs</name><operator>.</operator><name>FullName</name></name> <operator>&lt;</operator> <name><name>Rhs</name><operator>.</operator><name>FullName</name></name></expr>;</return>
}</block>
}</expr>;

<expr><name>using</name> <name>PackageNameLT</name> <operator>=</operator> <name><name>FullNameLT</name><argument_list type="generic">&lt;<argument><expr><name>PackageInfo</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>CheckerNameLT</name> <operator>=</operator> <name><name>FullNameLT</name><argument_list type="generic">&lt;<argument><expr><name>CheckerInfo</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CheckerOrPackageInfoList</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>conditional_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_const</name><argument_list type="generic">&lt;<argument><expr><name>CheckerOrPackageInfoList</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>typename</name> <name>CheckerOrPackageInfoList</name><operator>::</operator><name>const_iterator</name></expr></argument>,
<argument><expr><name>typename</name> <name>CheckerOrPackageInfoList</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name>
<macro><name>binaryFind</name><argument_list>(<argument>CheckerOrPackageInfoList &amp;Collection</argument>, <argument>StringRef FullName</argument>)</argument_list></macro> <block>{

<expr><name>using</name> <name>CheckerOrPackage</name> <operator>=</operator> <name>typename</name> <name>CheckerOrPackageInfoList</name><operator>::</operator><name>value_type</name></expr>;
<expr><name>using</name> <name>CheckerOrPackageFullNameLT</name> <operator>=</operator> <name><name>FullNameLT</name><argument_list type="generic">&lt;<argument><expr><name>CheckerOrPackage</name></expr></argument>&gt;</argument_list></name></expr>;

<macro><name>assert</name><argument_list>(<argument>llvm::is_sorted(Collection, CheckerOrPackageFullNameLT{}) &amp;&amp;
<literal type="string">"In order to efficiently gather checkers/packages, this function "</literal>
<literal type="string">"expects them to be already sorted!"</literal></argument>)</argument_list></macro>;

<return>return <expr><name>llvm</name><operator>::</operator><macro><name>lower_bound</name><argument_list>(<argument>Collection</argument>, <argument>CheckerOrPackage(FullName)</argument>,
<argument>CheckerOrPackageFullNameLT{}</argument>)</argument_list></macro></expr>;</return>
}</block>
}

struct <name>CheckerRegistryData</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>CheckerInfoSet</name> <name>EnabledCheckers</name></expr>;

<expr><name>CheckerInfoList</name> <name>Checkers</name></expr>;
<expr><name>PackageInfoList</name> <name>Packages</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>PackageSizes</name></expr>;




<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>CmdLineOption</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>PackageOptions</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>CmdLineOption</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>CheckerOptions</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>Dependencies</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>WeakDependencies</name></expr>;

<expr><name>CheckerInfoListRange</name> <macro><name>getMutableCheckersForCmdLineArg</name><argument_list>(<argument>StringRef CmdLineArg</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <macro><name>printCheckerWithDescList</name><argument_list>(<argument>const AnalyzerOptions &amp;AnOpts</argument>, <argument>raw_ostream &amp;Out</argument>,
<argument>size_t MaxNameChars = <literal type="number">30</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>printEnabledCheckerList</name><argument_list>(<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>printCheckerOptionList</name><argument_list>(<argument>const AnalyzerOptions &amp;AnOpts</argument>,
<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
