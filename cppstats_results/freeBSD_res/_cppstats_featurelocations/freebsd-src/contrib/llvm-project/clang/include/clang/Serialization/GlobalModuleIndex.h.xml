<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_GLOBALMODULEINDEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_GLOBALMODULEINDEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BitstreamCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DirectoryEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierIterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerOperations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerReader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>












<decl_stmt><decl><type><name>class</name></type> <name>GlobalModuleIndex</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>ModuleFile</name> <init>= <expr><name>serialization</name><operator>::</operator><name>ModuleFile</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>IdentifierIndex</name></decl>;</decl_stmt>


<struct>struct <name>ModuleInfo</name> <block>{
<expr_stmt><expr><call><name>ModuleInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>File</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>ModTime</name><argument_list>()</argument_list></macro> <expr><block>{ }</block>


<name>ModuleFile</name> <operator>*</operator><name>File</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>off_t</name></type> <name>Size</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>time_t</name></type> <name>ModTime</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Dependencies</name></expr>;</expr_stmt>
}</block>;</struct>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleInfo</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Modules</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>ModulesByFile</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>UnresolvedModules</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumIdentifierLookups</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumIdentifierLookupHits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>explicit</name></type> <name>GlobalModuleIndex</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>Cursor</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GlobalModuleIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GlobalModuleIndex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GlobalModuleIndex</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>GlobalModuleIndex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>GlobalModuleIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>GlobalModuleIndex</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Error</name></expr></argument>&gt;</argument_list></name>
<macro><name>readIndex</name><argument_list>(<argument>llvm::StringRef Path</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>IdentifierIterator</name> <operator>*</operator><macro><name>createIdentifierIterator</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>getKnownModules</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ModuleFiles</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>getModuleDependencies</name><argument_list>(<argument><expr><name>ModuleFile</name> <operator>*</operator><name>File</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Dependencies</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>HitSet</name></expr>;</expr_stmt></typedef>










<decl_stmt><decl><type><name>bool</name></type> <name>lookupIdentifier</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Name</name></expr></argument>, <argument><expr><name>HitSet</name> <operator>&amp;</operator><name>Hits</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><name>bool</name></type> <name>loadedModuleFile</name><parameter_list>(<parameter><decl><type><name>ModuleFile</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>printStats</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>writeIndex</name><argument_list>(<argument>FileManager &amp;FileMgr</argument>,
<argument>const PCHContainerReader &amp;PCHContainerRdr</argument>,
<argument>llvm::StringRef Path</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
