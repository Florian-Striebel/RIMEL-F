<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/RecordLayout.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_RECORDLAYOUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_RECORDLAYOUT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordLayout</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>VBaseInfo</name> <block>{


<decl_stmt><decl><type><name>CharUnits</name></type> <name>VBaseOffset</name></decl>;</decl_stmt>

<label><name>private</name>:</label>



<decl_stmt><decl><type><name>bool</name></type> <name>HasVtorDisp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VBaseInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>VBaseInfo</name><argument_list>(<argument>CharUnits VBaseOffset</argument>, <argument>bool hasVtorDisp</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>VBaseOffset</name><argument_list>(<argument><expr><name>VBaseOffset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>HasVtorDisp</name><argument_list>(<argument>hasVtorDisp</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>hasVtorDisp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasVtorDisp</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>VBaseOffsetsMapTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>VBaseInfo</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>Size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>DataSize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>Alignment</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>PreferredAlignment</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>UnadjustedAlignment</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>RequiredAlignment</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>ASTVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></type> <name>FieldOffsets</name></decl>;</decl_stmt>


<struct>struct <name>CXXRecordLayoutInfo</name> <block>{


<decl_stmt><decl><type><name>CharUnits</name></type> <name>NonVirtualSize</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>NonVirtualAlignment</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>PreferredNVAlignment</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>SizeOfLargestEmptySubobject</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>VBPtrOffset</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>HasOwnVFPtr</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>HasExtendableVFPtr</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>EndsWithZeroSizedObject</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>LeadsWithZeroSizedBase</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>PrimaryBase</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>BaseSharingVBPtr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>BaseOffsetsMapTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CharUnits</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BaseOffsetsMapTy</name></type> <name>BaseOffsets</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VBaseOffsetsMapTy</name></type> <name>VBaseOffsets</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>CXXRecordLayoutInfo</name> <modifier>*</modifier></type><name>CXXInfo</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<macro><name>ASTRecordLayout</name><argument_list>(<argument>const ASTContext &amp;Ctx</argument>, <argument>CharUnits size</argument>, <argument>CharUnits alignment</argument>,
<argument>CharUnits preferredAlignment</argument>, <argument>CharUnits unadjustedAlignment</argument>,
<argument>CharUnits requiredAlignment</argument>, <argument>CharUnits datasize</argument>,
<argument>ArrayRef&lt;uint64_t&gt; fieldoffsets</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>BaseOffsetsMapTy</name> <init>= <expr><name>CXXRecordLayoutInfo</name><operator>::</operator><name>BaseOffsetsMapTy</name></expr></init></decl>;</decl_stmt>


<macro><name>ASTRecordLayout</name><argument_list>(<argument>const ASTContext &amp;Ctx</argument>, <argument>CharUnits size</argument>, <argument>CharUnits alignment</argument>,
<argument>CharUnits preferredAlignment</argument>, <argument>CharUnits unadjustedAlignment</argument>,
<argument>CharUnits requiredAlignment</argument>, <argument>bool hasOwnVFPtr</argument>,
<argument>bool hasExtendableVFPtr</argument>, <argument>CharUnits vbptroffset</argument>,
<argument>CharUnits datasize</argument>, <argument>ArrayRef&lt;uint64_t&gt; fieldoffsets</argument>,
<argument>CharUnits nonvirtualsize</argument>, <argument>CharUnits nonvirtualalignment</argument>,
<argument>CharUnits preferrednvalignment</argument>,
<argument>CharUnits SizeOfLargestEmptySubobject</argument>,
<argument>const CXXRecordDecl *PrimaryBase</argument>, <argument>bool IsPrimaryBaseVirtual</argument>,
<argument>const CXXRecordDecl *BaseSharingVBPtr</argument>,
<argument>bool EndsWithZeroSizedObject</argument>, <argument>bool LeadsWithZeroSizedBase</argument>,
<argument>const BaseOffsetsMapTy &amp;BaseOffsets</argument>,
<argument>const VBaseOffsetsMapTy &amp;VBaseOffsets</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ASTRecordLayout</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTRecordLayout</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTRecordLayout</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ASTRecordLayout</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ASTRecordLayout</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>CharUnits</name> <macro><name>getAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Alignment</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getPreferredAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PreferredAlignment</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getUnadjustedAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UnadjustedAlignment</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>CharUnits</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getFieldCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FieldOffsets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>getFieldOffset</name><argument_list>(<argument><expr><name>unsigned</name> <name>FieldNo</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>FieldOffsets</name><index>[<expr><name>FieldNo</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getDataSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DataSize</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getNonVirtualSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>NonVirtualSize</name></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getNonVirtualAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>NonVirtualAlignment</name></name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>CharUnits</name> <macro><name>getPreferredNVAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>PreferredNVAlignment</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getPrimaryBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name><name>CXXInfo</name><operator>-&gt;</operator><name>PrimaryBase</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isPrimaryBaseVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name><name>CXXInfo</name><operator>-&gt;</operator><name>PrimaryBase</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>getBaseClassOffset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Base</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Base</name> <operator>=</operator> <call><name><name>Base</name><operator>-&gt;</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>CXXInfo</name><operator>-&gt;</operator><name>BaseOffsets</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Did not find base!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>BaseOffsets</name><index>[<expr><name>Base</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>getVBaseClassOffset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>VBase</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VBase</name> <operator>=</operator> <call><name><name>VBase</name><operator>-&gt;</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>CXXInfo</name><operator>-&gt;</operator><name>VBaseOffsets</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>VBase</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Did not find base!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>VBaseOffsets</name><index>[<expr><name>VBase</name></expr>]</index></name><operator>.</operator><name>VBaseOffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getSizeOfLargestEmptySubobject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>SizeOfLargestEmptySubobject</name></name></expr>;</return>
}</block></expr></expr_stmt>








<expr_stmt><expr><name>bool</name> <macro><name>hasOwnVFPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>HasOwnVFPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>hasExtendableVFPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>HasExtendableVFPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>








<expr_stmt><expr><name>bool</name> <macro><name>hasOwnVBPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>hasVBPtr</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>CXXInfo</name><operator>-&gt;</operator><name>BaseSharingVBPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasVBPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>!</operator><call><name><name>CXXInfo</name><operator>-&gt;</operator><name>VBPtrOffset</name><operator>.</operator><name>isNegative</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getRequiredAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RequiredAlignment</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>endsWithZeroSizedObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <name><name>CXXInfo</name><operator>-&gt;</operator><name>EndsWithZeroSizedObject</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>leadsWithZeroSizedBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>LeadsWithZeroSizedBase</name></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>CharUnits</name> <macro><name>getVBPtrOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>VBPtrOffset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getBaseSharingVBPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>BaseSharingVBPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>VBaseOffsetsMapTy</name> <operator>&amp;</operator><macro><name>getVBaseOffsetsMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CXXInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"Record layout does not have C++ specific info!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>CXXInfo</name><operator>-&gt;</operator><name>VBaseOffsets</name></name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
