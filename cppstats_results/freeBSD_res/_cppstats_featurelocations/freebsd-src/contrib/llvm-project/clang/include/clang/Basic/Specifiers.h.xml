<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Specifiers.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SPECIFIERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SPECIFIERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DataTypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ExplicitSpecKind</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>ResolvedFalse</name></expr>,
<expr><name>ResolvedTrue</name></expr>,
<expr><name>Unresolved</name></expr>,
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ConstexprSpecKind</name> <block>{<block_content> <expr_stmt><expr><name>Unspecified</name></expr><operator>,</operator> <expr><name>Constexpr</name></expr><operator>,</operator> <expr><name>Consteval</name></expr><operator>,</operator> <expr><name>Constinit</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TypeSpecifierWidth</name> <block>{<block_content> <expr_stmt><expr><name>Unspecified</name></expr><operator>,</operator> <expr><name>Short</name></expr><operator>,</operator> <expr><name>Long</name></expr><operator>,</operator> <expr><name>LongLong</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TypeSpecifierSign</name> <block>{<block_content> <expr_stmt><expr><name>Unspecified</name></expr><operator>,</operator> <expr><name>Signed</name></expr><operator>,</operator> <expr><name>Unsigned</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TypeSpecifiersPipe</name> <block>{<block_content> <expr_stmt><expr><name>Unspecified</name></expr><operator>,</operator> <expr><name>Pipe</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>TypeSpecifierType</name> <block>{
<decl><name>TST_unspecified</name></decl>,
<decl><name>TST_void</name></decl>,
<decl><name>TST_char</name></decl>,
<decl><name>TST_wchar</name></decl>,
<decl><name>TST_char8</name></decl>,
<decl><name>TST_char16</name></decl>,
<decl><name>TST_char32</name></decl>,
<decl><name>TST_int</name></decl>,
<decl><name>TST_int128</name></decl>,
<decl><name>TST_extint</name></decl>,
<decl><name>TST_half</name></decl>,
<decl><name>TST_Float16</name></decl>,
<decl><name>TST_Accum</name></decl>,
<decl><name>TST_Fract</name></decl>,
<decl><name>TST_BFloat16</name></decl>,
<decl><name>TST_float</name></decl>,
<decl><name>TST_double</name></decl>,
<decl><name>TST_float128</name></decl>,
<decl><name>TST_bool</name></decl>,
<decl><name>TST_decimal32</name></decl>,
<decl><name>TST_decimal64</name></decl>,
<decl><name>TST_decimal128</name></decl>,
<decl><name>TST_enum</name></decl>,
<decl><name>TST_union</name></decl>,
<decl><name>TST_struct</name></decl>,
<decl><name>TST_class</name></decl>,
<decl><name>TST_interface</name></decl>,
<decl><name>TST_typename</name></decl>,
<decl><name>TST_typeofType</name></decl>,
<decl><name>TST_typeofExpr</name></decl>,
<decl><name>TST_decltype</name></decl>,
<decl><name>TST_underlyingType</name></decl>,
<decl><name>TST_auto</name></decl>,
<decl><name>TST_decltype_auto</name></decl>,
<decl><name>TST_auto_type</name></decl>,
<decl><name>TST_unknown_anytype</name></decl>,
<decl><name>TST_atomic</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERIC_IMAGE_TYPE</name><parameter_list>(<parameter><type><name>ImgType</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TST_##ImgType##_t,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenCLImageTypes.def"</cpp:file></cpp:include>
<decl><name>TST_error</name></decl>
}</block>;</enum>



<struct>struct <name>WrittenBuiltinSpecs</name> <block>{
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>TST_error</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"Type bitfield not wide enough for TST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Type</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Sign</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Width</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ModeAttr</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>



<enum>enum <name>AccessSpecifier</name> <block>{
<decl><name>AS_public</name></decl>,
<decl><name>AS_protected</name></decl>,
<decl><name>AS_private</name></decl>,
<decl><name>AS_none</name></decl>
}</block>;</enum>



<enum>enum <name>ExprValueKind</name> <block>{


<decl><name>VK_PRValue</name></decl>,



<decl><name>VK_LValue</name></decl>,




<decl><name>VK_XValue</name></decl>
}</block>;</enum>



<enum>enum <name>ExprObjectKind</name> <block>{

<decl><name>OK_Ordinary</name></decl>,


<decl><name>OK_BitField</name></decl>,


<decl><name>OK_VectorComponent</name></decl>,



<decl><name>OK_ObjCProperty</name></decl>,




<decl><name>OK_ObjCSubscript</name></decl>,


<decl><name>OK_MatrixComponent</name></decl>
}</block>;</enum>


<enum>enum <name>NonOdrUseReason</name> <block>{

<decl><name>NOUR_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>NOUR_Unevaluated</name></decl>,


<decl><name>NOUR_Constant</name></decl>,


<decl><name>NOUR_Discarded</name></decl>,
}</block>;</enum>



<enum>enum <name>TemplateSpecializationKind</name> <block>{


<decl><name>TSK_Undeclared</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>TSK_ImplicitInstantiation</name></decl>,



<decl><name>TSK_ExplicitSpecialization</name></decl>,



<decl><name>TSK_ExplicitInstantiationDeclaration</name></decl>,



<decl><name>TSK_ExplicitInstantiationDefinition</name></decl>
}</block>;</enum>




<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isTemplateInstantiation</name><parameter_list>(<parameter><decl><type><name>TemplateSpecializationKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Kind</name> <operator>!=</operator> <name>TSK_Undeclared</name> <operator>&amp;&amp;</operator> <name>Kind</name> <operator>!=</operator> <name>TSK_ExplicitSpecialization</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isTemplateExplicitInstantiationOrSpecialization</name><parameter_list>(
<parameter><decl><type><name>TemplateSpecializationKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TSK_ExplicitSpecialization</name></expr>:</case>
<case>case <expr><name>TSK_ExplicitInstantiationDeclaration</name></expr>:</case>
<case>case <expr><name>TSK_ExplicitInstantiationDefinition</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>TSK_Undeclared</name></expr>:</case>
<case>case <expr><name>TSK_ImplicitInstantiation</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad template specialization kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<enum>enum <name>ThreadStorageClassSpecifier</name> <block>{
<decl><name>TSCS_unspecified</name></decl>,

<decl><name>TSCS___thread</name></decl>,


<decl><name>TSCS_thread_local</name></decl>,


<decl><name>TSCS__Thread_local</name></decl>
}</block>;</enum>


<enum>enum <name>StorageClass</name> <block>{

<decl><name>SC_None</name></decl>,
<decl><name>SC_Extern</name></decl>,
<decl><name>SC_Static</name></decl>,
<decl><name>SC_PrivateExtern</name></decl>,


<decl><name>SC_Auto</name></decl>,
<decl><name>SC_Register</name></decl>
}</block>;</enum>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLegalForFunction</name><parameter_list>(<parameter><decl><type><name>StorageClass</name></type> <name>SC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>SC</name> <operator>&lt;=</operator> <name>SC_PrivateExtern</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLegalForVariable</name><parameter_list>(<parameter><decl><type><name>StorageClass</name></type> <name>SC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<enum>enum <name>InClassInitStyle</name> <block>{
<decl><name>ICIS_NoInit</name></decl>,
<decl><name>ICIS_CopyInit</name></decl>,
<decl><name>ICIS_ListInit</name></decl>
}</block>;</enum>


<enum>enum <name>CallingConv</name> <block>{
<decl><name>CC_C</name></decl>,
<decl><name>CC_X86StdCall</name></decl>,
<decl><name>CC_X86FastCall</name></decl>,
<decl><name>CC_X86ThisCall</name></decl>,
<decl><name>CC_X86VectorCall</name></decl>,
<decl><name>CC_X86Pascal</name></decl>,
<decl><name>CC_Win64</name></decl>,
<decl><name>CC_X86_64SysV</name></decl>,
<decl><name>CC_X86RegCall</name></decl>,
<decl><name>CC_AAPCS</name></decl>,
<decl><name>CC_AAPCS_VFP</name></decl>,
<decl><name>CC_IntelOclBicc</name></decl>,
<decl><name>CC_SpirFunction</name></decl>,
<decl><name>CC_OpenCLKernel</name></decl>,
<decl><name>CC_Swift</name></decl>,
<decl><name>CC_SwiftAsync</name></decl>,
<decl><name>CC_PreserveMost</name></decl>,
<decl><name>CC_PreserveAll</name></decl>,
<decl><name>CC_AArch64VectorCall</name></decl>,
}</block>;</enum>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>supportsVariadicCall</name><parameter_list>(<parameter><decl><type><name>CallingConv</name></type> <name>CC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_X86StdCall</name></expr>:</case>
<case>case <expr><name>CC_X86FastCall</name></expr>:</case>
<case>case <expr><name>CC_X86ThisCall</name></expr>:</case>
<case>case <expr><name>CC_X86RegCall</name></expr>:</case>
<case>case <expr><name>CC_X86Pascal</name></expr>:</case>
<case>case <expr><name>CC_X86VectorCall</name></expr>:</case>
<case>case <expr><name>CC_SpirFunction</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<enum>enum <name>StorageDuration</name> <block>{
<decl><name>SD_FullExpression</name></decl>,
<decl><name>SD_Automatic</name></decl>,
<decl><name>SD_Thread</name></decl>,
<decl><name>SD_Static</name></decl>,
<decl><name>SD_Dynamic</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>NullabilityKind</name> <range>: <expr><name>uint8_t</name> <block>{

<expr><name>NonNull</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><name>Nullable</name></expr>,




<expr><name>Unspecified</name></expr>,




<expr><name>NullableResult</name></expr>,
}</block></expr></range></decl>;</decl_stmt>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>hasWeakerNullability</name><parameter_list>(<parameter><decl><type><name>NullabilityKind</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>NullabilityKind</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>uint8_t</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>uint8_t</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getNullabilitySpelling</name><argument_list>(<argument>NullabilityKind kind</argument>,
<argument>bool isContextSensitive = false</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ParameterABI</name> <block>{<block_content>

<expr_stmt><expr><name>Ordinary</name></expr><operator>,</operator>



<expr><name>SwiftIndirectResult</name></expr><operator>,</operator>




<expr><name>SwiftErrorResult</name></expr><operator>,</operator>




<expr><name>SwiftContext</name></expr><operator>,</operator>




<expr><name>SwiftAsyncContext</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>MSInheritanceModel</name> <block>{<block_content>
<expr_stmt><expr><name>Single</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>Multiple</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>Virtual</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator>
<expr><name>Unspecified</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getParameterABISpelling</name><argument_list>(<argument>ParameterABI kind</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getAccessSpelling</name><argument_list>(<argument>AccessSpecifier AS</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>AS</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AccessSpecifier</name><operator>::</operator><name>AS_public</name></expr>:</case>
<return>return <expr><literal type="string">"public"</literal></expr>;</return>
<case>case <expr><name>AccessSpecifier</name><operator>::</operator><name>AS_protected</name></expr>:</case>
<return>return <expr><literal type="string">"protected"</literal></expr>;</return>
<case>case <expr><name>AccessSpecifier</name><operator>::</operator><name>AS_private</name></expr>:</case>
<return>return <expr><literal type="string">"private"</literal></expr>;</return>
<case>case <expr><name>AccessSpecifier</name><operator>::</operator><name>AS_none</name></expr>:</case>
<return>return <expr><block>{}</block></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("Unknown AccessSpecifier"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
