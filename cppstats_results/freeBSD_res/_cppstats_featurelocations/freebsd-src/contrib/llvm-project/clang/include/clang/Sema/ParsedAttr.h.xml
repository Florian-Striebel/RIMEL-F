<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/ParsedAttr.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_ATTRIBUTELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_ATTRIBUTELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AttrSubjectMatchRules.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AttributeCommonInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Ownership.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/TinyPtrVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParsedAttr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>

<struct>struct <name>ParsedAttrInfo</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>AttrKind</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>OptArgs</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>HasCustomParsing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsTargetSpecific</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsType</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsStmt</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsKnownToGCC</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsSupportedByPragmaAttribute</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<struct>struct <name>Spelling</name> <block>{
<expr_stmt><expr><name>AttributeCommonInfo</name><operator>::</operator><name>Syntax</name> <name>Syntax</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NormalizedFullName</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Spelling</name></expr></argument>&gt;</argument_list></name></type> <name>Spellings</name></decl>;</decl_stmt>

<macro><name>ParsedAttrInfo</name><argument_list>(<argument>AttributeCommonInfo::Kind AttrKind =
AttributeCommonInfo::NoSemaHandlerAttribute</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>AttrKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OptArgs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasCustomParsing</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsTargetSpecific</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsStmt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsKnownToGCC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsSupportedByPragmaAttribute</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>ParsedAttrInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>diagAppertainsToDecl</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>Attr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>diagAppertainsToStmt</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>Attr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>St</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>diagMutualExclusion</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>A</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>diagLangOpts</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>Attr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>existsInTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>unsigned</name></type>
<name>spellingIndexToSemanticSpelling</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>Attr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>UINT_MAX</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>getPragmaAttributeMatchRules</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>attr</name><operator>::</operator><name>SubjectMatchRule</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Rules</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list> const <block>{<block_content>
</block_content>}</block></decl></decl_stmt>
<enum>enum <name>AttrHandling</name> <block>{
<decl><name>NotHandled</name></decl>,
<decl><name>AttributeApplied</name></decl>,
<decl><name>AttributeNotApplied</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>virtual</name> <name>AttrHandling</name></type> <name>handleDeclAttribute</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>Attr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>NotHandled</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ParsedAttrInfo</name> <modifier>&amp;</modifier></type><name>get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AttributeCommonInfo</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Registry</name><argument_list type="generic">&lt;<argument><expr><name>ParsedAttrInfo</name></expr></argument>&gt;</argument_list></name> <name>ParsedAttrInfoRegistry</name></expr>;</expr_stmt></typedef>




<struct>struct <name>AvailabilityChange</name> <block>{

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>KeywordLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VersionTuple</name></type> <name>Version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceRange</name></type> <name>VersionRange</name></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Version</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>
<enum>enum <name>AvailabilitySlot</name> <block>{
<decl><name>IntroducedSlot</name></decl>, <decl><name>DeprecatedSlot</name></decl>, <decl><name>ObsoletedSlot</name></decl>, <decl><name>NumAvailabilitySlots</name></decl>
}</block>;</enum>


<struct>struct <name>AvailabilityData</name> <block>{
<decl_stmt><decl><type><name>AvailabilityChange</name></type> <name><name>Changes</name><index>[<expr><name>NumAvailabilitySlots</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>StrictLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Replacement</name></decl>;</decl_stmt>

<macro><name>AvailabilityData</name><argument_list>(<argument>const AvailabilityChange &amp;Introduced</argument>,
<argument>const AvailabilityChange &amp;Deprecated</argument>,
<argument>const AvailabilityChange &amp;Obsoleted</argument>,
<argument>SourceLocation Strict</argument>, <argument>const Expr *ReplaceExpr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>StrictLoc</name><argument_list>(<argument><expr><name>Strict</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Replacement</name><argument_list>(<argument>ReplaceExpr</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Changes</name><index>[<expr><name>IntroducedSlot</name></expr>]</index></name> <operator>=</operator> <name>Introduced</name></expr>;
<expr><name><name>Changes</name><index>[<expr><name>DeprecatedSlot</name></expr>]</index></name> <operator>=</operator> <name>Deprecated</name></expr>;
<expr><name><name>Changes</name><index>[<expr><name>ObsoletedSlot</name></expr>]</index></name> <operator>=</operator> <name>Obsoleted</name></expr>;
}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>TypeTagForDatatypeData</name> <block>{
<decl_stmt><decl><type><name>ParsedType</name></type> <name>MatchingCType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>LayoutCompatible</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MustBeNull</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>PropertyData</name> <block>{
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>GetterId</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>SetterId</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PropertyData</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>getterId</name></expr></argument>, <argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>setterId</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>GetterId</name><argument_list>(<argument><expr><name>getterId</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SetterId</name><argument_list>(<argument>setterId</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>


<struct>struct <name>IdentifierLoc</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Ident</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>IdentifierLoc</name> <modifier>*</modifier></type><name>create</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Ident</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>



<decl_stmt><decl><type><name>using</name></type> <name>ArgsUnion</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>IdentifierLoc</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ArgsVector</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><literal type="number">12U</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><name>class</name> <name>ParsedAttr</name></type> <name>final</name>
<range>: <expr><name>public</name> <name>AttributeCommonInfo</name></expr></range></decl>,
<decl><type ref="prev"/><name>private</name> <name>llvm</name>::<name><name>TrailingObjects</name><argument_list type="generic">&lt;
<argument><expr><name>ParsedAttr</name></expr></argument>, <argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name></type> <name>TrailingObjects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>NumArgs</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>IsAvailability</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type>
<name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>IsTypeTagForDatatype</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>ParsedType</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>HasParsedType</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>IsProperty</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>MacroII</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>MacroExpansionLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>EllipsisLoc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>Invalid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>UsedAsTypeAttr</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsAvailability</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsTypeTagForDatatype</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsProperty</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HasParsedType</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>HasProcessingCache</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>ProcessingCache</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>IsPragmaClangAttribute</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>UnavailableLoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>MessageExpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ParsedAttrInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl>;</decl_stmt>

<function><type><name>ArgsUnion</name> <modifier>*</modifier></type><name>getArgsBuffer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>ArgsUnion</name> <specifier>const</specifier> <operator>*</operator><macro><name>getArgsBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name> <operator>*</operator><macro><name>getAvailabilityData</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>AvailabilityData</name> <operator>*</operator><macro><name>getAvailabilityData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AttributeFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AttributePool</name></decl>;</decl_stmt>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>ArgsUnion *args</argument>, <argument>unsigned numArgs</argument>, <argument>Syntax syntaxUsed</argument>,
<argument>SourceLocation ellipsisLoc</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>EllipsisLoc</name><argument_list>(<argument><expr><name>ellipsisLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NumArgs</name><argument_list>(<argument><expr><name>numArgs</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>numArgs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>getArgsBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>numArgs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ArgsUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *Parm</argument>, <argument>const AvailabilityChange &amp;introduced</argument>,
<argument>const AvailabilityChange &amp;deprecated</argument>,
<argument>const AvailabilityChange &amp;obsoleted</argument>, <argument>SourceLocation unavailable</argument>,
<argument>const Expr *messageExpr</argument>, <argument>Syntax syntaxUsed</argument>, <argument>SourceLocation strict</argument>,
<argument>const Expr *replacementExpr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UnavailableLoc</name><argument_list>(<argument><expr><name>unavailable</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MessageExpr</name><argument_list>(<argument><expr><name>messageExpr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<expr><name>ArgsUnion</name> <call><name>PVal</name><argument_list>(<argument><expr><name>Parm</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>getArgsBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>PVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArgsUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<macro><name>new</name> <argument_list>(<argument>getAvailabilityData()</argument>)</argument_list></macro> <expr><name>detail</name><operator>::</operator><call><name>AvailabilityData</name><argument_list>(
<argument><expr><name>introduced</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>, <argument><expr><name>obsoleted</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>replacementExpr</name></expr></argument>)</argument_list></call></expr>;
}</block>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *Parm1</argument>, <argument>IdentifierLoc *Parm2</argument>, <argument>IdentifierLoc *Parm3</argument>,
<argument>Syntax syntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<expr><name>ArgsUnion</name> <operator>*</operator><name>Args</name> <operator>=</operator> <call><name>getArgsBuffer</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>Args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Parm1</name></expr>;
<expr><name><name>Args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Parm2</name></expr>;
<expr><name><name>Args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>Parm3</name></expr>;
}</block>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *ArgKind</argument>, <argument>ParsedType matchingCType</argument>,
<argument>bool layoutCompatible</argument>, <argument>bool mustBeNull</argument>, <argument>Syntax syntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<expr><name>ArgsUnion</name> <call><name>PVal</name><argument_list>(<argument><expr><name>ArgKind</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>getArgsBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>PVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArgsUnion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name> <operator>&amp;</operator><name>ExtraData</name> <operator>=</operator> <call><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></call></expr>;
<macro><name>new</name> <argument_list>(<argument>&amp;ExtraData.MatchingCType</argument>)</argument_list></macro> <expr><call><name>ParsedType</name><argument_list>(<argument><expr><name>matchingCType</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>ExtraData</name><operator>.</operator><name>LayoutCompatible</name></name> <operator>=</operator> <name>layoutCompatible</name></expr>;
<expr><name><name>ExtraData</name><operator>.</operator><name>MustBeNull</name></name> <operator>=</operator> <name>mustBeNull</name></expr>;
}</block>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>ParsedType typeArg</argument>, <argument>Syntax syntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<macro><name>new</name> <argument_list>(<argument>&amp;getTypeBuffer()</argument>)</argument_list></macro> <expr><call><name>ParsedType</name><argument_list>(<argument><expr><name>typeArg</name></expr></argument>)</argument_list></call></expr>;
}</block>


<macro><name>ParsedAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierInfo *getterId</argument>, <argument>IdentifierInfo *setterId</argument>,
<argument>Syntax syntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Invalid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsedAsTypeAttr</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsAvailability</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTypeTagForDatatype</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsProperty</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasParsedType</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasProcessingCache</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsPragmaClangAttribute</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Info</name><argument_list>(<argument>ParsedAttrInfo::get(*this)</argument>)</argument_list></macro> <expr><block>{
<macro><name>new</name> <argument_list>(<argument>&amp;getPropertyDataBuffer()</argument>)</argument_list></macro> <expr><name>detail</name><operator>::</operator><call><name>PropertyData</name><argument_list>(<argument><expr><name>getterId</name></expr></argument>, <argument><expr><name>setterId</name></expr></argument>)</argument_list></call></expr>;
}</block>




<name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name> <operator>&amp;</operator><macro><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name> <operator>&amp;</operator><macro><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>ParsedType</name> <modifier>&amp;</modifier></type><name>getTypeBuffer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ParsedType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ParsedType</name> <operator>&amp;</operator><macro><name>getTypeBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ParsedType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>detail</name><operator>::</operator><name>PropertyData</name> <operator>&amp;</operator><macro><name>getPropertyDataBuffer</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>IsProperty</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>PropertyData</name> <operator>&amp;</operator><macro><name>getPropertyDataBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>IsProperty</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>allocated_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ParsedAttr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ParsedAttr</name><argument_list>(<argument><expr><name>ParsedAttr</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>ParsedAttr</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ParsedAttr</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<function_decl><type><name>void</name> <name>operator</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>hasParsedType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasParsedType</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isDeclspecPropertyAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsProperty</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Invalid</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setInvalid</name><argument_list>(<argument><expr><name>bool</name> <name>b</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><name>Invalid</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasProcessingCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasProcessingCache</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getProcessingCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasProcessingCache</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ProcessingCache</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setProcessingCache</name><argument_list>(<argument><expr><name>unsigned</name> <name>value</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>ProcessingCache</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>HasProcessingCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUsedAsTypeAttr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UsedAsTypeAttr</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUsedAsTypeAttr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Used</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>UsedAsTypeAttr</name> <operator>=</operator> <name>Used</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isPragmaClangAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPragmaClangAttribute</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setIsPragmaClangAttribute</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsPragmaClangAttribute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isPackExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>EllipsisLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEllipsisLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EllipsisLoc</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumArgs</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>ArgsUnion</name></type> <name>getArg</name><argument_list>(<argument><expr><name>unsigned</name> <name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Arg</name> <operator>&lt;</operator> <name>NumArgs</name> <operator>&amp;&amp;</operator> <literal type="string">"Arg access out of range!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getArgsBuffer</name><argument_list>()</argument_list></call><index>[<expr><name>Arg</name></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isArgExpr</name><argument_list>(<argument><expr><name>unsigned</name> <name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Arg</name> <operator>&lt;</operator> <name>NumArgs</name> <operator>&amp;&amp;</operator> <call><name>getArg</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>is</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>getArgAsExpr</name><argument_list>(<argument><expr><name>unsigned</name> <name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getArg</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isArgIdent</name><argument_list>(<argument><expr><name>unsigned</name> <name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Arg</name> <operator>&lt;</operator> <name>NumArgs</name> <operator>&amp;&amp;</operator> <call><name>getArg</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>is</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierLoc</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>IdentifierLoc</name> <modifier>*</modifier></type><name>getArgAsIdent</name><argument_list>(<argument><expr><name>unsigned</name> <name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getArg</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierLoc</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><macro><name>getAvailabilityIntroduced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getAvailabilityData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>Changes</name><index>[<expr><name>detail</name><operator>::</operator><name>IntroducedSlot</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><macro><name>getAvailabilityDeprecated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getAvailabilityData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>Changes</name><index>[<expr><name>detail</name><operator>::</operator><name>DeprecatedSlot</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><macro><name>getAvailabilityObsoleted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getAvailabilityData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>Changes</name><index>[<expr><name>detail</name><operator>::</operator><name>ObsoletedSlot</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getStrictLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getAvailabilityData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>StrictLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getUnavailableLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UnavailableLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator> <macro><name>getMessageExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MessageExpr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getReplacementExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Availability</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not an availability attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getAvailabilityData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Replacement</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ParsedType</name> <operator>&amp;</operator><macro><name>getMatchingCType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_TypeTagForDatatype</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not a type_tag_for_datatype attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></call><operator>.</operator><name>MatchingCType</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>getLayoutCompatible</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_TypeTagForDatatype</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not a type_tag_for_datatype attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></call><operator>.</operator><name>LayoutCompatible</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>getMustBeNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_TypeTagForDatatype</name> <operator>&amp;&amp;</operator>
<literal type="string">"Not a type_tag_for_datatype attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getTypeTagForDatatypeDataSlot</name><argument_list>()</argument_list></call><operator>.</operator><name>MustBeNull</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ParsedType</name> <operator>&amp;</operator><macro><name>getTypeArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasParsedType</name> <operator>&amp;&amp;</operator> <literal type="string">"Not a type attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getTypeBuffer</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getPropertyDataGetter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isDeclspecPropertyAttribute</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Not a __delcspec(property) attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getPropertyDataBuffer</name><argument_list>()</argument_list></call><operator>.</operator><name>GetterId</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getPropertyDataSetter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isDeclspecPropertyAttribute</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Not a __delcspec(property) attribute"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getPropertyDataBuffer</name><argument_list>()</argument_list></call><operator>.</operator><name>SetterId</name></expr>;</return>
}</block></expr></expr_stmt>




<function><type><name>void</name></type> <name>setMacroIdentifier</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>MacroName</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MacroII</name> <operator>=</operator> <name>MacroName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MacroExpansionLoc</name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>hasMacroIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MacroII</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getMacroIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MacroII</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getMacroExpansionLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasMacroIdentifier</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Can only get the macro expansion location "</literal>
<literal type="string">"if this attribute has a macro identifier."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MacroExpansionLoc</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>checkExactlyNumArgs</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Num</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>checkAtLeastNumArgs</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Num</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>checkAtMostNumArgs</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Num</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isTargetSpecificAttr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTypeAttr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isStmtAttr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasCustomParsing</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getMinArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getMaxArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasVariadicArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>diagnoseAppertainsTo</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>diagnoseAppertainsTo</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>St</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>diagnoseMutualExclusion</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>diagnoseMutualExclusion</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>St</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>appliesToDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>attr</name><operator>::</operator><name>SubjectMatchRule</name> <name>MatchRule</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>getMatchRules</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>attr</name><operator>::</operator><name>SubjectMatchRule</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>&amp;</operator><name>MatchRules</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>diagnoseLangOpts</name><argument_list>(<argument><expr><name>class</name> <name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>existsInTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isKnownToGCC</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSupportedByPragmaAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>unsigned</name> <macro><name>getSemanticSpelling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>LangAS</name> <macro><name>asOpenCLLangAS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getParsedKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLConstantAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_constant</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_global</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalDeviceAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_global_device</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalHostAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_global_host</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLLocalAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_local</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLPrivateAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_private</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGenericAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>opencl_generic</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>LangAS</name><operator>::</operator><name>Default</name></expr>;</return>
<expr_stmt/>}</block_content>
}



LangAS asSYCLLangAS(</block></switch>) <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>sycl_global</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalDeviceAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>sycl_global_device</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGlobalHostAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>sycl_global_host</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLLocalAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>sycl_local</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLPrivateAddressSpace</name></expr>:</case>
<return>return <expr><name>LangAS</name><operator>::</operator><name>sycl_private</name></expr>;</return>
<case>case <expr><name>ParsedAttr</name><operator>::</operator><name>AT_OpenCLGenericAddressSpace</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>LangAS</name><operator>::</operator><name>Default</name></expr>;</return>
<expr_stmt/>}</block_content>
}

AttributeCommonInfo::Kind getKind(</block></switch>) <specifier>const</specifier> <block>{
<return>return <expr><name>AttributeCommonInfo</name><operator>::</operator><call><name>Kind</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>AttrKind</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>ParsedAttrInfo</name> <operator>&amp;</operator><macro><name>getInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Info</name></expr>;</return> }</block>
}</block></block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AttributePool</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>AttributeFactory</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <block>{
<decl><name>AvailabilityAllocSize</name> <init>=
<expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>TypeTagForDatatypeAllocSize</name> <init>=
<expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>PropertyAllocSize</name> <init>=
<expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block>;</enum>

<label><name>private</name>:</label>
<enum>enum <block>{





<decl><name>InlineFreeListsCapacity</name> <init>=
<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>AvailabilityAllocSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ParsedAttr</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> sizeof<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>Alloc</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ParsedAttr</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>InlineFreeListsCapacity</name></expr></argument>&gt;</argument_list></name></type> <name>FreeLists</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AttributePool</name></decl>;</decl_stmt>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>AL</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>reclaimPool</name><parameter_list>(<parameter><decl><type><name>AttributePool</name> <modifier>&amp;</modifier></type><name>head</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AttributeFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>AttributeFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AttributePool</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AttributeFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ParsedAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AttributeFactory</name> <modifier>&amp;</modifier></type><name>Factory</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>ParsedAttr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Attrs</name></expr>;</expr_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Factory</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>add</name><parameter_list>(<parameter><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Attrs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>is_contained</name><argument_list>(<argument><expr><name>Attrs</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Can't take attribute from a pool that doesn't own it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Attrs</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><name>Attrs</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>takePool</name><parameter_list>(<parameter><decl><type><name>AttributePool</name> <modifier>&amp;</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>AttributePool</name><argument_list>(<argument><expr><name>AttributeFactory</name> <operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Factory</name><argument_list>(<argument>factory</argument>)</argument_list></macro> <block>{}</block>

<call><name>AttributePool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AttributePool</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>AttributePool</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>Factory</name><operator>.</operator><name>reclaimPool</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; }</block>


<call><name>AttributePool</name><argument_list>(<argument><expr><name>AttributePool</name> <operator>&amp;&amp;</operator><name>pool</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>AttributeFactory</name> <operator>&amp;</operator><macro><name>getFactory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Factory</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Factory</name><operator>.</operator><name>reclaimPool</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Attrs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>takeAllFrom</name><parameter_list>(<parameter><decl><type><name>AttributePool</name> <modifier>&amp;</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>takePool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>Attrs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>create</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>,
<argument><expr><name>ArgsUnion</name> <operator>*</operator><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <name>numArgs</name></expr></argument>,
<argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntax</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ellipsisLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>temp</name> <init>=
<expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>numArgs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>temp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(
<argument><expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>numArgs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>, <argument><expr><name>numArgs</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>, <argument><expr><name>ellipsisLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>create</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>,
<argument><expr><name>IdentifierLoc</name> <operator>*</operator><name>Param</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><name>introduced</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><name>deprecated</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AvailabilityChange</name> <operator>&amp;</operator><name>obsoleted</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>unavailable</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>MessageExpr</name></expr></argument>,
<argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntax</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>strict</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>ReplacementExpr</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(<argument><expr><name>AttributeFactory</name><operator>::</operator><name>AvailabilityAllocSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(
<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>, <argument><expr><name>introduced</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>,
<argument><expr><name>obsoleted</name></expr></argument>, <argument><expr><name>unavailable</name></expr></argument>, <argument><expr><name>MessageExpr</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>ReplacementExpr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>create</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>,
<argument><expr><name>IdentifierLoc</name> <operator>*</operator><name>Param1</name></expr></argument>, <argument><expr><name>IdentifierLoc</name> <operator>*</operator><name>Param2</name></expr></argument>,
<argument><expr><name>IdentifierLoc</name> <operator>*</operator><name>Param3</name></expr></argument>, <argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntax</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(
<argument><expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>Param1</name></expr></argument>, <argument><expr><name>Param2</name></expr></argument>, <argument><expr><name>Param3</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type>
<name>createTypeTagForDatatype</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>,
<argument><expr><name>IdentifierLoc</name> <operator>*</operator><name>argumentKind</name></expr></argument>,
<argument><expr><name>ParsedType</name> <name>matchingCType</name></expr></argument>, <argument><expr><name>bool</name> <name>layoutCompatible</name></expr></argument>,
<argument><expr><name>bool</name> <name>mustBeNull</name></expr></argument>, <argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntax</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(<argument><expr><name>AttributeFactory</name><operator>::</operator><name>TypeTagForDatatypeAllocSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>argumentKind</name></expr></argument>, <argument><expr><name>matchingCType</name></expr></argument>,
<argument><expr><name>layoutCompatible</name></expr></argument>, <argument><expr><name>mustBeNull</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>createTypeAttribute</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>,
<argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>, <argument><expr><name>ParsedType</name> <name>typeArg</name></expr></argument>,
<argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntaxUsed</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(
<argument><expr><name>ParsedAttr</name><operator>::</operator><call><name><name>totalSizeToAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ArgsUnion</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>AvailabilityData</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>TypeTagForDatatypeData</name></expr></argument>, <argument><expr><name>ParsedType</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>PropertyData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>typeArg</name></expr></argument>, <argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type>
<name>createPropertyAttribute</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>attrName</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>attrRange</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>scopeName</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>scopeLoc</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>getterId</name></expr></argument>, <argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>setterId</name></expr></argument>,
<argument><expr><name>ParsedAttr</name><operator>::</operator><name>Syntax</name> <name>syntaxUsed</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>allocate</name><argument_list>(<argument><expr><name>AttributeFactory</name><operator>::</operator><name>PropertyAllocSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><macro><name>new</name> <argument_list>(<argument>memory</argument>)</argument_list></macro> <call><name>ParsedAttr</name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>getterId</name></expr></argument>, <argument><expr><name>setterId</name></expr></argument>, <argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ParsedAttributesView</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>VecTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>ParsedAttr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SizeType</name> <init>= <expr><call><name>decltype</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>VecTy</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>AttrList</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SizeType</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>AttrList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>ParsedAttr</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>SizeType</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name><name>AttrList</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ParsedAttr</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>SizeType</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>*</operator><name><name>AttrList</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>addAtEnd</name><parameter_list>(<parameter><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>newAttr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>newAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>newAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>ParsedAttr</name> <modifier>*</modifier></type><name>ToBeRemoved</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_contained</name><argument_list>(<argument><expr><name>AttrList</name></expr></argument>, <argument><expr><name>ToBeRemoved</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Cannot remove attribute that isn't in the list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><name>AttrList</name></expr></argument>, <argument><expr><name>ToBeRemoved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clearListOnly</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>iterator</name></name></type> <range>: <expr><name>llvm</name><operator>::</operator><name><name>iterator_adaptor_base</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>VecTy</name><operator>::</operator><name>iterator</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name></expr></argument>,
<argument><expr><name>ParsedAttr</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<macro><name>iterator</name><argument_list>(<argument>VecTy::iterator I</argument>)</argument_list></macro> <operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>I</argument>)</argument_list></macro> <block>{}</block>
<name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><operator>*</operator><operator>*</operator><name>I</name></expr>;</return> }</block>
<name>friend</name> <name>class</name> <name>ParsedAttributesView</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>const_iterator</name></name></type>
<range>: <expr><name>llvm</name><operator>::</operator><name><name>iterator_adaptor_base</name><argument_list type="generic">&lt;<argument><expr><name>const_iterator</name></expr></argument>, <argument><expr><name>VecTy</name><operator>::</operator><name>const_iterator</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name></expr></argument>,
<argument><expr><name>ParsedAttr</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>const_iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<macro><name>const_iterator</name><argument_list>(<argument>VecTy::const_iterator I</argument>)</argument_list></macro> <operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>I</argument>)</argument_list></macro> <block>{}</block>

<name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><operator>*</operator><name>I</name></expr>;</return> }</block>
<name>friend</name> <name>class</name> <name>ParsedAttributesView</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name>const_iterator</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>const_iterator</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addAllAtEnd</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addAllAtEnd</name><parameter_list>(<parameter><decl><type><name>const_iterator</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>const_iterator</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>AttrList</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name><name>AttrList</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ParsedAttr</name> <modifier>&amp;</modifier></type><name>front</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>AttrList</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>AttrList</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>ParsedAttr</name> <modifier>&amp;</modifier></type><name>back</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>AttrList</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>AttrList</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasAttribute</name><argument_list>(<argument><expr><name>ParsedAttr</name><operator>::</operator><name>Kind</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>any_of</name><argument_list>(<argument><expr><name>AttrList</name></expr></argument>, <argument><expr><index>[<expr><name>K</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>ParsedAttr</name> <operator>*</operator><name>AL</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>AL</name><operator>-&gt;</operator><name>getParsedKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>K</name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></return>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>VecTy</name></type> <name>AttrList</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>ParsedAttributes</name> <range>: <expr><name>public</name> <name>ParsedAttributesView</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ParsedAttributes</name><argument_list>(<argument><expr><name>AttributeFactory</name> <operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>pool</name><argument_list>(<argument>factory</argument>)</argument_list></macro> <block>{}</block>
<call><name>ParsedAttributes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ParsedAttributes</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>AttributePool</name> <operator>&amp;</operator><macro><name>getPool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>pool</name></expr>;</return> }</block>

<name>void</name> <macro><name>takeAllFrom</name><argument_list>(<argument>ParsedAttributes &amp;attrs</argument>)</argument_list></macro> <block>{
<expr><call><name>addAll</name><argument_list>(<argument><expr><call><name><name>attrs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attrs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>attrs</name><operator>.</operator><name>clearListOnly</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>pool</name><operator>.</operator><name>takeAllFrom</name></name><argument_list>(<argument><expr><name><name>attrs</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>takeOneFrom</name><argument_list>(<argument>ParsedAttributes &amp;Attrs</argument>, <argument>ParsedAttr *PA</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Attrs</name><operator>.</operator><name>getPool</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Attrs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getPool</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>clearListOnly</name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>


<name>ParsedAttr</name> <operator>*</operator><macro><name>addNew</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>ArgsUnion *args</argument>, <argument>unsigned numArgs</argument>,
<argument>ParsedAttr::Syntax syntax</argument>,
<argument>SourceLocation ellipsisLoc = SourceLocation()</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>, <argument><expr><name>numArgs</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>, <argument><expr><name>ellipsisLoc</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>


<name>ParsedAttr</name> <operator>*</operator><macro><name>addNew</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *Param</argument>, <argument>const AvailabilityChange &amp;introduced</argument>,
<argument>const AvailabilityChange &amp;deprecated</argument>,
<argument>const AvailabilityChange &amp;obsoleted</argument>,
<argument>SourceLocation unavailable</argument>, <argument>const Expr *MessageExpr</argument>,
<argument>ParsedAttr::Syntax syntax</argument>, <argument>SourceLocation strict</argument>,
<argument>const Expr *ReplacementExpr</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>create</name></name><argument_list>(
<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>, <argument><expr><name>introduced</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>,
<argument><expr><name>obsoleted</name></expr></argument>, <argument><expr><name>unavailable</name></expr></argument>, <argument><expr><name>MessageExpr</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>ReplacementExpr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>


<name>ParsedAttr</name> <operator>*</operator><macro><name>addNew</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *Param1</argument>, <argument>IdentifierLoc *Param2</argument>,
<argument>IdentifierLoc *Param3</argument>, <argument>ParsedAttr::Syntax syntax</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>Param1</name></expr></argument>, <argument><expr><name>Param2</name></expr></argument>, <argument><expr><name>Param3</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>


<name>ParsedAttr</name> <operator>*</operator>
<macro><name>addNewTypeTagForDatatype</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierLoc *argumentKind</argument>,
<argument>ParsedType matchingCType</argument>, <argument>bool layoutCompatible</argument>,
<argument>bool mustBeNull</argument>, <argument>ParsedAttr::Syntax syntax</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>createTypeTagForDatatype</name></name><argument_list>(
<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>, <argument><expr><name>argumentKind</name></expr></argument>, <argument><expr><name>matchingCType</name></expr></argument>,
<argument><expr><name>layoutCompatible</name></expr></argument>, <argument><expr><name>mustBeNull</name></expr></argument>, <argument><expr><name>syntax</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>


<name>ParsedAttr</name> <operator>*</operator><macro><name>addNewTypeAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>ParsedType typeArg</argument>,
<argument>ParsedAttr::Syntax syntaxUsed</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>createTypeAttribute</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>,
<argument><expr><name>scopeLoc</name></expr></argument>, <argument><expr><name>typeArg</name></expr></argument>, <argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>


<name>ParsedAttr</name> <operator>*</operator>
<macro><name>addNewPropertyAttr</name><argument_list>(<argument>IdentifierInfo *attrName</argument>, <argument>SourceRange attrRange</argument>,
<argument>IdentifierInfo *scopeName</argument>, <argument>SourceLocation scopeLoc</argument>,
<argument>IdentifierInfo *getterId</argument>, <argument>IdentifierInfo *setterId</argument>,
<argument>ParsedAttr::Syntax syntaxUsed</argument>)</argument_list></macro> <block>{
<expr><name>ParsedAttr</name> <operator>*</operator><name>attr</name> <operator>=</operator>
<call><name><name>pool</name><operator>.</operator><name>createPropertyAttribute</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>, <argument><expr><name>attrRange</name></expr></argument>, <argument><expr><name>scopeName</name></expr></argument>, <argument><expr><name>scopeLoc</name></expr></argument>,
<argument><expr><name>getterId</name></expr></argument>, <argument><expr><name>setterId</name></expr></argument>, <argument><expr><name>syntaxUsed</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addAtEnd</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>attr</name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>mutable</name> <name>AttributePool</name> <name>pool</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ParsedAttributesWithRange</name></name></type> <range>: <expr><name>ParsedAttributes</name> <block>{
<expr><call><name>ParsedAttributesWithRange</name><argument_list>(<argument><expr><name>AttributeFactory</name> <operator>&amp;</operator><name>factory</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ParsedAttributes</name><argument_list>(<argument>factory</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name>ParsedAttributes</name><operator>::</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;
<expr><name>Range</name> <operator>=</operator> <call><name>SourceRange</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>SourceRange</name> <name>Range</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ParsedAttributesViewWithRange</name></name></type> <range>: <expr><name>ParsedAttributesView</name> <block>{
<expr><call><name>ParsedAttributesViewWithRange</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>ParsedAttributesView</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>void</name> <macro><name>clearListOnly</name><argument_list>()</argument_list></macro> <block>{
<expr><name>ParsedAttributesView</name><operator>::</operator><call><name>clearListOnly</name><argument_list>()</argument_list></call></expr>;
<expr><name>Range</name> <operator>=</operator> <call><name>SourceRange</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>SourceRange</name> <name>Range</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<enum>enum <name>AttributeArgumentNType</name> <block>{
<decl><name>AANT_ArgumentIntOrBool</name></decl>,
<decl><name>AANT_ArgumentIntegerConstant</name></decl>,
<decl><name>AANT_ArgumentString</name></decl>,
<decl><name>AANT_ArgumentIdentifier</name></decl>,
<decl><name>AANT_ArgumentConstantExpr</name></decl>,
}</block>;</enum>



<enum>enum <name>AttributeDeclKind</name> <block>{
<decl><name>ExpectedFunction</name></decl>,
<decl><name>ExpectedUnion</name></decl>,
<decl><name>ExpectedVariableOrFunction</name></decl>,
<decl><name>ExpectedFunctionOrMethod</name></decl>,
<decl><name>ExpectedFunctionMethodOrBlock</name></decl>,
<decl><name>ExpectedFunctionMethodOrParameter</name></decl>,
<decl><name>ExpectedVariable</name></decl>,
<decl><name>ExpectedVariableOrField</name></decl>,
<decl><name>ExpectedVariableFieldOrTag</name></decl>,
<decl><name>ExpectedTypeOrNamespace</name></decl>,
<decl><name>ExpectedFunctionVariableOrClass</name></decl>,
<decl><name>ExpectedKernelFunction</name></decl>,
<decl><name>ExpectedFunctionWithProtoType</name></decl>,
}</block>;</enum>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>ParsedAttr</name> <operator>&amp;</operator><name>At</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>At</name><operator>.</operator><name>getAttrName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>ParsedAttr</name> <operator>*</operator><name>At</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>At</name><operator>-&gt;</operator><name>getAttrName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ACI</name></expr></argument>,
<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>ACI</name></expr></argument>, <argument><expr><name>AttributeCommonInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>ACI</name> <operator>&amp;</operator><name>CI</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>CI</name><operator>.</operator><name>getAttrName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ACI</name></expr></argument>,
<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>ACI</name></expr></argument>, <argument><expr><name>AttributeCommonInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>ACI</name><operator>*</operator> <name>CI</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>CI</name><operator>-&gt;</operator><name>getAttrName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_identifierinfo</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
