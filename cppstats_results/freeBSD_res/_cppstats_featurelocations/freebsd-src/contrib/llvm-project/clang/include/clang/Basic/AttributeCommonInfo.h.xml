<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_ATTRIBUTECOMMONINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_ATTRIBUTECOMMONINFO_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordWriter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AttributeCommonInfo</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>Syntax</name> <block>{

<decl><name>AS_GNU</name></decl>,


<decl><name>AS_CXX11</name></decl>,


<decl><name>AS_C2x</name></decl>,


<decl><name>AS_Declspec</name></decl>,


<decl><name>AS_Microsoft</name></decl>,


<decl><name>AS_Keyword</name></decl>,


<decl><name>AS_Pragma</name></decl>,




<decl><name>AS_ContextSensitiveKeyword</name></decl>,
}</block>;</enum>
<enum>enum <name>Kind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSED_ATTR</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AT_##NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/AttrParsedAttrList.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PARSED_ATTR</name></cpp:undef>
<decl><name>NoSemaHandlerAttribute</name></decl>,
<decl><name>IgnoredAttribute</name></decl>,
<decl><name>UnknownAttribute</name></decl>,
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>AttrName</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>ScopeName</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>AttrRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceLocation</name></type> <name>ScopeLoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>AttrKind</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>SyntaxUsed</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SpellingIndex</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>SpellingNotCalculated</name> <init>= <expr><literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>AttributeCommonInfo</name><argument_list>(<argument>SourceRange AttrRange</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrKind</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>SourceLocation AttrLoc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrKind</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>const IdentifierInfo *AttrName</argument>,
<argument>const IdentifierInfo *ScopeName</argument>, <argument>SourceRange AttrRange</argument>,
<argument>SourceLocation ScopeLoc</argument>, <argument>Syntax SyntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>ScopeName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ScopeLoc</name><argument_list>(<argument><expr><name>ScopeLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>AttrKind</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>, <argument><expr><name>ScopeName</name></expr></argument>, <argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>const IdentifierInfo *AttrName</argument>,
<argument>const IdentifierInfo *ScopeName</argument>, <argument>SourceRange AttrRange</argument>,
<argument>SourceLocation ScopeLoc</argument>, <argument>Kind AttrKind</argument>, <argument>Syntax SyntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>ScopeName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ScopeLoc</name><argument_list>(<argument><expr><name>ScopeLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>AttrKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>const IdentifierInfo *AttrName</argument>,
<argument>const IdentifierInfo *ScopeName</argument>, <argument>SourceRange AttrRange</argument>,
<argument>SourceLocation ScopeLoc</argument>, <argument>Kind AttrKind</argument>, <argument>Syntax SyntaxUsed</argument>,
<argument>unsigned Spelling</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>ScopeName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ScopeLoc</name><argument_list>(<argument><expr><name>ScopeLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>AttrKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SpellingIndex</name><argument_list>(<argument>Spelling</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>const IdentifierInfo *AttrName</argument>, <argument>SourceRange AttrRange</argument>,
<argument>Syntax SyntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ScopeLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrKind</name><argument_list>(<argument><expr><call><name>getParsedKind</name><argument_list>(<argument><expr><name>AttrName</name></expr></argument>, <argument><expr><name>ScopeName</name></expr></argument>, <argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>SourceRange AttrRange</argument>, <argument>Kind K</argument>, <argument>Syntax SyntaxUsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SpellingIndex</name><argument_list>(<argument>SpellingNotCalculated</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AttributeCommonInfo</name><argument_list>(<argument>SourceRange AttrRange</argument>, <argument>Kind K</argument>, <argument>Syntax SyntaxUsed</argument>,
<argument>unsigned Spelling</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttrName</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeName</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AttrRange</name><argument_list>(<argument><expr><name>AttrRange</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScopeLoc</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SyntaxUsed</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SpellingIndex</name><argument_list>(<argument>Spelling</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>AttributeCommonInfo</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AttributeCommonInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>getParsedKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Kind</name><argument_list>(<argument><expr><name>AttrKind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Syntax</name> <macro><name>getSyntax</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Syntax</name><argument_list>(<argument><expr><name>SyntaxUsed</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>getAttrName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AttrName</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>AttrRange</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceRange</name> <macro><name>getRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AttrRange</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>AttrRange</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ScopeName</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>getScopeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ScopeName</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getScopeLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ScopeLoc</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getNormalizedFullName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isDeclspecAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_Declspec</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMicrosoftAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_Microsoft</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isGNUScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAlignasAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name>getParsedKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AT_Aligned</name> <operator>&amp;&amp;</operator> <call><name>isKeywordAttribute</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX11Attribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_CXX11</name> <operator>||</operator> <call><name>isAlignasAttribute</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isC2xAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_C2x</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isStandardAttributeSyntax</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isCXX11Attribute</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isC2xAttribute</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isKeywordAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_Keyword</name> <operator>||</operator> <name>SyntaxUsed</name> <operator>==</operator> <name>AS_ContextSensitiveKeyword</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isContextSensitiveKeywordAttribute</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SyntaxUsed</name> <operator>==</operator> <name>AS_ContextSensitiveKeyword</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getAttributeSpellingListIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>isAttributeSpellingListCalculated</name><argument_list>()</argument_list></call> <operator>||</operator> <name>AttrName</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Spelling cannot be found"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name>isAttributeSpellingListCalculated</name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><name>SpellingIndex</name></expr>
</then><else>: <expr><call><name>calculateAttributeSpellingListIndex</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAttributeSpellingListIndex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>SpellingIndex</name> <operator>=</operator> <name>V</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>Kind</name></type> <name>getParsedKind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>Scope</name></decl></parameter>, <parameter><decl><type><name>Syntax</name></type> <name>SyntaxUsed</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>



<expr_stmt><expr><name>unsigned</name> <macro><name>calculateAttributeSpellingListIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>ASTRecordWriter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getAttributeSpellingListIndexRaw</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SpellingIndex</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isAttributeSpellingListCalculated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SpellingIndex</name> <operator>!=</operator> <name>SpellingNotCalculated</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
