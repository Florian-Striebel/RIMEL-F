<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Syntax/BuildTree.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_SYNTAX_TREE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_SYNTAX_TREE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Syntax/Nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Syntax/Tree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>syntax</name> <block>{<block_content>




<expr_stmt><expr><name>syntax</name><operator>::</operator><name>TranslationUnit</name> <operator>*</operator><call><name>buildSyntaxTree</name><argument_list>(<argument><expr><name>Arena</name> <operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>syntax</name><operator>::</operator><name>Leaf</name> <operator>*</operator><macro><name>createLeaf</name><argument_list>(<argument>syntax::Arena &amp;A</argument>, <argument>tok::TokenKind K</argument>,
<argument>StringRef Spelling</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>syntax</name><operator>::</operator><name>Leaf</name> <operator>*</operator><macro><name>createLeaf</name><argument_list>(<argument>syntax::Arena &amp;A</argument>, <argument>tok::TokenKind K</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>syntax</name><operator>::</operator><name>Tree</name> <operator>*</operator>
<macro><name>createTree</name><argument_list>(<argument>syntax::Arena &amp;A</argument>,
<argument>ArrayRef&lt;std::pair&lt;syntax::Node *</argument>, <argument>syntax::NodeRole&gt;&gt; Children</argument>,
<argument>syntax::NodeKind K</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>syntax</name><operator>::</operator><name>EmptyStatement</name> <operator>*</operator><call><name>createEmptyStatement</name><argument_list>(<argument><expr><name>syntax</name><operator>::</operator><name>Arena</name> <operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>syntax</name><operator>::</operator><name>Node</name> <operator>*</operator><call><name>deepCopyExpandingMacros</name><argument_list>(<argument><expr><name>syntax</name><operator>::</operator><name>Arena</name> <operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Node</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
