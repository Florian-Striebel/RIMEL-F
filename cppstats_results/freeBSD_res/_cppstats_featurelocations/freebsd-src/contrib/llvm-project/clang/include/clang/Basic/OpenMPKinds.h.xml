<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/OpenMPKinds.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_OPENMPKINDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_OPENMPKINDS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Frontend/OpenMP/OMPConstants.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>using</name></type> <name>OpenMPDirectiveKind</name> <init>= <expr><name>llvm</name><operator>::</operator>omp<operator>::</operator><name>Directive</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>OpenMPClauseKind</name> <init>= <expr><name>llvm</name><operator>::</operator>omp<operator>::</operator><name>Clause</name></expr></init></decl>;</decl_stmt>


<enum>enum <name>OpenMPScheduleClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_SCHEDULE_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_SCHEDULE_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_SCHEDULE_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPScheduleClauseModifier</name> <block>{
<decl><name>OMPC_SCHEDULE_MODIFIER_unknown</name> <init>= <expr><name>OMPC_SCHEDULE_unknown</name></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_SCHEDULE_MODIFIER</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_SCHEDULE_MODIFIER_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_SCHEDULE_MODIFIER_last</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPDeviceClauseModifier</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DEVICE_MODIFIER</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DEVICE_##Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DEVICE_unknown</name></decl>,
}</block>;</enum>


<enum>enum <name>OpenMPDependClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DEPEND_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DEPEND_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DEPEND_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPLinearClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_LINEAR_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_LINEAR_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_LINEAR_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPMapClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_MAP_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_MAP_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_MAP_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPMapModifierKind</name> <block>{
<decl><name>OMPC_MAP_MODIFIER_unknown</name> <init>= <expr><name>OMPC_MAP_unknown</name></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_MAP_MODIFIER_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_MAP_MODIFIER_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_MAP_MODIFIER_last</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>NumberOfOMPMapClauseModifiers</name> <init>=
<expr><name>OMPC_MAP_MODIFIER_last</name> <operator>-</operator> <name>OMPC_MAP_MODIFIER_unknown</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<enum>enum <name>OpenMPMotionModifierKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_MOTION_MODIFIER_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_MOTION_MODIFIER_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_MOTION_MODIFIER_unknown</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>NumberOfOMPMotionModifiers</name> <init>=
<expr><name>OMPC_MOTION_MODIFIER_unknown</name></expr></init></decl>;</decl_stmt>


<enum>enum <name>OpenMPDistScheduleClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DIST_SCHEDULE_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DIST_SCHEDULE_##Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DIST_SCHEDULE_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPDefaultmapClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DEFAULTMAP_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DEFAULTMAP_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DEFAULTMAP_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPDefaultmapClauseModifier</name> <block>{
<decl><name>OMPC_DEFAULTMAP_MODIFIER_unknown</name> <init>= <expr><name>OMPC_DEFAULTMAP_unknown</name></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DEFAULTMAP_MODIFIER</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DEFAULTMAP_MODIFIER_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DEFAULTMAP_MODIFIER_last</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPAtomicDefaultMemOrderClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_ATOMIC_DEFAULT_MEM_ORDER_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_ATOMIC_DEFAULT_MEM_ORDER_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_ATOMIC_DEFAULT_MEM_ORDER_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPDeviceType</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_DEVICE_TYPE_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_DEVICE_TYPE_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_DEVICE_TYPE_unknown</name></decl>
}</block>;</enum>


<enum>enum <name>OpenMPLastprivateModifier</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_LASTPRIVATE_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_LASTPRIVATE_##Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_LASTPRIVATE_unknown</name></decl>,
}</block>;</enum>


<enum>enum <name>OpenMPOrderClauseKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_ORDER_KIND</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_ORDER_##Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_ORDER_unknown</name></decl>,
}</block>;</enum>


<struct>struct <macro><name>OpenMPScheduleTy</name></macro> <name>final</name> <block>{
<decl_stmt><decl><type><name>OpenMPScheduleClauseKind</name></type> <name>Schedule</name> <init>= <expr><name>OMPC_SCHEDULE_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenMPScheduleClauseModifier</name></type> <name>M1</name> <init>= <expr><name>OMPC_SCHEDULE_MODIFIER_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenMPScheduleClauseModifier</name></type> <name>M2</name> <init>= <expr><name>OMPC_SCHEDULE_MODIFIER_unknown</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<enum>enum <name>OpenMPReductionClauseModifier</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_REDUCTION_MODIFIER</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OMPC_REDUCTION_##Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.def"</cpp:file></cpp:include>
<decl><name>OMPC_REDUCTION_unknown</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>unsigned</name></type> <name>getOpenMPSimpleClauseType</name><argument_list>(<argument><expr><name>OpenMPClauseKind</name> <name>Kind</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Str</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>OpenMPVersion</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getOpenMPSimpleClauseTypeName</name><parameter_list>(<parameter><decl><type><name>OpenMPClauseKind</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>isOpenMPLoopDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPWorksharingDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPTaskLoopDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPParallelDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>isOpenMPTargetExecutionDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>isOpenMPTargetDataManagementDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>isOpenMPNestingTeamsDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPTeamsDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPSimdDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>isOpenMPDistributeDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>isOpenMPNestingDistributeDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPPrivate</name><parameter_list>(<parameter><decl><type><name>OpenMPClauseKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>isOpenMPThreadPrivate</name><parameter_list>(<parameter><decl><type><name>OpenMPClauseKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isOpenMPTaskingDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isOpenMPLoopBoundSharingDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isOpenMPLoopTransformationDirective</name><parameter_list>(<parameter><decl><type><name>OpenMPDirectiveKind</name></type> <name>DKind</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>getOpenMPCaptureRegions</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>OpenMPDirectiveKind</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CaptureRegions</name></expr></argument>,
<argument><expr><name>OpenMPDirectiveKind</name> <name>DKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
