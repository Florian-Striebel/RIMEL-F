<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/TargetBuiltins.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_TARGETBUILTINS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_TARGETBUILTINS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PPC</name></cpp:undef>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>NEON</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsNEON.def"</cpp:file></cpp:include>
<decl><name>FirstTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>ARM</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>LastNEONBuiltin</name> <init>= <expr><name>NEON</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsARM.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>SVE</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastNEONBuiltin</name> <init>= <expr><name>NEON</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsSVE.def"</cpp:file></cpp:include>
<decl><name>FirstTSBuiltin</name></decl>,
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>AArch64</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>LastNEONBuiltin</name> <init>= <expr><name>NEON</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>FirstSVEBuiltin</name> <init>= <expr><name>NEON</name><operator>::</operator><name>FirstTSBuiltin</name></expr></init></decl>,
<decl><name>LastSVEBuiltin</name> <init>= <expr><name>SVE</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsAArch64.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>BPF</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsBPF.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>PPC</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsPPC.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>NVPTX</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsNVPTX.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>AMDGPU</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsAMDGPU.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>X86</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsX86.def"</cpp:file></cpp:include>
<decl><name>FirstX86_64Builtin</name></decl>,
<decl><name>LastX86CommonBuiltin</name> <init>= <expr><name>FirstX86_64Builtin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsX86_64.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>VE</name> <block>{<block_content>
<enum>enum <block>{ <decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><name>LastTSBuiltin</name></decl> }</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>RISCV</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsRISCV.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>NeonTypeFlags</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>EltTypeMask</name> <init>= <expr><literal type="number">0xf</literal></expr></init></decl>,
<decl><name>UnsignedFlag</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>QuadFlag</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Flags</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>EltType</name> <block>{
<decl><name>Int8</name></decl>,
<decl><name>Int16</name></decl>,
<decl><name>Int32</name></decl>,
<decl><name>Int64</name></decl>,
<decl><name>Poly8</name></decl>,
<decl><name>Poly16</name></decl>,
<decl><name>Poly64</name></decl>,
<decl><name>Poly128</name></decl>,
<decl><name>Float16</name></decl>,
<decl><name>Float32</name></decl>,
<decl><name>Float64</name></decl>,
<decl><name>BFloat16</name></decl>
}</block>;</enum>

<macro><name>NeonTypeFlags</name><argument_list>(<argument>unsigned F</argument>)</argument_list></macro> : <macro><name>Flags</name><argument_list>(<argument>F</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>NeonTypeFlags</name><argument_list>(<argument>EltType ET</argument>, <argument>bool IsUnsigned</argument>, <argument>bool IsQuad</argument>)</argument_list></macro> : <macro><name>Flags</name><argument_list>(<argument>ET</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>IsUnsigned</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Flags</name> <operator>|=</operator> <name>UnsignedFlag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsQuad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Flags</name> <operator>|=</operator> <name>QuadFlag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>EltType</name> <macro><name>getEltType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>EltType</name><operator>)</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>EltTypeMask</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPoly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>EltType</name> <name>ET</name> <operator>=</operator> <call><name>getEltType</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>ET</name> <operator>==</operator> <name>Poly8</name> <operator>||</operator> <name>ET</name> <operator>==</operator> <name>Poly16</name> <operator>||</operator> <name>ET</name> <operator>==</operator> <name>Poly64</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>UnsignedFlag</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isQuad</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>QuadFlag</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SVETypeFlags</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EltTypeShift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MemEltTypeShift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MergeTypeShift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SplatOperandMaskShift</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_GET_SVE_TYPEFLAGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/arm_sve_typeflags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_GET_SVE_TYPEFLAGS</name></cpp:undef>

<enum>enum <name>EltType</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_GET_SVE_ELTTYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/arm_sve_typeflags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_GET_SVE_ELTTYPES</name></cpp:undef>
}</block>;</enum>

<enum>enum <name>MemEltType</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_GET_SVE_MEMELTTYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/arm_sve_typeflags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_GET_SVE_MEMELTTYPES</name></cpp:undef>
}</block>;</enum>

<enum>enum <name>MergeType</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_GET_SVE_MERGETYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/arm_sve_typeflags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_GET_SVE_MERGETYPES</name></cpp:undef>
}</block>;</enum>

<enum>enum <name>ImmCheckType</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_GET_SVE_IMMCHECKTYPES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/arm_sve_typeflags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_GET_SVE_IMMCHECKTYPES</name></cpp:undef>
}</block>;</enum>

<macro><name>SVETypeFlags</name><argument_list>(<argument>uint64_t F</argument>)</argument_list></macro> : <macro><name>Flags</name><argument_list>(<argument>F</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>EltTypeShift</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>EltTypeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MemEltTypeShift</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>MemEltTypeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MergeTypeShift</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>MergeTypeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SplatOperandMaskShift</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>countTrailingZeros</name><argument_list>(<argument><expr><name>SplatOperandMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>EltType</name> <macro><name>getEltType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>EltType</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>EltTypeMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EltTypeShift</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>MemEltType</name> <macro><name>getMemEltType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>MemEltType</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>MemEltTypeMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MemEltTypeShift</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>MergeType</name> <macro><name>getMergeType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>MergeType</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>MergeTypeMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MergeTypeShift</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getSplatOperand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>SplatOperandMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SplatOperandMaskShift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasSplatOperand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>SplatOperandMask</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLoad</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsLoad</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsStore</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isGatherLoad</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsGatherLoad</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isScatterStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsScatterStore</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isStructLoad</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsStructLoad</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isStructStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsStructStore</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isZExtReturn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsZExtReturn</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isByteIndexed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsByteIndexed</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverloadNone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsOverloadNone</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverloadWhile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsOverloadWhile</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverloadDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>OverloadKindMask</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverloadWhileRW</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsOverloadWhileRW</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverloadCvt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsOverloadCvt</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPrefetch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsPrefetch</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isReverseCompare</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>ReverseCompare</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isAppendSVALL</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsAppendSVALL</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInsertOp1SVALL</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsInsertOp1SVALL</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isGatherPrefetch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsGatherPrefetch</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isReverseUSDOT</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>ReverseUSDOT</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsUndef</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTupleCreate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsTupleCreate</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTupleGet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsTupleGet</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTupleSet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>IsTupleSet</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getBits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isFlagSet</name><argument_list>(<argument><expr><name>uint64_t</name> <name>Flag</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Flags</name> <operator>&amp;</operator> <name>Flag</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>Hexagon</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsHexagon.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>Mips</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsMips.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>XCore</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsXCore.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>SystemZ</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsSystemZ.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>WebAssembly</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>LastTIBuiltin</name> <init>= <expr><name>clang</name><operator>::</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BuiltinsWebAssembly.def"</cpp:file></cpp:include>
<decl><name>LastTSBuiltin</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>LargestBuiltinID</name> <init>= <expr><name>std</name><operator>::</operator><macro><name>max</name></macro><operator>&lt;</operator><name>uint64_t</name><operator>&gt;</operator><operator>(</operator>
<block>{<expr><name>ARM</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>AArch64</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>BPF</name><operator>::</operator><name>LastTSBuiltin</name></expr>,
<expr><name>PPC</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>NVPTX</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>AMDGPU</name><operator>::</operator><name>LastTSBuiltin</name></expr>,
<expr><name>X86</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>VE</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>RISCV</name><operator>::</operator><name>LastTSBuiltin</name></expr>,
<expr><name>Hexagon</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>Mips</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>XCore</name><operator>::</operator><name>LastTSBuiltin</name></expr>,
<expr><name>SystemZ</name><operator>::</operator><name>LastTSBuiltin</name></expr>, <expr><name>WebAssembly</name><operator>::</operator><name>LastTSBuiltin</name></expr>}</block><operator>)</operator></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
