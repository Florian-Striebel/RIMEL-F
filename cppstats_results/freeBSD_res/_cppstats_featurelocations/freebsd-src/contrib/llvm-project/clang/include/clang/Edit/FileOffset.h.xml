<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Edit/FileOffset.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_EDIT_FILEOFFSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_EDIT_FILEOFFSET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>edit</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileOffset</name> <block>{<block_content>
<decl_stmt><decl><type><name>FileID</name></type> <name>FID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FileOffset</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>FileOffset</name><argument_list>(<argument>FileID fid</argument>, <argument>unsigned offs</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>FID</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Offs</name><argument_list>(<argument>offs</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FID</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>getFID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FID</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offs</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>FileOffset</name></type> <name>getWithOffset</name><argument_list>(<argument><expr><name>unsigned</name> <name>offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>FileOffset</name></type> <name>NewOffs</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>NewOffs</name><operator>.</operator><name>Offs</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><name>NewOffs</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>FID</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>FID</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Offs</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Offs</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>LHS</name><operator>.</operator><name>FID</name></name></expr></argument>, <argument><expr><name><name>LHS</name><operator>.</operator><name>Offs</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>FID</name></name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>Offs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name>RHS</name> <operator>&lt;</operator> <name>LHS</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>&lt;</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>FileOffset</name> <name>LHS</name><operator>,</operator> <name>FileOffset</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>RHS</name> <operator>&lt;</operator> <name>LHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
