<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/StmtGraphTraits.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_STMTGRAPHTRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_STMTGRAPHTRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DepthFirstIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/GraphTraits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>ChildIteratorType</name> <operator>=</operator> <name>clang</name><operator>::</operator><name>Stmt</name><operator>::</operator><name>child_iterator</name></expr>;
<expr><name>using</name> <name>nodes_iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>df_iterator</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>NodeRef</name> <macro><name>getEntryNode</name><argument_list>(<argument>clang::Stmt *S</argument>)</argument_list></macro> <block>{ <return>return <expr><name>S</name></expr>;</return> }</block>

<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_begin</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>N</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>child_begin</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>ChildIteratorType</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_end</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>N</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>child_end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>ChildIteratorType</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>clang::Stmt* S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>df_begin</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name><argument_list>(<argument>clang::Stmt* S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>df_end</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <specifier>const</specifier> <name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>ChildIteratorType</name> <operator>=</operator> <name>clang</name><operator>::</operator><name>Stmt</name><operator>::</operator><name>const_child_iterator</name></expr>;
<expr><name>using</name> <name>nodes_iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>df_iterator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>NodeRef</name> <macro><name>getEntryNode</name><argument_list>(<argument>const clang::Stmt *S</argument>)</argument_list></macro> <block>{ <return>return <expr><name>S</name></expr>;</return> }</block>

<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_begin</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>N</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>child_begin</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>ChildIteratorType</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_end</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>N</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>child_end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>ChildIteratorType</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>const clang::Stmt* S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>df_begin</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name><argument_list>(<argument>const clang::Stmt* S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>df_end</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
