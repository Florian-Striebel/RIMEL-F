<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticReader.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_SERIALIZEDDIAGNOSTICREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_SERIALIZEDDIAGNOSTICREADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Bitstream/BitstreamReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>serialized_diags</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SDError</name> <block>{<block_content>
<expr_stmt><expr><name>CouldNotLoad</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>InvalidSignature</name></expr><operator>,</operator>
<expr><name>InvalidDiagnostics</name></expr><operator>,</operator>
<expr><name>MalformedTopLevelBlock</name></expr><operator>,</operator>
<expr><name>MalformedSubBlock</name></expr><operator>,</operator>
<expr><name>MalformedBlockInfoBlock</name></expr><operator>,</operator>
<expr><name>MalformedMetadataBlock</name></expr><operator>,</operator>
<expr><name>MalformedDiagnosticBlock</name></expr><operator>,</operator>
<expr><name>MalformedDiagnosticRecord</name></expr><operator>,</operator>
<expr><name>MissingVersion</name></expr><operator>,</operator>
<expr><name>VersionMismatch</name></expr><operator>,</operator>
<expr><name>UnsupportedConstruct</name></expr><operator>,</operator>


<expr><name>HandlerFailed</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>error_category</name> <operator>&amp;</operator><call><name>SDErrorCategory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>make_error_code</name><argument_list>(<argument>SDError E</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>error_code</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SDErrorCategory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<struct>struct <name>Location</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>FileID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>

<macro><name>Location</name><argument_list>(<argument>unsigned FileID</argument>, <argument>unsigned Line</argument>, <argument>unsigned Col</argument>, <argument>unsigned Offset</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>FileID</name><argument_list>(<argument><expr><name>FileID</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Line</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Col</name><argument_list>(<argument><expr><name>Col</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Offset</name><argument_list>(<argument>Offset</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>SerializedDiagnosticReader</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SerializedDiagnosticReader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SerializedDiagnosticReader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>readDiagnostics</name><argument_list>(<argument>StringRef File</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Cursor</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>Cursor</name></expr></argument>&gt;</argument_list></name> <call><name>skipUntilRecordOrBlock</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Stream</name></expr></argument>,
<argument><expr><name>unsigned</name> <operator>&amp;</operator><name>BlockOrRecordId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <call><name>readMetaBlock</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <call><name>readDiagnosticBlock</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitStartOfDiagnostic</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitEndOfDiagnostic</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitCategoryRecord</name><argument_list>(<argument>unsigned ID</argument>, <argument>StringRef Name</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitDiagFlagRecord</name><argument_list>(<argument>unsigned ID</argument>, <argument>StringRef Name</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name>
<macro><name>visitDiagnosticRecord</name><argument_list>(<argument>unsigned Severity</argument>, <argument>const Location &amp;Location</argument>,
<argument>unsigned Category</argument>, <argument>unsigned Flag</argument>, <argument>StringRef Message</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitFilenameRecord</name><argument_list>(<argument>unsigned ID</argument>, <argument>unsigned Size</argument>,
<argument>unsigned Timestamp</argument>,
<argument>StringRef Name</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name>
<macro><name>visitFixitRecord</name><argument_list>(<argument>const Location &amp;Start</argument>, <argument>const Location &amp;End</argument>, <argument>StringRef Text</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitSourceRangeRecord</name><argument_list>(<argument>const Location &amp;Start</argument>,
<argument>const Location &amp;End</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>visitVersionRecord</name><argument_list>(<argument>unsigned Version</argument>)</argument_list></macro> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>is_error_code_enum</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>serialized_diags</name><operator>::</operator><name>SDError</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>std</name><operator>::</operator><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
