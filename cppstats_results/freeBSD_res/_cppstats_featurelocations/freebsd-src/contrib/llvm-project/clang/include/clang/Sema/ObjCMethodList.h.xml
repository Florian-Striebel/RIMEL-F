<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/ObjCMethodList.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_OBJCMETHODLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_OBJCMETHODLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>



<struct>struct <name>ObjCMethodList</name> <block>{


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>MethodAndHasMoreThanOneDecl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodList</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>NextAndExtraBits</name></expr>;</expr_stmt>

<macro><name>ObjCMethodList</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
<expr_stmt><expr><call><name>ObjCMethodList</name><argument_list>(<argument><expr><name>ObjCMethodDecl</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MethodAndHasMoreThanOneDecl</name><argument_list>(<argument>M</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<call><name>ObjCMethodList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjCMethodList</name> <operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>MethodAndHasMoreThanOneDecl</name><argument_list>(<argument><expr><name><name>L</name><operator>.</operator><name>MethodAndHasMoreThanOneDecl</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>NextAndExtraBits</name><argument_list>(<argument>L.NextAndExtraBits</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ObjCMethodList</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCMethodList</name> <operator>&amp;</operator><name>L</name><operator>)</operator> <block>{
<expr><name>MethodAndHasMoreThanOneDecl</name> <operator>=</operator> <name><name>L</name><operator>.</operator><name>MethodAndHasMoreThanOneDecl</name></name></expr>;
<expr><name>NextAndExtraBits</name> <operator>=</operator> <name><name>L</name><operator>.</operator><name>NextAndExtraBits</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ObjCMethodList</name> <operator>*</operator><macro><name>getNext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>NextAndExtraBits</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getBits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>NextAndExtraBits</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNext</name><parameter_list>(<parameter><decl><type><name>ObjCMethodList</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>NextAndExtraBits</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setBits</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>NextAndExtraBits</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>ObjCMethodDecl</name> <operator>*</operator><macro><name>getMethod</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>MethodAndHasMoreThanOneDecl</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setMethod</name><parameter_list>(<parameter><decl><type><name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MethodAndHasMoreThanOneDecl</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasMoreThanOneDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>MethodAndHasMoreThanOneDecl</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setHasMoreThanOneDecl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MethodAndHasMoreThanOneDecl</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
