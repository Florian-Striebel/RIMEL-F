<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_RETAINSUMMARY_MANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_RETAINSUMMARY_MANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ParentMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnyCall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/SelectorExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>clang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ObjKind</name> <block>{<block_content>

<expr_stmt><expr><name>CF</name></expr><operator>,</operator>


<expr><name>ObjC</name></expr><operator>,</operator>


<expr><name>AnyObj</name></expr><operator>,</operator>


<expr><name>Generalized</name></expr><operator>,</operator>



<expr><name>OS</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<enum>enum <name>ArgEffectKind</name> <block>{

<decl><name>DoNothing</name></decl>,



<decl><name>Autorelease</name></decl>,


<decl><name>Dealloc</name></decl>,


<decl><name>DecRef</name></decl>,



<decl><name>DecRefBridgedTransferred</name></decl>,


<decl><name>IncRef</name></decl>,



<decl><name>UnretainedOutParameter</name></decl>,



<decl><name>RetainedOutParameter</name></decl>,



<decl><name>RetainedOutParameterOnZero</name></decl>,



<decl><name>RetainedOutParameterOnNonZero</name></decl>,




<decl><name>MayEscape</name></decl>,



<decl><name>StopTracking</name></decl>,








<decl><name>StopTrackingHard</name></decl>,






<decl><name>DecRefAndStopTrackingHard</name></decl>,
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>ArgEffect</name> <block>{<block_content>
<decl_stmt><decl><type><name>ArgEffectKind</name></type> <name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ObjKind</name></type> <name>O</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>ArgEffect</name><argument_list>(<argument>ArgEffectKind K = DoNothing</argument>, <argument>ObjKind O = ObjKind::AnyObj</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>K</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>O</name><argument_list>(<argument>O</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ArgEffectKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ObjKind</name> <macro><name>getObjKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>O</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ArgEffect</name></type> <name>withKind</name><parameter_list>(<parameter><decl><type><name>ArgEffectKind</name></type> <name>NewK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>NewK</name></expr></argument>, <argument><expr><name>O</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ArgEffect</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>K</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>K</name></name> <operator>&amp;&amp;</operator> <name>O</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>O</name></name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>RetEffect</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{


<decl><name>NoRet</name></decl>,


<decl><name>OwnedSymbol</name></decl>,




<decl><name>NotOwnedSymbol</name></decl>,



<decl><name>OwnedWhenTrackedReceiver</name></decl>,





<decl><name>NoRetHard</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ObjKind</name></type> <name>O</name></decl>;</decl_stmt>

<macro><name>RetEffect</name><argument_list>(<argument>Kind k</argument>, <argument>ObjKind o = ObjKind::AnyObj</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>K</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>O</name><argument_list>(<argument>o</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ObjKind</name> <macro><name>getObjKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>O</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isOwned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>K</name> <operator>==</operator> <name>OwnedSymbol</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>OwnedWhenTrackedReceiver</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>notOwned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>K</name> <operator>==</operator> <name>NotOwnedSymbol</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RetEffect</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>K</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>K</name></name> <operator>&amp;&amp;</operator> <name>O</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>O</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>RetEffect</name></type> <name>MakeOwnedWhenTrackedReceiver</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RetEffect</name><argument_list>(<argument><expr><name>OwnedWhenTrackedReceiver</name></expr></argument>, <argument><expr><name>ObjKind</name><operator>::</operator><name>ObjC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RetEffect</name></type> <name>MakeOwned</name><parameter_list>(<parameter><decl><type><name>ObjKind</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RetEffect</name><argument_list>(<argument><expr><name>OwnedSymbol</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>RetEffect</name></type> <name>MakeNotOwned</name><parameter_list>(<parameter><decl><type><name>ObjKind</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RetEffect</name><argument_list>(<argument><expr><name>NotOwnedSymbol</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>RetEffect</name></type> <name>MakeNoRet</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RetEffect</name><argument_list>(<argument><expr><name>NoRet</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>RetEffect</name></type> <name>MakeNoRetHard</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RetEffect</name><argument_list>(<argument><expr><name>NoRetHard</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCSummaryKey</name> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name><modifier>*</modifier></type> <name>II</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Selector</name></type> <name>S</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>ObjCSummaryKey</name><argument_list>(<argument>IdentifierInfo* ii</argument>, <argument>Selector s</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>S</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ObjCSummaryKey</name><argument_list>(<argument>const ObjCInterfaceDecl *d</argument>, <argument>Selector s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>II</name><argument_list>(<argument><expr><name>d</name> <operator>?</operator> <call><name><name>d</name><operator>-&gt;</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>S</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ObjCSummaryKey</name><argument_list>(<argument>Selector s</argument>)</argument_list></macro>
<operator>:</operator> <call><name>II</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>S</name><argument_list>(<argument>s</argument>)</argument_list></macro> <expr><block>{}</block>

<name>IdentifierInfo</name> <operator>*</operator><macro><name>getIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>II</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Selector</name> <macro><name>getSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>S</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>ento</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>




<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>FoldingSetTrait</name><argument_list type="generic">&lt;<argument><expr><name>ArgEffect</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>const ArgEffect X</argument>, <argument>FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name><name>X</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name><name>X</name><operator>.</operator><name>getObjKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>FoldingSetTrait</name><argument_list type="generic">&lt;<argument><expr><name>RetEffect</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>const RetEffect &amp;X</argument>, <argument>FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name><name>X</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name><name>X</name><operator>.</operator><name>getObjKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>ObjCSummaryKey</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>ObjCSummaryKey</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>Selector</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>ObjCSummaryKey</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>Selector</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const ObjCSummaryKey &amp;V</argument>)</argument_list></macro> <block>{
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name><operator>*</operator></expr></argument>, <argument><expr><name>Selector</name></expr></argument>&gt;</argument_list></name> <name>PairTy</name></expr>;</expr_stmt></typedef></block></expr>
<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>PairTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><call><name>PairTy</name><argument_list>(<argument><expr><call><name><name>V</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>V</name><operator>.</operator><name>getSelector</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCSummaryKey</name><modifier>&amp;</modifier></type> <name>LHS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCSummaryKey</name><modifier>&amp;</modifier></type> <name>RHS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>getSelector</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getSelector</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}


namespace <macro><name>clang</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>



<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>ArgEffect</name></expr></argument>&gt;</argument_list></name> <name>ArgEffects</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>class</name></type> <name>RetainSummary</name> <block>{<block_content>



<decl_stmt><decl><type><name>ArgEffects</name></type> <name>Args</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ArgEffect</name></type> <name>DefaultArgEffect</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ArgEffect</name></type> <name>Receiver</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ArgEffect</name></type> <name>This</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RetEffect</name></type> <name>Ret</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>RetainSummary</name><argument_list>(<argument>ArgEffects A</argument>,
<argument>RetEffect R</argument>,
<argument>ArgEffect defaultEff</argument>,
<argument>ArgEffect ReceiverEff</argument>,
<argument>ArgEffect ThisEff</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Args</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DefaultArgEffect</name><argument_list>(<argument><expr><name>defaultEff</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Receiver</name><argument_list>(<argument><expr><name>ReceiverEff</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>This</name><argument_list>(<argument><expr><name>ThisEff</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Ret</name><argument_list>(<argument>R</argument>)</argument_list></macro> <expr><block>{}</block>



<name>ArgEffect</name> <macro><name>getArg</name><argument_list>(<argument>unsigned idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>ArgEffect</name> <modifier>*</modifier></type><name>AE</name> <init>= <expr><call><name><name>Args</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>AE</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name>DefaultArgEffect</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addArg</name><argument_list>(<argument><expr><name>ArgEffects</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator><name>af</name></expr></argument>, <argument><expr><name>unsigned</name> <name>idx</name></expr></argument>, <argument><expr><name>ArgEffect</name> <name>e</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>Args</name> <operator>=</operator> <call><name><name>af</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>Args</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>setDefaultArgEffect</name><parameter_list>(<parameter><decl><type><name>ArgEffect</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>DefaultArgEffect</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>RetEffect</name> <macro><name>getRetEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ret</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setRetEffect</name><parameter_list>(<parameter><decl><type><name>RetEffect</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Ret</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt> </block_content>}</block></function>



<function><type><name>void</name></type> <name>setReceiverEffect</name><parameter_list>(<parameter><decl><type><name>ArgEffect</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Receiver</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>ArgEffect</name> <macro><name>getReceiverEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Receiver</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>ArgEffect</name> <macro><name>getThisEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>This</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ArgEffect</name> <macro><name>getDefaultEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefaultArgEffect</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setThisEffect</name><parameter_list>(<parameter><decl><type><name>ArgEffect</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>This</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isNoop</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Ret</name> <operator>==</operator> <name>RetEffect</name><operator>::</operator><call><name>MakeNoRet</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Receiver</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DoNothing</name>
<operator>&amp;&amp;</operator> <call><name><name>DefaultArgEffect</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MayEscape</name> <operator>&amp;&amp;</operator> <call><name><name>This</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>DoNothing</name>
<operator>&amp;&amp;</operator> <call><name><name>Args</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RetainSummary</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Args</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Args</name></name> <operator>&amp;&amp;</operator> <name>DefaultArgEffect</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>DefaultArgEffect</name></name> <operator>&amp;&amp;</operator>
<name>Receiver</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Receiver</name></name> <operator>&amp;&amp;</operator> <name>This</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>This</name></name> <operator>&amp;&amp;</operator> <name>Ret</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Ret</name></name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name><operator>&amp;</operator> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>DefaultArgEffect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>Receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>This</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>Ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSimple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Args</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ArgEffects</name> <macro><name>getArgEffects</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Args</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>ArgEffect</name> <macro><name>getDefaultArgEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefaultArgEffect</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>RetainSummaryManager</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCSummaryCache</name> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>ObjCSummaryKey</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>RetainSummary</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>MapTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>MapTy</name></type> <name>M</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>ObjCSummaryCache</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type> <name>find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>ObjCSummaryKey</name></type> <name>K</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>M</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>







<for>for <control>(<init><decl><type><name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>C</name><init>=<expr><call><name><name>D</name><operator>-&gt;</operator><name>getSuperClass</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</init><condition>;</condition> <incr><expr><name>C</name><operator>=</operator><call><name><name>C</name><operator>-&gt;</operator><name>getSuperClass</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>I</name> <operator>=</operator> <call><name><name>M</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<decl_stmt><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name> <init>= <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><name>K</name></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
<return>return <expr><name>Summ</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>find</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name><modifier>*</modifier></type> <name>II</name></decl></parameter>, <parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>M</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>II</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>I</name> <operator>=</operator> <call><name><name>M</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>I</name> <operator>==</operator> <call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nullptr</name></expr> </then><else>: <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>ObjCSummaryKey</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>M</name><index>[<expr><name>K</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>M</name><index>[ <expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ]</index></name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RetainSummaryTemplate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RetainSummaryManager</name> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>RetainSummary</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<name>FuncSummariesTy</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><name>ObjCSummaryCache</name></type> <name>ObjCMethodSummariesTy</name>;</typedef>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>FoldingSetNodeWrapper</name><argument_list type="generic">&lt;<argument><expr><name>RetainSummary</name></expr></argument>&gt;</argument_list></name> <name>CachedSummaryNode</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ARCEnabled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>TrackObjCAndCFObjects</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>TrackOSObjects</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FuncSummariesTy</name></type> <name>FuncSummaries</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ObjCMethodSummariesTy</name></type> <name>ObjCClassMethodSummaries</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ObjCMethodSummariesTy</name></type> <name>ObjCMethodSummaries</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>BPAlloc</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ArgEffects</name><operator>::</operator><name>Factory</name> <name>AF</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>RetEffect</name></type> <name>ObjCAllocRetE</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RetEffect</name></type> <name>ObjCInitRetE</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>CachedSummaryNode</name></expr></argument>&gt;</argument_list></name> <name>SimpleSummaries</name></expr>;</expr_stmt>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getOSSummaryCreateRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getOSSummaryGetRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getOSSummaryRetainRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getOSSummaryReleaseRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getOSSummaryFreeRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getUnarySummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name><modifier>*</modifier></type> <name>FT</name></decl></parameter>,
<parameter><decl><type><name>ArgEffectKind</name></type> <name>AE</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getCFSummaryCreateRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getCFSummaryGetRule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getCFCreateGetRuleSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getPersistentSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>&amp;</modifier></type><name>OldSumm</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type>
<name>getPersistentSummary</name><parameter_list>(<parameter><decl><type><name>RetEffect</name></type> <name>RetEff</name></decl></parameter>, <parameter><decl><type><name>ArgEffects</name></type> <name>ScratchArgs</name></decl></parameter>,
<parameter><decl><type><name>ArgEffect</name></type> <name>ReceiverEff</name> <init>= <expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>DoNothing</name></expr></argument>)</argument_list></call></expr></init></decl></parameter>,
<parameter><decl><type><name>ArgEffect</name></type> <name>DefaultEff</name> <init>= <expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>MayEscape</name></expr></argument>)</argument_list></call></expr></init></decl></parameter>,
<parameter><decl><type><name>ArgEffect</name></type> <name>ThisEff</name> <init>= <expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>DoNothing</name></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RetainSummary</name></type> <name>Summ</name><argument_list>(<argument><expr><name>ScratchArgs</name></expr></argument>, <argument><expr><name>RetEff</name></expr></argument>, <argument><expr><name>DefaultEff</name></expr></argument>, <argument><expr><name>ReceiverEff</name></expr></argument>, <argument><expr><name>ThisEff</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>getPersistentSummary</name><argument_list>(<argument><expr><name>Summ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getDoNothingSummary</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getPersistentSummary</name><argument_list>(<argument><expr><name>RetEffect</name><operator>::</operator><call><name>MakeNoRet</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ArgEffects</name><argument_list>(<argument><expr><call><name><name>AF</name><operator>.</operator><name>getEmptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>DoNothing</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>DoNothing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getDefaultSummary</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getPersistentSummary</name><argument_list>(<argument><expr><name>RetEffect</name><operator>::</operator><call><name>MakeNoRet</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>ArgEffects</name><argument_list>(<argument><expr><call><name><name>AF</name><operator>.</operator><name>getEmptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>DoNothing</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>MayEscape</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getPersistentStopSummary</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getPersistentSummary</name><argument_list>(
<argument><expr><name>RetEffect</name><operator>::</operator><call><name>MakeNoRet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ArgEffects</name><argument_list>(<argument><expr><call><name><name>AF</name><operator>.</operator><name>getEmptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>StopTracking</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ArgEffect</name><argument_list>(<argument><expr><name>StopTracking</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>InitializeClassMethodSummaries</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeMethodSummaries</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>addNSObjectClsMethSummary</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ObjCClassMethodSummaries</name><index>[<expr><name>S</name></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addNSObjectMethSummary</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ObjCMethodSummaries</name><index>[<expr><name>S</name></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addClassMethSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>Cls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isNullary</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name><modifier>*</modifier></type> <name>ClsII</name> <init>= <expr><operator>&amp;</operator><call><name><name>Ctx</name><operator>.</operator><name>Idents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Selector</name></type> <name>S</name> <init>= <expr><ternary><condition><expr><name>isNullary</name></expr> ?</condition><then> <expr><call><name>GetNullarySelector</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>GetUnarySelector</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ObjCClassMethodSummaries</name><index>[<expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>ClsII</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addInstMethSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>Cls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>nullaryName</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name><modifier>*</modifier></type> <name>ClsII</name> <init>= <expr><operator>&amp;</operator><call><name><name>Ctx</name><operator>.</operator><name>Idents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Selector</name></type> <name>S</name> <init>= <expr><call><name>GetNullarySelector</name><argument_list>(<argument><expr><name>nullaryName</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ObjCMethodSummaries</name><index>[<expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>ClsII</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Keywords</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addMethodSummary</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>ClsII</name></decl></parameter>, <parameter><decl><type><name>ObjCMethodSummariesTy</name> <modifier>&amp;</modifier></type><name>Summaries</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>, <parameter><decl><type><name>Keywords</name> <modifier>*</modifier><modifier>...</modifier></type> <name>Kws</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Selector</name></type> <name>S</name> <init>= <expr><call><name>getKeywordSelector</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Kws</name><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Summaries</name><index>[<expr><call><name>ObjCSummaryKey</name><argument_list>(<argument><expr><name>ClsII</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>Summ</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Keywords</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addInstMethSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Cls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>,
<parameter><decl><type><name>Keywords</name> <modifier>*</modifier><modifier>...</modifier></type> <name>Kws</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addMethodSummary</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>Ctx</name><operator>.</operator><name>Idents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Cls</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ObjCMethodSummaries</name></expr></argument>, <argument><expr><name>Summ</name></expr></argument>, <argument><expr><name>Kws</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Keywords</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addClsMethSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Cls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>,
<parameter><decl><type><name>Keywords</name> <modifier>*</modifier><modifier>...</modifier></type> <name>Kws</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addMethodSummary</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>Ctx</name><operator>.</operator><name>Idents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Cls</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ObjCClassMethodSummaries</name></expr></argument>, <argument><expr><name>Summ</name></expr></argument>,
<argument><expr><name>Kws</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Keywords</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addClsMethSummary</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>Summ</name></decl></parameter>,
<parameter><decl><type><name>Keywords</name> <modifier>*</modifier><modifier>...</modifier></type> <name>Kws</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addMethodSummary</name><argument_list>(<argument><expr><name>II</name></expr></argument>, <argument><expr><name>ObjCClassMethodSummaries</name></expr></argument>, <argument><expr><name>Summ</name></expr></argument>, <argument><expr><name>Kws</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type> <name>generateSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>AllowAnnotations</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getSummaryForOSObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>FName</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>RetTy</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getSummaryForObjCOrCFObject</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>FName</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>RetTy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name> <modifier>*</modifier></type><name>FT</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>AllowAnnotations</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>applyParamAnnotationEffect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>parm_idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>RetainSummaryTemplate</name> <modifier>&amp;</modifier></type><name>Template</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>RetainSummaryManager</name><argument_list>(<argument>ASTContext &amp;ctx</argument>, <argument>bool trackObjCAndCFObjects</argument>,
<argument>bool trackOSObjects</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ARCEnabled</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><call><name><name>Ctx</name><operator>.</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ObjCAutoRefCount</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>TrackObjCAndCFObjects</name><argument_list>(<argument><expr><name>trackObjCAndCFObjects</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>TrackOSObjects</name><argument_list>(<argument><expr><name>trackOSObjects</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AF</name><argument_list>(<argument><expr><name>BPAlloc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ObjCAllocRetE</name><argument_list>(<argument><expr><ternary><condition><expr><name>ARCEnabled</name></expr> ?</condition><then> <expr><name>RetEffect</name><operator>::</operator><call><name>MakeNotOwned</name><argument_list>(<argument><expr><name>ObjKind</name><operator>::</operator><name>ObjC</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>RetEffect</name><operator>::</operator><call><name>MakeOwned</name><argument_list>(<argument><expr><name>ObjKind</name><operator>::</operator><name>ObjC</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ObjCInitRetE</name><argument_list>(<argument>ARCEnabled ? RetEffect::MakeNotOwned(ObjKind::ObjC)
: RetEffect::MakeOwnedWhenTrackedReceiver()</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>InitializeClassMethodSummaries</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>InitializeMethodSummaries</name><argument_list>()</argument_list></call></expr>;
}</block>

enum <name>class</name> <name>BehaviorSummary</name> <block>{

<expr><name>NoOp</name></expr>,


<expr><name>Identity</name></expr>,


<expr><name>IdentityThis</name></expr>,


<expr><name>IdentityOrZero</name></expr>
}</block></expr>;</expr_stmt>

<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>BehaviorSummary</name></expr></argument>&gt;</argument_list></name></type> <name>canEval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallExpr</name> <modifier>*</modifier></type><name>CE</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>hasTrustedImplementationAnnotation</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isKnownSmartPointer</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>QT</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isTrustedReferenceCountImplementation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getSummary</name><argument_list>(<argument><expr><name>AnyCall</name> <name>C</name></expr></argument>,
<argument><expr><name>bool</name> <name>HasNonZeroCallbackArg</name><operator>=</operator><name>false</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsReceiverUnconsumedSelf</name><operator>=</operator><name>false</name></expr></argument>,
<argument><expr><name>QualType</name> <name>ReceiverType</name><operator>=</operator><block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>RetEffect</name> <macro><name>getObjAllocRetEffect</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ObjCAllocRetE</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>



<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getMethodSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getFunctionSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getMethodSummary</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>ID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>RetTy</name></decl></parameter>,
<parameter><decl><type><name>ObjCMethodSummariesTy</name> <modifier>&amp;</modifier></type><name>CachedSummaries</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type>
<name>getInstanceMethodSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMessageExpr</name> <modifier>*</modifier></type><name>ME</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>ReceiverType</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getClassMethodSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMessageExpr</name> <modifier>*</modifier></type><name>ME</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>getStandardMethodSummary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>RetTy</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RetEffect</name></expr></argument>&gt;</argument_list></name></type> <name>getRetEffectFromAnnotations</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>RetTy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>updateSummaryFromAnnotations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Summ</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>updateSummaryFromAnnotations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Summ</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>updateSummaryForNonZeroCallbackArg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>AnyCall</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>updateSummaryForReceiverUnconsumedSelf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>updateSummaryForArgumentTypes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnyCall</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>RS</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ObjKind</name></expr></argument>&gt;</argument_list></name></type> <name>hasAnyEnabledAttrOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>QT</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T1</name></expr></argument>, <argument><expr><name>class</name> <name>T2</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Others</name></expr></argument>&gt;</argument_list></name>
<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ObjKind</name></expr></argument>&gt;</argument_list></name></type> <name>hasAnyEnabledAttrOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>QT</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>RetainSummaryTemplate</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>RetainSummaryTemplate</name> <block>{<block_content>
<decl_stmt><decl><type><name>RetainSummaryManager</name> <modifier>&amp;</modifier></type><name>Manager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RetainSummary</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>RealSummary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RetainSummary</name></type> <name>ScratchSummary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Accessed</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>RetainSummaryTemplate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RetainSummary</name> <operator>*</operator><operator>&amp;</operator><name>real</name></expr></argument>, <argument><expr><name>RetainSummaryManager</name> <operator>&amp;</operator><name>mgr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Manager</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RealSummary</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ScratchSummary</name><argument_list>(<argument><expr><operator>*</operator><name>real</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Accessed</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>RetainSummaryTemplate</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Accessed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RealSummary</name> <operator>=</operator> <call><name><name>Manager</name><operator>.</operator><name>getPersistentSummary</name></name><argument_list>(<argument><expr><name>ScratchSummary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>RetainSummary</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Accessed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>ScratchSummary</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>RetainSummary</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> <block>{<block_content>
<expr_stmt><expr><name>Accessed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>ScratchSummary</name></expr>;</return>
</block_content>}</block></block></decl></decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
