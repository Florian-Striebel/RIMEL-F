<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ComputeDependence.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMPUTE_DEPENDENCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMPUTE_DEPENDENCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DependenceFlags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ExceptionSpecificationType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FullExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OpaqueValueExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParenExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UnaryOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UnaryExprOrTypeTraitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ArraySubscriptExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MatrixSubscriptExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompoundLiteralExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CastExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BinaryOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConditionalOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BinaryConditionalOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StmtExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConvertVectorExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VAArgExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ChooseExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NoInitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ArrayInitLoopExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ImplicitValueInitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InitListExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExtVectorElementExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AsTypeExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecoveryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRewrittenBinaryOperator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXStdInitializerListExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXTypeidExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MSPropertyRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MSPropertySubscriptExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXUuidofExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXThisExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXThrowExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBindTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXScalarValueInitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDeleteExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ArrayTypeTraitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExpressionTraitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXNoexceptExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PackExpansionExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SubstNonTypeTemplateParmExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CoroutineSuspendExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DependentCoawaitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXNewExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXPseudoDestructorExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OverloadExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DependentScopeDeclRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDefaultInitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDefaultArgExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LambdaExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXUnresolvedConstructExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDependentScopeMemberExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MaterializeTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXFoldExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeTraitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConceptSpecializationExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SYCLUniqueStableNameExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PredefinedExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CallExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OffsetOfExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemberExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ShuffleVectorExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GenericSelectionExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DesignatedInitExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParenListExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PseudoObjectExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OMPArraySectionExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OMPArrayShapingExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OMPIteratorExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCArrayLiteral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCDictionaryLiteral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCBoxedExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCEncodeExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIvarRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCPropertyRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCSubscriptRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIsaExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIndirectCopyRestoreExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMessageExpr</name></decl>;</decl_stmt>



<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>FullExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OpaqueValueExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ParenExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>UnaryOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>UnaryExprOrTypeTraitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ArraySubscriptExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>MatrixSubscriptExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CompoundLiteralExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CastExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>BinaryOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ConditionalOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>BinaryConditionalOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>StmtExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>TemplateDepth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ConvertVectorExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>VAArgExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ChooseExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>NoInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ArrayInitLoopExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ImplicitValueInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>InitListExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ExtVectorElementExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>BlockExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>AsTypeExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>DeclRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>RecoveryExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXRewrittenBinaryOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXStdInitializerListExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXTypeidExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>MSPropertyRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>MSPropertySubscriptExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXUuidofExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXThisExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXThrowExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXScalarValueInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXDeleteExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ArrayTypeTraitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ExpressionTraitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXNoexceptExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>CanThrowResult</name></type> <name>CT</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>PackExpansionExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>SubstNonTypeTemplateParmExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CoroutineSuspendExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>DependentCoawaitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXNewExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXPseudoDestructorExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OverloadExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>KnownDependent</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>KnownInstantiationDependent</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>KnownContainsUnexpandedParameterPack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>DependentScopeDeclRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXConstructExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXDefaultInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXDefaultArgExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>LambdaExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ContainsUnexpandedParameterPack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXUnresolvedConstructExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXDependentScopeMemberExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>MaterializeTemporaryExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>CXXFoldExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>TypeTraitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ConceptSpecializationExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ValueDependent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>SYCLUniqueStableNameExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>PredefinedExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>ExprDependence</name></type> <name>computeDependence</name><argument_list>(<argument><expr><name>CallExpr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>PreArgs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OffsetOfExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>MemberExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ShuffleVectorExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>GenericSelectionExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ContainsUnexpandedPack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>DesignatedInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ParenListExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>PseudoObjectExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>AtomicExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OMPArraySectionExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OMPArrayShapingExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>OMPIteratorExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCArrayLiteral</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCDictionaryLiteral</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCBoxedExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCEncodeExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCIvarRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCPropertyRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCSubscriptRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCIsaExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCIndirectCopyRestoreExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ExprDependence</name></type> <name>computeDependence</name><parameter_list>(<parameter><decl><type><name>ObjCMessageExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
