<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTMutationListener.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTMUTATIONLISTENER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTMUTATIONLISTENER_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ClassTemplateDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ClassTemplateSpecializationDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstructorUsingShadowDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDestructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionTemplateDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCCategoryDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCContainerDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCPropertyDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParmVarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarTemplateDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarTemplateSpecializationDecl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ASTMutationListener</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ASTMutationListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>CompletedTagDefinition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>AddedVisibleDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>AddedCXXImplicitMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>AddedCXXTemplateSpecialization</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ClassTemplateDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ClassTemplateSpecializationDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type>
<name>AddedCXXTemplateSpecialization</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarTemplateDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VarTemplateSpecializationDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>AddedCXXTemplateSpecialization</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionTemplateDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>ResolvedExceptionSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>DeducedReturnType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>ReturnType</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>virtual</name> <name>void</name></type> <name>ResolvedOperatorDelete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDestructorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>Delete</name></decl></parameter>,
<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>ThisArg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>CompletedImplicitDefinition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>InstantiationRequested</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ValueDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>VariableDefinitionInstantiated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>FunctionDefinitionInstantiated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>DefaultArgumentInstantiated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>DefaultMemberInitializerInstantiated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>AddedObjCCategoryToInterface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCategoryDecl</name> <modifier>*</modifier></type><name>CatD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>IFD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>DeclarationMarkedUsed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>DeclarationMarkedOpenMPThreadPrivate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>DeclarationMarkedOpenMPDeclareTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Attr</name> <modifier>*</modifier></type><name>Attr</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>DeclarationMarkedOpenMPAllocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Attr</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>RedefinedHiddenDefinition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>M</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>AddedAttributeToRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Attr</name> <modifier>*</modifier></type><name>Attr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>Record</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
