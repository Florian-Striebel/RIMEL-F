<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/CodeGenOptions.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_CODEGENOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_CODEGENOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DebugInfoOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/XRayInstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FloatingPointMode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CodeGen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Target/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Transforms/Instrumentation/AddressSanitizerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptionsBase</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CompilerInvocation</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned Name : Bits;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CodeGenOptions.def"</cpp:file></cpp:include>

<label><name>protected</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned Name : Bits;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CodeGenOptions.def"</cpp:file></cpp:include>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name> <range>: <expr><name>public</name> <name>CodeGenOptionsBase</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>InliningMethod</name> <block>{
<expr><name>NormalInlining</name></expr>,
<expr><name>OnlyHintInlining</name></expr>,
<expr><name>OnlyAlwaysInlining</name></expr>
}</block></expr>;

enum <expr><name>VectorLibrary</name> <block>{
<expr><name>NoLibrary</name></expr>,
<expr><name>Accelerate</name></expr>,
<expr><name>LIBMVEC</name></expr>,
<expr><name>MASSV</name></expr>,
<expr><name>SVML</name></expr>,
<expr><name>Darwin_libsystem_m</name></expr>
}</block></expr>;

enum <expr><name>ObjCDispatchMethodKind</name> <block>{
<expr><name>Legacy</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>NonLegacy</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>Mixed</name> <operator>=</operator> <literal type="number">2</literal></expr>
}</block></expr>;

enum <expr><name>TLSModel</name> <block>{
<expr><name>GeneralDynamicTLSModel</name></expr>,
<expr><name>LocalDynamicTLSModel</name></expr>,
<expr><name>InitialExecTLSModel</name></expr>,
<expr><name>LocalExecTLSModel</name></expr>
}</block></expr>;

enum <expr><name>StructReturnConventionKind</name> <block>{
<expr><name>SRCK_Default</name></expr>,
<expr><name>SRCK_OnStack</name></expr>,
<expr><name>SRCK_InRegs</name></expr>
}</block></expr>;

enum <expr><name>ProfileInstrKind</name> <block>{
<expr><name>ProfileNone</name></expr>,
<expr><name>ProfileClangInstr</name></expr>,

<expr><name>ProfileIRInstr</name></expr>,
<expr><name>ProfileCSIRInstr</name></expr>,
}</block></expr>;

enum <expr><name>EmbedBitcodeKind</name> <block>{
<expr><name>Embed_Off</name></expr>,
<expr><name>Embed_All</name></expr>,
<expr><name>Embed_Bitcode</name></expr>,
<expr><name>Embed_Marker</name></expr>
}</block></expr>;















<expr><name>std</name><operator>::</operator><name>string</name> <name>BBSections</name></expr>;





<expr><name>std</name><operator>::</operator><name>string</name> <name>BinutilsVersion</name></expr>;

enum <expr><name>class</name> <name>FramePointerKind</name> <block>{
<expr><name>None</name></expr>,
<expr><name>NonLeaf</name></expr>,
<expr><name>All</name></expr>,
}</block></expr>;

enum <expr><name>FiniteLoopsKind</name> <block>{
<expr><name>Language</name></expr>,
<expr><name>Always</name></expr>,
<expr><name>Never</name></expr>,
}</block></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>CodeModel</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>CoverageDataFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>CoverageNotesFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>ProfileFilterFiles</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>ProfileExcludeFiles</name></expr>;


<expr><name>char</name> <name><name>CoverageVersion</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DebugPass</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>DebugCompilationDir</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>CoverageCompilationDir</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>DwarfDebugFlags</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>RecordCommandLine</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>DebugPrefixMap</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CoveragePrefixMap</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>FloatABI</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>DIBugsReportFilePath</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>DenormalMode</name> <name>FPDenormalMode</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>DenormalMode</name><operator>::</operator><call><name>getIEEE</name><argument_list>()</argument_list></call></expr>;


<expr><name>llvm</name><operator>::</operator><name>DenormalMode</name> <name>FP32DenormalMode</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>DenormalMode</name><operator>::</operator><call><name>getIEEE</name><argument_list>()</argument_list></call></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>LimitFloatPrecision</name></expr>;

struct <expr><name>BitcodeFileToLink</name> <block>{

<expr><name>std</name><operator>::</operator><name>string</name> <name>Filename</name></expr>;



<expr><name>bool</name> <name>PropagateAttrs</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>bool</name> <name>Internalize</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>unsigned</name> <name>LinkFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BitcodeFileToLink</name></expr></argument>&gt;</argument_list></name> <name>LinkBitcodeFiles</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>MainFileName</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>SplitDwarfFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>SplitDwarfOutput</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>Reloc</name><operator>::</operator><name>Model</name> <name>RelocationModel</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>TrapFuncName</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>DependentLibraries</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>LinkerOptions</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>InstrProfileOutput</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>SampleProfileFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>MemoryProfileOutput</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>ProfileInstrumentUsePath</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>ProfileRemappingFile</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>ThinLTOIndexFile</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>ThinLinkBitcodeFile</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>SaveTempsFilePrefix</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>CudaGpuBinaryFileName</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>OptRecordFile</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>OptRecordPasses</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>OptRecordFormat</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>SymbolPartition</name></expr>;

enum <expr><name>RemarkKind</name> <block>{
<expr><name>RK_Missing</name></expr>,
<expr><name>RK_Enabled</name></expr>,
<expr><name>RK_EnabledEverything</name></expr>,
<expr><name>RK_Disabled</name></expr>,
<expr><name>RK_DisabledEverything</name></expr>,
<expr><name>RK_WithPattern</name></expr>,
}</block></expr>;


struct <expr><name>OptRemark</name> <block>{
<expr><name>RemarkKind</name> <name>Kind</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Pattern</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Regex</name></expr></argument>&gt;</argument_list></name> <name>Regex</name></expr>;


<expr><call><name>OptRemark</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>RK_Missing</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Pattern</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>, <macro><name>Regex</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>



<name>bool</name> <macro><name>hasValidPattern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Regex</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block>


<name>bool</name> <macro><name>patternMatches</name><argument_list>(<argument>StringRef String</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasValidPattern</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Regex</name><operator>-&gt;</operator><name>match</name></name><argument_list>(<argument><expr><name>String</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;





<expr><name>OptRemark</name> <name>OptimizationRemark</name></expr>;





<expr><name>OptRemark</name> <name>OptimizationRemarkMissed</name></expr>;






<expr><name>OptRemark</name> <name>OptimizationRemarkAnalysis</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>RewriteMapFiles</name></expr>;



<expr><name>SanitizerSet</name> <name>SanitizeRecover</name></expr>;


<expr><name>SanitizerSet</name> <name>SanitizeTrap</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <name>CmdArgs</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>NoBuiltinFuncs</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Reciprocals</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>PreferVectorWidth</name></expr>;


<expr><name>XRayInstrSet</name> <name>XRayInstrumentationBundle</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>DefaultFunctionAttrs</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>PassPlugins</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SanitizeCoverageAllowlistFiles</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>StackProtectorGuard</name></expr>;





<expr><name>std</name><operator>::</operator><name>string</name> <name>StackProtectorGuardReg</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SanitizeCoverageIgnorelistFiles</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>StackUsageOutput</name></expr>;



<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Argv0</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>CommandLineArgs</name></expr>;














<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>DiagnosticsHotnessThreshold</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>public</name><operator>:</operator>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_CODEGENOPT</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Bits</name></type></parameter>, <parameter><type><name>Default</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type get##Name() const { return static_cast&lt;Type&gt;(Name); } void set##Name(Type Value) { Name = static_cast&lt;unsigned&gt;(Value); }</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CodeGenOptions.def"</cpp:file></cpp:include>

<call><name>CodeGenOptions</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getNoBuiltinFuncs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NoBuiltinFuncs</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileClangInstr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getProfileInstr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileClangInstr</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileIRInstr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getProfileInstr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileIRInstr</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileCSIRInstr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getProfileInstr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileCSIRInstr</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileClangUse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getProfileUse</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileClangInstr</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileIRUse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getProfileUse</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileIRInstr</name> <operator>||</operator>
<call><name>getProfileUse</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileCSIRInstr</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasProfileCSIRUse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getProfileUse</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ProfileCSIRInstr</name></expr>;</return> }</block>


<name>bool</name> <macro><name>hasReducedDebugInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getDebugInfo</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>codegenoptions</name><operator>::</operator><name>DebugInfoConstructor</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasMaybeUnusedDebugInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getDebugInfo</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>codegenoptions</name><operator>::</operator><name>UnusedTypeInfo</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>hasSanitizeCoverage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SanitizeCoverageType</name> <operator>||</operator> <name>SanitizeCoverageIndirectCalls</name> <operator>||</operator>
<name>SanitizeCoverageTraceCmp</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
