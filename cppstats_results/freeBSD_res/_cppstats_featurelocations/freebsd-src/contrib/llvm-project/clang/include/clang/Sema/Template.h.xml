<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Template.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_TEMPLATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_TEMPLATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BindingDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>EnumDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParmVarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypedefNameDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeSourceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TemplateSubstitutionKind</name> <range>: <expr><name>char</name> <block>{


<expr><name>Specialization</name></expr>,



<expr><name>Rewrite</name></expr>,
}</block></expr></range></decl>;</decl_stmt>




















<decl_stmt><decl><type><name>class</name></type> <name>MultiLevelTemplateArgumentList</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>ArgList</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ArgList</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>TemplateArgumentLists</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumRetainedOuterLevels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>TemplateSubstitutionKind</name></type> <name>Kind</name> <init>= <expr><name>TemplateSubstitutionKind</name><operator>::</operator><name>Specialization</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>MultiLevelTemplateArgumentList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function><type><name>explicit</name></type>
<name>MultiLevelTemplateArgumentList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentList</name> <modifier>&amp;</modifier></type><name>TemplateArgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addOuterTemplateArguments</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TemplateArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setKind</name><parameter_list>(<parameter><decl><type><name>TemplateSubstitutionKind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Kind</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>TemplateSubstitutionKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isRewrite</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>TemplateSubstitutionKind</name><operator>::</operator><name>Rewrite</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getNumLevels</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TemplateArgumentLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>NumRetainedOuterLevels</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getNumSubstitutedLevels</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TemplateArgumentLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumRetainedOuterLevels</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumRetainedOuterLevels</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getNewDepth</name><argument_list>(<argument><expr><name>unsigned</name> <name>OldDepth</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>OldDepth</name> <operator>&lt;</operator> <name>NumRetainedOuterLevels</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OldDepth</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OldDepth</name> <operator>&lt;</operator> <call><name>getNumLevels</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NumRetainedOuterLevels</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OldDepth</name> <operator>-</operator> <call><name><name>TemplateArgumentLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>unsigned</name> <name>Depth</name><operator>,</operator> <name>unsigned</name> <name>Index</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>NumRetainedOuterLevels</name> <operator>&lt;=</operator> <name>Depth</name> <operator>&amp;&amp;</operator> <name>Depth</name> <operator>&lt;</operator> <call><name>getNumLevels</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Index</name> <operator>&lt;</operator> <name><name>TemplateArgumentLists</name><index>[<expr><call><name>getNumLevels</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>TemplateArgumentLists</name><index>[<expr><call><name>getNumLevels</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>hasTemplateArgument</name><argument_list>(<argument><expr><name>unsigned</name> <name>Depth</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Index</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Depth</name> <operator>&lt;</operator> <call><name>getNumLevels</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Depth</name> <operator>&lt;</operator> <name>NumRetainedOuterLevels</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Index</name> <operator>&gt;=</operator> <name><name>TemplateArgumentLists</name><index>[<expr><call><name>getNumLevels</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call>(<modifier>*</modifier><name>this</name>)<argument_list>(<argument><expr><name>Depth</name></expr></argument>, <argument><expr><name>Index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>setArgument</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Depth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>,
<parameter><decl><type><name>TemplateArgument</name></type> <name>Arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NumRetainedOuterLevels</name> <operator>&lt;=</operator> <name>Depth</name> <operator>&amp;&amp;</operator> <name>Depth</name> <operator>&lt;</operator> <call><name>getNumLevels</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Index</name> <operator>&lt;</operator> <name><name>TemplateArgumentLists</name><index>[<expr><call><name>getNumLevels</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>TemplateArgumentLists</name><index>[<expr><call><name>getNumLevels</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>=</operator> <name>Arg</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addOuterTemplateArguments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentList</name> <modifier>*</modifier></type><name>TemplateArgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addOuterTemplateArguments</name><argument_list>(<argument><expr><call><name>ArgList</name><argument_list>(<argument><expr><call><name><name>TemplateArgs</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>TemplateArgs</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addOuterTemplateArguments</name><parameter_list>(<parameter><decl><type><name>ArgList</name></type> <name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>NumRetainedOuterLevels</name> <operator>&amp;&amp;</operator>
<literal type="string">"substituted args outside retained args?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>TemplateArgumentLists</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>addOuterRetainedLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>NumRetainedOuterLevels</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>addOuterRetainedLevels</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NumRetainedOuterLevels</name> <operator>+=</operator> <name>Num</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>ArgList</name> <operator>&amp;</operator><macro><name>getInnermost</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TemplateArgumentLists</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>TPOC</name> <block>{

<decl><name>TPOC_Call</name></decl>,



<decl><name>TPOC_Conversion</name></decl>,




<decl><name>TPOC_Other</name></decl>
}</block>;</enum>





<decl_stmt><decl><type><name>class</name></type> <name>TemplatePartialOrderingContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>TPOC</name></type> <name>Value</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>TemplatePartialOrderingContext</name><argument_list>(<argument>TPOC Value</argument>)</argument_list></macro> : <macro><name>Value</name><argument_list>(<argument>Value</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>operator</name> <macro><name>TPOC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Value</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DeducedTemplateArgument</name> <range>: <expr><name>public</name> <name>TemplateArgument</name> <block>{


<expr><name>bool</name> <name>DeducedFromArrayBound</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>DeducedTemplateArgument</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<macro><name>DeducedTemplateArgument</name><argument_list>(<argument>const TemplateArgument &amp;Arg</argument>,
<argument>bool DeducedFromArrayBound = false</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>TemplateArgument</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>, <macro><name>DeducedFromArrayBound</name><argument_list>(<argument>DeducedFromArrayBound</argument>)</argument_list></macro> <expr><block>{}</block>



<macro><name>DeducedTemplateArgument</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>,
<argument>const llvm::APSInt &amp;Value</argument>,
<argument>QualType ValueType</argument>,
<argument>bool DeducedFromArrayBound</argument>)</argument_list></macro>
<operator>:</operator> <call><name>TemplateArgument</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>ValueType</name></expr></argument>)</argument_list></call></expr>,
<macro><name>DeducedFromArrayBound</name><argument_list>(<argument>DeducedFromArrayBound</argument>)</argument_list></macro> <expr><block>{}</block>



<name>bool</name> <macro><name>wasDeducedFromArrayBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DeducedFromArrayBound</name></expr>;</return> }</block>



<name>void</name> <macro><name>setDeducedFromArrayBound</name><argument_list>(<argument>bool Deduced</argument>)</argument_list></macro> <block>{
<expr><name>DeducedFromArrayBound</name> <operator>=</operator> <name>Deduced</name></expr>;
}</block>
}</expr>;







<expr><name>class</name> <name>LocalInstantiationScope</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>using</name> <name>DeclArgumentPack</name> <operator>=</operator> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>private</name><operator>:</operator>


<name>Sema</name> <operator>&amp;</operator><name>SemaRef</name></expr>;

<expr><name>using</name> <name>LocalDeclsMap</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>DeclArgumentPack</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr>;



















<expr><name>LocalDeclsMap</name> <name>LocalDecls</name></expr>;


<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DeclArgumentPack</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>ArgumentPacks</name></expr>;




<expr><name>LocalInstantiationScope</name> <operator>*</operator><name>Outer</name></expr>;


<expr><name>bool</name> <name>Exited</name> <operator>=</operator> <name>false</name></expr>;



<expr><name>bool</name> <name>CombineWithOuterScope</name></expr>;



<expr><name>NamedDecl</name> <operator>*</operator><name>PartiallySubstitutedPack</name> <operator>=</operator> <name>nullptr</name></expr>;



<expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>*</operator><name>ArgsInPartiallySubstitutedPack</name></expr>;




<expr><name>unsigned</name> <name>NumArgsInPartiallySubstitutedPack</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>LocalInstantiationScope</name><argument_list>(<argument>Sema &amp;SemaRef</argument>, <argument>bool CombineWithOuterScope = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SemaRef</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Outer</name><argument_list>(<argument><expr><name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name></expr></argument>)</argument_list></call></expr>,
<macro><name>CombineWithOuterScope</name><argument_list>(<argument>CombineWithOuterScope</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name> <operator>=</operator> <name>this</name></expr>;
}</block>

<call><name>LocalInstantiationScope</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LocalInstantiationScope</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>LocalInstantiationScope</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>LocalInstantiationScope</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;

<expr><operator>~</operator><macro><name>LocalInstantiationScope</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>Exit</name><argument_list>()</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><macro><name>getSema</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SemaRef</name></expr>;</return> }</block>


<name>void</name> <macro><name>Exit</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Exited</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><call><name><name>ArgumentPacks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name><name>ArgumentPacks</name><index>[<expr><name>I</name></expr>]</index></name></decl>;</decl_stmt></block_content></block></for>

<name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name> <operator>=</operator> <name>Outer</name></block></expr>;
<expr><name>Exited</name> <operator>=</operator> <name>true</name></expr>;
}</block>



<name>LocalInstantiationScope</name> <operator>*</operator><macro><name>cloneScopes</name><argument_list>(<argument>LocalInstantiationScope *Outermost</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>Outermost</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>



<name>LocalInstantiationScope</name> <operator>*</operator><name>oldScope</name> <operator>=</operator> <name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name></block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LocalInstantiationScope</name> <modifier>*</modifier></type><name>newScope</name> <init>=
<expr><name>new</name> <call><name>LocalInstantiationScope</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>, <argument><expr><name>CombineWithOuterScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>newScope</name><operator>-&gt;</operator><name>Outer</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Outer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newScope</name><operator>-&gt;</operator><name>Outer</name></name> <operator>=</operator> <call><name><name>Outer</name><operator>-&gt;</operator><name>cloneScopes</name></name><argument_list>(<argument><expr><name>Outermost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>newScope</name><operator>-&gt;</operator><name>PartiallySubstitutedPack</name></name> <operator>=</operator> <name>PartiallySubstitutedPack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newScope</name><operator>-&gt;</operator><name>ArgsInPartiallySubstitutedPack</name></name> <operator>=</operator> <name>ArgsInPartiallySubstitutedPack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newScope</name><operator>-&gt;</operator><name>NumArgsInPartiallySubstitutedPack</name></name> <operator>=</operator>
<name>NumArgsInPartiallySubstitutedPack</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>LocalDeclsMap</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>LocalDecls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>E</name> <operator>=</operator> <call><name><name>LocalDecls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name> <init>= <expr><name><name>I</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>DeclArgumentPack</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Stored</name> <operator>=</operator>
<name><name>newScope</name><operator>-&gt;</operator><name>LocalDecls</name><index>[<expr><name>D</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>Decl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Stored</name> <operator>=</operator> <name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Decl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>DeclArgumentPack</name> <modifier>*</modifier></type><name>OldPack</name> <init>= <expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>DeclArgumentPack</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclArgumentPack</name> <modifier>*</modifier></type><name>NewPack</name> <init>= <expr><name>new</name> <call><name>DeclArgumentPack</name><argument_list>(<argument><expr><operator>*</operator><name>OldPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Stored</name> <operator>=</operator> <name>NewPack</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>newScope</name><operator>-&gt;</operator><name>ArgumentPacks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>NewPack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name> <operator>=</operator> <name>oldScope</name></expr>;</expr_stmt>
<return>return <expr><name>newScope</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteScopes</name><parameter_list>(<parameter><decl><type><name>LocalInstantiationScope</name> <modifier>*</modifier></type><name>Scope</name></decl></parameter>,
<parameter><decl><type><name>LocalInstantiationScope</name> <modifier>*</modifier></type><name>Outermost</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>Scope</name> <operator>&amp;&amp;</operator> <name>Scope</name> <operator>!=</operator> <name>Outermost</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LocalInstantiationScope</name> <modifier>*</modifier></type><name>Out</name> <init>= <expr><name><name>Scope</name><operator>-&gt;</operator><name>Outer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>delete</name></type> <name>Scope</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Scope</name> <operator>=</operator> <name>Out</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>DeclArgumentPack</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator>
<call><name>findInstantiationOf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>InstantiatedLocal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Inst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InstantiatedLocalPackArg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>VarDecl</name> <modifier>*</modifier></type><name>Inst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MakeInstantiatedLocalArgPack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>SetPartiallySubstitutedPack</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>Pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>*</modifier></type><name>ExplicitArgs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumExplicitArgs</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>ResetPartiallySubstitutedPack</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>PartiallySubstitutedPack</name> <operator>&amp;&amp;</operator> <literal type="string">"No partially-substituted pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PartiallySubstitutedPack</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ArgsInPartiallySubstitutedPack</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumArgsInPartiallySubstitutedPack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type>
<name>getPartiallySubstitutedPack</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>*</operator><operator>*</operator><name>ExplicitArgs</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>unsigned</name> <operator>*</operator><name>NumExplicitArgs</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>isLocalPackExpansion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
};

<decl_stmt><decl><type><name>class</name></type> <name>TemplateDeclInstantiator</name>
<range>: <expr><name>public</name> <name><name>DeclVisitor</name><argument_list type="generic">&lt;<argument><expr><name>TemplateDeclInstantiator</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>Sema</name> <operator>&amp;</operator><name>SemaRef</name></expr>;
<expr><name>Sema</name><operator>::</operator><name>ArgumentPackSubstitutionIndexRAII</name> <name>SubstIndex</name></expr>;
<expr><name>DeclContext</name> <operator>*</operator><name>Owner</name></expr>;
<expr><specifier>const</specifier> <name>MultiLevelTemplateArgumentList</name> <operator>&amp;</operator><name>TemplateArgs</name></expr>;
<expr><name>Sema</name><operator>::</operator><name>LateInstantiatedAttrVec</name><operator>*</operator> <name>LateAttrs</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>LocalInstantiationScope</name> <operator>*</operator><name>StartingScope</name> <operator>=</operator> <name>nullptr</name></expr>;




<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ClassTemplateDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>ClassTemplatePartialSpecializationDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>OutOfLinePartialSpecs</name></expr>;





<expr><name><name>SmallVector</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>VarTemplateDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>VarTemplatePartialSpecializationDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>OutOfLineVarPartialSpecs</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>TemplateDeclInstantiator</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>SemaRef</name></expr></argument>, <argument><expr><name>DeclContext</name> <operator>*</operator><name>Owner</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MultiLevelTemplateArgumentList</name> <operator>&amp;</operator><name>TemplateArgs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SemaRef</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SubstIndex</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>, <argument><expr><name><name>SemaRef</name><operator>.</operator><name>ArgumentPackSubstitutionIndex</name></name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Owner</name><argument_list>(<argument><expr><name>Owner</name></expr></argument>)</argument_list></call></expr>, <macro><name>TemplateArgs</name><argument_list>(<argument>TemplateArgs</argument>)</argument_list></macro> <expr><block>{}</block>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Decl *Visit ##DERIVED ##Decl(DERIVED ##Decl *D);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_DECL</name><parameter_list>(<parameter><type><name>DECL</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCCONTAINER</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILESCOPEASM</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPORT</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKAGESPEC</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCCOMPATIBLEALIAS</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCMETHOD</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCTYPEPARAM</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCIVAR</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCPROPERTY</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJCPROPERTYIMPL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIFETIMEEXTENDEDTEMPORARY</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTURED</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICITPARAM</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclNodes.inc"</cpp:file></cpp:include>

enum <name>class</name> <name>RewriteKind</name> <block>{ <expr><name>None</name></expr>, <expr><name>RewriteSpaceshipAsEqualEqual</name></expr> }</block></expr>;

<expr><name>void</name> <macro><name>adjustForRewrite</name><argument_list>(<argument>RewriteKind RK</argument>, <argument>FunctionDecl *Orig</argument>, <argument>QualType &amp;T</argument>,
<argument>TypeSourceInfo *&amp;TInfo</argument>,
<argument>DeclarationNameInfo &amp;NameInfo</argument>)</argument_list></macro></expr>;


<expr><name>Decl</name> <operator>*</operator><macro><name>VisitCXXMethodDecl</name><argument_list>(<argument>CXXMethodDecl *D</argument>,
<argument>TemplateParameterList *TemplateParams</argument>,
<argument>Optional&lt;const ASTTemplateArgumentListInfo *&gt;
ClassScopeSpecializationArgs = llvm::None</argument>,
<argument>RewriteKind RK = RewriteKind::None</argument>)</argument_list></macro></expr>;
<expr><name>Decl</name> <operator>*</operator><macro><name>VisitFunctionDecl</name><argument_list>(<argument>FunctionDecl *D</argument>,
<argument>TemplateParameterList *TemplateParams</argument>,
<argument>RewriteKind RK = RewriteKind::None</argument>)</argument_list></macro></expr>;
<expr><name>Decl</name> <operator>*</operator><call><name>VisitDecl</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;
<expr><name>Decl</name> <operator>*</operator><macro><name>VisitVarDecl</name><argument_list>(<argument>VarDecl *D</argument>, <argument>bool InstantiatingVarTemplate</argument>,
<argument>ArrayRef&lt;BindingDecl *&gt; *Bindings = nullptr</argument>)</argument_list></macro></expr>;
<expr><name>Decl</name> <operator>*</operator><call><name>VisitBaseUsingDecls</name><argument_list>(<argument><expr><name>BaseUsingDecl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>BaseUsingDecl</name> <operator>*</operator><name>Inst</name></expr></argument>,
<argument><expr><name>LookupResult</name> <operator>*</operator><name>Lookup</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <macro><name>enableLateAttributeInstantiation</name><argument_list>(<argument>Sema::LateInstantiatedAttrVec *LA</argument>)</argument_list></macro> <block>{
<expr><name>LateAttrs</name> <operator>=</operator> <name>LA</name></expr>;
<expr><name>StartingScope</name> <operator>=</operator> <name><name>SemaRef</name><operator>.</operator><name>CurrentInstantiationScope</name></name></expr>;
}</block>


<name>void</name> <macro><name>disableLateAttributeInstantiation</name><argument_list>()</argument_list></macro> <block>{
<expr><name>LateAttrs</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>StartingScope</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name>LocalInstantiationScope</name> <operator>*</operator><macro><name>getStartingScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StartingScope</name></expr>;</return> }</block>

<name>using</name> <name>delayed_partial_spec_iterator</name> <operator>=</operator> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;
<argument><expr><name>ClassTemplateDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>ClassTemplatePartialSpecializationDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;

<expr><name>using</name> <name>delayed_var_partial_spec_iterator</name> <operator>=</operator> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;
<argument><expr><name>VarTemplateDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>VarTemplatePartialSpecializationDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;





<expr><name>delayed_partial_spec_iterator</name> <macro><name>delayed_partial_spec_begin</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>OutOfLinePartialSpecs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>delayed_var_partial_spec_iterator</name> <macro><name>delayed_var_partial_spec_begin</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>OutOfLineVarPartialSpecs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>





<name>delayed_partial_spec_iterator</name> <macro><name>delayed_partial_spec_end</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>OutOfLinePartialSpecs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>delayed_var_partial_spec_iterator</name> <macro><name>delayed_var_partial_spec_end</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>OutOfLineVarPartialSpecs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>TypeSourceInfo</name> <operator>*</operator><call><name>SubstFunctionType</name><argument_list>(<argument><expr><name>FunctionDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Params</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>InitFunctionInstantiation</name><argument_list>(<argument><expr><name>FunctionDecl</name> <operator>*</operator><name>New</name></expr></argument>, <argument><expr><name>FunctionDecl</name> <operator>*</operator><name>Tmpl</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>InitMethodInstantiation</name><argument_list>(<argument><expr><name>CXXMethodDecl</name> <operator>*</operator><name>New</name></expr></argument>, <argument><expr><name>CXXMethodDecl</name> <operator>*</operator><name>Tmpl</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>SubstDefaultedFunction</name><argument_list>(<argument><expr><name>FunctionDecl</name> <operator>*</operator><name>New</name></expr></argument>, <argument><expr><name>FunctionDecl</name> <operator>*</operator><name>Tmpl</name></expr></argument>)</argument_list></call></expr>;

<expr><name>TemplateParameterList</name> <operator>*</operator>
<call><name>SubstTemplateParams</name><argument_list>(<argument><expr><name>TemplateParameterList</name> <operator>*</operator><name>List</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>SubstQualifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclaratorDecl</name> <operator>*</operator><name>OldDecl</name></expr></argument>,
<argument><expr><name>DeclaratorDecl</name> <operator>*</operator><name>NewDecl</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>SubstQualifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TagDecl</name> <operator>*</operator><name>OldDecl</name></expr></argument>,
<argument><expr><name>TagDecl</name> <operator>*</operator><name>NewDecl</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Decl</name> <operator>*</operator><call><name>VisitVarTemplateSpecializationDecl</name><argument_list>(
<argument><expr><name>VarTemplateDecl</name> <operator>*</operator><name>VarTemplate</name></expr></argument>, <argument><expr><name>VarDecl</name> <operator>*</operator><name>FromVar</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TemplateArgumentListInfo</name> <operator>&amp;</operator><name>TemplateArgsInfo</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <name>Converted</name></expr></argument>,
<argument><expr><name>VarTemplateSpecializationDecl</name> <operator>*</operator><name>PrevDecl</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Decl</name> <operator>*</operator><macro><name>InstantiateTypedefNameDecl</name><argument_list>(<argument>TypedefNameDecl *D</argument>, <argument>bool IsTypeAlias</argument>)</argument_list></macro></expr>;
<expr><name>ClassTemplatePartialSpecializationDecl</name> <operator>*</operator>
<call><name>InstantiateClassTemplatePartialSpecialization</name><argument_list>(
<argument><expr><name>ClassTemplateDecl</name> <operator>*</operator><name>ClassTemplate</name></expr></argument>,
<argument><expr><name>ClassTemplatePartialSpecializationDecl</name> <operator>*</operator><name>PartialSpec</name></expr></argument>)</argument_list></call></expr>;
<expr><name>VarTemplatePartialSpecializationDecl</name> <operator>*</operator>
<call><name>InstantiateVarTemplatePartialSpecialization</name><argument_list>(
<argument><expr><name>VarTemplateDecl</name> <operator>*</operator><name>VarTemplate</name></expr></argument>,
<argument><expr><name>VarTemplatePartialSpecializationDecl</name> <operator>*</operator><name>PartialSpec</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>InstantiateEnumDefinition</name><argument_list>(<argument><expr><name>EnumDecl</name> <operator>*</operator><name>Enum</name></expr></argument>, <argument><expr><name>EnumDecl</name> <operator>*</operator><name>Pattern</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>Decl</name> <operator>*</operator><macro><name>instantiateUnresolvedUsingDecl</name><argument_list>(<argument>T *D</argument>,
<argument>bool InstantiatingPackElement = false</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
