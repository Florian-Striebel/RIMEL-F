<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Lookup.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_LOOKUP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_LOOKUP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/UnresolvedSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXBasePaths</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>LookupResult</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>LookupResultKind</name> <block>{

<decl><name>NotFound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>NotFoundInCurrentInstantiation</name></decl>,



<decl><name>Found</name></decl>,



<decl><name>FoundOverloaded</name></decl>,




<decl><name>FoundUnresolvedValue</name></decl>,




<decl><name>Ambiguous</name></decl>
}</block>;</enum>

<enum>enum <name>AmbiguityKind</name> <block>{












<decl><name>AmbiguousBaseSubobjectTypes</name></decl>,













<decl><name>AmbiguousBaseSubobjects</name></decl>,














<decl><name>AmbiguousReference</name></decl>,
















<decl><name>AmbiguousTagHiding</name></decl>
}</block>;</enum>


<enum>enum <name>TemporaryToken</name> <block>{
<decl><name>Temporary</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>UnresolvedSetImpl</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>

<macro><name>LookupResult</name><argument_list>(<argument>Sema &amp;SemaRef</argument>, <argument>const DeclarationNameInfo &amp;NameInfo</argument>,
<argument>Sema::LookupNameKind LookupKind</argument>,
<argument>Sema::RedeclarationKind Redecl = Sema::NotForRedeclaration</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>SemaPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SemaRef</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NameInfo</name><argument_list>(<argument><expr><name>NameInfo</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LookupKind</name><argument_list>(<argument><expr><name>LookupKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Redecl</name><argument_list>(<argument><expr><name>Redecl</name> <operator>!=</operator> <name>Sema</name><operator>::</operator><name>NotForRedeclaration</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ExternalRedecl</name><argument_list>(<argument><expr><name>Redecl</name> <operator>==</operator> <name>Sema</name><operator>::</operator><name>ForExternalRedeclaration</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Diagnose</name><argument_list>(<argument>Redecl == Sema::NotForRedeclaration</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>configure</name><argument_list>()</argument_list></call></expr>;
}</block>




<macro><name>LookupResult</name><argument_list>(<argument>Sema &amp;SemaRef</argument>, <argument>DeclarationName Name</argument>,
<argument>SourceLocation NameLoc</argument>, <argument>Sema::LookupNameKind LookupKind</argument>,
<argument>Sema::RedeclarationKind Redecl = Sema::NotForRedeclaration</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SemaPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SemaRef</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NameInfo</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>NameLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LookupKind</name><argument_list>(<argument><expr><name>LookupKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Redecl</name><argument_list>(<argument><expr><name>Redecl</name> <operator>!=</operator> <name>Sema</name><operator>::</operator><name>NotForRedeclaration</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ExternalRedecl</name><argument_list>(<argument><expr><name>Redecl</name> <operator>==</operator> <name>Sema</name><operator>::</operator><name>ForExternalRedeclaration</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Diagnose</name><argument_list>(<argument>Redecl == Sema::NotForRedeclaration</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>configure</name><argument_list>()</argument_list></call></expr>;
}</block>




<macro><name>LookupResult</name><argument_list>(<argument>TemporaryToken _</argument>, <argument>const LookupResult &amp;Other</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SemaPtr</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>SemaPtr</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NameInfo</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NameInfo</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>LookupKind</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>LookupKind</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IDNS</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>IDNS</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Redecl</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Redecl</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ExternalRedecl</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>ExternalRedecl</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HideTags</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>HideTags</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>AllowHidden</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>AllowHidden</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TemplateNameLookup</name><argument_list>(<argument>Other.TemplateNameLookup</argument>)</argument_list></macro> <expr><block>{}</block>



<call><name>LookupResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LookupResult</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LookupResult</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>LookupResult</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LookupResult</name><argument_list>(<argument><expr><name>LookupResult</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ResultKind</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>ResultKind</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Ambiguity</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Ambiguity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Decls</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Decls</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Paths</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Paths</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NamingClass</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NamingClass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>BaseObjectType</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>BaseObjectType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SemaPtr</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>SemaPtr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NameInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NameInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NameContextRange</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NameContextRange</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>LookupKind</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>LookupKind</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IDNS</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>IDNS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Redecl</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Redecl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ExternalRedecl</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>ExternalRedecl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HideTags</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>HideTags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Diagnose</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Diagnose</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>AllowHidden</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>AllowHidden</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Shadowed</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Shadowed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TemplateNameLookup</name><argument_list>(<argument>std::move(Other.TemplateNameLookup)</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Other</name><operator>.</operator><name>Paths</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>Other</name><operator>.</operator><name>Diagnose</name></name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>LookupResult</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>LookupResult</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>ResultKind</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>ResultKind</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Ambiguity</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Ambiguity</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Decls</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Decls</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Paths</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Paths</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>NamingClass</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NamingClass</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>BaseObjectType</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>BaseObjectType</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>SemaPtr</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>SemaPtr</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>NameInfo</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NameInfo</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>NameContextRange</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NameContextRange</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>LookupKind</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>LookupKind</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>IDNS</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>IDNS</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Redecl</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Redecl</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>ExternalRedecl</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>ExternalRedecl</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>HideTags</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>HideTags</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Diagnose</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Diagnose</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>AllowHidden</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>AllowHidden</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Shadowed</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Shadowed</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>TemplateNameLookup</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>TemplateNameLookup</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>Other</name><operator>.</operator><name>Paths</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>Other</name><operator>.</operator><name>Diagnose</name></name> <operator>=</operator> <name>false</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>LookupResult</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Diagnose</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>diagnose</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Paths</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>deletePaths</name><argument_list>(<argument><expr><name>Paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>DeclarationNameInfo</name> <operator>&amp;</operator><macro><name>getLookupNameInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NameInfo</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setLookupNameInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclarationNameInfo</name> <modifier>&amp;</modifier></type><name>NameInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>NameInfo</name></name> <operator>=</operator> <name>NameInfo</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>DeclarationName</name> <macro><name>getLookupName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>NameInfo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setLookupName</name><parameter_list>(<parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>NameInfo</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>Sema</name><operator>::</operator><name>LookupNameKind</name> <macro><name>getLookupKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LookupKind</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isForRedeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Redecl</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isForExternalRedeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExternalRedecl</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Sema</name><operator>::</operator><name>RedeclarationKind</name> <macro><name>redeclarationKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExternalRedecl</name> <operator>?</operator> <name>Sema</name><operator>::</operator><name>ForExternalRedeclaration</name> <operator>:</operator>
<name>Redecl</name> <operator>?</operator> <name>Sema</name><operator>::</operator><name>ForVisibleRedeclaration</name> <operator>:</operator> <name>Sema</name><operator>::</operator><name>NotForRedeclaration</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setAllowHidden</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>AH</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>AllowHidden</name> <operator>=</operator> <name>AH</name></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>bool</name></type> <name>isHiddenDeclarationVisible</name><argument_list>(<argument><expr><name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>AllowHidden</name> <operator>||</operator>
<operator>(</operator><call><name>isForExternalRedeclaration</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ND</name><operator>-&gt;</operator><name>isExternallyDeclarable</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>setHideTags</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Hide</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>HideTags</name> <operator>=</operator> <name>Hide</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>setTemplateNameLookup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>TemplateName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>TemplateNameLookup</name> <operator>=</operator> <name>TemplateName</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isTemplateNameLookup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TemplateNameLookup</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAmbiguous</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Ambiguous</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isSingleResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Found</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOverloadedResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FoundOverloaded</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnresolvableResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FoundUnresolvedValue</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>LookupResultKind</name> <macro><name>getResultKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>sanity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ResultKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>AmbiguityKind</name> <macro><name>getAmbiguityKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAmbiguous</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Ambiguity</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>UnresolvedSetImpl</name> <operator>&amp;</operator><macro><name>asUnresolvedSet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Decls</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>CXXBasePaths</name> <operator>*</operator><macro><name>getBasePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Paths</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>isVisible</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>SemaRef</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>isUnconditionallyVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>isVisibleSlow</name><argument_list>(<argument><expr><name>SemaRef</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>getAcceptableDecl</name><argument_list>(<argument><expr><name>NamedDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>D</name><operator>-&gt;</operator><name>isInIdentifierNamespace</name></name><argument_list>(<argument><expr><name>IDNS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isVisible</name><argument_list>(<argument><expr><call><name>getSema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isHiddenDeclarationVisible</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>D</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getAcceptableDeclSlow</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isVisibleSlow</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>SemaRef</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>getAcceptableDeclSlow</name><argument_list>(<argument><expr><name>NamedDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>unsigned</name> <macro><name>getIdentifierNamespace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IDNS</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isClassLookup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NamingClass</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

















<expr_stmt><expr><name>CXXRecordDecl</name> <operator>*</operator><macro><name>getNamingClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NamingClass</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setNamingClass</name><parameter_list>(<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Record</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NamingClass</name> <operator>=</operator> <name>Record</name></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>QualType</name> <macro><name>getBaseObjectType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BaseObjectType</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setBaseObjectType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BaseObjectType</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getAccess</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>addDecl</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>Found</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>addAllDecls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LookupResult</name> <modifier>&amp;</modifier></type><name>Other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Other</name><operator>.</operator><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>Found</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>wasNotFoundInCurrentInstantiation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ResultKind</name> <operator>==</operator> <name>NotFoundInCurrentInstantiation</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setNotFoundInCurrentInstantiation</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ResultKind</name> <operator>==</operator> <name>NotFound</name> <operator>&amp;&amp;</operator> <call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>NotFoundInCurrentInstantiation</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isShadowed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Shadowed</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setShadowed</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Shadowed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>






<function_decl><type><name>void</name></type> <name>resolveKind</name><parameter_list>()</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>resolveKindAfterFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ResultKind</name> <operator>!=</operator> <name>NotFoundInCurrentInstantiation</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>NotFound</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Paths</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>deletePaths</name><argument_list>(<argument><expr><name>Paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Paths</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>AmbiguityKind</name></expr></argument>&gt;</argument_list></name> <name>SavedAK</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>WasAmbiguous</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ResultKind</name> <operator>==</operator> <name>Ambiguous</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SavedAK</name> <operator>=</operator> <name>Ambiguity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>WasAmbiguous</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>Found</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resolveKind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>ResultKind</name> <operator>==</operator> <name>Ambiguous</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>WasAmbiguous</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>WasAmbiguous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Ambiguity</name> <operator>=</operator> <call><name><name>SavedAK</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Paths</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>deletePaths</name><argument_list>(<argument><expr><name>Paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Paths</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>DeclClass</name></expr></argument>&gt;</argument_list></name>
<name>DeclClass</name> <operator>*</operator><macro><name>getAsSingle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>Found</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclClass</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFoundDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getFoundDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Found</name>
<operator>&amp;&amp;</operator> <literal type="string">"getFoundDecl called on non-unique result"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><operator>*</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name>getUnderlyingDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getRepresentativeDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"cannot get representative of empty set"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSingleTagDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getResultKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Found</name> <operator>&amp;&amp;</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>TagDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFoundDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<function_decl><type><name>void</name></type> <name>setAmbiguousBaseSubobjectTypes</name><parameter_list>(<parameter><decl><type><name>CXXBasePaths</name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>setAmbiguousBaseSubobjects</name><parameter_list>(<parameter><decl><type><name>CXXBasePaths</name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type> <name>setAmbiguousQualifiedTagHiding</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setAmbiguous</name><argument_list>(<argument><expr><name>AmbiguousTagHiding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LLVM_ATTRIBUTE_REINITIALIZES</name> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>NotFound</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Paths</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>deletePaths</name><argument_list>(<argument><expr><name>Paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Paths</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NamingClass</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Shadowed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>void</name></type> <name>clear</name><argument_list>(<argument><expr><name>Sema</name><operator>::</operator><name>LookupNameKind</name> <name>Kind</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LookupKind</name> <operator>=</operator> <name>Kind</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>configure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setRedeclarationKind</name><argument_list>(<argument><expr><name>Sema</name><operator>::</operator><name>RedeclarationKind</name> <name>RK</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>Redecl</name> <operator>=</operator> <operator>(</operator><name>RK</name> <operator>!=</operator> <name>Sema</name><operator>::</operator><name>NotForRedeclaration</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ExternalRedecl</name> <operator>=</operator> <operator>(</operator><name>RK</name> <operator>==</operator> <name>Sema</name><operator>::</operator><name>ForExternalRedeclaration</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>configure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>suppressDiagnostics</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Diagnose</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isSuppressingDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><name>Diagnose</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setContextRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>SR</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NameContextRange</name> <operator>=</operator> <name>SR</name></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>SourceRange</name> <macro><name>getContextRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NameContextRange</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getNameLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>NameInfo</name><operator>.</operator><name>getLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>Sema</name> <operator>&amp;</operator><macro><name>getSema</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>SemaPtr</name></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Filter</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>LookupResult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LookupResult</name> <modifier>&amp;</modifier></type><name>Results</name></decl>;</decl_stmt>
<expr_stmt><expr><name>LookupResult</name><operator>::</operator><name>iterator</name> <name>I</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CalledDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Filter</name><argument_list>(<argument><expr><name>LookupResult</name> <operator>&amp;</operator><name>Results</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Results</name><argument_list>(<argument><expr><name>Results</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>I</name><argument_list>(<argument>Results.begin()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<call><name>Filter</name><argument_list>(<argument><expr><name>Filter</name> <operator>&amp;&amp;</operator><name>F</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Results</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>Results</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>I</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Changed</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>Changed</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CalledDone</name><argument_list>(<argument>F.CalledDone</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>F</name><operator>.</operator><name>CalledDone</name></name> <operator>=</operator> <name>true</name></expr>;
}</block>

<operator>~</operator><macro><name>Filter</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CalledDone</name> <operator>&amp;&amp;</operator>
<literal type="string">"LookupResult::Filter destroyed without done() call"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasNext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>I</name> <operator>!=</operator> <call><name><name>Results</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NamedDecl</name> <modifier>*</modifier></type><name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>Results</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"next() called on empty filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>I</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>restart</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>I</name> <operator>=</operator> <call><name><name>Results</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>erase</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Results</name><operator>.</operator><name>Decls</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Results</name><operator>.</operator><name>Decls</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>I</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Results</name><operator>.</operator><name>Decls</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>I</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>done</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>CalledDone</name> <operator>&amp;&amp;</operator> <literal type="string">"done() called twice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CalledDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Results</name><operator>.</operator><name>resolveKindAfterFilter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function><type><name>Filter</name></type> <name>makeFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Filter</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setFindLocalExtern</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>FindLocalExtern</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>FindLocalExtern</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IDNS</name> <operator>|=</operator> <name>Decl</name><operator>::</operator><name>IDNS_LocalExtern</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>IDNS</name> <operator>&amp;=</operator> <operator>~</operator><name>Decl</name><operator>::</operator><name>IDNS_LocalExtern</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>diagnose</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isAmbiguous</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getSema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DiagnoseAmbiguousLookup</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isClassLookup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getSema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLangOpts</name><argument_list>()</argument_list></call><operator>.</operator><name>AccessControl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getSema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>CheckLookupAccess</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setAmbiguous</name><parameter_list>(<parameter><decl><type><name>AmbiguityKind</name></type> <name>AK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ResultKind</name> <operator>=</operator> <name>Ambiguous</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Ambiguity</name> <operator>=</operator> <name>AK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>addDeclsFromBasePaths</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBasePaths</name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>configure</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>sanity</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>sanityCheckUnresolved</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>iterator</name></type> <name>I</name> <init>= <expr><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>UnresolvedUsingValueDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getUnderlyingDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
}

static <function_decl><type><name>void</name></type> <name>deletePaths</name><parameter_list>(<parameter><decl><type><name>CXXBasePaths</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>LookupResultKind</name></type> <name>ResultKind</name> <init>= <expr><name>NotFound</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AmbiguityKind</name></type> <name>Ambiguity</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>UnresolvedSet</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>Decls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXXBasePaths</name> <modifier>*</modifier></type><name>Paths</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>NamingClass</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>BaseObjectType</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Sema</name> <modifier>*</modifier></type><name>SemaPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclarationNameInfo</name></type> <name>NameInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>NameContextRange</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Sema</name><operator>::</operator><name>LookupNameKind</name> <name>LookupKind</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IDNS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Redecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ExternalRedecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>HideTags</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Diagnose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>AllowHidden</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Shadowed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>TemplateNameLookup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
};







<decl_stmt><decl><type><name>class</name></type> <name>VisibleDeclConsumer</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>VisibleDeclConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>includeHiddenDecls</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<function_decl><type><name>virtual</name> <name>void</name></type> <name>FoundDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>Hiding</name></decl></parameter>, <parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>InBaseClass</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function><type><name>virtual</name> <name>void</name></type> <name>EnteredContext</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ADLResult</name> <block>{<block_content>
<label><name>private</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Decls</name></expr>;</expr_stmt>

<struct>struct <name>select_second</name> <block>{
<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>P</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>P</name><operator>.</operator><name>second</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<label><name>public</name>:</label>

<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Decls</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getCanonicalDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>Decls</name><operator>)</operator><operator>::</operator><name>iterator</name></expr></argument>, <argument><expr><name>select_second</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>select_second</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>select_second</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
