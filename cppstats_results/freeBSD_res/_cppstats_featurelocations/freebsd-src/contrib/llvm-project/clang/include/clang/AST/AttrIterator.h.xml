<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/AttrIterator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ATTRITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ATTRITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Attr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>AttrVec</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Attr</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecificAttr</name></expr></argument>, <argument><expr><name>typename</name> <name>Container</name> <operator>=</operator> <name>AttrVec</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>specific_attr_iterator</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>Iterator</name> <init>= <expr><name>typename</name> <name>Container</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>mutable</name> <name>Iterator</name></type> <name>Current</name></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>AdvanceToNext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<while>while <condition>(<expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>Current</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>Current</name></expr>;</expr_stmt></block_content></block></while>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AdvanceToNext</name><argument_list>(<argument><expr><name>Iterator</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<while>while <condition>(<expr><name>Current</name> <operator>!=</operator> <name>I</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>Current</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>Current</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></decl></decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>SpecificAttr</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>SpecificAttr</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>SpecificAttr</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator_category</name> <init>= <expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name>std</name><operator>::</operator><name>ptrdiff_t</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>specific_attr_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>specific_attr_iterator</name><argument_list>(<argument>Iterator i</argument>)</argument_list></macro> : <macro><name>Current</name><argument_list>(<argument>i</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>AdvanceToNext</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>Current</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content>
<expr_stmt><expr><call><name>AdvanceToNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>Current</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

specific_attr_iterator&amp; operator++(</block></decl>) <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>Current</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl_stmt>
<expr_stmt><expr><name>specific_attr_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>specific_attr_iterator</name> <call><name>Tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
<return>return <expr><name>Tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>specific_attr_iterator</name> <name>Left</name><operator>,</operator>
<name>specific_attr_iterator</name> <name>Right</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>Left</name><operator>.</operator><name>Current</name></name> <operator>==</operator> <name>nullptr</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>Right</name><operator>.</operator><name>Current</name></name> <operator>==</operator> <name>nullptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Left</name><operator>.</operator><name>Current</name></name> <operator>&lt;</operator> <name><name>Right</name><operator>.</operator><name>Current</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Left</name><operator>.</operator><name>AdvanceToNext</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>Current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Right</name><operator>.</operator><name>AdvanceToNext</name></name><argument_list>(<argument><expr><name><name>Left</name><operator>.</operator><name>Current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>Left</name><operator>.</operator><name>Current</name></name> <operator>==</operator> <name><name>Right</name><operator>.</operator><name>Current</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>specific_attr_iterator</name> <name>Left</name><operator>,</operator>
<name>specific_attr_iterator</name> <name>Right</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>Left</name> <operator>==</operator> <name>Right</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
};

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecificAttr</name></expr></argument>, <argument><expr><name>typename</name> <name>Container</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name><name>specific_attr_iterator</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>, <argument><expr><name>Container</name></expr></argument>&gt;</argument_list></name></type>
<name>specific_attr_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Container</name><modifier>&amp;</modifier></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>specific_attr_iterator</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>, <argument><expr><name>Container</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecificAttr</name></expr></argument>, <argument><expr><name>typename</name> <name>Container</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name><name>specific_attr_iterator</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>, <argument><expr><name>Container</name></expr></argument>&gt;</argument_list></name></type>
<name>specific_attr_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Container</name><modifier>&amp;</modifier></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>specific_attr_iterator</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>, <argument><expr><name>Container</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>container</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecificAttr</name></expr></argument>, <argument><expr><name>typename</name> <name>Container</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>hasSpecificAttr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Container</name><modifier>&amp;</modifier></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>specific_attr_begin</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name><name>specific_attr_end</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SpecificAttr</name></expr></argument>, <argument><expr><name>typename</name> <name>Container</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>SpecificAttr</name> <modifier>*</modifier></type><name>getSpecificAttr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Container</name><modifier>&amp;</modifier></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>specific_attr_iterator</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>, <argument><expr><name>Container</name></expr></argument>&gt;</argument_list></name></type> <name>i</name> <init>=
<expr><call><name><name>specific_attr_begin</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name><name>specific_attr_end</name><argument_list type="generic">&lt;<argument><expr><name>SpecificAttr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>i</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
