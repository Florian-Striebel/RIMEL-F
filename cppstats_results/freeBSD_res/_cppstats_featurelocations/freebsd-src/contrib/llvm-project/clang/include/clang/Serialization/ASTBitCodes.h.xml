<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_ASTBITCODES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_ASTBITCODES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OperatorKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Bitstream/BitCodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>












<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>VERSION_MAJOR</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>









<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>VERSION_MINOR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>IdentifierID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>using</name></type> <name>DeclID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>LocalDeclID</name> <init>= <expr><name>DeclID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>GlobalDeclID</name> <init>= <expr><name>DeclID</name></expr></init></decl>;</decl_stmt>











<decl_stmt><decl><type><name>using</name></type> <name>TypeID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TypeIdx</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeIdx</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>TypeIdx</name><argument_list>(<argument>uint32_t index</argument>)</argument_list></macro> : <macro><name>Idx</name><argument_list>(<argument>index</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>uint32_t</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Idx</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>TypeID</name></type> <name>asTypeID</name><argument_list>(<argument><expr><name>unsigned</name> <name>FastQuals</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Idx</name> <operator>==</operator> <call><name>uint32_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TypeID</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>Idx</name> <operator>&lt;&lt;</operator> <name>Qualifiers</name><operator>::</operator><name>FastWidth</name><operator>)</operator> <operator>|</operator> <name>FastQuals</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>TypeIdx</name></type> <name>fromTypeID</name><parameter_list>(<parameter><decl><type><name>TypeID</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ID</name> <operator>==</operator> <call><name>TypeID</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TypeIdx</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>TypeIdx</name><argument_list>(<argument><expr><name>ID</name> <operator>&gt;&gt;</operator> <name>Qualifiers</name><operator>::</operator><name>FastWidth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<struct>struct <name>UnsafeQualTypeDenseMapInfo</name> <block>{
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>A</name> <operator>==</operator> <name>B</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QualType</name></type> <name>getEmptyKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QualType</name></type> <name>getTombstoneKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>T</name><operator>.</operator><name>getLocalFastQualifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"hash invalid for types with fast quals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>v</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>unsigned</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><call><name>unsigned</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>


<decl_stmt><decl><type><name>using</name></type> <name>IdentID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_IDENT_IDS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>MacroID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>GlobalMacroID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>LocalMacroID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_MACRO_IDS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>SelectorID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_SELECTOR_IDS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>CXXBaseSpecifiersID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>CXXCtorInitializersID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>PreprocessedEntityID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>SubmoduleID</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_SUBMODULE_IDS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<struct>struct <name>PPEntityOffset</name> <block>{

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Begin</name></expr>;</expr_stmt>


<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>End</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>BitOffset</name></decl>;</decl_stmt>

<macro><name>PPEntityOffset</name><argument_list>(<argument>SourceRange R</argument>, <argument>uint32_t BitOffset</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Begin</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>End</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>BitOffset</name><argument_list>(<argument>BitOffset</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SourceLocation</name> <macro><name>getBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>PPSkippedRange</name> <block>{

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Begin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>End</name></expr>;</expr_stmt>

<macro><name>PPSkippedRange</name><argument_list>(<argument>SourceRange R</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Begin</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>End</name><argument_list>(<argument>R.getEnd().getRawEncoding()</argument>)</argument_list></macro> <expr><block>{
}</block>

<name>SourceLocation</name> <macro><name>getBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>





<struct>struct <name>UnderalignedInt64</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>BitOffsetLow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>BitOffsetHigh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnderalignedInt64</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>UnderalignedInt64</name><argument_list>(<argument>uint64_t BitOffset</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>setBitOffset</name><argument_list>(<argument><expr><name>BitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<function><type><name>void</name></type> <name>setBitOffset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BitOffsetLow</name> <operator>=</operator> <name>Offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BitOffsetHigh</name> <operator>=</operator> <name>Offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getBitOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BitOffsetLow</name> <operator>|</operator> <operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>BitOffsetHigh</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>DeclOffset</name> <block>{

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Loc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>UnderalignedInt64</name></type> <name>BitOffset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DeclOffset</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>DeclOffset</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>uint64_t BitOffset</argument>,
<argument>uint64_t DeclTypesBlockStartOffset</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>setLocation</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setBitOffset</name><argument_list>(<argument><expr><name>BitOffset</name></expr></argument>, <argument><expr><name>DeclTypesBlockStartOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Loc</name> <operator>=</operator> <call><name><name>L</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setBitOffset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>DeclTypesBlockStartOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>BitOffset</name><operator>.</operator><name>setBitOffset</name></name><argument_list>(<argument><expr><name>Offset</name> <operator>-</operator> <name>DeclTypesBlockStartOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getBitOffset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint64_t</name> <name>DeclTypesBlockStartOffset</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>BitOffset</name><operator>.</operator><name>getBitOffset</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>DeclTypesBlockStartOffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_PP_ENTITY_IDS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<enum>enum <name>BlockIDs</name> <block>{


<decl><name>AST_BLOCK_ID</name> <init>= <expr><name>llvm</name><operator>::</operator><name>bitc</name><operator>::</operator><name>FIRST_APPLICATION_BLOCKID</name></expr></init></decl>,



<decl><name>SOURCE_MANAGER_BLOCK_ID</name></decl>,



<decl><name>PREPROCESSOR_BLOCK_ID</name></decl>,



<decl><name>DECLTYPES_BLOCK_ID</name></decl>,


<decl><name>PREPROCESSOR_DETAIL_BLOCK_ID</name></decl>,


<decl><name>SUBMODULE_BLOCK_ID</name></decl>,


<decl><name>COMMENTS_BLOCK_ID</name></decl>,




<decl><name>CONTROL_BLOCK_ID</name></decl>,





<decl><name>INPUT_FILES_BLOCK_ID</name></decl>,






<decl><name>OPTIONS_BLOCK_ID</name></decl>,


<decl><name>EXTENSION_BLOCK_ID</name></decl>,





<decl><name>UNHASHED_CONTROL_BLOCK_ID</name></decl>,
}</block>;</enum>


<enum>enum <name>ControlRecordTypes</name> <block>{


<decl><name>METADATA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>IMPORTS</name></decl>,




<decl><name>ORIGINAL_FILE</name></decl>,


<decl><name>ORIGINAL_PCH_DIR</name></decl>,



<decl><name>ORIGINAL_FILE_ID</name></decl>,



<decl><name>INPUT_FILE_OFFSETS</name></decl>,


<decl><name>MODULE_NAME</name></decl>,



<decl><name>MODULE_MAP_FILE</name></decl>,


<decl><name>MODULE_DIRECTORY</name></decl>,
}</block>;</enum>



<enum>enum <name>OptionsRecordTypes</name> <block>{






<decl><name>LANGUAGE_OPTIONS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>TARGET_OPTIONS</name></decl>,


<decl><name>FILE_SYSTEM_OPTIONS</name></decl>,


<decl><name>HEADER_SEARCH_OPTIONS</name></decl>,


<decl><name>PREPROCESSOR_OPTIONS</name></decl>,
}</block>;</enum>


<enum>enum <name>UnhashedControlBlockRecordTypes</name> <block>{

<decl><name>SIGNATURE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>AST_BLOCK_HASH</name></decl>,


<decl><name>DIAGNOSTIC_OPTIONS</name></decl>,


<decl><name>DIAG_PRAGMA_MAPPINGS</name></decl>,
}</block>;</enum>


<enum>enum <name>ExtensionBlockRecordTypes</name> <block>{

<decl><name>EXTENSION_METADATA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>FIRST_EXTENSION_RECORD_ID</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>



<enum>enum <name>InputFileRecordTypes</name> <block>{

<decl><name>INPUT_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>INPUT_FILE_HASH</name></decl>
}</block>;</enum>


<enum>enum <name>ASTRecordTypes</name> <block>{












<decl><name>TYPE_OFFSET</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,











<decl><name>DECL_OFFSET</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,







<decl><name>IDENTIFIER_OFFSET</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,




<decl><name>METADATA_OLD_FORMAT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,













<decl><name>IDENTIFIER_TABLE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,









<decl><name>EAGERLY_DESERIALIZED_DECLS</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,








<decl><name>SPECIAL_TYPES</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,



<decl><name>STATISTICS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,


<decl><name>TENTATIVE_DEFINITIONS</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,





<decl><name>SELECTOR_OFFSETS</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,


<decl><name>METHOD_POOL</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,



<decl><name>PP_COUNTER_VALUE</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,



<decl><name>SOURCE_LOCATION_OFFSETS</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,







<decl><name>SOURCE_LOCATION_PRELOADS</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,


<decl><name>EXT_VECTOR_DECLS</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,


<decl><name>UNUSED_FILESCOPED_DECLS</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,



<decl><name>PPD_ENTITIES_OFFSETS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,


<decl><name>VTABLE_USES</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,




<decl><name>REFERENCED_SELECTOR_POOL</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,



<decl><name>TU_UPDATE_LEXICAL</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,




<decl><name>SEMA_DECL_REFS</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,


<decl><name>WEAK_UNDECLARED_IDENTIFIERS</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,


<decl><name>PENDING_IMPLICIT_INSTANTIATIONS</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,






<decl><name>UPDATE_VISIBLE</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,



<decl><name>DECL_UPDATE_OFFSETS</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,









<decl><name>CUDA_SPECIAL_DECL_REFS</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,


<decl><name>HEADER_SEARCH_TABLE</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,


<decl><name>FP_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,


<decl><name>OPENCL_EXTENSIONS</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,


<decl><name>DELEGATING_CTORS</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,



<decl><name>KNOWN_NAMESPACES</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,





<decl><name>MODULE_OFFSET_MAP</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,



<decl><name>SOURCE_MANAGER_LINE_TABLE</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,



<decl><name>OBJC_CATEGORIES_MAP</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,


<decl><name>FILE_SORTED_DECLS</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,



<decl><name>IMPORTED_MODULES</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,









<decl><name>OBJC_CATEGORIES</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,






<decl><name>MACRO_OFFSET</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,




<decl><name>INTERESTING_IDENTIFIERS</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,



<decl><name>UNDEFINED_BUT_USED</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,


<decl><name>LATE_PARSED_TEMPLATE</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,


<decl><name>OPTIMIZE_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,


<decl><name>UNUSED_LOCAL_TYPEDEF_NAME_CANDIDATES</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,




<decl><name>DELETE_EXPRS_TO_ANALYZE</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>,


<decl><name>MSSTRUCT_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>,


<decl><name>POINTERS_TO_MEMBERS_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>,



<decl><name>CUDA_PRAGMA_FORCE_HOST_DEVICE_DEPTH</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>,


<decl><name>OPENCL_EXTENSION_TYPES</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>,


<decl><name>OPENCL_EXTENSION_DECLS</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>,

<decl><name>MODULAR_CODEGEN_DECLS</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,


<decl><name>ALIGN_PACK_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,


<decl><name>PP_CONDITIONAL_STACK</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,


<decl><name>PPD_SKIPPED_RANGES</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,


<decl><name>DECLS_TO_CHECK_FOR_DEFERRED_DIAGS</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,


<decl><name>FLOAT_CONTROL_PRAGMA_OPTIONS</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <name>SourceManagerRecordTypes</name> <block>{


<decl><name>SM_SLOC_FILE_ENTRY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>SM_SLOC_BUFFER_ENTRY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,





<decl><name>SM_SLOC_BUFFER_BLOB</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,



<decl><name>SM_SLOC_BUFFER_BLOB_COMPRESSED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,



<decl><name>SM_SLOC_EXPANSION_ENTRY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>PreprocessorRecordTypes</name> <block>{





<decl><name>PP_MACRO_OBJECT_LIKE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>PP_MACRO_FUNCTION_LIKE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,



<decl><name>PP_TOKEN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>PP_MACRO_DIRECTIVE_HISTORY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,



<decl><name>PP_MODULE_MACRO</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <name>PreprocessorDetailRecordTypes</name> <block>{

<decl><name>PPD_MACRO_EXPANSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>PPD_MACRO_DEFINITION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>PPD_INCLUSION_DIRECTIVE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>SubmoduleRecordTypes</name> <block>{

<decl><name>SUBMODULE_METADATA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>SUBMODULE_DEFINITION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>SUBMODULE_UMBRELLA_HEADER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>SUBMODULE_HEADER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>SUBMODULE_TOPHEADER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>SUBMODULE_UMBRELLA_DIR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,



<decl><name>SUBMODULE_IMPORTS</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,



<decl><name>SUBMODULE_EXPORTS</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,


<decl><name>SUBMODULE_REQUIRES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,



<decl><name>SUBMODULE_EXCLUDED_HEADER</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,


<decl><name>SUBMODULE_LINK_LIBRARY</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,


<decl><name>SUBMODULE_CONFIG_MACRO</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,


<decl><name>SUBMODULE_CONFLICT</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,


<decl><name>SUBMODULE_PRIVATE_HEADER</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,



<decl><name>SUBMODULE_TEXTUAL_HEADER</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,



<decl><name>SUBMODULE_PRIVATE_TEXTUAL_HEADER</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,



<decl><name>SUBMODULE_INITIALIZERS</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,



<decl><name>SUBMODULE_EXPORT_AS</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <name>CommentRecordTypes</name> <block>{ <decl><name>COMMENTS_RAW_COMMENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> }</block>;</enum>















<enum>enum <name>PredefinedTypeIDs</name> <block>{

<decl><name>PREDEF_TYPE_NULL_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_VOID_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_BOOL_ID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CHAR_U_ID</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UCHAR_ID</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_USHORT_ID</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UINT_ID</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ULONG_ID</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ULONGLONG_ID</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CHAR_S_ID</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SCHAR_ID</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_WCHAR_ID</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SHORT_ID</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_INT_ID</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_LONG_ID</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_LONGLONG_ID</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_FLOAT_ID</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_DOUBLE_ID</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_LONGDOUBLE_ID</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OVERLOAD_ID</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_DEPENDENT_ID</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UINT128_ID</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_INT128_ID</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_NULLPTR_ID</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CHAR16_ID</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CHAR32_ID</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OBJC_ID</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OBJC_CLASS</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OBJC_SEL</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UNKNOWN_ANY</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_BOUND_MEMBER</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_AUTO_DEDUCT</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_AUTO_RREF_DEDUCT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_HALF_ID</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ARC_UNBRIDGED_CAST</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_PSEUDO_OBJECT</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_BUILTIN_FN</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_EVENT_ID</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CLK_EVENT_ID</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAMPLER_ID</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_QUEUE_ID</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_RESERVE_ID_ID</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OMP_ARRAY_SECTION</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_FLOAT128_ID</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_FLOAT16_ID</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_CHAR8_ID</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SHORT_ACCUM_ID</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ACCUM_ID</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_LONG_ACCUM_ID</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_USHORT_ACCUM_ID</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UACCUM_ID</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ULONG_ACCUM_ID</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SHORT_FRACT_ID</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_FRACT_ID</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_LONG_FRACT_ID</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_USHORT_FRACT_ID</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_UFRACT_ID</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_ULONG_FRACT_ID</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_SHORT_ACCUM_ID</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_ACCUM_ID</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_LONG_ACCUM_ID</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_USHORT_ACCUM_ID</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_UACCUM_ID</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_ULONG_ACCUM_ID</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_SHORT_FRACT_ID</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_FRACT_ID</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_LONG_FRACT_ID</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_USHORT_FRACT_ID</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_UFRACT_ID</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_SAT_ULONG_FRACT_ID</name> <init>= <expr><literal type="number">69</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OMP_ARRAY_SHAPING</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_OMP_ITERATOR</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_INCOMPLETE_MATRIX_IDX</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>,


<decl><name>PREDEF_TYPE_BFLOAT16_ID</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_TYPE</name><parameter_list>(<parameter><type><name>ImgType</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>, <parameter><type><name>SingletonId</name></type></parameter>, <parameter><type><name>Access</name></type></parameter>, <parameter><type><name>Suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PREDEF_TYPE_##Id##_ID,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenCLImageTypes.def"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_OPAQUE_TYPE</name><parameter_list>(<parameter><type><name>ExtType</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Ext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PREDEF_TYPE_##Id##_ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenCLExtensionTypes.def"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVE_TYPE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>, <parameter><type><name>SingletonId</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PREDEF_TYPE_##Id##_ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AArch64SVEACLETypes.def"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPC_VECTOR_TYPE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PREDEF_TYPE_##Id##_ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PPCTypes.def"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVV_TYPE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Id</name></type></parameter>, <parameter><type><name>SingletonId</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PREDEF_TYPE_##Id##_ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/RISCVVTypes.def"</cpp:file></cpp:include>
}</block>;</enum>






<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>NUM_PREDEF_TYPE_IDS</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>







<enum>enum <name>TypeCode</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_BIT_CODE</name><parameter_list>(<parameter><type><name>CLASS_ID</name></type></parameter>, <parameter><type><name>CODE_ID</name></type></parameter>, <parameter><type><name>CODE_VALUE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TYPE_##CODE_ID = CODE_VALUE,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/TypeBitCodes.def"</cpp:file></cpp:include>


<decl><name>TYPE_EXT_QUAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>






<enum>enum <name>SpecialTypeIDs</name> <block>{

<decl><name>SPECIAL_TYPE_CF_CONSTANT_STRING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_JMP_BUF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_SIGJMP_BUF</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_OBJC_ID_REDEFINITION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_OBJC_CLASS_REDEFINITION</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_OBJC_SEL_REDEFINITION</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,


<decl><name>SPECIAL_TYPE_UCONTEXT_T</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>
}</block>;</enum>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>NumSpecialTypeIDs</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>







<enum>enum <name>PredefinedDeclIDs</name> <block>{

<decl><name>PREDEF_DECL_NULL_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_TRANSLATION_UNIT_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_OBJC_ID_ID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_OBJC_SEL_ID</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_OBJC_CLASS_ID</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_OBJC_PROTOCOL_ID</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_INT_128_ID</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_UNSIGNED_INT_128_ID</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_OBJC_INSTANCETYPE_ID</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_BUILTIN_VA_LIST_ID</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_VA_LIST_TAG</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_BUILTIN_MS_VA_LIST_ID</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_BUILTIN_MS_GUID_ID</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_EXTERN_C_CONTEXT_ID</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_MAKE_INTEGER_SEQ_ID</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_CF_CONSTANT_STRING_ID</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_CF_CONSTANT_STRING_TAG_ID</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,


<decl><name>PREDEF_DECL_TYPE_PACK_ELEMENT_ID</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
}</block>;</enum>





<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_PREDEF_DECL_IDS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DECL_UPDATES</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>LOCAL_REDECLARATIONS</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>







<enum>enum <name>DeclCode</name> <block>{

<decl><name>DECL_TYPEDEF</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,


<decl><name>DECL_TYPEALIAS</name></decl>,


<decl><name>DECL_ENUM</name></decl>,


<decl><name>DECL_RECORD</name></decl>,


<decl><name>DECL_ENUM_CONSTANT</name></decl>,


<decl><name>DECL_FUNCTION</name></decl>,


<decl><name>DECL_OBJC_METHOD</name></decl>,


<decl><name>DECL_OBJC_INTERFACE</name></decl>,


<decl><name>DECL_OBJC_PROTOCOL</name></decl>,


<decl><name>DECL_OBJC_IVAR</name></decl>,


<decl><name>DECL_OBJC_AT_DEFS_FIELD</name></decl>,


<decl><name>DECL_OBJC_CATEGORY</name></decl>,


<decl><name>DECL_OBJC_CATEGORY_IMPL</name></decl>,


<decl><name>DECL_OBJC_IMPLEMENTATION</name></decl>,


<decl><name>DECL_OBJC_COMPATIBLE_ALIAS</name></decl>,


<decl><name>DECL_OBJC_PROPERTY</name></decl>,


<decl><name>DECL_OBJC_PROPERTY_IMPL</name></decl>,


<decl><name>DECL_FIELD</name></decl>,


<decl><name>DECL_MS_PROPERTY</name></decl>,


<decl><name>DECL_MS_GUID</name></decl>,


<decl><name>DECL_TEMPLATE_PARAM_OBJECT</name></decl>,


<decl><name>DECL_VAR</name></decl>,


<decl><name>DECL_IMPLICIT_PARAM</name></decl>,


<decl><name>DECL_PARM_VAR</name></decl>,


<decl><name>DECL_DECOMPOSITION</name></decl>,


<decl><name>DECL_BINDING</name></decl>,


<decl><name>DECL_FILE_SCOPE_ASM</name></decl>,


<decl><name>DECL_BLOCK</name></decl>,


<decl><name>DECL_CAPTURED</name></decl>,









<decl><name>DECL_CONTEXT_LEXICAL</name></decl>,








<decl><name>DECL_CONTEXT_VISIBLE</name></decl>,


<decl><name>DECL_LABEL</name></decl>,


<decl><name>DECL_NAMESPACE</name></decl>,


<decl><name>DECL_NAMESPACE_ALIAS</name></decl>,


<decl><name>DECL_USING</name></decl>,


<decl><name>DECL_USING_ENUM</name></decl>,


<decl><name>DECL_USING_PACK</name></decl>,


<decl><name>DECL_USING_SHADOW</name></decl>,


<decl><name>DECL_CONSTRUCTOR_USING_SHADOW</name></decl>,


<decl><name>DECL_USING_DIRECTIVE</name></decl>,


<decl><name>DECL_UNRESOLVED_USING_VALUE</name></decl>,


<decl><name>DECL_UNRESOLVED_USING_TYPENAME</name></decl>,


<decl><name>DECL_LINKAGE_SPEC</name></decl>,


<decl><name>DECL_EXPORT</name></decl>,


<decl><name>DECL_CXX_RECORD</name></decl>,


<decl><name>DECL_CXX_DEDUCTION_GUIDE</name></decl>,


<decl><name>DECL_CXX_METHOD</name></decl>,


<decl><name>DECL_CXX_CONSTRUCTOR</name></decl>,


<decl><name>DECL_CXX_DESTRUCTOR</name></decl>,


<decl><name>DECL_CXX_CONVERSION</name></decl>,


<decl><name>DECL_ACCESS_SPEC</name></decl>,


<decl><name>DECL_FRIEND</name></decl>,


<decl><name>DECL_FRIEND_TEMPLATE</name></decl>,


<decl><name>DECL_CLASS_TEMPLATE</name></decl>,


<decl><name>DECL_CLASS_TEMPLATE_SPECIALIZATION</name></decl>,


<decl><name>DECL_CLASS_TEMPLATE_PARTIAL_SPECIALIZATION</name></decl>,


<decl><name>DECL_VAR_TEMPLATE</name></decl>,


<decl><name>DECL_VAR_TEMPLATE_SPECIALIZATION</name></decl>,


<decl><name>DECL_VAR_TEMPLATE_PARTIAL_SPECIALIZATION</name></decl>,


<decl><name>DECL_FUNCTION_TEMPLATE</name></decl>,


<decl><name>DECL_TEMPLATE_TYPE_PARM</name></decl>,


<decl><name>DECL_NON_TYPE_TEMPLATE_PARM</name></decl>,


<decl><name>DECL_TEMPLATE_TEMPLATE_PARM</name></decl>,


<decl><name>DECL_TYPE_ALIAS_TEMPLATE</name></decl>,


<decl><name>DECL_CONCEPT</name></decl>,


<decl><name>DECL_UNRESOLVED_USING_IF_EXISTS</name></decl>,


<decl><name>DECL_STATIC_ASSERT</name></decl>,


<decl><name>DECL_CXX_BASE_SPECIFIERS</name></decl>,


<decl><name>DECL_CXX_CTOR_INITIALIZERS</name></decl>,


<decl><name>DECL_INDIRECTFIELD</name></decl>,



<decl><name>DECL_EXPANDED_NON_TYPE_TEMPLATE_PARM_PACK</name></decl>,



<decl><name>DECL_EXPANDED_TEMPLATE_TEMPLATE_PARM_PACK</name></decl>,



<decl><name>DECL_CLASS_SCOPE_FUNCTION_SPECIALIZATION</name></decl>,


<decl><name>DECL_IMPORT</name></decl>,


<decl><name>DECL_OMP_THREADPRIVATE</name></decl>,


<decl><name>DECL_OMP_REQUIRES</name></decl>,


<decl><name>DECL_OMP_ALLOCATE</name></decl>,


<decl><name>DECL_EMPTY</name></decl>,


<decl><name>DECL_LIFETIME_EXTENDED_TEMPORARY</name></decl>,


<decl><name>DECL_REQUIRES_EXPR_BODY</name></decl>,


<decl><name>DECL_OBJC_TYPE_PARAM</name></decl>,


<decl><name>DECL_OMP_CAPTUREDEXPR</name></decl>,


<decl><name>DECL_PRAGMA_COMMENT</name></decl>,


<decl><name>DECL_PRAGMA_DETECT_MISMATCH</name></decl>,


<decl><name>DECL_OMP_DECLARE_MAPPER</name></decl>,


<decl><name>DECL_OMP_DECLARE_REDUCTION</name></decl>,

<decl><name>DECL_LAST</name> <init>= <expr><name>DECL_OMP_DECLARE_REDUCTION</name></expr></init></decl>
}</block>;</enum>








<enum>enum <name>StmtCode</name> <block>{


<decl><name>STMT_STOP</name> <init>= <expr><name>DECL_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,


<decl><name>STMT_NULL_PTR</name></decl>,


<decl><name>STMT_REF_PTR</name></decl>,


<decl><name>STMT_NULL</name></decl>,


<decl><name>STMT_COMPOUND</name></decl>,


<decl><name>STMT_CASE</name></decl>,


<decl><name>STMT_DEFAULT</name></decl>,


<decl><name>STMT_LABEL</name></decl>,


<decl><name>STMT_ATTRIBUTED</name></decl>,


<decl><name>STMT_IF</name></decl>,


<decl><name>STMT_SWITCH</name></decl>,


<decl><name>STMT_WHILE</name></decl>,


<decl><name>STMT_DO</name></decl>,


<decl><name>STMT_FOR</name></decl>,


<decl><name>STMT_GOTO</name></decl>,


<decl><name>STMT_INDIRECT_GOTO</name></decl>,


<decl><name>STMT_CONTINUE</name></decl>,


<decl><name>STMT_BREAK</name></decl>,


<decl><name>STMT_RETURN</name></decl>,


<decl><name>STMT_DECL</name></decl>,


<decl><name>STMT_CAPTURED</name></decl>,


<decl><name>STMT_GCCASM</name></decl>,


<decl><name>STMT_MSASM</name></decl>,


<decl><name>EXPR_CONSTANT</name></decl>,


<decl><name>EXPR_PREDEFINED</name></decl>,


<decl><name>EXPR_DECL_REF</name></decl>,


<decl><name>EXPR_INTEGER_LITERAL</name></decl>,


<decl><name>EXPR_FLOATING_LITERAL</name></decl>,


<decl><name>EXPR_IMAGINARY_LITERAL</name></decl>,


<decl><name>EXPR_STRING_LITERAL</name></decl>,


<decl><name>EXPR_CHARACTER_LITERAL</name></decl>,


<decl><name>EXPR_PAREN</name></decl>,


<decl><name>EXPR_PAREN_LIST</name></decl>,


<decl><name>EXPR_UNARY_OPERATOR</name></decl>,


<decl><name>EXPR_OFFSETOF</name></decl>,


<decl><name>EXPR_SIZEOF_ALIGN_OF</name></decl>,


<decl><name>EXPR_ARRAY_SUBSCRIPT</name></decl>,


<decl><name>EXPR_MATRIX_SUBSCRIPT</name></decl>,


<decl><name>EXPR_CALL</name></decl>,


<decl><name>EXPR_MEMBER</name></decl>,


<decl><name>EXPR_BINARY_OPERATOR</name></decl>,


<decl><name>EXPR_COMPOUND_ASSIGN_OPERATOR</name></decl>,


<decl><name>EXPR_CONDITIONAL_OPERATOR</name></decl>,


<decl><name>EXPR_IMPLICIT_CAST</name></decl>,


<decl><name>EXPR_CSTYLE_CAST</name></decl>,


<decl><name>EXPR_COMPOUND_LITERAL</name></decl>,


<decl><name>EXPR_EXT_VECTOR_ELEMENT</name></decl>,


<decl><name>EXPR_INIT_LIST</name></decl>,


<decl><name>EXPR_DESIGNATED_INIT</name></decl>,


<decl><name>EXPR_DESIGNATED_INIT_UPDATE</name></decl>,


<decl><name>EXPR_NO_INIT</name></decl>,


<decl><name>EXPR_ARRAY_INIT_LOOP</name></decl>,


<decl><name>EXPR_ARRAY_INIT_INDEX</name></decl>,


<decl><name>EXPR_IMPLICIT_VALUE_INIT</name></decl>,


<decl><name>EXPR_VA_ARG</name></decl>,


<decl><name>EXPR_ADDR_LABEL</name></decl>,


<decl><name>EXPR_STMT</name></decl>,


<decl><name>EXPR_CHOOSE</name></decl>,


<decl><name>EXPR_GNU_NULL</name></decl>,


<decl><name>EXPR_SOURCE_LOC</name></decl>,


<decl><name>EXPR_SHUFFLE_VECTOR</name></decl>,


<decl><name>EXPR_CONVERT_VECTOR</name></decl>,


<decl><name>EXPR_BLOCK</name></decl>,


<decl><name>EXPR_GENERIC_SELECTION</name></decl>,


<decl><name>EXPR_PSEUDO_OBJECT</name></decl>,


<decl><name>EXPR_ATOMIC</name></decl>,


<decl><name>EXPR_RECOVERY</name></decl>,




<decl><name>EXPR_OBJC_STRING_LITERAL</name></decl>,

<decl><name>EXPR_OBJC_BOXED_EXPRESSION</name></decl>,
<decl><name>EXPR_OBJC_ARRAY_LITERAL</name></decl>,
<decl><name>EXPR_OBJC_DICTIONARY_LITERAL</name></decl>,


<decl><name>EXPR_OBJC_ENCODE</name></decl>,


<decl><name>EXPR_OBJC_SELECTOR_EXPR</name></decl>,


<decl><name>EXPR_OBJC_PROTOCOL_EXPR</name></decl>,


<decl><name>EXPR_OBJC_IVAR_REF_EXPR</name></decl>,


<decl><name>EXPR_OBJC_PROPERTY_REF_EXPR</name></decl>,


<decl><name>EXPR_OBJC_SUBSCRIPT_REF_EXPR</name></decl>,


<decl><name>EXPR_OBJC_KVC_REF_EXPR</name></decl>,


<decl><name>EXPR_OBJC_MESSAGE_EXPR</name></decl>,


<decl><name>EXPR_OBJC_ISA</name></decl>,


<decl><name>EXPR_OBJC_INDIRECT_COPY_RESTORE</name></decl>,


<decl><name>STMT_OBJC_FOR_COLLECTION</name></decl>,


<decl><name>STMT_OBJC_CATCH</name></decl>,


<decl><name>STMT_OBJC_FINALLY</name></decl>,


<decl><name>STMT_OBJC_AT_TRY</name></decl>,


<decl><name>STMT_OBJC_AT_SYNCHRONIZED</name></decl>,


<decl><name>STMT_OBJC_AT_THROW</name></decl>,


<decl><name>STMT_OBJC_AUTORELEASE_POOL</name></decl>,


<decl><name>EXPR_OBJC_BOOL_LITERAL</name></decl>,


<decl><name>EXPR_OBJC_AVAILABILITY_CHECK</name></decl>,




<decl><name>STMT_CXX_CATCH</name></decl>,


<decl><name>STMT_CXX_TRY</name></decl>,


<decl><name>STMT_CXX_FOR_RANGE</name></decl>,


<decl><name>EXPR_CXX_OPERATOR_CALL</name></decl>,


<decl><name>EXPR_CXX_MEMBER_CALL</name></decl>,


<decl><name>EXPR_CXX_REWRITTEN_BINARY_OPERATOR</name></decl>,


<decl><name>EXPR_CXX_CONSTRUCT</name></decl>,


<decl><name>EXPR_CXX_INHERITED_CTOR_INIT</name></decl>,


<decl><name>EXPR_CXX_TEMPORARY_OBJECT</name></decl>,


<decl><name>EXPR_CXX_STATIC_CAST</name></decl>,


<decl><name>EXPR_CXX_DYNAMIC_CAST</name></decl>,


<decl><name>EXPR_CXX_REINTERPRET_CAST</name></decl>,


<decl><name>EXPR_CXX_CONST_CAST</name></decl>,


<decl><name>EXPR_CXX_ADDRSPACE_CAST</name></decl>,


<decl><name>EXPR_CXX_FUNCTIONAL_CAST</name></decl>,


<decl><name>EXPR_BUILTIN_BIT_CAST</name></decl>,


<decl><name>EXPR_USER_DEFINED_LITERAL</name></decl>,


<decl><name>EXPR_CXX_STD_INITIALIZER_LIST</name></decl>,


<decl><name>EXPR_CXX_BOOL_LITERAL</name></decl>,

<decl><name>EXPR_CXX_NULL_PTR_LITERAL</name></decl>,
<decl><name>EXPR_CXX_TYPEID_EXPR</name></decl>,
<decl><name>EXPR_CXX_TYPEID_TYPE</name></decl>,
<decl><name>EXPR_CXX_THIS</name></decl>,
<decl><name>EXPR_CXX_THROW</name></decl>,
<decl><name>EXPR_CXX_DEFAULT_ARG</name></decl>,
<decl><name>EXPR_CXX_DEFAULT_INIT</name></decl>,
<decl><name>EXPR_CXX_BIND_TEMPORARY</name></decl>,

<decl><name>EXPR_CXX_SCALAR_VALUE_INIT</name></decl>,
<decl><name>EXPR_CXX_NEW</name></decl>,
<decl><name>EXPR_CXX_DELETE</name></decl>,
<decl><name>EXPR_CXX_PSEUDO_DESTRUCTOR</name></decl>,

<decl><name>EXPR_EXPR_WITH_CLEANUPS</name></decl>,

<decl><name>EXPR_CXX_DEPENDENT_SCOPE_MEMBER</name></decl>,
<decl><name>EXPR_CXX_DEPENDENT_SCOPE_DECL_REF</name></decl>,
<decl><name>EXPR_CXX_UNRESOLVED_CONSTRUCT</name></decl>,
<decl><name>EXPR_CXX_UNRESOLVED_MEMBER</name></decl>,
<decl><name>EXPR_CXX_UNRESOLVED_LOOKUP</name></decl>,

<decl><name>EXPR_CXX_EXPRESSION_TRAIT</name></decl>,
<decl><name>EXPR_CXX_NOEXCEPT</name></decl>,

<decl><name>EXPR_OPAQUE_VALUE</name></decl>,
<decl><name>EXPR_BINARY_CONDITIONAL_OPERATOR</name></decl>,
<decl><name>EXPR_TYPE_TRAIT</name></decl>,
<decl><name>EXPR_ARRAY_TYPE_TRAIT</name></decl>,

<decl><name>EXPR_PACK_EXPANSION</name></decl>,
<decl><name>EXPR_SIZEOF_PACK</name></decl>,
<decl><name>EXPR_SUBST_NON_TYPE_TEMPLATE_PARM</name></decl>,
<decl><name>EXPR_SUBST_NON_TYPE_TEMPLATE_PARM_PACK</name></decl>,
<decl><name>EXPR_FUNCTION_PARM_PACK</name></decl>,
<decl><name>EXPR_MATERIALIZE_TEMPORARY</name></decl>,
<decl><name>EXPR_CXX_FOLD</name></decl>,
<decl><name>EXPR_CONCEPT_SPECIALIZATION</name></decl>,
<decl><name>EXPR_REQUIRES</name></decl>,


<decl><name>EXPR_CUDA_KERNEL_CALL</name></decl>,


<decl><name>EXPR_ASTYPE</name></decl>,


<decl><name>EXPR_CXX_PROPERTY_REF_EXPR</name></decl>,
<decl><name>EXPR_CXX_PROPERTY_SUBSCRIPT_EXPR</name></decl>,
<decl><name>EXPR_CXX_UUIDOF_EXPR</name></decl>,
<decl><name>EXPR_CXX_UUIDOF_TYPE</name></decl>,
<decl><name>STMT_SEH_LEAVE</name></decl>,
<decl><name>STMT_SEH_EXCEPT</name></decl>,
<decl><name>STMT_SEH_FINALLY</name></decl>,
<decl><name>STMT_SEH_TRY</name></decl>,


<decl><name>STMT_OMP_CANONICAL_LOOP</name></decl>,
<decl><name>STMT_OMP_PARALLEL_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TILE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_UNROLL_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_SECTIONS_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_SECTION_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_SINGLE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_MASTER_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_CRITICAL_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_MASTER_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_SECTIONS_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASK_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASKYIELD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_BARRIER_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASKWAIT_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_FLUSH_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DEPOBJ_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_SCAN_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_ORDERED_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_ATOMIC_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_DATA_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_ENTER_DATA_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_EXIT_DATA_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_PARALLEL_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_PARALLEL_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TEAMS_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASKGROUP_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_CANCELLATION_POINT_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_CANCEL_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASKLOOP_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TASKLOOP_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_MASTER_TASKLOOP_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_MASTER_TASKLOOP_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_MASTER_TASKLOOP_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_PARALLEL_MASTER_TASKLOOP_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DISTRIBUTE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_UPDATE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DISTRIBUTE_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TEAMS_DISTRIBUTE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_TEAMS_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_INTEROP_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_DISPATCH_DIRECTIVE</name></decl>,
<decl><name>STMT_OMP_MASKED_DIRECTIVE</name></decl>,
<decl><name>EXPR_OMP_ARRAY_SECTION</name></decl>,
<decl><name>EXPR_OMP_ARRAY_SHAPING</name></decl>,
<decl><name>EXPR_OMP_ITERATOR</name></decl>,


<decl><name>EXPR_OBJC_BRIDGED_CAST</name></decl>,

<decl><name>STMT_MS_DEPENDENT_EXISTS</name></decl>,
<decl><name>EXPR_LAMBDA</name></decl>,
<decl><name>STMT_COROUTINE_BODY</name></decl>,
<decl><name>STMT_CORETURN</name></decl>,
<decl><name>EXPR_COAWAIT</name></decl>,
<decl><name>EXPR_COYIELD</name></decl>,
<decl><name>EXPR_DEPENDENT_COAWAIT</name></decl>,


<decl><name>EXPR_FIXEDPOINT_LITERAL</name></decl>,


<decl><name>EXPR_SYCL_UNIQUE_STABLE_NAME</name></decl>,
}</block>;</enum>



<enum>enum <name>DesignatorTypes</name> <block>{

<decl><name>DESIG_FIELD_NAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>DESIG_FIELD_DECL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>DESIG_ARRAY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>DESIG_ARRAY_RANGE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>



<enum>enum <name>CtorInitializerType</name> <block>{
<decl><name>CTOR_INITIALIZER_BASE</name></decl>,
<decl><name>CTOR_INITIALIZER_DELEGATING</name></decl>,
<decl><name>CTOR_INITIALIZER_MEMBER</name></decl>,
<decl><name>CTOR_INITIALIZER_INDIRECT_MEMBER</name></decl>
}</block>;</enum>


<enum>enum <name>CleanupObjectKind</name> <block>{ <decl><name>COK_Block</name></decl>, <decl><name>COK_CompoundLiteral</name></decl> }</block>;</enum>


<struct>struct <name>LocalRedeclarationsInfo</name> <block>{

<decl_stmt><decl><type><name>DeclID</name></type> <name>FirstID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>FirstID</name></name> <operator>&lt;</operator> <name><name>Y</name><operator>.</operator><name>FirstID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>FirstID</name></name> <operator>&gt;</operator> <name><name>Y</name><operator>.</operator><name>FirstID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>FirstID</name></name> <operator>&lt;=</operator> <name><name>Y</name><operator>.</operator><name>FirstID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>LocalRedeclarationsInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>FirstID</name></name> <operator>&gt;=</operator> <name><name>Y</name><operator>.</operator><name>FirstID</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>ObjCCategoriesInfo</name> <block>{

<decl_stmt><decl><type><name>DeclID</name></type> <name>DefinitionID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>DefinitionID</name></name> <operator>&lt;</operator> <name><name>Y</name><operator>.</operator><name>DefinitionID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>DefinitionID</name></name> <operator>&gt;</operator> <name><name>Y</name><operator>.</operator><name>DefinitionID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>DefinitionID</name></name> <operator>&lt;=</operator> <name><name>Y</name><operator>.</operator><name>DefinitionID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCCategoriesInfo</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>DefinitionID</name></name> <operator>&gt;=</operator> <name><name>Y</name><operator>.</operator><name>DefinitionID</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>






<decl_stmt><decl><type><name>class</name></type> <name>DeclarationNameKey</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>NameKind</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NameKind</name></type> <name>Kind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DeclarationNameKey</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>DeclarationNameKey</name><argument_list>(<argument>DeclarationName Name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DeclarationNameKey</name><argument_list>(<argument>NameKind Kind</argument>, <argument>uint64_t Data</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Data</name><argument_list>(<argument>Data</argument>)</argument_list></macro> <expr><block>{}</block>

<name>NameKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>Identifier</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>CXXLiteralOperatorName</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>CXXDeductionGuideName</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>IdentifierInfo</name> <operator>*</operator><operator>)</operator><name>Data</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Selector</name> <macro><name>getSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>ObjCZeroArgSelector</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>ObjCOneArgSelector</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>ObjCMultiArgSelector</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Selector</name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>OverloadedOperatorKind</name> <macro><name>getOperatorKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>DeclarationName</name><operator>::</operator><name>CXXOperatorName</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>OverloadedOperatorKind</name><operator>)</operator><name>Data</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>DeclarationNameKey</name> <operator>&amp;</operator><name>A</name><operator>,</operator>
<specifier>const</specifier> <name>DeclarationNameKey</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>Kind</name></name> <operator>==</operator> <name><name>B</name><operator>.</operator><name>Kind</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>.</operator><name>Data</name></name> <operator>==</operator> <name><name>B</name><operator>.</operator><name>Data</name></name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>serialization</name><operator>::</operator><name>DeclarationNameKey</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>serialization</name><operator>::</operator><name>DeclarationNameKey</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>serialization</name><operator>::</operator><call><name>DeclarationNameKey</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>serialization</name><operator>::</operator><name>DeclarationNameKey</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>serialization</name><operator>::</operator><call><name>DeclarationNameKey</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name>
<macro><name>getHashValue</name><argument_list>(<argument>const clang::serialization::DeclarationNameKey &amp;Key</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Key</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::serialization::DeclarationNameKey &amp;L</argument>,
<argument>const clang::serialization::DeclarationNameKey &amp;R</argument>)</argument_list></macro> <block>{
<return>return <expr><name>L</name> <operator>==</operator> <name>R</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
