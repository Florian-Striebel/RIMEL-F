<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/CleanupInfo.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_CLEANUP_INFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_CLEANUP_INFO_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CleanupInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ExprNeedsCleanups</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CleanupsHaveSideEffects</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>exprNeedsCleanups</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ExprNeedsCleanups</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>cleanupsHaveSideEffects</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CleanupsHaveSideEffects</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setExprNeedsCleanups</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>SideEffects</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ExprNeedsCleanups</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CleanupsHaveSideEffects</name> <operator>|=</operator> <name>SideEffects</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ExprNeedsCleanups</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CleanupsHaveSideEffects</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name>CleanupInfo</name></type> <name>Rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ExprNeedsCleanups</name> <operator>|=</operator> <name><name>Rhs</name><operator>.</operator><name>ExprNeedsCleanups</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>CleanupsHaveSideEffects</name> <operator>|=</operator> <name><name>Rhs</name><operator>.</operator><name>CleanupsHaveSideEffects</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
