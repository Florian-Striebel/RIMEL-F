<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/DirectoryEntry.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DIRECTORYENTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DIRECTORYENTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Hashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>FileMgr</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>RefTy</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MapEntryOptionalStorage</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DirectoryEntry</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>Name</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Name</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DirectoryEntryRef</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>&amp;</operator><macro><name>getDirEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name><name>ME</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ME</name><operator>-&gt;</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>friend</name> <name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hash_value</name><argument_list>(<argument>DirectoryEntryRef Ref</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_value</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>Ref</name><operator>.</operator><name>getDirEntry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>MapEntry</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMapEntry</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntry</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>MapEntry</name> <operator>&amp;</operator><macro><name>getMapEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ME</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isSameRef</name><argument_list>(<argument><expr><name>DirectoryEntryRef</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>ME</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ME</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><call><name>DirectoryEntryRef</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MapEntry</name> <operator>&amp;</operator><name>ME</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ME</name><argument_list>(<argument>&amp;ME</argument>)</argument_list></macro> <block>{}</block>


















<name>operator</name> <specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><call><name>getDirEntry</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
<struct>struct <name>optional_none_tag</name> <block>{}</block>;</struct>


<expr_stmt><expr><call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><name>optional_none_tag</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ME</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>hasOptionalValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ME</name></expr>;</return> }</block></expr></expr_stmt>

<macro><name>friend</name></macro> struct <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
<struct>struct <name>dense_map_empty_tag</name> <block>{}</block>;</struct>
<struct>struct <name>dense_map_tombstone_tag</name> <block>{}</block>;</struct>


<expr_stmt><expr><call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><name>dense_map_empty_tag</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ME</name><argument_list>(<argument>llvm::DenseMapInfo&lt;const MapEntry *&gt;::getEmptyKey()</argument>)</argument_list></macro> <block>{}</block>
<call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><name>dense_map_tombstone_tag</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ME</name><argument_list>(<argument>llvm::DenseMapInfo&lt;const MapEntry *&gt;::getTombstoneKey()</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>isSpecialDenseMapKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isSameRef</name><argument_list>(<argument><expr><call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><call><name>dense_map_empty_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>isSameRef</name><argument_list>(<argument><expr><call><name>DirectoryEntryRef</name><argument_list>(<argument><expr><call><name>dense_map_tombstone_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MapEntry</name> <modifier>*</modifier></type><name>ME</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>FileMgr</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>RefTy</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MapEntryOptionalStorage</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>optional_none_tag</name> <init>= <expr><name>typename</name> <name>RefTy</name><operator>::</operator><name>optional_none_tag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RefTy</name></type> <name>MaybeRef</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MapEntryOptionalStorage</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>MaybeRef</name><argument_list>(<argument>optional_none_tag()</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>MapEntryOptionalStorage</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>in_place_t</name></expr></argument>, <argument><expr><name>ArgTypes</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MaybeRef</name><argument_list>(<argument>std::forward&lt;ArgTypes&gt;(Args)...</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <block>{ <expr><name>MaybeRef</name> <operator>=</operator> <call><name>optional_none_tag</name><argument_list>()</argument_list></call></expr>; }</block>

<name>bool</name> <macro><name>hasValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>MaybeRef</name><operator>.</operator><name>hasOptionalValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>RefTy</name> <modifier>&amp;</modifier></type><name>getValue</name><parameter_list>()</parameter_list> LLVM_LVALUE_FUNCTION <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MaybeRef</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>RefTy</name> <specifier>const</specifier> <operator>&amp;</operator><macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_LVALUE_FUNCTION</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MaybeRef</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLVM_HAS_RVALUE_REFERENCE_THIS</name></expr></cpp:if>
<expr_stmt><expr><name>RefTy</name> <operator>&amp;&amp;</operator><call><name>getValue</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>MaybeRef</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>emplace</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator><name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>MaybeRef</name> <operator>=</operator> <call><name>RefTy</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>MapEntryOptionalStorage</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>RefTy</name> <name>Ref</name><operator>)</operator> <block>{
<expr><name>MaybeRef</name> <operator>=</operator> <name>Ref</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>optional_detail</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>OptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name>clang</name><operator>::</operator><name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>StorageImpl</name> <operator>=</operator>
<name>clang</name><operator>::</operator><name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>OptionalStorage</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>OptionalStorage</name><argument_list>(<argument><expr><name>in_place_t</name></expr></argument>, <argument><expr><name>ArgTypes</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StorageImpl</name><argument_list>(<argument>in_place_t{}</argument>, <argument>std::forward&lt;ArgTypes&gt;(Args)...</argument>)</argument_list></macro> <block>{}</block>

<name>OptionalStorage</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name> <name>Ref</name><operator>)</operator> <block>{
<expr><name>StorageImpl</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Ref</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
}</expr>;

<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof> <operator>==</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Optional&lt;DirectoryEntryRef&gt; must avoid size overhead"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name>static_assert</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_copyable</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Optional&lt;DirectoryEntryRef&gt; should be trivially copyable"</literal></expr></argument>)</argument_list></call></expr>;

}</block>


<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>DirectoryEntryRef</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>DirectoryEntryRef</name><argument_list>(
<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name><operator>::</operator><call><name>dense_map_empty_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>DirectoryEntryRef</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>DirectoryEntryRef</name><argument_list>(
<argument><expr><name>clang</name><operator>::</operator><name>DirectoryEntryRef</name><operator>::</operator><call><name>dense_map_tombstone_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::DirectoryEntryRef Val</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>hash_value</name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::DirectoryEntryRef LHS</argument>,
<argument>clang::DirectoryEntryRef RHS</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name><name>LHS</name><operator>.</operator><name>isSameRef</name></name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>


<if_stmt><if>if <condition>(<expr><call><name><name>LHS</name><operator>.</operator><name>isSpecialDenseMapKey</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>RHS</name><operator>.</operator><name>isSpecialDenseMapKey</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>


<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

namespace <macro><name>clang</name></macro> <block>{<block_content>























<decl_stmt><decl><type><name>class</name></type> <name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name>
<range>: <expr><name>public</name> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>(
<argument><expr><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;
<expr><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;

<macro><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>(<argument>llvm::NoneType</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>(<argument>DirectoryEntryRef Ref</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Optional</name></macro><operator>&lt;</operator><name>DirectoryEntryRef</name><operator>&gt;</operator><operator>(</operator><name>Ref</name><operator>)</operator> <block>{}</block>
<call><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name><argument_list>(<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <name>MaybeRef</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Optional</name></macro><operator>&lt;</operator><name>DirectoryEntryRef</name><operator>&gt;</operator><operator>(</operator><name>MaybeRef</name><operator>)</operator> <block>{}</block>

<name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>NoneType</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>None</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>DirectoryEntryRef</name> <name>Ref</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Ref</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <name>MaybeRef</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>MaybeRef</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>




<name>operator</name> <specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasValue</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirEntry</name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block>
}</expr>;

<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_copyable</name><argument_list type="generic">&lt;
<argument><expr><name>OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr should be "</literal>
<literal type="string">"trivially copyable"</literal></expr></argument>)</argument_list></call></expr>;

}</block></expr></range></decl></decl_stmt></block_content></block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
