<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_ATOMICCHANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_ATOMICCHANGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Core/Replacement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Any.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>AtomicChange</name> <block>{<block_content>
<label><name>public</name>:</label>




<macro><name>AtomicChange</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation KeyPosition</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>AtomicChange</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation KeyPosition</argument>,
<argument>llvm::Any Metadata</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>AtomicChange</name><argument_list>(<argument>llvm::StringRef FilePath</argument>, <argument>llvm::StringRef Key</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Key</name><argument_list>(<argument><expr><name>Key</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>FilePath</name><argument_list>(<argument>FilePath</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>AtomicChange</name><argument_list>(<argument><expr><name>AtomicChange</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>AtomicChange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AtomicChange</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>AtomicChange</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>AtomicChange</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AtomicChange</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>AtomicChange</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>AtomicChange</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>toYAMLString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>AtomicChange</name></type> <name>convertFromYAML</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>YAMLContent</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Key</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getFilePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FilePath</name></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>setError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Error</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Error</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Error</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Error</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>replace</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>const CharSourceRange &amp;Range</argument>,
<argument>llvm::StringRef ReplacementText</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>replace</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation Loc</argument>,
<argument>unsigned Length</argument>, <argument>llvm::StringRef Text</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>insert</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation Loc</argument>,
<argument>llvm::StringRef Text</argument>, <argument>bool InsertAfter = true</argument>)</argument_list></macro></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>addHeader</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Header</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>removeHeader</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Header</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Replacements</name> <operator>&amp;</operator><macro><name>getReplacements</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Replaces</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getInsertedHeaders</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InsertedHeaders</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getRemovedHeaders</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>RemovedHeaders</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Any</name> <operator>&amp;</operator><macro><name>getMetadata</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Metadata</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>AtomicChange</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<macro><name>AtomicChange</name><argument_list>(<argument>std::string Key</argument>, <argument>std::string FilePath</argument>, <argument>std::string Error</argument>,
<argument>std::vector&lt;std::string&gt; InsertedHeaders</argument>,
<argument>std::vector&lt;std::string&gt; RemovedHeaders</argument>,
<argument>clang::tooling::Replacements Replaces</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FilePath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>InsertedHeaders</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>RemovedHeaders</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tooling</name><operator>::</operator><name>Replacements</name> <name>Replaces</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Any</name> <name>Metadata</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>AtomicChanges</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChange</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<struct>struct <name>ApplyChangesSpec</name> <block>{



<decl_stmt><decl><type><name>bool</name></type> <name>Cleanup</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name><operator>::</operator><name>FormatStyle</name> <name>Style</name> <operator>=</operator> <name>format</name><operator>::</operator><call><name>getNoStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<enum>enum <name>FormatOption</name> <block>{ <decl><name>kAll</name></decl>, <decl><name>kNone</name></decl>, <decl><name>kViolations</name></decl> }</block>;</enum>

<decl_stmt><decl><type><name>FormatOption</name></type> <name>Format</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>











<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name>
<macro><name>applyAtomicChanges</name><argument_list>(<argument>llvm::StringRef FilePath</argument>, <argument>llvm::StringRef Code</argument>,
<argument>llvm::ArrayRef&lt;AtomicChange&gt; Changes</argument>,
<argument>const ApplyChangesSpec &amp;Spec</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
