<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/ModuleLoader.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_MODULELOADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_MODULELOADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>GlobalModuleIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>ModuleIdPath</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ModuleLoadResult</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>LoadResultKind</name> <block>{

<decl><name>Normal</name></decl>,




<decl><name>MissingExpected</name></decl>,


<decl><name>ConfigMismatch</name></decl>,
}</block>;</enum>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>Module</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LoadResultKind</name></expr></argument>&gt;</argument_list></name> <name>Storage</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ModuleLoadResult</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ModuleLoadResult</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>M</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Storage</name><argument_list>(<argument>M</argument>, <argument>Normal</argument>)</argument_list></macro> <block>{}</block>
<macro><name>ModuleLoadResult</name><argument_list>(<argument>LoadResultKind Kind</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Storage</name><argument_list>(<argument>nullptr</argument>, <argument>Kind</argument>)</argument_list></macro> <block>{}</block>

<name>operator</name> <name>Module</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isNormal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Normal</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>isMissingExpected</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MissingExpected</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isConfigMismatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConfigMismatch</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ModuleLoader</name> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>BuildingModule</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>ModuleLoader</name><argument_list>(<argument>bool BuildingModule = false</argument>)</argument_list></macro>
: <macro><name>BuildingModule</name><argument_list>(<argument>BuildingModule</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ModuleLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>buildingModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BuildingModule</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setBuildingModule</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>BuildingModuleFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>BuildingModule</name> <operator>=</operator> <name>BuildingModuleFlag</name></expr>;</expr_stmt>
</block_content>}</block></function>





















<decl_stmt><decl><type><name>virtual</name> <name>ModuleLoadResult</name></type> <name>loadModule</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>ImportLoc</name></expr></argument>,
<argument><expr><name>ModuleIdPath</name> <name>Path</name></expr></argument>,
<argument><expr><name>Module</name><operator>::</operator><name>NameVisibilityKind</name> <name>Visibility</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsInclusionDirective</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<function_decl><type><name>virtual</name> <name>void</name></type> <name>createModuleFromSource</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>ModuleName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Source</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>makeModuleVisible</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>,
<argument><expr><name>Module</name><operator>::</operator><name>NameVisibilityKind</name> <name>Visibility</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ImportLoc</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>











<function_decl><type><name>virtual</name> <name>GlobalModuleIndex</name> <modifier>*</modifier></type><name>loadGlobalModuleIndex</name><parameter_list>(
<parameter><decl><type><name>SourceLocation</name></type> <name>TriggerLoc</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>bool</name></type> <name>lookupMissingImports</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>TriggerLoc</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>HadFatalFailure</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TrivialModuleLoader</name> <range>: <expr><name>public</name> <name>ModuleLoader</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>ModuleLoadResult</name> <macro><name>loadModule</name><argument_list>(<argument>SourceLocation ImportLoc</argument>, <argument>ModuleIdPath Path</argument>,
<argument>Module::NameVisibilityKind Visibility</argument>,
<argument>bool IsInclusionDirective</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block>

<name>void</name> <macro><name>createModuleFromSource</name><argument_list>(<argument>SourceLocation ImportLoc</argument>, <argument>StringRef ModuleName</argument>,
<argument>StringRef Source</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

<name>void</name> <macro><name>makeModuleVisible</name><argument_list>(<argument>Module *Mod</argument>, <argument>Module::NameVisibilityKind Visibility</argument>,
<argument>SourceLocation ImportLoc</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

<name>GlobalModuleIndex</name> <operator>*</operator><macro><name>loadGlobalModuleIndex</name><argument_list>(<argument>SourceLocation TriggerLoc</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>lookupMissingImports</name><argument_list>(<argument>StringRef Name</argument>,
<argument>SourceLocation TriggerLoc</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
