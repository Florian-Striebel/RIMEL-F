<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTORINGCALLBACKS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTORINGCALLBACKS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>RefactoringCallback</name> <range>: <expr><name>public</name> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RefactoringCallback</name><argument_list>()</argument_list></call></expr>;
<expr><name>Replacements</name> <operator>&amp;</operator><call><name>getReplacements</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Replacements</name> <name>Replace</name></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>ASTMatchRefactorer</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>ASTMatchRefactorer</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Matcher</name></decl></parameter>, <parameter><decl><type><name>RefactoringCallback</name> <modifier>*</modifier></type><name>Callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>MatchFinder</name><operator>.</operator><name>addMatcher</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Callbacks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>addDynamicMatcher</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <operator>&amp;</operator><name>Matcher</name></expr></argument>,
<argument><expr><name>RefactoringCallback</name> <operator>*</operator><name>Callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>newASTConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>RefactoringASTConsumer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ast_matchers</name><operator>::</operator><name>MatchFinder</name> <name>MatchFinder</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ReplaceStmtWithText</name> <range>: <expr><name>public</name> <name>RefactoringCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ReplaceStmtWithText</name><argument_list>(<argument>StringRef FromId</argument>, <argument>StringRef ToText</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>FromId</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ToText</name></expr>;
}</block></expr></range></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>ReplaceNodeWithTemplate</name> <range>: <expr><name>public</name> <name>RefactoringCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ReplaceNodeWithTemplate</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>StringRef FromId</argument>, <argument>StringRef ToTemplate</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
struct <name>TemplateElement</name> <block>{
enum <expr><block>{ <expr><name>Literal</name></expr>, <expr><name>Identifier</name></expr> }</block> <name>Type</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Value</name></expr>;
}</block></expr>;
<macro><name>ReplaceNodeWithTemplate</name><argument_list>(<argument>llvm::StringRef FromId</argument>,
<argument>std::vector&lt;TemplateElement&gt; Template</argument>)</argument_list></macro>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>FromId</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TemplateElement</name></expr></argument>&gt;</argument_list></name> <name>Template</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ReplaceStmtWithStmt</name> <range>: <expr><name>public</name> <name>RefactoringCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ReplaceStmtWithStmt</name><argument_list>(<argument>StringRef FromId</argument>, <argument>StringRef ToId</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>FromId</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ToId</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ReplaceIfStmtWithItsBody</name> <range>: <expr><name>public</name> <name>RefactoringCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ReplaceIfStmtWithItsBody</name><argument_list>(<argument>StringRef Id</argument>, <argument>bool PickTrueBranch</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>Id</name></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>PickTrueBranch</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
