<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Weak.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_WEAK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_WEAK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>WeakInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>used</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>WeakInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>alias</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>loc</name><argument_list>(<argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>used</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>WeakInfo</name><argument_list>(<argument>IdentifierInfo *Alias</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>alias</name><argument_list>(<argument><expr><name>Alias</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>used</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<specifier>inline</specifier> <name>IdentifierInfo</name> <operator>*</operator> <macro><name>getAlias</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>alias</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>loc</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUsed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Used</name><init>=<expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>used</name> <operator>=</operator> <name>Used</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>getUsed</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>used</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>WeakInfo</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>alias</name> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getAlias</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>loc</name> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>WeakInfo</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
