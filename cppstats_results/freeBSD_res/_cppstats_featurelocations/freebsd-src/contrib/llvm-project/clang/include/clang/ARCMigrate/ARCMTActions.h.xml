<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ARCMigrate/ARCMTActions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ARCMIGRATE_ARCMTACTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ARCMIGRATE_ARCMTACTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ARCMigrate/FileRemapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendAction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>arcmt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CheckAction</name> <range>: <expr><name>public</name> <name>WrapperFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CheckAction</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>WrappedAction</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ModifyAction</name> <range>: <expr><name>public</name> <name>WrapperFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ModifyAction</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>WrappedAction</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MigrateSourceAction</name> <range>: <expr><name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>FileRemapper</name> <name>Remapper</name></expr>;
<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MigrateAction</name> <range>: <expr><name>public</name> <name>WrapperFrontendAction</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>MigrateDir</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>PlistOut</name></expr>;
<expr><name>bool</name> <name>EmitPremigrationARCErros</name></expr>;
<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>MigrateAction</name><argument_list>(<argument>std::unique_ptr&lt;FrontendAction&gt; WrappedAction</argument>,
<argument>StringRef migrateDir</argument>,
<argument>StringRef plistOut</argument>,
<argument>bool emitPremigrationARCErrors</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCMigrateAction</name> <range>: <expr><name>public</name> <name>WrapperFrontendAction</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>MigrateDir</name></expr>;
<expr><name>unsigned</name> <name>ObjCMigAction</name></expr>;
<expr><name>FileRemapper</name> <name>Remapper</name></expr>;
<expr><name>CompilerInstance</name> <operator>*</operator><name>CompInst</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>ObjCMigrateAction</name><argument_list>(<argument>std::unique_ptr&lt;FrontendAction&gt; WrappedAction</argument>,
<argument>StringRef migrateDir</argument>, <argument>unsigned migrateAction</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
