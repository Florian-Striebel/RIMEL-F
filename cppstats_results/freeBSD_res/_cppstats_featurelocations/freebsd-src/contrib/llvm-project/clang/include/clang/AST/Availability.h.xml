<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/Availability.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_AVAILABILITY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_AVAILABILITY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>









<decl_stmt><decl><type><name>class</name></type> <name>AvailabilitySpec</name> <block>{<block_content>



<decl_stmt><decl><type><name>VersionTuple</name></type> <name>Version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>Platform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>BeginLoc</name></decl>, <decl><type ref="prev"/><name>EndLoc</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>AvailabilitySpec</name><argument_list>(<argument>VersionTuple Version</argument>, <argument>StringRef Platform</argument>,
<argument>SourceLocation BeginLoc</argument>, <argument>SourceLocation EndLoc</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Version</name><argument_list>(<argument><expr><name>Version</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Platform</name><argument_list>(<argument><expr><name>Platform</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BeginLoc</name><argument_list>(<argument><expr><name>BeginLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>EndLoc</name><argument_list>(<argument>EndLoc</argument>)</argument_list></macro> <expr><block>{}</block>


<macro><name>AvailabilitySpec</name><argument_list>(<argument>SourceLocation StarLoc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>BeginLoc</name><argument_list>(<argument><expr><name>StarLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>EndLoc</name><argument_list>(<argument>StarLoc</argument>)</argument_list></macro> <expr><block>{}</block>

<name>VersionTuple</name> <macro><name>getVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Version</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getPlatform</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Platform</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BeginLoc</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EndLoc</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOtherPlatformSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Version</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
