<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_PREPROCESSORLEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_PREPROCESSORLEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/HeaderSearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/MultipleIncludeOpt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorLexer</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Preprocessor</name> <modifier>*</modifier></type><name>PP</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>FileID</name></type> <name>FID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>InitialNumSLocEntries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>ParsingPreprocessorDirective</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ParsingFilename</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>














<decl_stmt><decl><type><name>bool</name></type> <name>LexingRawMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>MultipleIncludeOpt</name></type> <name>MIOpt</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PPConditionalInfo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>ConditionalStack</name></decl>;</decl_stmt>

<struct>struct <name>IncludeInfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Location</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>IncludeInfo</name></expr></argument>&gt;</argument_list></name> <name>IncludeHistory</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PreprocessorLexer</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>FID</name><argument_list>()</argument_list></macro> <block>{}</block>
<macro><name>PreprocessorLexer</name><argument_list>(<argument>Preprocessor *pp</argument>, <argument>FileID fid</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PreprocessorLexer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>IndirectLex</name><parameter_list>(<parameter><decl><type><name>Token</name><modifier>&amp;</modifier></type> <name>Result</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>SourceLocation</name></type> <name>getSourceLocation</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>







<function><type><name>void</name></type> <name>pushConditionalLevel</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>DirectiveStart</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>WasSkipping</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>FoundNonSkip</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>FoundElse</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PPConditionalInfo</name></type> <name>CI</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>CI</name><operator>.</operator><name>IfLoc</name></name> <operator>=</operator> <name>DirectiveStart</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CI</name><operator>.</operator><name>WasSkipping</name></name> <operator>=</operator> <name>WasSkipping</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CI</name><operator>.</operator><name>FoundNonSkip</name></name> <operator>=</operator> <name>FoundNonSkip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CI</name><operator>.</operator><name>FoundElse</name></name> <operator>=</operator> <name>FoundElse</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ConditionalStack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pushConditionalLevel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PPConditionalInfo</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>ConditionalStack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>popConditionalLevel</name><parameter_list>(<parameter><decl><type><name>PPConditionalInfo</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>ConditionalStack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>CI</name> <operator>=</operator> <call><name><name>ConditionalStack</name><operator>.</operator><name>pop_back_val</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>PPConditionalInfo</name> <modifier>&amp;</modifier></type><name>peekConditionalLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>ConditionalStack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No conditionals active!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>ConditionalStack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getConditionalStackDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ConditionalStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PreprocessorLexer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PreprocessorLexer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PreprocessorLexer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PreprocessorLexer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>LexIncludeFilename</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>FilenameTok</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>setParsingPreprocessorDirective</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ParsingPreprocessorDirective</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isLexingRawMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LexingRawMode</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>Preprocessor</name> <operator>*</operator><macro><name>getPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PP</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>getFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>PP</name> <operator>&amp;&amp;</operator>
<literal type="string">"PreprocessorLexer::getFileID() should only be used with a Preprocessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>FID</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getInitialNumSLocEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InitialNumSLocEntries</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><macro><name>getFileEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>conditional_iterator</name> <init>=
<expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>PPConditionalInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>conditional_iterator</name> <macro><name>conditional_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ConditionalStack</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>conditional_iterator</name> <macro><name>conditional_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ConditionalStack</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setConditionalLevels</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PPConditionalInfo</name></expr></argument>&gt;</argument_list></name></type> <name>CL</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>ConditionalStack</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ConditionalStack</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>CL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>CL</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addInclude</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>&amp;</modifier></type><name>File</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Location</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>IncludeHistory</name></macro><expr_stmt><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>{Filename</argument>, <argument>{&amp;File</argument>, <argument>Location}}</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>IncludeInfo</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getIncludeHistory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IncludeHistory</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
