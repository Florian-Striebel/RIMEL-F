<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTORING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTORING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Core/Replacement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Tooling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Rewriter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>RefactoringTool</name> <range>: <expr><name>public</name> <name>ClangTool</name> <block>{
<expr><name>public</name><operator>:</operator>

<call><name>RefactoringTool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilationDatabase</name> <operator>&amp;</operator><name>Compilations</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SourcePaths</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;



<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>getReplacements</name><argument_list>()</argument_list></call></expr>;





<expr><name>int</name> <call><name>runAndSave</name><argument_list>(<argument><expr><name>FrontendActionFactory</name> <operator>*</operator><name>ActionFactory</name></expr></argument>)</argument_list></call></expr>;










<expr><name>bool</name> <call><name>applyAllReplacements</name><argument_list>(<argument><expr><name>Rewriter</name> <operator>&amp;</operator><name>Rewrite</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>

<name>int</name> <call><name>saveRewrittenFiles</name><argument_list>(<argument><expr><name>Rewriter</name> <operator>&amp;</operator><name>Rewrite</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <name>FileToReplaces</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>bool</name></type> <name>formatAndApplyAllReplacements</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FileToReplaces</name></expr></argument>,
<argument><expr><name>Rewriter</name> <operator>&amp;</operator><name>Rewrite</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Style</name> <operator>=</operator> <literal type="string">"file"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
