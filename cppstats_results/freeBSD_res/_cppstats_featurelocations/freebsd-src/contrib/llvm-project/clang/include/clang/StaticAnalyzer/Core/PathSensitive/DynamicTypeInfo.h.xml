<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/DynamicTypeInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_DYNAMICTYPEINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_DYNAMICTYPEINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>DynamicTypeInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DynamicTypeInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>DynTy</name><argument_list>(<argument>QualType()</argument>)</argument_list></macro> <block>{}</block>

<macro><name>DynamicTypeInfo</name><argument_list>(<argument>QualType Ty</argument>, <argument>bool CanBeSub = true</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DynTy</name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CanBeASubClass</name><argument_list>(<argument>CanBeSub</argument>)</argument_list></macro> <expr><block>{}</block>



<name>bool</name> <macro><name>canBeASubClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CanBeASubClass</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>DynTy</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DynTy</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>DynamicTypeInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>DynTy</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>DynTy</name></name> <operator>&amp;&amp;</operator> <name>CanBeASubClass</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>CanBeASubClass</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>DynTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddBoolean</name></name><argument_list>(<argument><expr><name>CanBeASubClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>QualType</name></type> <name>DynTy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CanBeASubClass</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
