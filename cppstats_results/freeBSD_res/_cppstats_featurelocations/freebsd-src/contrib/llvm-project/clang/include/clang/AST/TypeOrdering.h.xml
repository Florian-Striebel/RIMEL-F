<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TypeOrdering.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TYPEORDERING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TYPEORDERING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CanonicalType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<struct>struct <name>QualTypeOrdering</name> <block>{
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>QualType</name> <name>T1</name><operator>,</operator> <name>QualType</name> <name>T2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><call><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>T1</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>T2</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator> struct <name>DenseMapInfo</name></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>QualType</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>QualType</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>clang</name><operator>::</operator><call><name>QualType</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>QualType</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>using</name> <name>clang</name><operator>::</operator><name>QualType</name></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::QualType Val</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name><name>Val</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>^</operator>
<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name><name>Val</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::QualType LHS</argument>, <argument>clang::QualType RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CanQualType</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>CanQualType</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>CanQualType</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>CanQualType</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>using</name> <name>clang</name><operator>::</operator><name>CanQualType</name></expr>;
<return>return <expr><name>CanQualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::CanQualType Val</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name><name>Val</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>^</operator>
<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name><name>Val</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::CanQualType LHS</argument>, <argument>clang::CanQualType RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;
}</block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
