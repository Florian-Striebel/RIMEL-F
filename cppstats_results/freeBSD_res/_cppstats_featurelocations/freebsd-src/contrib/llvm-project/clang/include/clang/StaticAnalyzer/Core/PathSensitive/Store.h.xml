<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_STORE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_STORE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/StoreRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CastExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompoundLiteralExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBasePath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LocationContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIvarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StackFrameContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CallEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramStateManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ScanReachableSymbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolReaper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>InvalidatedSymbols</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRef</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StoreManager</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>SValBuilder</name> <modifier>&amp;</modifier></type><name>svalBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProgramStateManager</name> <modifier>&amp;</modifier></type><name>StateMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MemRegionManager</name> <modifier>&amp;</modifier></type><name>MRMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StoreManager</name><argument_list>(<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>stateMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>StoreManager</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>








<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>getBinding</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><name>Loc</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name> <init>= <expr><call><name>QualType</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>











<function_decl><type><name>virtual</name> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></type> <name>getDefaultBinding</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>









<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></type> <name>getDefaultBinding</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>LazyCompoundVal</name> <name>lcv</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getDefaultBinding</name><argument_list>(<argument><expr><call><name><name>lcv</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>lcv</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>








<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>Bind</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><name>Loc</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>val</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>BindDefaultInitial</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>BindDefaultZero</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>killBinding</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>ST</name></decl></parameter>, <parameter><decl><type><name>Loc</name></type> <name>L</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>getInitialStore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>InitLoc</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function><type><name>MemRegionManager</name><modifier>&amp;</modifier></type> <name>getRegionManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MRMgr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>SValBuilder</name><modifier>&amp;</modifier></type> <name>getSValBuilder</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>svalBuilder</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>Loc</name></type> <name>getLValueVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>svalBuilder</name><operator>.</operator><name>makeLoc</name></name><argument_list>(<argument><expr><call><name><name>MRMgr</name><operator>.</operator><name>getVarRegion</name></name><argument_list>(<argument><expr><name>VD</name></expr></argument>, <argument><expr><name>LC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Loc</name></type> <name>getLValueCompoundLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompoundLiteralExpr</name> <modifier>*</modifier></type><name>CL</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>MemRegionVal</name><argument_list>(<argument><expr><call><name><name>MRMgr</name><operator>.</operator><name>getCompoundLiteralRegion</name></name><argument_list>(<argument><expr><name>CL</name></expr></argument>, <argument><expr><name>LC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>getLValueIvar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCIvarDecl</name> <modifier>*</modifier></type><name>decl</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>SVal</name></type> <name>getLValueField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getLValueFieldOrIvar</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>getLValueElement</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>elementType</name></decl></parameter>, <parameter><decl><type><name>NonLoc</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Base</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>ArrayToPointer</name><parameter_list>(<parameter><decl><type><name>Loc</name></type> <name>Array</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>ElementTy</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>SVal</name></type> <name>evalDerivedToBase</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>Derived</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>Cast</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>SVal</name></type> <name>evalDerivedToBase</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>Derived</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXBasePath</name> <modifier>&amp;</modifier></type><name>CastPath</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>SVal</name></type> <name>evalDerivedToBase</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>Derived</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>DerivedPtrType</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsVirtual</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>SVal</name></type> <name>attemptDownCast</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>DerivedPtrType</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>Failed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>ElementRegion</name> <modifier>*</modifier></type><name>GetElementZeroRegion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>castRegion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>CastToTy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>removeDeadBindings</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackFrameContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>SymbolReaper</name> <modifier>&amp;</modifier></type><name>SymReaper</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>includedInBindings</name><argument_list>(<argument><expr><name>Store</name> <name>store</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>region</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<function><type><name>virtual</name> <name>void</name></type> <name>incrementReferenceCount</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>decrementReferenceCount</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>InvalidatedRegions</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
























<function_decl><type><name>virtual</name> <name>StoreRef</name></type> <name>invalidateRegions</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></type> <name>Values</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>InvalidatedSymbols</name> <modifier>&amp;</modifier></type><name>IS</name></decl></parameter>,
<parameter><decl><type><name>RegionAndSymbolInvalidationTraits</name> <modifier>&amp;</modifier></type><name>ITraits</name></decl></parameter>,
<parameter><decl><type><name>InvalidatedRegions</name> <modifier>*</modifier></type><name>InvalidatedTopLevel</name></decl></parameter>,
<parameter><decl><type><name>InvalidatedRegions</name> <modifier>*</modifier></type><name>Invalidated</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>StoreRef</name></type> <name>enterStackFrame</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackFrameContext</name> <modifier>*</modifier></type><name>CalleeCtx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>virtual</name> <name>bool</name></type> <name>scanReachableSymbols</name><parameter_list>(<parameter><decl><type><name>Store</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>ScanReachableSymbols</name> <modifier>&amp;</modifier></type><name>Visitor</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printJson</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>, <argument><expr><name>Store</name> <name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>NL</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>int</name> <name>Space</name></expr></argument>, <argument><expr><name>bool</name> <name>IsDot</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BindingsHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BindingsHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>HandleBinding</name><parameter_list>(<parameter><decl><type><name>StoreManager</name><modifier>&amp;</modifier></type> <name>SMgr</name></decl></parameter>, <parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>val</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FindUniqueBinding</name> <range>: <expr><name>public</name> <name>BindingsHandler</name> <block>{
<expr><name>SymbolRef</name> <name>Sym</name></expr>;
<expr><specifier>const</specifier> <name>MemRegion</name><operator>*</operator> <name>Binding</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>bool</name> <name>First</name> <operator>=</operator> <name>true</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>FindUniqueBinding</name><argument_list>(<argument>SymbolRef sym</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Sym</name><argument_list>(<argument>sym</argument>)</argument_list></macro> <block>{}</block>

<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>First</name> <operator>&amp;&amp;</operator> <name>Binding</name></expr>;</return> }</block>

<name>bool</name> <macro><name>HandleBinding</name><argument_list>(<argument>StoreManager&amp; SMgr</argument>, <argument>Store store</argument>, <argument>const MemRegion* R</argument>,
<argument>SVal val</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><macro><name>getRegion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Binding</name></expr>;</return> }</block>
}</expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>iterBindings</name><argument_list>(<argument>Store store</argument>, <argument>BindingsHandler&amp; f</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<specifier>const</specifier> <name>ElementRegion</name> <operator>*</operator><macro><name>MakeElementRegion</name><argument_list>(<argument>const SubRegion *baseRegion</argument>,
<argument>QualType pointeeTy</argument>,
<argument>uint64_t index = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
<name>SVal</name> <macro><name>getLValueFieldOrIvar</name><argument_list>(<argument>const Decl *decl</argument>, <argument>SVal base</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>StoreRef</name><operator>::</operator><macro><name>StoreRef</name><argument_list>(<argument>Store store</argument>, <argument>StoreManager &amp; smgr</argument>)</argument_list></macro>
<operator>:</operator> <call><name>store</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>mgr</name><argument_list>(<argument>smgr</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>incrementReferenceCount</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>StoreRef</name><operator>::</operator><call><name>StoreRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>sr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>store</name><argument_list>(<argument><expr><name><name>sr</name><operator>.</operator><name>store</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>mgr</name><argument_list>(<argument>sr.mgr</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>incrementReferenceCount</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>StoreRef</name><operator>::</operator><operator>~</operator><macro><name>StoreRef</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>decrementReferenceCount</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>StoreRef</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>StoreRef</name> <specifier>const</specifier> <operator>&amp;</operator><name>newStore</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newStore</name><operator>.</operator><name>mgr</name></name> <operator>==</operator> <operator>&amp;</operator><name>mgr</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>store</name> <operator>!=</operator> <name><name>newStore</name><operator>.</operator><name>store</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>incrementReferenceCount</name></name><argument_list>(<argument><expr><name><name>newStore</name><operator>.</operator><name>store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mgr</name><operator>.</operator><name>decrementReferenceCount</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name><name>newStore</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StoreManager</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateRegionStoreManager</name><argument_list>(<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>StMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StoreManager</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateFieldsOnlyRegionStoreManager</name><argument_list>(<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>StMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
