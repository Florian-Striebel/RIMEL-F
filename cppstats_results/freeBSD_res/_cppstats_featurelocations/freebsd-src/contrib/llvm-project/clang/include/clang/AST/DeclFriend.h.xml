<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclFriend.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLFRIEND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLFRIEND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExternalASTSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLoc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>class</name> <name>FriendDecl</name></type> <name>final</name>
<range>: <expr><name>public</name> <name>Decl</name></expr></range></decl>,
<decl><type ref="prev"/><name>private</name> <name>llvm</name>::<name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>FriendDecl</name></expr></argument>, <argument><expr><name>TemplateParameterList</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>FriendUnion</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>TypeSourceInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>CXXRecordDecl</name><operator>::</operator><name>friend_iterator</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>FriendUnion</name></type> <name>Friend</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LazyDeclPtr</name></type> <name>NextFriend</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>FriendLoc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>UnsupportedFriend</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>NumTPLists</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>

<macro><name>FriendDecl</name><argument_list>(<argument>DeclContext *DC</argument>, <argument>SourceLocation L</argument>, <argument>FriendUnion Friend</argument>,
<argument>SourceLocation FriendL</argument>,
<argument>ArrayRef&lt;TemplateParameterList *&gt; FriendTypeTPLists</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Decl</name><argument_list>(<argument><expr><name>Decl</name><operator>::</operator><name>Friend</name></expr></argument>, <argument><expr><name>DC</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Friend</name><argument_list>(<argument><expr><name>Friend</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FriendLoc</name><argument_list>(<argument><expr><name>FriendL</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UnsupportedFriend</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NumTPLists</name><argument_list>(<argument>FriendTypeTPLists.size()</argument>)</argument_list></macro> <expr><block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NumTPLists</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>FriendTypeTPLists</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
}</block></expr></expr_stmt>

<macro><name>FriendDecl</name><argument_list>(<argument>EmptyShell Empty</argument>, <argument>unsigned NumFriendTypeTPLists</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Decl</name><argument_list>(<argument><expr><name>Decl</name><operator>::</operator><name>Friend</name></expr></argument>, <argument><expr><name>Empty</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UnsupportedFriend</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>NumTPLists</name><argument_list>(<argument>NumFriendTypeTPLists</argument>)</argument_list></macro> <expr><block>{}</block>

<name>FriendDecl</name> <operator>*</operator><macro><name>getNextFriend</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NextFriend</name><operator>.</operator><name>isOffset</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>FriendDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>NextFriend</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getNextFriendSlowCase</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>FriendDecl</name> <modifier>*</modifier></type><name>getNextFriendSlowCase</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTNodeImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name></type> <name>TrailingObjects</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>FriendDecl</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>FriendUnion</name></type> <name>Friend_</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>FriendL</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>FriendTypeTPLists</name>
<init>= <expr><name>None</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FriendDecl</name> <modifier>*</modifier></type><name>CreateDeserialized</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>FriendTypeNumTPLists</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>TypeSourceInfo</name> <operator>*</operator><macro><name>getFriendType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Friend</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>TypeSourceInfo</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getFriendTypeNumTemplateParameterLists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumTPLists</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>TemplateParameterList</name> <modifier>*</modifier></type><name>getFriendTypeTemplateParameterList</name><argument_list>(<argument><expr><name>unsigned</name> <name>N</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>N</name> <operator>&lt;</operator> <name>NumTPLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getFriendDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Friend</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>NamedDecl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>SourceLocation</name> <macro><name>getFriendLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FriendLoc</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <name>LLVM_READONLY</name> <block>{
<if_stmt><if>if <condition>(<decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name> <init>= <expr><call><name>getFriendDecl</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>FD</name><operator>-&gt;</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FTD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionTemplateDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>FTD</name><operator>-&gt;</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CTD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ClassTemplateDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>CTD</name><operator>-&gt;</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>DD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclaratorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>DD</name><operator>-&gt;</operator><name>getOuterLocStart</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>DD</name><operator>-&gt;</operator><name>getInnerLocStart</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>DD</name><operator>-&gt;</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return SourceRange(getFriendLoc(</block></if></if_stmt>)</block_content></block><operator>,</operator> <expr_stmt><expr><call><name><name>ND</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr></expr_stmt></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<if_stmt><if type="elseif">else if <condition>(<decl><type><name>TypeSourceInfo</name> <modifier>*</modifier></type><name>TInfo</name> <init>= <expr><call><name>getFriendType</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>StartL</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>NumTPLists</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>getFriendLoc</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index>
<operator>-&gt;</operator><call><name>getTemplateLoc</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>StartL</name></expr></argument>, <argument><expr><call><name><name>TInfo</name><operator>-&gt;</operator><name>getTypeLoc</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>SourceRange</name><argument_list>(<argument><expr><call><name>getFriendLoc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}


bool <macro><name>isUnsupportedFriend</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><name>UnsupportedFriend</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUnsupportedFriend</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Unsupported</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>UnsupportedFriend</name> <operator>=</operator> <name>Unsupported</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>classofKind</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classofKind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>K</name> <operator>==</operator> <name>Decl</name><operator>::</operator><name>Friend</name></expr>;</return> </block_content>}</block></function>
};


<expr_stmt><expr><name>class</name> <name>CXXRecordDecl</name><operator>::</operator><name>friend_iterator</name> <block>{
<expr><name>friend</name> <name>class</name> <name>CXXRecordDecl</name></expr>;

<expr><name>FriendDecl</name> <operator>*</operator><name>Ptr</name></expr>;

<expr><name>explicit</name> <call><name>friend_iterator</name><argument_list>(<argument><expr><name>FriendDecl</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<call><name>friend_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>FriendDecl</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>FriendDecl</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>FriendDecl</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>int</name></expr>;
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr>;

<expr><name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name></expr>;</return></block></expr> }</block>

<name>friend_iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Ptr</name> <operator>&amp;&amp;</operator> <literal type="string">"attempt to increment past end of friend list"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>Ptr</name> <operator>=</operator> <call><name><name>Ptr</name><operator>-&gt;</operator><name>getNextFriend</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>friend_iterator</name> <name>tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>friend_iterator</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>friend_iterator</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend_iterator</name> <operator>&amp;</operator><name>operator</name><operator>+=</operator><operator>(</operator><name>difference_type</name> <name>N</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>N</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"cannot rewind a CXXRecordDecl::friend_iterator"</literal></expr></argument>)</argument_list></call></expr>;
<while>while <condition>(<expr><name>N</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>this</name></expr>;</expr_stmt></block_content></block></while></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

friend_iterator <expr_stmt><expr><name>operator</name><operator>+</operator><operator>(</operator><name>difference_type</name> <name>N</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><name>friend_iterator</name> <name>tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>tmp</name> <operator>+=</operator> <name>N</name></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>CXXRecordDecl</name><operator>::</operator><name>friend_iterator</name> <name>CXXRecordDecl</name><operator>::</operator><macro><name>friend_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>friend_iterator</name><argument_list>(<argument><expr><call><name>getFirstFriend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>CXXRecordDecl</name><operator>::</operator><name>friend_iterator</name> <name>CXXRecordDecl</name><operator>::</operator><macro><name>friend_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>friend_iterator</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>CXXRecordDecl</name><operator>::</operator><name>friend_range</name> <name>CXXRecordDecl</name><operator>::</operator><macro><name>friends</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>friend_range</name><argument_list>(<argument><expr><call><name>friend_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>friend_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>void</name> <name>CXXRecordDecl</name><operator>::</operator><macro><name>pushFriendDecl</name><argument_list>(<argument>FriendDecl *FD</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>FD</name><operator>-&gt;</operator><name>NextFriend</name></name> <operator>&amp;&amp;</operator> <literal type="string">"friend already has next friend?"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>FD</name><operator>-&gt;</operator><name>NextFriend</name></name> <operator>=</operator> <call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><name>FirstFriend</name></expr>;
<expr><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><name>FirstFriend</name> <operator>=</operator> <name>FD</name></expr>;
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
