<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_UNINITIALIZEDVALUES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_UNINITIALIZEDVALUES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFG</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>UninitUse</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>Branch</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Terminator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Output</name></decl>;</decl_stmt>
}</block>;</struct>

<label><name>private</name>:</label>

<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>User</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>UninitAfterCall</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>UninitAfterDecl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>AlwaysUninit</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Branch</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>UninitBranches</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>UninitUse</name><argument_list>(<argument>const Expr *User</argument>, <argument>bool AlwaysUninit</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>User</name><argument_list>(<argument><expr><name>User</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>AlwaysUninit</name><argument_list>(<argument>AlwaysUninit</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>addUninitBranch</name><argument_list>(<argument>Branch B</argument>)</argument_list></macro> <block>{
<expr><call><name><name>UninitBranches</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>setUninitAfterCall</name><argument_list>()</argument_list></macro> <block>{ <expr><name>UninitAfterCall</name> <operator>=</operator> <name>true</name></expr>; }</block>
<name>void</name> <macro><name>setUninitAfterDecl</name><argument_list>()</argument_list></macro> <block>{ <expr><name>UninitAfterDecl</name> <operator>=</operator> <name>true</name></expr>; }</block>


<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getUser</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>User</name></expr>;</return> }</block></expr></expr_stmt>


<enum>enum <name>Kind</name> <block>{

<decl><name>Maybe</name></decl>,


<decl><name>Sometimes</name></decl>,



<decl><name>AfterDecl</name></decl>,



<decl><name>AfterCall</name></decl>,


<decl><name>Always</name></decl>
}</block>;</enum>


<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>AlwaysUninit</name> <operator>?</operator> <name>Always</name> <operator>:</operator>
<name>UninitAfterCall</name> <operator>?</operator> <name>AfterCall</name> <operator>:</operator>
<name>UninitAfterDecl</name> <operator>?</operator> <name>AfterDecl</name> <operator>:</operator>
<operator>!</operator><call><name>branch_empty</name><argument_list>()</argument_list></call> <operator>?</operator> <name>Sometimes</name> <operator>:</operator> <name>Maybe</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>branch_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Branch</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>branch_iterator</name> <macro><name>branch_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UninitBranches</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>branch_iterator</name> <macro><name>branch_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UninitBranches</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>branch_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UninitBranches</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UninitVariablesHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>UninitVariablesHandler</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>UninitVariablesHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>handleUseOfUninitVariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UninitUse</name> <modifier>&amp;</modifier></type><name>use</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>handleConstRefUseOfUninitVariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UninitUse</name> <modifier>&amp;</modifier></type><name>use</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>handleSelfInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>UninitVariablesAnalysisStats</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumVariablesAnalyzed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumBlockVisits</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>runUninitializedVariablesAnalysis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>&amp;</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFG</name> <modifier>&amp;</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>ac</name></decl></parameter>,
<parameter><decl><type><name>UninitVariablesHandler</name> <modifier>&amp;</modifier></type><name>handler</name></decl></parameter>,
<parameter><decl><type><name>UninitVariablesAnalysisStats</name> <modifier>&amp;</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
