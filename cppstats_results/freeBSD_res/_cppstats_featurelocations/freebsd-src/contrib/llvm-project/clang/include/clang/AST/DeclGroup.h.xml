<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclGroup.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLGROUP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLGROUP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>DeclGroup</name></type> <name>final</name> <range>: <expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>DeclGroup</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>unsigned</name> <name>NumDecls</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>DeclGroup</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>DeclGroup</name><argument_list>(<argument>unsigned numdecls</argument>, <argument>Decl** decls</argument>)</argument_list></macro>;

<expr><name>public</name><operator>:</operator>
<name>friend</name> <name>TrailingObjects</name></expr>;

<expr><specifier>static</specifier> <name>DeclGroup</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>Decl **Decls</argument>, <argument>unsigned NumDecls</argument>)</argument_list></macro></expr>;

<expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumDecls</name></expr>;</return> }</block>

<name>Decl</name><operator>*</operator><operator>&amp;</operator> <name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>i</name><operator>)</operator> <block>{
<expr><call><name>assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>NumDecls</name> <operator>&amp;&amp;</operator> <literal type="string">"Out-of-bounds access."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</return>
}</block>

<name>Decl</name><operator>*</operator> <specifier>const</specifier><operator>&amp;</operator> <name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>i</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>NumDecls</name> <operator>&amp;&amp;</operator> <literal type="string">"Out-of-bounds access."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>DeclGroupRef</name> <block>{


enum <expr><name>Kind</name> <block>{ <expr><name>SingleDeclKind</name><operator>=</operator><literal type="number">0x0</literal></expr>, <expr><name>DeclGroupKind</name><operator>=</operator><literal type="number">0x1</literal></expr>, <expr><name>Mask</name><operator>=</operator><literal type="number">0x1</literal></expr> }</block></expr>;

<expr><name>Decl</name><operator>*</operator> <name>D</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>Kind</name><operator>)</operator> <operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Mask</name><operator>)</operator></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<call><name>DeclGroupRef</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>DeclGroupRef</name><argument_list>(<argument><expr><name>Decl</name><operator>*</operator> <name>d</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>D</name><argument_list>(<argument>d</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>DeclGroupRef</name><argument_list>(<argument><expr><name>DeclGroup</name><operator>*</operator> <name>dg</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>D</name><argument_list>(<argument>(Decl*) (reinterpret_cast&lt;uintptr_t&gt;(dg) | DeclGroupKind)</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>DeclGroupRef</name> <macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>Decl **Decls</argument>, <argument>unsigned NumDecls</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>NumDecls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DeclGroupRef</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>NumDecls</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DeclGroupRef</name><argument_list>(<argument><expr><name><name>Decls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>DeclGroupRef</name><argument_list>(<argument><expr><name>DeclGroup</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Decls</name></expr></argument>, <argument><expr><name>NumDecls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>Decl</name> <operator>*</operator><operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>Decl</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>D</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSingleDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SingleDeclKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isDeclGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>DeclGroupKind</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>Decl</name> <modifier>*</modifier></type><name>getSingleDecl</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isSingleDecl</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Isn't a single decl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getSingleDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclGroupRef</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getSingleDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>DeclGroup</name> <modifier>&amp;</modifier></type><name>getDeclGroup</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isDeclGroup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Isn't a declgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DeclGroup</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>Mask</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>DeclGroup</name> <operator>&amp;</operator><macro><name>getDeclGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclGroupRef</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getDeclGroup</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isSingleDecl</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>D</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>D</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><call><name>getDeclGroup</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></function>

<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isSingleDecl</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>D</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>D</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DeclGroup</name> <modifier>&amp;</modifier></type><name>G</name> <init>= <expr><call><name>getDeclGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name><name>G</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name><name>G</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isSingleDecl</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>D</name> <operator>?</operator> <operator>&amp;</operator><name>D</name> <operator>:</operator> <name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>&amp;</operator><call><name>getDeclGroup</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isSingleDecl</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>D</name> <operator>?</operator> <operator>&amp;</operator><name>D</name><operator>+</operator><literal type="number">1</literal> <operator>:</operator> <name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<specifier>const</specifier> <name>DeclGroup</name> <operator>&amp;</operator><name>G</name> <operator>=</operator> <call><name>getDeclGroup</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>G</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name><name>G</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}

void <expr_stmt><expr><operator>*</operator><macro><name>getAsOpaquePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>D</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>DeclGroupRef</name></type> <name>getFromOpaquePtr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DeclGroupRef</name></type> <name>X</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>D</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>X</name></expr>;</return>
</block_content>}</block></function>
};

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>PointerLikeTypeTraits</name></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DeclGroupRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::DeclGroupRef P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>P</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>DeclGroupRef</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>DeclGroupRef</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
