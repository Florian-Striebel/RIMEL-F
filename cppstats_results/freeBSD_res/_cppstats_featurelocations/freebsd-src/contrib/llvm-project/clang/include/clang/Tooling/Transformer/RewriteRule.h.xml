<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_REWRITE_RULE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_REWRITE_RULE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchersInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/AtomicChange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/MatchConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/RangeSelector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Any.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>transformer</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>EditKind</name> <block>{<block_content>

<expr_stmt><expr><name>Range</name></expr><operator>,</operator>


<expr><name>AddInclude</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<struct>struct <name>Edit</name> <block>{
<decl_stmt><decl><type><name>EditKind</name></type> <name>Kind</name> <init>= <expr><name>EditKind</name><operator>::</operator><name>Range</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>Range</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Replacement</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Any</name> <name>Metadata</name></expr>;</expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>IncludeFormat</name> <block>{<block_content>
<expr_stmt><expr><name>Quoted</name></expr><operator>,</operator>
<expr><name>Angled</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>EditGenerator</name> <init>= <expr><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>TextGenerator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>MatchComputation</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>AnyGenerator</name> <init>= <expr><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Any</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





































<struct>struct <name>ASTEdit</name> <block>{
<decl_stmt><decl><type><name>EditKind</name></type> <name>Kind</name> <init>= <expr><name>EditKind</name><operator>::</operator><name>Range</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RangeSelector</name></type> <name>TargetRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextGenerator</name></type> <name>Note</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AnyGenerator</name></type> <name>Metadata</name> <init>= <expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><operator>)</operator>
<operator>-&gt;</operator> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Any</name></expr></argument>&gt;</argument_list></name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Any</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>Any</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
}</block>;</struct>


<function_decl><type><name>EditGenerator</name></type> <name>edit</name><parameter_list>(<parameter><decl><type><name>ASTEdit</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>EditGenerator</name></type> <name>editList</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ASTEdit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Edits</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>noEdits</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <macro><name>editList</name><argument_list>(<argument>{}</argument>)</argument_list></macro>;</return> </block_content>}</block></function>




<function_decl><type><name>EditGenerator</name></type> <name>noopEdit</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Anchor</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>ifBound</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>, <argument><expr><name>ASTEdit</name> <name>TrueEdit</name></expr></argument>,
<argument><expr><name>ASTEdit</name> <name>FalseEdit</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>ifBound</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>edit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>TrueEdit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>edit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>FalseEdit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>ifBound</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>, <argument><expr><name>ASTEdit</name> <name>TrueEdit</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>ifBound</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>edit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>TrueEdit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>noEdits</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><name>EditGenerator</name></type> <name>flattenVector</name><parameter_list>(<parameter><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>EditGenerator</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Generators</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>




<function><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>injectEdits</name><parameter_list>(<parameter><decl><type><name>ASTEdit</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>edit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>injectEdits</name><parameter_list>(<parameter><decl><type><name>EditGenerator</name></type> <name>G</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>G</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>EditGenerator</name></type> <name>flatten</name><argument_list>(<argument><expr><name>Ts</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Edits</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>flattenVector</name><argument_list>(<argument>{detail::injectEdits(std::forward&lt;Ts&gt;(Edits))...}</argument>)</argument_list></macro>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>RootID</name><index>[]</index></name></decl>;</decl_stmt>


<function_decl><type><name>ASTEdit</name></type> <name>changeTo</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Target</name></decl></parameter>, <parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Target</name></decl></parameter>, <parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>changeTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>changeTo</name><parameter_list>(<parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>changeTo</name><argument_list>(<argument><expr><call><name>node</name><argument_list>(<argument><expr><name>RootID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>changeTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>insertBefore</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>changeTo</name><argument_list>(<argument><expr><call><name>before</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>insertAfter</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>TextGenerator</name></type> <name>Replacement</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>changeTo</name><argument_list>(<argument><expr><call><name>after</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>ASTEdit</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ASTEdit</name></type> <name>addInclude</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Target</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Header</name></decl></parameter>,
<parameter><decl><type><name>IncludeFormat</name></type> <name>Format</name> <init>= <expr><name>IncludeFormat</name><operator>::</operator><name>Quoted</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>inline</specifier> <name>ASTEdit</name></type> <name>addInclude</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Header</name></decl></parameter>,
<parameter><decl><type><name>IncludeFormat</name></type> <name>Format</name> <init>= <expr><name>IncludeFormat</name><operator>::</operator><name>Quoted</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>addInclude</name><argument_list>(<argument><expr><call><name>expansion</name><argument_list>(<argument><expr><call><name>node</name><argument_list>(<argument><expr><name>RootID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Header</name></expr></argument>, <argument><expr><name>Format</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callable</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>ASTEdit</name></type> <name>withMetadata</name><parameter_list>(<parameter><decl><type><name>ASTEdit</name></type> <name>Edit</name></decl></parameter>, <parameter><decl><type><name>Callable</name></type> <name>Metadata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>Edit</name><operator>.</operator><name>Metadata</name></name> <operator>=</operator>
<index>[<expr><name>Gen</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Metadata</name></expr></argument>)</argument_list></call></expr>]</index><operator>(</operator>
<specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <operator>-&gt;</operator> <name>llvm</name><operator>::</operator><name>Any</name> <block>{
<return>return <expr><call><name>Gen</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><name>Edit</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>EditGenerator</name></type> <name>shrinkTo</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><name>RangeSelector</name></type> <name>inner</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>editList</name><argument_list>(<argument>{remove(enclose(before(outer), before(inner)))</argument>,
<argument>remove(enclose(after(inner), after(outer)))}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>
























<struct>struct <name>RewriteRule</name> <block>{
<struct>struct <name>Case</name> <block>{
<expr_stmt><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>Matcher</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EditGenerator</name></type> <name>Edits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextGenerator</name></type> <name>Explanation</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Case</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>Cases</name></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <name>RootID</name></expr>;</expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>RewriteRule</name></type> <name>makeRule</name><argument_list>(<argument><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>M</name></expr></argument>,
<argument><expr><name>EditGenerator</name> <name>Edits</name></expr></argument>, <argument><expr><name>TextGenerator</name> <name>Explanation</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>inline</specifier> <name>RewriteRule</name></type> <name>makeRule</name><argument_list>(<argument><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>M</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ASTEdit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Edits</name></expr></argument>,
<argument><expr><name>TextGenerator</name> <name>Explanation</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>makeRule</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>editList</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Edits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Explanation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>inline</specifier> <name>RewriteRule</name></type> <name>makeRule</name><argument_list>(<argument><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>M</name></expr></argument>,
<argument><expr><name>ASTEdit</name> <name>Edit</name></expr></argument>,
<argument><expr><name>TextGenerator</name> <name>Explanation</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>makeRule</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>edit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Edit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Explanation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><name>void</name></type> <name>addInclude</name><argument_list>(<argument><expr><name>RewriteRule</name> <operator>&amp;</operator><name>Rule</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Header</name></expr></argument>,
<argument><expr><name>IncludeFormat</name> <name>Format</name> <operator>=</operator> <name>IncludeFormat</name><operator>::</operator><name>Quoted</name></expr></argument>)</argument_list></decl>;</decl_stmt>








































<function_decl><type><name>RewriteRule</name></type> <name>applyFirst</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>RewriteRule</name></expr></argument>&gt;</argument_list></name></type> <name>Rules</name></decl></parameter>)</parameter_list>;</function_decl>
















<decl_stmt><decl><type><name>EditGenerator</name></type> <name>rewriteDescendants</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>NodeId</name></expr></argument>, <argument><expr><name>RewriteRule</name> <name>Rule</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>rewriteDescendants</name><argument_list>(<argument>const Decl &amp;Node</argument>, <argument>RewriteRule Rule</argument>,
<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>rewriteDescendants</name><argument_list>(<argument>const Stmt &amp;Node</argument>, <argument>RewriteRule Rule</argument>,
<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>rewriteDescendants</name><argument_list>(<argument>const TypeLoc &amp;Node</argument>, <argument>RewriteRule Rule</argument>,
<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>rewriteDescendants</name><argument_list>(<argument>const DynTypedNode &amp;Node</argument>, <argument>RewriteRule Rule</argument>,
<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <call><name>buildMatcher</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RewriteRule</name> <operator>&amp;</operator><name>Rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<call><name>buildMatchers</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RewriteRule</name> <operator>&amp;</operator><name>Rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>SourceLocation</name></type>
<name>getRuleMatchLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>RewriteRule</name><operator>::</operator><name>Case</name> <operator>&amp;</operator>
<call><name>findSelectedCase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><name>Result</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>RewriteRule</name> <operator>&amp;</operator><name>Rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
