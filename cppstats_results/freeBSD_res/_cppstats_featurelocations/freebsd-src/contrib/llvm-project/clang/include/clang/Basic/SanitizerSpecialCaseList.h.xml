<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SANITIZERSPECIALCASELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SANITIZERSPECIALCASELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SpecialCaseList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SanitizerSpecialCaseList</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>SpecialCaseList</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SanitizerSpecialCaseList</name></expr></argument>&gt;</argument_list></name>
<call><name>create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Paths</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><name>VFS</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SanitizerSpecialCaseList</name></expr></argument>&gt;</argument_list></name>
<call><name>createOrDie</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Paths</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><name>VFS</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <macro><name>inSection</name><argument_list>(<argument>SanitizerMask Mask</argument>, <argument>StringRef Prefix</argument>, <argument>StringRef Query</argument>,
<argument>StringRef Category = StringRef()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>

<name>void</name> <call><name>createSanitizerSections</name><argument_list>()</argument_list></call></expr>;

struct <expr><name>SanitizerSection</name> <block>{
<macro><name>SanitizerSection</name><argument_list>(<argument>SanitizerMask SM</argument>, <argument>SectionEntries &amp;E</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Mask</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr>, <macro><name>Entries</name><argument_list>(<argument>E</argument>)</argument_list></macro><expr><block>{}</block></expr>;

<expr><name>SanitizerMask</name> <name>Mask</name></expr>;
<expr><name>SectionEntries</name> <operator>&amp;</operator><name>Entries</name></expr>;
}</block></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SanitizerSection</name></expr></argument>&gt;</argument_list></name> <name>SanitizerSections</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
