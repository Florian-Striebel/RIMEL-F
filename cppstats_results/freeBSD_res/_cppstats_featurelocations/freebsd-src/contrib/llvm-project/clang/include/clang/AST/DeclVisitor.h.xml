<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclVisitor.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclFriend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclOpenMP.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>declvisitor</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Ptr</name></expr></argument>, <argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name><operator>=</operator><name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Base</name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename Ptr&lt;CLASS&gt;::type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass*&gt;(this)-&gt;Visit##NAME(static_cast&lt;PTR(CLASS)&gt;(D))</cpp:value></cpp:define>


<decl_stmt><decl><type><name>RetTy</name></type> <name>Visit</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Decl</argument>)</argument_list></macro> <name>D</name></expr></argument>)</argument_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Decl::DERIVED: DISPATCH(DERIVED##Decl, DERIVED##Decl);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_DECL</name><parameter_list>(<parameter><type><name>DECL</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclNodes.inc"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Decl that isn't part of DeclNodes.inc!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit##DERIVED##Decl(PTR(DERIVED##Decl) D) { DISPATCH(BASE, BASE); }</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclNodes.inc"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>RetTy</name></type> <name>VisitDecl</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Decl</argument>)</argument_list></macro> <name>D</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DeclVisitor</name>
<range>: <expr><name>public</name> <name>declvisitor</name><operator>::</operator><name><name>Base</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>add_pointer</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstDeclVisitor</name>
<range>: <expr><name>public</name> <name>declvisitor</name><operator>::</operator><name><name>Base</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>make_const_ptr</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
