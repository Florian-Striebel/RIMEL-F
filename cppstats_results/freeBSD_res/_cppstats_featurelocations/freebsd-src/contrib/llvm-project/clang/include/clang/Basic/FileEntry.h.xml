<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/FileEntry.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_FILEENTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_FILEENTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DirectoryEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Hashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem/UniqueID.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntryRef</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>optional_detail</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>OptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>FileEntryRef</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ME</name><operator>-&gt;</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>FileEntry</name> <operator>&amp;</operator><macro><name>getFileEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name><name>ME</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>V</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>FileEntry</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>DirectoryEntryRef</name> <macro><name>getDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name><name>ME</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>Dir</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>off_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>unsigned</name> <macro><name>getUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name> <operator>&amp;</operator><macro><name>getUniqueID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>time_t</name> <macro><name>getModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <macro><name>isNamedPipe</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>void</name> <macro><name>closeFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>&amp;</operator><call><name><name>LHS</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><call><name><name>RHS</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <operator>&amp;</operator><call><name><name>RHS</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>&amp;</operator><call><name><name>LHS</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>friend</name> <name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hash_value</name><argument_list>(<argument>FileEntryRef Ref</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_value</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>Ref</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<struct_decl>struct <name>MapValue</name>;</struct_decl>


<decl_stmt><decl><type><name>using</name></type> <name>MapEntry</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMapEntry</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>MapValue</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<struct>struct <name>MapValue</name> <block>{








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>V</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>Dir</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MapValue</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<macro><name>MapValue</name><argument_list>(<argument>FileEntry &amp;FE</argument>, <argument>DirectoryEntryRef Dir</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>V</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Dir</name><argument_list>(<argument>Dir</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>MapValue</name><argument_list>(<argument><expr><name>MapEntry</name> <operator>&amp;</operator><name>ME</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>&amp;ME</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>bool</name></type> <name>isSameRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntryRef</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>ME</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ME</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>


















<expr_stmt><expr><name>operator</name> <specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><call><name>getFileEntry</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><call><name>FileEntryRef</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MapEntry</name> <operator>&amp;</operator><name>ME</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ME</name><argument_list>(<argument>&amp;ME</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ME</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Expected payload"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ME</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>V</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Expected non-null"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ME</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>V</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>FileEntry</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Expected FileEntry"</literal></expr></argument>)</argument_list></call></expr>;
}</block>



<specifier>const</specifier> <name>clang</name><operator>::</operator><name>FileEntryRef</name><operator>::</operator><name>MapEntry</name> <operator>&amp;</operator><macro><name>getMapEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ME</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
<struct>struct <name>optional_none_tag</name> <block>{}</block>;</struct>


<expr_stmt><expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><name>optional_none_tag</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ME</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>hasOptionalValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ME</name></expr>;</return> }</block></expr></expr_stmt>

<macro><name>friend</name></macro> struct <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
<struct>struct <name>dense_map_empty_tag</name> <block>{}</block>;</struct>
<struct>struct <name>dense_map_tombstone_tag</name> <block>{}</block>;</struct>


<expr_stmt><expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><name>dense_map_empty_tag</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ME</name><argument_list>(<argument>llvm::DenseMapInfo&lt;const MapEntry *&gt;::getEmptyKey()</argument>)</argument_list></macro> <block>{}</block>
<call><name>FileEntryRef</name><argument_list>(<argument><expr><name>dense_map_tombstone_tag</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ME</name><argument_list>(<argument>llvm::DenseMapInfo&lt;const MapEntry *&gt;::getTombstoneKey()</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>isSpecialDenseMapKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isSameRef</name><argument_list>(<argument><expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><call><name>dense_map_empty_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>isSameRef</name><argument_list>(<argument><expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><call><name>dense_map_tombstone_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MapEntry</name> <modifier>*</modifier></type><name>ME</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileEntryRef</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"FileEntryRef must avoid size overhead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_copyable</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"FileEntryRef must be trivially copyable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>optional_detail</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>OptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name>clang</name><operator>::</operator><name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>StorageImpl</name> <operator>=</operator>
<name>clang</name><operator>::</operator><name>FileMgr</name><operator>::</operator><name><name>MapEntryOptionalStorage</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>OptionalStorage</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>OptionalStorage</name><argument_list>(<argument><expr><name>in_place_t</name></expr></argument>, <argument><expr><name>ArgTypes</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>StorageImpl</name><argument_list>(<argument>in_place_t{}</argument>, <argument>std::forward&lt;ArgTypes&gt;(Args)...</argument>)</argument_list></macro> <block>{}</block>

<name>OptionalStorage</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>clang</name><operator>::</operator><name>FileEntryRef</name> <name>Ref</name><operator>)</operator> <block>{
<expr><name>StorageImpl</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Ref</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
}</expr>;

<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof> <operator>==</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Optional&lt;FileEntryRef&gt; must avoid size overhead"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_copyable</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Optional&lt;FileEntryRef&gt; should be trivially copyable"</literal></expr></argument>)</argument_list></call></expr>;

}</block>


<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>FileEntryRef</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>FileEntryRef</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name><operator>::</operator><call><name>dense_map_empty_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>FileEntryRef</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>FileEntryRef</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>FileEntryRef</name><operator>::</operator><call><name>dense_map_tombstone_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::FileEntryRef Val</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>hash_value</name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::FileEntryRef LHS</argument>, <argument>clang::FileEntryRef RHS</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name><name>LHS</name><operator>.</operator><name>isSameRef</name></name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>


<if_stmt><if>if <condition>(<expr><call><name><name>LHS</name><operator>.</operator><name>isSpecialDenseMapKey</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>RHS</name><operator>.</operator><name>isSpecialDenseMapKey</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>


<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

namespace <macro><name>clang</name></macro> <block>{<block_content>






















<decl_stmt><decl><type><name>class</name></type> <name>OptionalFileEntryRefDegradesToFileEntryPtr</name>
<range>: <expr><name>public</name> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>(
<argument><expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;
<expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;

<macro><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>(<argument>llvm::NoneType</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>(<argument>FileEntryRef Ref</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Optional</name></macro><operator>&lt;</operator><name>FileEntryRef</name><operator>&gt;</operator><operator>(</operator><name>Ref</name><operator>)</operator> <block>{}</block>
<call><name>OptionalFileEntryRefDegradesToFileEntryPtr</name><argument_list>(<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <name>MaybeRef</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Optional</name></macro><operator>&lt;</operator><name>FileEntryRef</name><operator>&gt;</operator><operator>(</operator><name>MaybeRef</name><operator>)</operator> <block>{}</block>

<name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>NoneType</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>None</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>FileEntryRef</name> <name>Ref</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Ref</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
<name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <name>MaybeRef</name><operator>)</operator> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>MaybeRef</name><operator>)</operator></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>




<name>operator</name> <specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasValue</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileEntry</name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block>
}</expr>;

<expr><call><name>static_assert</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>is_trivially_copyable</name><argument_list type="generic">&lt;
<argument><expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"OptionalFileEntryRefDegradesToFileEntryPtr should be trivially copyable"</literal></expr></argument>)</argument_list></call></expr>;






<expr><name>class</name> <name>FileEntry</name> <block>{
<expr><name>friend</name> <name>class</name> <name>FileManager</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>RealPathName</name></expr>;
<expr><name>off_t</name> <name>Size</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>time_t</name> <name>ModTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><name>Dir</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name> <name>UniqueID</name></expr>;
<expr><name>unsigned</name> <name>UID</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>bool</name> <name>IsNamedPipe</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>IsValid</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>File</name></expr></argument>&gt;</argument_list></name> <name>File</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Content</name></expr>;







<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <name>LastRef</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>FileEntry</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>FileEntry</name><argument_list>()</argument_list></call></expr>;

<expr><call><name>FileEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>FileEntry</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>FileEntry</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;

<expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>LastRef</name><operator>-&gt;</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>FileEntryRef</name> <macro><name>getLastRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>LastRef</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>tryGetRealPathName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RealPathName</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsValid</name></expr>;</return> }</block>
<name>off_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block>
<name>unsigned</name> <macro><name>getUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UID</name></expr>;</return> }</block>
<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name> <operator>&amp;</operator><macro><name>getUniqueID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UniqueID</name></expr>;</return> }</block>
<name>time_t</name> <macro><name>getModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ModTime</name></expr>;</return> }</block>


<specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><macro><name>getDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Dir</name></expr>;</return> }</block>

<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>FileEntry</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>UniqueID</name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>UniqueID</name></name></expr>;</return> }</block>



<name>bool</name> <macro><name>isNamedPipe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsNamedPipe</name></expr>;</return> }</block>

<name>void</name> <macro><name>closeFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>bool</name> <name>FileEntryRef</name><operator>::</operator><macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>off_t</name> <name>FileEntryRef</name><operator>::</operator><macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>unsigned</name> <name>FileEntryRef</name><operator>::</operator><macro><name>getUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUID</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name> <operator>&amp;</operator><name>FileEntryRef</name><operator>::</operator><macro><name>getUniqueID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUniqueID</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>time_t</name> <name>FileEntryRef</name><operator>::</operator><macro><name>getModificationTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getModificationTime</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <name>FileEntryRef</name><operator>::</operator><macro><name>isNamedPipe</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNamedPipe</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <name>FileEntryRef</name><operator>::</operator><macro><name>closeFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>getFileEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>closeFile</name><argument_list>()</argument_list></call></expr>; }</block>

}</expr></block></expr></range></decl></decl_stmt></block_content></block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
