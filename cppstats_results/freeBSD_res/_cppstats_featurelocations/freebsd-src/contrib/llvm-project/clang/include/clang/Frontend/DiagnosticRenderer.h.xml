<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_DIAGNOSTICRENDERER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_DIAGNOSTICRENDERER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>DiagOrStoredDiag</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Diagnostic</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>StoredDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticRenderer</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name></type> <name>DiagOpts</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LastLoc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LastIncludeLoc</name></decl>;</decl_stmt>





<expr_stmt><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>LastLevel</name> <operator>=</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>Ignored</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DiagnosticRenderer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>DiagnosticOptions</name> <operator>*</operator><name>DiagOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DiagnosticRenderer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>emitDiagnosticMessage</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>PresumedLoc</name> <name>PLoc</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Message</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>,
<argument><expr><name>DiagOrStoredDiag</name> <name>Info</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>emitDiagnosticLoc</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>PresumedLoc</name> <name>PLoc</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>emitCodeContext</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Ranges</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>emitIncludeLocation</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>PresumedLoc</name></type> <name>PLoc</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>emitImportLocation</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>PresumedLoc</name></type> <name>PLoc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ModuleName</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>emitBuildingModuleLocation</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>PresumedLoc</name></type> <name>PLoc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>ModuleName</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>beginDiagnostic</name><argument_list>(<argument><expr><name>DiagOrStoredDiag</name> <name>D</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>endDiagnostic</name><argument_list>(<argument><expr><name>DiagOrStoredDiag</name> <name>D</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>emitBasicNote</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Message</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>emitIncludeStack</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>PresumedLoc</name> <name>PLoc</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>emitIncludeStackRecursively</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>emitImportStack</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>emitImportStackRecursively</name><parameter_list>(<parameter><decl><type><name>FullSourceLoc</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>ModuleName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>emitModuleBuildStack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>emitCaret</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>, <argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>emitSingleMacroExpansion</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>emitMacroExpansions</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>












<decl_stmt><decl><type><name>void</name></type> <name>emitDiagnostic</name><argument_list>(<argument><expr><name>FullSourceLoc</name> <name>Loc</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>Level</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Message</name></expr></argument>, <argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>FixItHints</name></expr></argument>,
<argument><expr><name>DiagOrStoredDiag</name> <name>D</name> <operator>=</operator> <operator>(</operator><name>Diagnostic</name> <operator>*</operator><operator>)</operator><name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>emitStoredDiagnostic</name><parameter_list>(<parameter><decl><type><name>StoredDiagnostic</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticNoteRenderer</name> <range>: <expr><name>public</name> <name>DiagnosticRenderer</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DiagnosticNoteRenderer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>DiagnosticOptions</name> <operator>*</operator><name>DiagOpts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DiagnosticRenderer</name><argument_list>(<argument>LangOpts</argument>, <argument>DiagOpts</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>DiagnosticNoteRenderer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitIncludeLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitImportLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>StringRef ModuleName</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitBuildingModuleLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>StringRef ModuleName</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>emitNote</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>StringRef Message</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
