<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/LiteralSupport.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_LITERALSUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_LITERALSUPPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CharInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APFloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DataTypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>expandUCNs</name><parameter_list>(<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Input</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>class</name></type> <name>NumericLiteralParser</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ThisTokBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ThisTokEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DigitsBegin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>SuffixBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>radix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>saw_exponent</name></decl>, <decl><type ref="prev"/><name>saw_period</name></decl>, <decl><type ref="prev"/><name>saw_ud_suffix</name></decl>, <decl><type ref="prev"/><name>saw_fixed_point_suffix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>UDSuffixBuf</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>NumericLiteralParser</name><argument_list>(<argument>StringRef TokSpelling</argument>, <argument>SourceLocation TokLoc</argument>,
<argument>const SourceManager &amp;SM</argument>, <argument>const LangOptions &amp;LangOpts</argument>,
<argument>const TargetInfo &amp;Target</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hadError</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isUnsigned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isLong</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isLongLong</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isSizeT</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isHalf</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isFloat</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isImaginary</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isFloat16</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isFloat128</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>MicrosoftInteger</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isFract</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isAccum</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isFixedPointLiteral</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>saw_period</name> <operator>||</operator> <name>saw_exponent</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>saw_fixed_point_suffix</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isIntegerLiteral</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><name>saw_period</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>saw_exponent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isFixedPointLiteral</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFloatingLiteral</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>saw_period</name> <operator>||</operator> <name>saw_exponent</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isFixedPointLiteral</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasUDSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>saw_ud_suffix</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getUDSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>saw_ud_suffix</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UDSuffixBuf</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getUDSuffixOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>saw_ud_suffix</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SuffixBegin</name> <operator>-</operator> <name>ThisTokBegin</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isValidUDSuffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Suffix</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>unsigned</name> <macro><name>getRadix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>radix</name></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>GetIntegerValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APInt</name> <operator>&amp;</operator><name>Val</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><name>opStatus</name> <call><name>GetFloatValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APFloat</name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>GetFixedPointValue</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APInt</name> <operator>&amp;</operator><name>StoreVal</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Scale</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>ParseNumberStartingWithZero</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TokLoc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ParseDecimalOrOctalCommon</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TokLoc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isDigitSeparator</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>C</name> <operator>==</operator> <literal type="char">'\''</literal></expr>;</return> </block_content>}</block></function>



<function><type><name>bool</name></type> <name>containsDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Start</name> <operator>!=</operator> <name>End</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>Start</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>End</name> <operator>||</operator> <operator>!</operator><call><name>isDigitSeparator</name><argument_list>(<argument><expr><name><name>Start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>CheckSeparatorKind</name> <block>{ <decl><name>CSK_BeforeDigits</name></decl>, <decl><name>CSK_AfterDigits</name></decl> }</block>;</enum>


<function_decl><type><name>void</name></type> <name>checkSeparator</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TokLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Pos</name></decl></parameter>,
<parameter><decl><type><name>CheckSeparatorKind</name></type> <name>IsAfterDigits</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SkipHexDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>ThisTokEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isHexDigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isDigitSeparator</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SkipOctalDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>ThisTokEnd</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator> <operator>||</operator> <call><name>isDigitSeparator</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SkipDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>ThisTokEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isDigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isDigitSeparator</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SkipBinaryDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>ThisTokEnd</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <call><name>isDigitSeparator</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CharLiteralParser</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsMultiChar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HadError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>UDSuffixBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>UDSuffixOffset</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>CharLiteralParser</name><argument_list>(<argument>const char *begin</argument>, <argument>const char *end</argument>,
<argument>SourceLocation Loc</argument>, <argument>Preprocessor &amp;PP</argument>,
<argument>tok::TokenKind kind</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hadError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HadError</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isAscii</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>char_constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isWide</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>wide_char_constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF8</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf8_char_constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF16</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf16_char_constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF32</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf32_char_constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMultiChar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsMultiChar</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Value</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getUDSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UDSuffixBuf</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getUDSuffixOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>UDSuffixBuf</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"no ud-suffix"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UDSuffixOffset</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>StringLiteralParser</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>Features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>*</modifier></type><name>Diags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxTokenLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SizeBound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CharByteWidth</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">512</literal></expr></argument>&gt;</argument_list></name></type> <name>ResultBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ResultPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>UDSuffixBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>UDSuffixToken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>UDSuffixOffset</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>StringLiteralParser</name><argument_list>(<argument>ArrayRef&lt;Token&gt; StringToks</argument>,
<argument>Preprocessor &amp;PP</argument>, <argument>bool Complain = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>StringLiteralParser</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <name>StringToks</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>sm</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>features</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>diags</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SM</name><argument_list>(<argument><expr><name>sm</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Features</name><argument_list>(<argument><expr><name>features</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Target</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Diags</name><argument_list>(<argument><expr><name>diags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MaxTokenLength</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SizeBound</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CharByteWidth</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>unknown</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ResultPtr</name><argument_list>(<argument><expr><call><name><name>ResultBuf</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>hadError</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Pascal</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>init</name><argument_list>(<argument><expr><name>StringToks</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>bool</name> <name>hadError</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Pascal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>GetString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>ResultBuf</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetStringLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>GetStringLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ResultPtr</name><operator>-</operator><call><name><name>ResultBuf</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>GetNumStringChars</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>GetStringLength</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CharByteWidth</name></expr>;</return>
}</block></expr></expr_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>getOffsetOfStringByte</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>TheTok</name></expr></argument>, <argument><expr><name>unsigned</name> <name>ByteNo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAscii</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>string_literal</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isWide</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>wide_string_literal</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF8</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf8_string_literal</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF16</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf16_string_literal</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUTF32</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf32_string_literal</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPascal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Pascal</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getUDSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UDSuffixBuf</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getUDSuffixToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>UDSuffixBuf</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"no ud-suffix"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UDSuffixToken</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getUDSuffixOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>UDSuffixBuf</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"no ud-suffix"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UDSuffixOffset</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isValidUDSuffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Suffix</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></type> <name>StringToks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>CopyStringFragment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TokBegin</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Fragment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DiagnoseLexingError</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
