<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Ownership.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_OWNERSHIP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_OWNERSHIP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PointerLikeTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/type_traits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>





<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXCtorInitializer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParsedTemplateArgument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateParameterList</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>PtrTy</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OpaquePtr</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>OpaquePtr</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>

<name>using</name> <name>Traits</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>PtrTy</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>OpaquePtr</name><argument_list>(<argument>std::nullptr_t = nullptr</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<function><type><specifier>static</specifier> <name>OpaquePtr</name></type> <name>make</name><parameter_list>(<parameter><decl><type><name>PtrTy</name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{<block_content> <decl_stmt><decl><type><name>OpaquePtr</name></type> <name>OP</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>OP</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>OP</name></expr>;</return> </block_content>}</block></function>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>PointeeT</name></expr></argument>&gt;</argument_list></name> <name>PointeeT</name><operator>*</operator> <macro><name>getPtrTo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>PtrT</name></expr></argument>&gt;</argument_list></name> <name>PtrT</name> <macro><name>getPtrAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>PtrTy</name> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Traits</name><operator>::</operator><call><name>getFromVoidPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>PtrTy</name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <name>Traits</name><operator>::</operator><call><name>getAsVoidPointer</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getAsOpaquePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>OpaquePtr</name></type> <name>getFromOpaquePtr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>OpaquePtr</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <name>UnionOpaquePtr</name> <block>{
<expr><name>void</name> <operator>*</operator><name>Ptr</name></expr>;

<expr><specifier>static</specifier> <name>UnionOpaquePtr</name> <macro><name>make</name><argument_list>(<argument>OpaquePtr&lt;T&gt; P</argument>)</argument_list></macro> <block>{
<expr><name>UnionOpaquePtr</name> <name>OP</name> <operator>=</operator> <block>{ <macro><name>P</name></macro><expr><operator>.</operator><macro><name>getAsOpaquePtr</name><argument_list>()</argument_list></macro></expr> }</block></expr>;
<return>return <expr><name>OP</name></expr>;</return>
}</block>

<name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>operator</name> <macro><name>OpaquePtr</name></macro><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>UnionOpaquePtr</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>P</name><operator>)</operator> <block>{
<expr><name>Ptr</name> <operator>=</operator> <call><name><name>P</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
}</expr>;

}</block>

<name>namespace</name> <name>llvm</name> <block>{

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>int</name> <name>NumLowBitsAvailable</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::OpaquePtr&lt;T&gt; P</argument>)</argument_list></macro> <block>{

<return>return <expr><call><name><name>P</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block>

<name>namespace</name> <name>clang</name> <block>{


<expr><name>class</name> <name>StreamingDiagnostic</name></expr>;




<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Ptr</name></expr></argument>&gt;</argument_list></name> struct <name>IsResultPtrLowBitFree</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr>;






<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>PtrTy</name></expr></argument>,
<argument><expr><name>bool</name> <name>CompressInvalid</name> <operator>=</operator> <name><name>IsResultPtrLowBitFree</name><argument_list type="generic">&lt;<argument><expr><name>PtrTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ActionResult</name> <block>{
<expr><name>PtrTy</name> <name>Val</name></expr>;
<expr><name>bool</name> <name>Invalid</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ActionResult</name><argument_list>(<argument>bool Invalid = false</argument>)</argument_list></macro> <operator>:</operator> <call><name>Val</name><argument_list>(<argument><expr><call><name>PtrTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>Invalid</name><argument_list>(<argument>Invalid</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>ActionResult</name><argument_list>(<argument>PtrTy val</argument>)</argument_list></macro> <operator>:</operator> <call><name>Val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>, <macro><name>Invalid</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>ActionResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Val</name><argument_list>(<argument><expr><call><name>PtrTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>Invalid</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>


<call><name>ActionResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><call><name>ActionResult</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Invalid</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isUsable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Invalid</name> <operator>&amp;&amp;</operator> <name>Val</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isUnset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Invalid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Val</name></expr>;</return> }</block>

<name>PtrTy</name> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Val</name></expr>;</return> }</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <operator>*</operator><macro><name>getAs</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>set</name><argument_list>(<argument>PtrTy V</argument>)</argument_list></macro> <block>{ <expr><name>Val</name> <operator>=</operator> <name>V</name></expr>; }</block>

<specifier>const</specifier> <name>ActionResult</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>PtrTy</name> <name>RHS</name><operator>)</operator> <block>{
<expr><name>Val</name> <operator>=</operator> <name>RHS</name></expr>;
<expr><name>Invalid</name> <operator>=</operator> <name>false</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>
}</expr>;



<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>PtrTy</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>PtrTy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{


<expr><name>uintptr_t</name> <name>PtrWithInvalid</name></expr>;

<expr><name>using</name> <name>PtrTraits</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>PtrTy</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ActionResult</name><argument_list>(<argument>bool Invalid = false</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>PtrWithInvalid</name><argument_list>(<argument>static_cast&lt;uintptr_t&gt;(Invalid)</argument>)</argument_list></macro> <block>{}</block>

<macro><name>ActionResult</name><argument_list>(<argument>PtrTy V</argument>)</argument_list></macro> <block>{
<expr><name>void</name> <operator>*</operator><name>VP</name> <operator>=</operator> <name>PtrTraits</name><operator>::</operator><call><name>getAsVoidPointer</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;
<expr><name>PtrWithInvalid</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VP</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>PtrWithInvalid</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Badly aligned pointer"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>ActionResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>PtrWithInvalid</name><argument_list>(<argument><literal type="number">0x01</literal></argument>)</argument_list></macro> <block>{}</block>


<call><name>ActionResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><call><name>ActionResult</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PtrWithInvalid</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</return> }</block>
<name>bool</name> <macro><name>isUsable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PtrWithInvalid</name> <operator>&gt;</operator> <literal type="number">0x01</literal></expr>;</return> }</block>
<name>bool</name> <macro><name>isUnset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PtrWithInvalid</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block>

<name>PtrTy</name> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>void</name> <operator>*</operator><name>VP</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PtrWithInvalid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>PtrTraits</name><operator>::</operator><call><name>getFromVoidPointer</name><argument_list>(<argument><expr><name>VP</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <operator>*</operator><macro><name>getAs</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>set</name><argument_list>(<argument>PtrTy V</argument>)</argument_list></macro> <block>{
<expr><name>void</name> <operator>*</operator><name>VP</name> <operator>=</operator> <name>PtrTraits</name><operator>::</operator><call><name>getAsVoidPointer</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;
<expr><name>PtrWithInvalid</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VP</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>PtrWithInvalid</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Badly aligned pointer"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>ActionResult</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>PtrTy</name> <name>RHS</name><operator>)</operator> <block>{
<expr><name>void</name> <operator>*</operator><name>VP</name> <operator>=</operator> <name>PtrTraits</name><operator>::</operator><call><name>getAsVoidPointer</name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;
<expr><name>PtrWithInvalid</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VP</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>PtrWithInvalid</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Badly aligned pointer"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>



<specifier>static</specifier> <name>ActionResult</name> <macro><name>getFromOpaquePointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<expr><name>ActionResult</name> <name>Result</name></expr>;
<expr><name><name>Result</name><operator>.</operator><name>PtrWithInvalid</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>P</name></expr>;
<return>return <expr><name>Result</name></expr>;</return>
}</block>
<name>void</name> <operator>*</operator><macro><name>getAsOpaquePointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>PtrWithInvalid</name></expr>;</return> }</block>
}</expr>;



<expr><name>using</name> <name>ParsedType</name> <operator>=</operator> <name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>UnionParsedType</name> <operator>=</operator> <name><name>UnionOpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name></expr>;




<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>IsResultPtrLowBitFree</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr>;
<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>IsResultPtrLowBitFree</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr>;
<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>IsResultPtrLowBitFree</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr>;
<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>IsResultPtrLowBitFree</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr>;

<expr><name>using</name> <name>ExprResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>StmtResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>TypeResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>ParsedType</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>BaseResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>MemInitResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>using</name> <name>DeclResult</name> <operator>=</operator> <name><name>ActionResult</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>ParsedTemplateTy</name> <operator>=</operator> <name><name>OpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>TemplateName</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>UnionParsedTemplateTy</name> <operator>=</operator> <name><name>UnionOpaquePtr</name><argument_list type="generic">&lt;<argument><expr><name>TemplateName</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>using</name> <name>MultiExprArg</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>MultiStmtArg</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>ASTTemplateArgsPtr</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParsedTemplateArgument</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>MultiTypeArg</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParsedType</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>MultiTemplateParamsArg</name> <operator>=</operator> <name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>inline</specifier> <name>ExprResult</name> <macro><name>ExprError</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>ExprResult</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>inline</specifier> <name>StmtResult</name> <macro><name>StmtError</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>StmtResult</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>inline</specifier> <name>TypeResult</name> <macro><name>TypeError</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>TypeResult</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<specifier>inline</specifier> <name>ExprResult</name> <macro><name>ExprError</name><argument_list>(<argument>const StreamingDiagnostic &amp;</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ExprError</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<specifier>inline</specifier> <name>StmtResult</name> <macro><name>StmtError</name><argument_list>(<argument>const StreamingDiagnostic &amp;</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>StmtError</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>ExprResult</name> <macro><name>ExprEmpty</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>ExprResult</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>inline</specifier> <name>StmtResult</name> <macro><name>StmtEmpty</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>StmtResult</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<specifier>inline</specifier> <name>Expr</name> <operator>*</operator><macro><name>AssertSuccess</name><argument_list>(<argument>ExprResult R</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>R</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"operation was asserted to never fail!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>R</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>Stmt</name> <operator>*</operator><macro><name>AssertSuccess</name><argument_list>(<argument>StmtResult R</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>R</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"operation was asserted to never fail!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>R</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

}</expr></block></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
