<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/StoreRef.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_STOREREF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_STOREREF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StoreManager</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>Store</name> <init>= <expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StoreRef</name> <block>{<block_content>
<decl_stmt><decl><type><name>Store</name></type> <name>store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StoreManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>StoreRef</name><argument_list>(<argument>Store store</argument>, <argument>StoreManager &amp;smgr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>StoreRef</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StoreRef</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>StoreRef</name> <specifier>const</specifier> <operator>&amp;</operator><name>newStore</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>StoreRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>x</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mgr</name> <operator>==</operator> <operator>&amp;</operator><name><name>x</name><operator>.</operator><name>mgr</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>x</name><operator>.</operator><name>store</name></name> <operator>==</operator> <name>store</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>operator</name><operator>==</operator><operator>(</operator><name>x</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Store</name> <macro><name>getStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>store</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>StoreManager</name> <operator>&amp;</operator><macro><name>getStoreManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>mgr</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
