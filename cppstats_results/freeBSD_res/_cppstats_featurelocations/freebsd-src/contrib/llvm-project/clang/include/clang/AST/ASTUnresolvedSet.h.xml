<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTUnresolvedSet.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTUNRESOLVEDSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTUNRESOLVEDSET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclAccessPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/UnresolvedSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTUnresolvedSet</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>LazyASTUnresolvedSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DeclsTy</name></name></type> <range>: <expr><name><name>ASTVector</name><argument_list type="generic">&lt;<argument><expr><name>DeclAccessPair</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>DeclsTy</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>DeclsTy</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned N</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ASTVector</name></macro><expr><operator>&lt;</operator><name>DeclAccessPair</name><operator>&gt;</operator><operator>(</operator><name>C</name>, <name>N</name><operator>)</operator> <block>{}</block>

<name>bool</name> <macro><name>isLazy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getTag</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>setLazy</name><argument_list>(<argument>bool Lazy</argument>)</argument_list></macro> <block>{ <expr><call><name>setTag</name><argument_list>(<argument><expr><name>Lazy</name></expr></argument>)</argument_list></call></expr>; }</block>
}</expr>;

<expr><name>DeclsTy</name> <name>Decls</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ASTUnresolvedSet</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>ASTUnresolvedSet</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned N</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Decls</name><argument_list>(<argument>C</argument>, <argument>N</argument>)</argument_list></macro> <expr><block>{}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>UnresolvedSetIterator</name></expr>;
<expr><name>using</name> <name>const_iterator</name> <operator>=</operator> <name>UnresolvedSetIterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>addDecl</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>NamedDecl *D</argument>, <argument>AccessSpecifier AS</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Decls</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>DeclAccessPair</name><operator>::</operator><call><name>make</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;
}</block>




<name>bool</name> <macro><name>replace</name><argument_list>(<argument>const NamedDecl *Old</argument>, <argument>NamedDecl *New</argument>, <argument>AccessSpecifier AS</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><expr><name>DeclsTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Decls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>, <expr><name>E</name> <operator>=</operator> <call><name><name>Decls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>I</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Old</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>I</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
}
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>

void erase(unsigned I</block></for>) <block>{ <expr><name><name>Decls</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <call><name><name>Decls</name><operator>.</operator><name>pop_back_val</name></name><argument_list>()</argument_list></call></expr>; }</block></block>

<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>Decls</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Decls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>reserve</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned N</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Decls</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>append</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>iterator I</argument>, <argument>iterator E</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Decls</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>I</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>DeclAccessPair</name> <operator>&amp;</operator><name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>I</name><operator>)</operator> <block>{ <return>return <expr><name><name>Decls</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return> }</block>
<specifier>const</specifier> <name>DeclAccessPair</name> <operator>&amp;</operator><name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>I</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Decls</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return> }</block>
}</expr>;



<expr><name>class</name> <name>LazyASTUnresolvedSet</name> <block>{
<expr><name>mutable</name> <name>ASTUnresolvedSet</name> <name>Impl</name></expr>;

<expr><name>void</name> <macro><name>getFromExternalSource</name><argument_list>(<argument>ASTContext &amp;C</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<name>ASTUnresolvedSet</name> <operator>&amp;</operator><macro><name>get</name><argument_list>(<argument>ASTContext &amp;C</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Impl</name><operator>.</operator><name>Decls</name><operator>.</operator><name>isLazy</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getFromExternalSource</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>Impl</name></expr>;</return>
}</block>

<name>void</name> <macro><name>reserve</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>unsigned N</argument>)</argument_list></macro> <block>{ <expr><call><name><name>Impl</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>addLazyDecl</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>uintptr_t ID</argument>, <argument>AccessSpecifier AS</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Impl</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Impl</name><operator>.</operator><name>Decls</name><operator>.</operator><name>isLazy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Impl</name><operator>.</operator><name>Decls</name><operator>.</operator><name>setLazy</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Impl</name><operator>.</operator><name>addDecl</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ID</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
