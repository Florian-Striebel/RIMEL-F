<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/PPConditionalDirectiveRecord.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_PPCONDITIONALDIRECTIVERECORD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_PPCONDITIONALDIRECTIVERECORD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PPCallbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>PPConditionalDirectiveRecord</name> <range>: <expr><name>public</name> <name>PPCallbacks</name> <block>{
<expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr>;

<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name> <name>CondDirectiveStack</name></expr>;

<expr><name>class</name> <name>CondDirectiveLoc</name> <block>{
<expr><name>SourceLocation</name> <name>Loc</name></expr>;
<expr><name>SourceLocation</name> <name>RegionLoc</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>CondDirectiveLoc</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceLocation RegionLoc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>, <macro><name>RegionLoc</name><argument_list>(<argument>RegionLoc</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SourceLocation</name> <macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getRegionLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RegionLoc</name></expr>;</return> }</block>

<name>class</name> <name>Comp</name> <block>{
<expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>Comp</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SM</name><argument_list>(<argument>SM</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CondDirectiveLoc</name> <operator>&amp;</operator><name>LHS</name>,
<specifier>const</specifier> <name>CondDirectiveLoc</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>RHS</name><operator>.</operator><name>getLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CondDirectiveLoc</name> <operator>&amp;</operator><name>LHS</name>, <name>SourceLocation</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>SourceLocation</name> <name>LHS</name>, <specifier>const</specifier> <name>CondDirectiveLoc</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>, <argument><expr><call><name><name>RHS</name><operator>.</operator><name>getLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;
}</block></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CondDirectiveLoc</name></expr></argument>&gt;</argument_list></name> <name>CondDirectiveLocsTy</name></expr>;</expr_stmt></typedef>

<name>CondDirectiveLocsTy</name> <name>CondDirectiveLocs</name></block></expr>;

<expr><name>void</name> <macro><name>addCondDirectiveLoc</name><argument_list>(<argument>CondDirectiveLoc DirLoc</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>

<name>explicit</name> <call><name>PPConditionalDirectiveRecord</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call></expr>;

<expr><name>size_t</name> <macro><name>getTotalMemory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SourceMgr</name></expr>;</return> }</block>




<name>bool</name> <macro><name>rangeIntersectsConditionalDirective</name><argument_list>(<argument>SourceRange Range</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>bool</name> <macro><name>areInDifferentConditionalDirectiveRegion</name><argument_list>(<argument>SourceLocation LHS</argument>,
<argument>SourceLocation RHS</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>findConditionalDirectiveRegionLoc</name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>findConditionalDirectiveRegionLoc</name><argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>findConditionalDirectiveRegionLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>If</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceRange ConditionRange</argument>,
<argument>ConditionValueKind ConditionValue</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Elif</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceRange ConditionRange</argument>,
<argument>ConditionValueKind ConditionValue</argument>, <argument>SourceLocation IfLoc</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Ifdef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const Token &amp;MacroNameTok</argument>,
<argument>const MacroDefinition &amp;MD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Ifndef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const Token &amp;MacroNameTok</argument>,
<argument>const MacroDefinition &amp;MD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Elifdef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const Token &amp;MacroNameTok</argument>,
<argument>const MacroDefinition &amp;MD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Elifdef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceRange ConditionRange</argument>,
<argument>SourceLocation IfLoc</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Elifndef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const Token &amp;MacroNameTok</argument>,
<argument>const MacroDefinition &amp;MD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Elifndef</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceRange ConditionRange</argument>,
<argument>SourceLocation IfLoc</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Else</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceLocation IfLoc</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>Endif</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>SourceLocation IfLoc</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
