<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGREPORTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGREPORTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/PathDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/CheckerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ilist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ilist_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LocationContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BugType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CheckerBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedGraph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExprEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemRegion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SValBuilder</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>using</name></type> <name>DiagnosticForConsumerMapTy</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnostic</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>StackHintGenerator</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>StackHintGenerator</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getMessage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>StackHintGeneratorForSymbol</name> <range>: <expr><name>public</name> <name>StackHintGenerator</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>SymbolRef</name> <name>Sym</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Msg</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>StackHintGeneratorForSymbol</name><argument_list>(<argument>SymbolRef S</argument>, <argument>StringRef M</argument>)</argument_list></macro> <operator>:</operator> <call><name>Sym</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>, <macro><name>Msg</name><argument_list>(<argument>M</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><macro><name>StackHintGeneratorForSymbol</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getMessage</name><argument_list>(<argument>const ExplodedNode *N</argument>)</argument_list></macro> <name>override</name></expr>;



<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getMessageForArg</name><argument_list>(<argument>const Expr *ArgE</argument>, <argument>unsigned ArgIndex</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getMessageForReturn</name><argument_list>(<argument>const CallExpr *CallExpr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>Msg</name></expr>;</return>
}</block>

<name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getMessageForSymbolNotFound</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>Msg</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>BugReport</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>class</name> <name>Kind</name> <block>{ <expr><name>Basic</name></expr>, <expr><name>PathSensitive</name></expr> }</block></expr>;

<expr><name>protected</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>BugReportEquivClass</name></expr>;
<expr><name>friend</name> <name>class</name> <name>BugReporter</name></expr>;

<expr><name>Kind</name> <name>K</name></expr>;
<expr><specifier>const</specifier> <name>BugType</name><operator>&amp;</operator> <name>BT</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ShortDescription</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Description</name></expr>;

<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticNotePiece</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Notes</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Fixits</name></expr>;

<macro><name>BugReport</name><argument_list>(<argument>Kind kind</argument>, <argument>const BugType &amp;bt</argument>, <argument>StringRef desc</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>BugReport</name><argument_list>(<argument>kind</argument>, <argument>bt</argument>, <argument><literal type="string">""</literal></argument>, <argument>desc</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>BugReport</name><argument_list>(<argument>Kind K</argument>, <argument>const BugType &amp;BT</argument>, <argument>StringRef ShortDescription</argument>,
<argument>StringRef Description</argument>)</argument_list></macro>
<operator>:</operator> <call><name>K</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>BT</name><argument_list>(<argument><expr><name>BT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ShortDescription</name><argument_list>(<argument><expr><name>ShortDescription</name></expr></argument>)</argument_list></call></expr>,
<macro><name>Description</name><argument_list>(<argument>Description</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>BugReport</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block>

<specifier>const</specifier> <name>BugType</name><operator>&amp;</operator> <macro><name>getBugType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BT</name></expr>;</return> }</block>







<name>StringRef</name> <macro><name>getDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Description</name></expr>;</return> }</block>





<name>StringRef</name> <macro><name>getShortDescription</name><argument_list>(<argument>bool UseFallback = true</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>ShortDescription</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>UseFallback</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Description</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>ShortDescription</name></expr>;</return>
}</block>





<name>virtual</name> <name>PathDiagnosticLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><name>virtual</name> <specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getDeclWithIssue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;










<expr><name>virtual</name> <name>PathDiagnosticLocation</name> <macro><name>getUniqueingLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>virtual</name> <specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getUniqueingDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><name>void</name> <macro><name>addNote</name><argument_list>(<argument>StringRef Msg</argument>, <argument>const PathDiagnosticLocation &amp;Pos</argument>,
<argument>ArrayRef&lt;SourceRange&gt; Ranges = {}</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>P</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticNotePiece</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Pos</name></expr></argument>, <argument><expr><name>Msg</name></expr></argument>)</argument_list></call></expr>;

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>R</name> <range>: <expr><name>Ranges</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>P</name><operator>-&gt;</operator><name>addRange</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<call><name><name>Notes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticNotePiece</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>getNotes</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>Notes</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>








<function><type><name>void</name></type> <name>addRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>R</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Ranges</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Invalid range can only be used "</literal>
<literal type="string">"to specify that the report does not have a range."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Ranges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>virtual</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Ranges</name></expr>;</return>
}</block></expr></expr_stmt>








<function><type><name>void</name></type> <name>addFixItHint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FixItHint</name> <modifier>&amp;</modifier></type><name>F</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Fixits</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <macro><name>getFixits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Fixits</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name><operator>&amp;</operator> <name>hash</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BasicBugReport</name> <range>: <expr><name>public</name> <name>BugReport</name> <block>{
<expr><name>PathDiagnosticLocation</name> <name>Location</name></expr>;
<expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>DeclWithIssue</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>BasicBugReport</name><argument_list>(<argument>const BugType &amp;bt</argument>, <argument>StringRef desc</argument>, <argument>PathDiagnosticLocation l</argument>)</argument_list></macro>
<operator>:</operator> <call><name>BugReport</name><argument_list>(<argument><expr><name>Kind</name><operator>::</operator><name>Basic</name></expr></argument>, <argument><expr><name>bt</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>, <macro><name>Location</name><argument_list>(<argument>l</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BugReport *R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>Basic</name></expr>;</return>
}</block>

<name>PathDiagnosticLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Location</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Location</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getDeclWithIssue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>DeclWithIssue</name></expr>;</return>
}</block>

<name>PathDiagnosticLocation</name> <macro><name>getUniqueingLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getUniqueingDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getDeclWithIssue</name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<name>void</name> <macro><name>setDeclWithIssue</name><argument_list>(<argument>const Decl *declWithIssue</argument>)</argument_list></macro> <block>{
<expr><name>DeclWithIssue</name> <operator>=</operator> <name>declWithIssue</name></expr>;
}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; hash</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PathSensitiveBugReport</name> <range>: <expr><name>public</name> <name>BugReport</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>VisitorList</name> <operator>=</operator> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReporterVisitor</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>visitor_iterator</name> <operator>=</operator> <name>VisitorList</name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>visitor_range</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>visitor_iterator</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>protected</name><operator>:</operator>


<specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>ErrorNode</name> <operator>=</operator> <name>nullptr</name></expr>;



<expr><specifier>const</specifier> <name>SourceRange</name> <name>ErrorNodeRange</name></expr>;








<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRef</name></expr></argument>, <argument><expr><name>bugreporter</name><operator>::</operator><name>TrackingKind</name></expr></argument>&gt;</argument_list></name> <name>InterestingSymbols</name></expr>;






<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator></expr></argument>, <argument><expr><name>bugreporter</name><operator>::</operator><name>TrackingKind</name></expr></argument>&gt;</argument_list></name>
<name>InterestingRegions</name></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>SmallSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>InterestingLocationContexts</name></expr>;



<expr><name>VisitorList</name> <name>Callbacks</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>BugReporterVisitor</name></expr></argument>&gt;</argument_list></name> <name>CallbacksSet</name></expr>;




<expr><name>bool</name> <name>DoNotPrunePath</name> <operator>=</operator> <name>false</name></expr>;





<expr><name>using</name> <name>InvalidationRecord</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;






<expr><name>llvm</name><operator>::</operator><name><name>SmallSet</name><argument_list type="generic">&lt;<argument><expr><name>InvalidationRecord</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Invalidations</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>SmallSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>TrackedConditions</name></expr>;



<expr><name>PathDiagnosticLocation</name> <name>UniqueingLocation</name></expr>;
<expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>UniqueingDecl</name></expr>;

<expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticPieceRef</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StackHintGenerator</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>StackHints</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>PathSensitiveBugReport</name><argument_list>(<argument>const BugType &amp;bt</argument>, <argument>StringRef desc</argument>,
<argument>const ExplodedNode *errorNode</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>PathSensitiveBugReport</name><argument_list>(<argument>bt</argument>, <argument>desc</argument>, <argument>desc</argument>, <argument>errorNode</argument>)</argument_list></macro> <block>{}</block>

<macro><name>PathSensitiveBugReport</name><argument_list>(<argument>const BugType &amp;bt</argument>, <argument>StringRef shortDesc</argument>, <argument>StringRef desc</argument>,
<argument>const ExplodedNode *errorNode</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>PathSensitiveBugReport</name><argument_list>(<argument>bt</argument>, <argument>shortDesc</argument>, <argument>desc</argument>, <argument>errorNode</argument>,
<argument>{}</argument>,
<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>








<macro><name>PathSensitiveBugReport</name><argument_list>(<argument>const BugType &amp;bt</argument>, <argument>StringRef desc</argument>,
<argument>const ExplodedNode *errorNode</argument>,
<argument>PathDiagnosticLocation LocationToUnique</argument>,
<argument>const Decl *DeclToUnique</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>PathSensitiveBugReport</name><argument_list>(<argument>bt</argument>, <argument>desc</argument>, <argument>desc</argument>, <argument>errorNode</argument>, <argument>LocationToUnique</argument>,
<argument>DeclToUnique</argument>)</argument_list></macro> <block>{}</block>

<macro><name>PathSensitiveBugReport</name><argument_list>(<argument>const BugType &amp;bt</argument>, <argument>StringRef shortDesc</argument>, <argument>StringRef desc</argument>,
<argument>const ExplodedNode *errorNode</argument>,
<argument>PathDiagnosticLocation LocationToUnique</argument>,
<argument>const Decl *DeclToUnique</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const BugReport *R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Kind</name><operator>::</operator><name>PathSensitive</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><macro><name>getErrorNode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ErrorNode</name></expr>;</return> }</block>



<name>bool</name> <macro><name>shouldPrunePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>DoNotPrunePath</name></expr>;</return> }</block>


<name>void</name> <macro><name>disablePathPruning</name><argument_list>()</argument_list></macro> <block>{ <expr><name>DoNotPrunePath</name> <operator>=</operator> <name>true</name></expr>; }</block>


<name>PathDiagnosticLocation</name> <macro><name>getUniqueingLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>UniqueingLocation</name></expr>;</return>
}</block>


<specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getUniqueingDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>UniqueingDecl</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getDeclWithIssue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>PathDiagnosticLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;




<expr><name>void</name> <macro><name>markInteresting</name><argument_list>(<argument>SymbolRef sym</argument>, <argument>bugreporter::TrackingKind TKind =
bugreporter::TrackingKind::Thorough</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>markNotInteresting</name><argument_list>(<argument>SymbolRef sym</argument>)</argument_list></macro></expr>;




<expr><name>void</name> <macro><name>markInteresting</name><argument_list>(
<argument>const MemRegion *R</argument>,
<argument>bugreporter::TrackingKind TKind = bugreporter::TrackingKind::Thorough</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>markNotInteresting</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>R</name></expr></argument>)</argument_list></call></expr>;




<expr><name>void</name> <macro><name>markInteresting</name><argument_list>(<argument>SVal V</argument>, <argument>bugreporter::TrackingKind TKind =
bugreporter::TrackingKind::Thorough</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>markInteresting</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>LC</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isInteresting</name><argument_list>(<argument>SymbolRef sym</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>isInteresting</name><argument_list>(<argument>const MemRegion *R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>isInteresting</name><argument_list>(<argument>SVal V</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>isInteresting</name><argument_list>(<argument>const LocationContext *LC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bugreporter</name><operator>::</operator><name>TrackingKind</name></expr></argument>&gt;</argument_list></name>
<macro><name>getInterestingnessKind</name><argument_list>(<argument>SymbolRef sym</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bugreporter</name><operator>::</operator><name>TrackingKind</name></expr></argument>&gt;</argument_list></name>
<macro><name>getInterestingnessKind</name><argument_list>(<argument>const MemRegion *R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bugreporter</name><operator>::</operator><name>TrackingKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getInterestingnessKind</name><argument_list>(<argument>SVal V</argument>)</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Invalidations</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>










<name>void</name> <macro><name>markInvalid</name><argument_list>(<argument>const void *Tag</argument>, <argument>const void *Data</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Invalidations</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Tag</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;hash</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;






<expr><name>void</name> <call><name>addVisitor</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReporterVisitor</name></expr></argument>&gt;</argument_list></name> <name>visitor</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>VisitorType</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>addVisitor</name><argument_list>(<argument>Args &amp;&amp;... ConstructorArgs</argument>)</argument_list></macro> <block>{
<expr><call><name>addVisitor</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>VisitorType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ConstructorArgs</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <call><name>clearVisitors</name><argument_list>()</argument_list></call></expr>;


<expr><name>visitor_iterator</name> <macro><name>visitor_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Callbacks</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>visitor_iterator</name> <macro><name>visitor_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Callbacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>visitor_range</name> <macro><name>visitors</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><block>{<expr><call><name>visitor_begin</name><argument_list>()</argument_list></call></expr>, <macro><name>visitor_end</name><argument_list>()</argument_list></macro>}</block></expr>;</return> }</block>




<name>bool</name> <macro><name>addTrackedCondition</name><argument_list>(<argument>const ExplodedNode *Cond</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>TrackedConditions</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Cond</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return>
}</block>

<name>void</name> <macro><name>addCallStackHint</name><argument_list>(<argument>PathDiagnosticPieceRef Piece</argument>,
<argument>std::unique_ptr&lt;StackHintGenerator&gt; StackHint</argument>)</argument_list></macro> <block>{
<expr><name><name>StackHints</name><index>[<expr><name>Piece</name></expr>]</index></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>StackHint</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasCallStackHint</name><argument_list>(<argument>PathDiagnosticPieceRef Piece</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>StackHints</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>Piece</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block>



<name>std</name><operator>::</operator><name>string</name>
<macro><name>getCallStackMessage</name><argument_list>(<argument>PathDiagnosticPieceRef Piece</argument>,
<argument>const ExplodedNode *N</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>I</name> <operator>=</operator> <call><name><name>StackHints</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Piece</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>StackHints</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>getMessage</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>BugReportEquivClass</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>friend</name> <name>class</name> <name>BugReporter</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReport</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Reports</name></expr>;

<expr><name>void</name> <macro><name>AddReport</name><argument_list>(<argument>std::unique_ptr&lt;BugReport&gt; &amp;&amp;R</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Reports</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<macro><name>BugReportEquivClass</name><argument_list>(<argument>std::unique_ptr&lt;BugReport&gt; R</argument>)</argument_list></macro> <block>{ <expr><call><name>AddReport</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReport</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>getReports</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Reports</name></expr>;</return> }</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Reports</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Reports</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;





<expr><name>class</name> <name>BugReporterData</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>BugReporterData</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>virtual</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getPathDiagnosticConsumers</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>ASTContext</name> <operator>&amp;</operator><call><name>getASTContext</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>SourceManager</name> <operator>&amp;</operator><call><name>getSourceManager</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>AnalyzerOptions</name> <operator>&amp;</operator><call><name>getAnalyzerOptions</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>Preprocessor</name> <operator>&amp;</operator><call><name>getPreprocessor</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;






<expr><name>class</name> <name>BugReporter</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>BugReporterData</name><operator>&amp;</operator> <name>D</name></expr>;


<expr><name>void</name> <call><name>FlushReport</name><argument_list>(<argument><expr><name>BugReportEquivClass</name><operator>&amp;</operator> <name>EQ</name></expr></argument>)</argument_list></call></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>BugReportEquivClass</name></expr></argument>&gt;</argument_list></name> <name>EQClasses</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BugReportEquivClass</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>EQClassesVector</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>BugReporter</name><argument_list>(<argument><expr><name>BugReporterData</name> <operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>BugReporter</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>FlushReports</name><argument_list>()</argument_list></call></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getPathDiagnosticConsumers</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>D</name><operator>.</operator><name>getPathDiagnosticConsumers</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>using</name> <name>EQClasses_iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>BugReportEquivClass</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;
<expr><name>EQClasses_iterator</name> <macro><name>EQClasses_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>EQClasses</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>EQClasses_iterator</name> <macro><name>EQClasses_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>EQClasses</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>D</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>D</name><operator>.</operator><name>getSourceManager</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>AnalyzerOptions</name> <operator>&amp;</operator><macro><name>getAnalyzerOptions</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>D</name><operator>.</operator><name>getAnalyzerOptions</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>Preprocessor</name> <operator>&amp;</operator><macro><name>getPreprocessor</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>D</name><operator>.</operator><name>getPreprocessor</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>






<name>virtual</name> <name>void</name> <call><name>emitReport</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugReport</name></expr></argument>&gt;</argument_list></name> <name>R</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>EmitBasicReport</name><argument_list>(<argument>const Decl *DeclWithIssue</argument>, <argument>const CheckerBase *Checker</argument>,
<argument>StringRef BugName</argument>, <argument>StringRef BugCategory</argument>,
<argument>StringRef BugStr</argument>, <argument>PathDiagnosticLocation Loc</argument>,
<argument>ArrayRef&lt;SourceRange&gt; Ranges = None</argument>,
<argument>ArrayRef&lt;FixItHint&gt; Fixits = None</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>EmitBasicReport</name><argument_list>(<argument>const Decl *DeclWithIssue</argument>, <argument>CheckerNameRef CheckerName</argument>,
<argument>StringRef BugName</argument>, <argument>StringRef BugCategory</argument>,
<argument>StringRef BugStr</argument>, <argument>PathDiagnosticLocation Loc</argument>,
<argument>ArrayRef&lt;SourceRange&gt; Ranges = None</argument>,
<argument>ArrayRef&lt;FixItHint&gt; Fixits = None</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>StrBugTypes</name></expr>;



<expr><name>BugType</name> <operator>*</operator><macro><name>getBugTypeForName</name><argument_list>(<argument>CheckerNameRef CheckerName</argument>, <argument>StringRef name</argument>,
<argument>StringRef category</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>BugReport</name> <operator>*</operator>
<macro><name>findReportInEquivalenceClass</name><argument_list>(<argument>BugReportEquivClass &amp;eqClass</argument>,
<argument>SmallVectorImpl&lt;BugReport *&gt; &amp;bugReports</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>eqClass</name><operator>.</operator><name>getReports</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>

<name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticForConsumerMapTy</name></expr></argument>&gt;</argument_list></name>
<call><name>generateDiagnosticForConsumerMap</name><argument_list>(<argument><expr><name>BugReport</name> <operator>*</operator><name>exampleReport</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>consumers</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>BugReport</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>bugReports</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;


<expr><name>class</name> <name>PathSensitiveBugReporter</name> <name>final</name> <operator>:</operator> <name>public</name> <name>BugReporter</name> <block>{
<expr><name>ExprEngine</name><operator>&amp;</operator> <name>Eng</name></expr>;

<expr><name>BugReport</name> <operator>*</operator><macro><name>findReportInEquivalenceClass</name><argument_list>(
<argument>BugReportEquivClass &amp;eqClass</argument>,
<argument>SmallVectorImpl&lt;BugReport *&gt; &amp;bugReports</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticForConsumerMapTy</name></expr></argument>&gt;</argument_list></name>
<macro><name>generateDiagnosticForConsumerMap</name><argument_list>(<argument>BugReport *exampleReport</argument>,
<argument>ArrayRef&lt;PathDiagnosticConsumer *&gt; consumers</argument>,
<argument>ArrayRef&lt;BugReport *&gt; bugReports</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>PathSensitiveBugReporter</name><argument_list>(<argument><expr><name>BugReporterData</name><operator>&amp;</operator> <name>d</name></expr></argument>, <argument><expr><name>ExprEngine</name><operator>&amp;</operator> <name>eng</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>BugReporter</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>, <macro><name>Eng</name><argument_list>(<argument>eng</argument>)</argument_list></macro> <expr><block>{}</block>



<specifier>const</specifier> <name>ExplodedGraph</name> <operator>&amp;</operator><macro><name>getGraph</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>ProgramStateManager</name> <operator>&amp;</operator><macro><name>getStateManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticForConsumerMapTy</name></expr></argument>&gt;</argument_list></name> <call><name>generatePathDiagnostics</name><argument_list>(
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>consumers</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathSensitiveBugReport</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>bugReports</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>emitReport</name><argument_list>(<argument>std::unique_ptr&lt;BugReport&gt; R</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>BugReporterContext</name> <block>{
<expr><name>PathSensitiveBugReporter</name> <operator>&amp;</operator><name>BR</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>BugReporterContext</name><argument_list>(<argument><expr><name>PathSensitiveBugReporter</name> <operator>&amp;</operator><name>br</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>BR</name><argument_list>(<argument>br</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>BugReporterContext</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>PathSensitiveBugReporter</name><operator>&amp;</operator> <macro><name>getBugReporter</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>BR</name></expr>;</return> }</block>

<name>ProgramStateManager</name><operator>&amp;</operator> <macro><name>getStateManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BR</name><operator>.</operator><name>getStateManager</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BR</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>SourceManager</name><operator>&amp;</operator> <macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BR</name><operator>.</operator><name>getSourceManager</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>AnalyzerOptions</name> <operator>&amp;</operator><macro><name>getAnalyzerOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>BR</name><operator>.</operator><name>getAnalyzerOptions</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;









<expr><name>class</name> <name>DataTag</name> <operator>:</operator> <name>public</name> <name>ProgramPointTag</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>StringRef</name> <macro><name>getTagDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"Data Tag"</literal></expr>;</return> }</block>


<name>class</name> <name>Factory</name> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DataTag</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Tags</name></expr>;

<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>DataTagType</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>DataTagType</name> <operator>*</operator><macro><name>make</name><argument_list>(<argument>Args &amp;&amp;... ConstructorArgs</argument>)</argument_list></macro> <block>{


<macro><name>Tags</name></macro><expr><operator>.</operator><macro><name>emplace_back</name><argument_list>(
<argument>new DataTagType(std::forward&lt;Args&gt;(ConstructorArgs)...)</argument>)</argument_list></macro></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DataTagType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Tags</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>DataTag</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>TagKind</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ProgramPointTag</name><argument_list>(<argument>TagKind</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>NoteTag</name> <operator>:</operator> <name>public</name> <name>DataTag</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>Callback</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><name>BugReporterContext</name> <operator>&amp;</operator>,
<name>PathSensitiveBugReport</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>int</name> <name>Kind</name></expr>;

<expr><specifier>const</specifier> <name>Callback</name> <name>Cb</name></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>IsPrunable</name></expr>;

<macro><name>NoteTag</name><argument_list>(<argument>Callback &amp;&amp;Cb</argument>, <argument>bool IsPrunable</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>DataTag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Kind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Cb</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>IsPrunable</name><argument_list>(<argument>IsPrunable</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ProgramPointTag *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getTagKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>Kind</name></expr>;</return>
}</block>

<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>generateMessage</name><argument_list>(<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;R</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Msg</name> <operator>=</operator> <call><name>Cb</name><argument_list>(<argument><expr><name>BRC</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Msg</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>getTagDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{



<return>return <expr><literal type="string">"Note Tag"</literal></expr>;</return>
}</block>

<name>bool</name> <macro><name>isPrunable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPrunable</name></expr>;</return> }</block>

<name>friend</name> <name>class</name> <name>Factory</name></expr>;
<expr><name>friend</name> <name>class</name> <name>TagVisitor</name></expr>;
}</block></expr>;

}</block></expr>

}</block></expr></range></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
