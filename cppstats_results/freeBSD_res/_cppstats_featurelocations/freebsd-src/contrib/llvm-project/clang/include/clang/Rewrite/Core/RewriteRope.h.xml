<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_REWRITE_CORE_REWRITEROPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_REWRITE_CORE_REWRITEROPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>









<struct>struct <name>RopeRefCountString</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>RefCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Retain</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>RefCount</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>Release</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>RefCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Reference count is already zero."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>RefCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>delete</name> <index>[]</index></name> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>this</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
}</block>;</struct>













<struct>struct <name>RopePiece</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>RopeRefCountString</name></expr></argument>&gt;</argument_list></name> <name>StrData</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RopePiece</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>RopePiece</name><argument_list>(<argument>llvm::IntrusiveRefCntPtr&lt;RopeRefCountString&gt; Str</argument>, <argument>unsigned Start</argument>,
<argument>unsigned End</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>StrData</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>StartOffs</name><argument_list>(<argument><expr><name>Start</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>EndOffs</name><argument_list>(<argument>End</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>&amp;</operator><name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>Offset</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>StrData</name><operator>-&gt;</operator><name>Data</name><index>[<expr><name>Offset</name><operator>+</operator><name>StartOffs</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>char</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>StrData</name><operator>-&gt;</operator><name>Data</name><index>[<expr><name>Offset</name><operator>+</operator><name>StartOffs</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EndOffs</name><operator>-</operator><name>StartOffs</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>









<decl_stmt><decl><type><name>class</name></type> <name>RopePieceBTreeIterator</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>CurNode</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>RopePiece</name> <modifier>*</modifier></type><name>CurPiece</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>CurChar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>iterator_category</name> <init>= <expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><specifier>const</specifier> <name>char</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name>std</name><operator>::</operator><name>ptrdiff_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>value_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>value_type</name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RopePieceBTreeIterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>RopePieceBTreeIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>char</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><operator>*</operator><name>CurPiece</name><operator>)</operator><index>[<expr><name>CurChar</name></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RopePieceBTreeIterator</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>CurPiece</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>CurPiece</name></name> <operator>&amp;&amp;</operator> <name>CurChar</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>CurChar</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>RopePieceBTreeIterator</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><name>operator</name><operator>==</operator><operator>(</operator><name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>RopePieceBTreeIterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>CurChar</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>CurPiece</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>CurChar</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MoveToNextPiece</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>RopePieceBTreeIterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>RopePieceBTreeIterator</name> <name>tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>; <expr><operator>++</operator><operator>*</operator><name>this</name></expr>; <return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>piece</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>StringRef</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>CurPiece</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name><name>CurPiece</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>MoveToNextPiece</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>RopePieceBTree</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Root</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>RopePieceBTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RopePieceBTree</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RopePieceBTree</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RopePieceBTree</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RopePieceBTree</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>RopePieceBTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>RopePieceBTreeIterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>Root</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RopePiece</name> <modifier>&amp;</modifier></type><name>R</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBytes</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>RewriteRope</name> <block>{<block_content>
<decl_stmt><decl><type><name>RopePieceBTree</name></type> <name>Chunks</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>RopeRefCountString</name></expr></argument>&gt;</argument_list></name> <name>AllocBuffer</name></expr>;</expr_stmt>
<enum>enum <block>{ <decl><name>AllocChunkSize</name> <init>= <expr><literal type="number">4080</literal></expr></init></decl> }</block>;</enum>
<decl_stmt><decl><type><name>unsigned</name></type> <name>AllocOffs</name> <init>= <expr><name>AllocChunkSize</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>RewriteRope</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>RewriteRope</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RewriteRope</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Chunks</name><argument_list>(<argument>RHS.Chunks</argument>)</argument_list></macro> <block>{}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>RopePieceBTree</name><operator>::</operator><name>iterator</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>RopePieceBTree</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chunks</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chunks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chunks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Chunks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Start</name> <operator>!=</operator> <name>End</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Chunks</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MakeRopeString</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>&lt;=</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid position to insert!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Start</name> <operator>==</operator> <name>End</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Chunks</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>, <argument><expr><call><name>MakeRopeString</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name><operator>+</operator><name>NumBytes</name> <operator>&lt;=</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid region to erase!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NumBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Chunks</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>, <argument><expr><name>NumBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function_decl><type><name>RopePiece</name></type> <name>MakeRopeString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
