<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DIAGNOSTICIDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DIAGNOSTICIDS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>diag</name> <block>{<block_content>

<enum>enum <block>{
<decl><name>DIAG_SIZE_COMMON</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_DRIVER</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_FRONTEND</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_SERIALIZATION</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_LEX</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_PARSE</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_AST</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_COMMENT</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_CROSSTU</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_SEMA</name> <init>= <expr><literal type="number">4500</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_ANALYSIS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>DIAG_SIZE_REFACTORING</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>DIAG_START_COMMON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DIAG_START_DRIVER</name> <init>= <expr><name>DIAG_START_COMMON</name> <operator>+</operator> <name>DIAG_SIZE_COMMON</name></expr></init></decl>,
<decl><name>DIAG_START_FRONTEND</name> <init>= <expr><name>DIAG_START_DRIVER</name> <operator>+</operator> <name>DIAG_SIZE_DRIVER</name></expr></init></decl>,
<decl><name>DIAG_START_SERIALIZATION</name> <init>= <expr><name>DIAG_START_FRONTEND</name> <operator>+</operator> <name>DIAG_SIZE_FRONTEND</name></expr></init></decl>,
<decl><name>DIAG_START_LEX</name> <init>= <expr><name>DIAG_START_SERIALIZATION</name> <operator>+</operator> <name>DIAG_SIZE_SERIALIZATION</name></expr></init></decl>,
<decl><name>DIAG_START_PARSE</name> <init>= <expr><name>DIAG_START_LEX</name> <operator>+</operator> <name>DIAG_SIZE_LEX</name></expr></init></decl>,
<decl><name>DIAG_START_AST</name> <init>= <expr><name>DIAG_START_PARSE</name> <operator>+</operator> <name>DIAG_SIZE_PARSE</name></expr></init></decl>,
<decl><name>DIAG_START_COMMENT</name> <init>= <expr><name>DIAG_START_AST</name> <operator>+</operator> <name>DIAG_SIZE_AST</name></expr></init></decl>,
<decl><name>DIAG_START_CROSSTU</name> <init>= <expr><name>DIAG_START_COMMENT</name> <operator>+</operator> <name>DIAG_SIZE_COMMENT</name></expr></init></decl>,
<decl><name>DIAG_START_SEMA</name> <init>= <expr><name>DIAG_START_CROSSTU</name> <operator>+</operator> <name>DIAG_SIZE_CROSSTU</name></expr></init></decl>,
<decl><name>DIAG_START_ANALYSIS</name> <init>= <expr><name>DIAG_START_SEMA</name> <operator>+</operator> <name>DIAG_SIZE_SEMA</name></expr></init></decl>,
<decl><name>DIAG_START_REFACTORING</name> <init>= <expr><name>DIAG_START_ANALYSIS</name> <operator>+</operator> <name>DIAG_SIZE_ANALYSIS</name></expr></init></decl>,
<decl><name>DIAG_UPPER_LIMIT</name> <init>= <expr><name>DIAG_START_REFACTORING</name> <operator>+</operator> <name>DIAG_SIZE_REFACTORING</name></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>CustomDiagInfo</name></decl>;</decl_stmt>


<typedef>typedef <type><name>unsigned</name></type> <name>kind</name>;</typedef>


<enum>enum <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG</name><parameter_list>(<parameter><type><name>ENUM</name></type></parameter>, <parameter><type><name>FLAGS</name></type></parameter>, <parameter><type><name>DEFAULT_MAPPING</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>GROUP</name></type></parameter>, <parameter><type><name>SFINAE</name></type></parameter>, <parameter><type><name>CATEGORY</name></type></parameter>, <parameter><type><name>NOWERROR</name></type></parameter>, <parameter><type><name>SHOWINSYSHEADER</name></type></parameter>, <parameter><type><name>DEFFERABLE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ENUM,</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMONSTART</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticCommonKinds.inc"</cpp:file></cpp:include>
<decl><name>NUM_BUILTIN_COMMON_DIAGNOSTICS</name></decl>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DIAG</name></cpp:undef>
}</block>;</enum>





<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Severity</name> <block>{<block_content>

<expr_stmt><expr><name>Ignored</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>Remark</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator>
<expr><name>Warning</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator>
<expr><name>Error</name> <operator>=</operator> <literal type="number">4</literal></expr><operator>,</operator>
<expr><name>Fatal</name> <operator>=</operator> <literal type="number">5</literal></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Flavor</name> <block>{<block_content>
<expr_stmt><expr><name>WarningOrError</name></expr><operator>,</operator>

<expr><name>Remark</name></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticMapping</name> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Severity</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsUser</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsPragma</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>HasNoWarningAsError</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>HasNoErrorAsFatal</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>WasUpgradedFromWarning</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>DiagnosticMapping</name></type> <name>Make</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Severity</name></expr></argument>, <argument><expr><name>bool</name> <name>IsUser</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsPragma</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticMapping</name></type> <name>Result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>Severity</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Severity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IsUser</name></name> <operator>=</operator> <name>IsUser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IsPragma</name></name> <operator>=</operator> <name>IsPragma</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>HasNoWarningAsError</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>HasNoErrorAsFatal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>WasUpgradedFromWarning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>diag</name><operator>::</operator><name>Severity</name> <macro><name>getSeverity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>diag</name><operator>::</operator><name>Severity</name><operator>)</operator><name>Severity</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setSeverity</name><argument_list>(<argument><expr><name>diag</name><operator>::</operator><name>Severity</name> <name>Value</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>Severity</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Value</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUser</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsUser</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPragma</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPragma</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isErrorOrFatal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getSeverity</name><argument_list>()</argument_list></call> <operator>==</operator> <name>diag</name><operator>::</operator><name>Severity</name><operator>::</operator><name>Error</name> <operator>||</operator>
<call><name>getSeverity</name><argument_list>()</argument_list></call> <operator>==</operator> <name>diag</name><operator>::</operator><name>Severity</name><operator>::</operator><name>Fatal</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasNoWarningAsError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasNoWarningAsError</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNoWarningAsError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>HasNoWarningAsError</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasNoErrorAsFatal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasNoErrorAsFatal</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNoErrorAsFatal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>HasNoErrorAsFatal</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>wasUpgradedFromWarning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>WasUpgradedFromWarning</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUpgradedFromWarning</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>WasUpgradedFromWarning</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>unsigned</name> <macro><name>serialize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>IsUser</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>IsPragma</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>HasNoWarningAsError</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>HasNoErrorAsFatal</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>WasUpgradedFromWarning</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>Severity</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>DiagnosticMapping</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticMapping</name></type> <name>Result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IsUser</name></name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IsPragma</name></name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>HasNoWarningAsError</name></name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>HasNoErrorAsFatal</name></name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>WasUpgradedFromWarning</name></name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>Severity</name></name> <operator>=</operator> <name>Bits</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticIDs</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticIDs</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>Level</name> <block>{
<expr><name>Ignored</name></expr>, <expr><name>Note</name></expr>, <expr><name>Remark</name></expr>, <expr><name>Warning</name></expr>, <expr><name>Error</name></expr>, <expr><name>Fatal</name></expr>
}</block></expr>;

<expr><name>private</name><operator>:</operator>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>diag</name><operator>::</operator><name>CustomDiagInfo</name></expr></argument>&gt;</argument_list></name> <name>CustomDiagInfo</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>DiagnosticIDs</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>DiagnosticIDs</name><argument_list>()</argument_list></call></expr>;










<expr><name>unsigned</name> <macro><name>getCustomDiagID</name><argument_list>(<argument>Level L</argument>, <argument>StringRef FormatString</argument>)</argument_list></macro></expr>;






<expr><name>StringRef</name> <macro><name>getDescription</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;






<expr><specifier>static</specifier> <name>bool</name> <macro><name>isBuiltinWarningOrExtension</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>bool</name> <macro><name>isDefaultMappingAsError</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>bool</name> <macro><name>isBuiltinNote</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>bool</name> <macro><name>isBuiltinExtensionDiag</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <block>{
<expr><name>bool</name> <name>ignored</name></expr>;
<return>return <expr><call><name>isBuiltinExtensionDiag</name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><name>ignored</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>








<specifier>static</specifier> <name>bool</name> <macro><name>isBuiltinExtensionDiag</name><argument_list>(<argument>unsigned DiagID</argument>, <argument>bool &amp;EnabledByDefault</argument>)</argument_list></macro></expr>;






<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getWarningOptionForDiag</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>unsigned</name> <macro><name>getCategoryNumberForDiag</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>unsigned</name> <call><name>getNumberOfCategories</name><argument_list>()</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getCategoryNameFromID</name><argument_list>(<argument>unsigned CategoryID</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>bool</name> <macro><name>isARCDiagnostic</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;



enum <expr><name>SFINAEResponse</name> <block>{





<expr><name>SFINAE_SubstitutionFailure</name></expr>,




<expr><name>SFINAE_Suppress</name></expr>,





<expr><name>SFINAE_Report</name></expr>,



<expr><name>SFINAE_AccessControl</name></expr>
}</block></expr>;









<expr><specifier>static</specifier> <name>SFINAEResponse</name> <macro><name>getDiagnosticSFINAEResponse</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;






<expr><specifier>static</specifier> <name>bool</name> <macro><name>isDeferrable</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro></expr>;






<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>getDiagnosticFlags</name><argument_list>()</argument_list></call></expr>;





<expr><name>bool</name> <macro><name>getDiagnosticsInGroup</name><argument_list>(<argument>diag::Flavor Flavor</argument>, <argument>StringRef Group</argument>,
<argument>SmallVectorImpl&lt;diag::kind&gt; &amp;Diags</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><specifier>static</specifier> <name>void</name> <macro><name>getAllDiagnostics</name><argument_list>(<argument>diag::Flavor Flavor</argument>,
<argument>std::vector&lt;diag::kind&gt; &amp;Diags</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getNearestOption</name><argument_list>(<argument>diag::Flavor Flavor</argument>, <argument>StringRef Group</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>








<name>DiagnosticIDs</name><operator>::</operator><name>Level</name>
<macro><name>getDiagnosticLevel</name><argument_list>(<argument>unsigned DiagID</argument>, <argument>SourceLocation Loc</argument>,
<argument>const DiagnosticsEngine &amp;Diag</argument>)</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name></expr>;

<expr><name>diag</name><operator>::</operator><name>Severity</name>
<macro><name>getDiagnosticSeverity</name><argument_list>(<argument>unsigned DiagID</argument>, <argument>SourceLocation Loc</argument>,
<argument>const DiagnosticsEngine &amp;Diag</argument>)</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name></expr>;





<expr><name>bool</name> <macro><name>ProcessDiag</name><argument_list>(<argument>DiagnosticsEngine &amp;Diag</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>void</name> <macro><name>EmitDiag</name><argument_list>(<argument>DiagnosticsEngine &amp;Diag</argument>, <argument>Level DiagLevel</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>bool</name> <macro><name>isUnrecoverable</name><argument_list>(<argument>unsigned DiagID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>friend</name> <name>class</name> <name>DiagnosticsEngine</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
