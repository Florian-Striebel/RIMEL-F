<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DependenceFlags.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DEPENDENCEFLAGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DEPENDENCEFLAGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BitmaskEnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitmaskEnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<struct>struct <name>ExprDependenceScope</name> <block>{
<enum>enum <name>ExprDependence</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>UnexpandedPack</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,








<decl><name>Instantiation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>Type</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>Value</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,



<decl><name>Error</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>All</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,

<decl><name>TypeValue</name> <init>= <expr><name>Type</name> <operator>|</operator> <name>Value</name></expr></init></decl>,
<decl><name>TypeInstantiation</name> <init>= <expr><name>Type</name> <operator>|</operator> <name>Instantiation</name></expr></init></decl>,
<decl><name>ValueInstantiation</name> <init>= <expr><name>Value</name> <operator>|</operator> <name>Instantiation</name></expr></init></decl>,
<decl><name>TypeValueInstantiation</name> <init>= <expr><name>Type</name> <operator>|</operator> <name>Value</name> <operator>|</operator> <name>Instantiation</name></expr></init></decl>,
<decl><name>ErrorDependent</name> <init>= <expr><name>Error</name> <operator>|</operator> <name>ValueInstantiation</name></expr></init></decl>,

<decl><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>(<argument><expr><name>Error</name></expr></argument>)</argument_list></decl>
}</block>;</enum>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>ExprDependence</name> <init>= <expr><name>ExprDependenceScope</name><operator>::</operator><name>ExprDependence</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>TypeDependenceScope</name> <block>{
<enum>enum <name>TypeDependence</name> : <type><name>uint8_t</name></type> <block>{


<decl><name>UnexpandedPack</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>Instantiation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,



<decl><name>Dependent</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>VariablyModified</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,



<decl><name>Error</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>All</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,

<decl><name>DependentInstantiation</name> <init>= <expr><name>Dependent</name> <operator>|</operator> <name>Instantiation</name></expr></init></decl>,

<decl><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>(<argument><expr><name>Error</name></expr></argument>)</argument_list></decl>
}</block>;</enum>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>TypeDependence</name> <init>= <expr><name>TypeDependenceScope</name><operator>::</operator><name>TypeDependence</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_COMMON_DEPENDENCE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct NAME##Scope { enum NAME : uint8_t { UnexpandedPack = 1, Instantiation = 2, Dependent = 4, Error = 8, None = 0, DependentInstantiation = Dependent | Instantiation, All = 15, LLVM_MARK_AS_BITMASK_ENUM(Error) }; }; using NAME = NAME##Scope::NAME;</cpp:value></cpp:define>
















<macro><name>LLVM_COMMON_DEPENDENCE</name><argument_list>(<argument>NestedNameSpecifierDependence</argument>)</argument_list></macro>
<macro><name>LLVM_COMMON_DEPENDENCE</name><argument_list>(<argument>TemplateNameDependence</argument>)</argument_list></macro>
<macro><name>LLVM_COMMON_DEPENDENCE</name><argument_list>(<argument>TemplateArgumentDependence</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LLVM_COMMON_DEPENDENCE</name></cpp:undef>



<decl_stmt><decl><type><name>class</name></type> <name>Dependence</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Bits</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>UnexpandedPack</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>Instantiation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>Type</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>Value</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,


<decl><name>Dependent</name> <init>= <expr><name>Type</name> <operator>|</operator> <name>Value</name></expr></init></decl>,

<decl><name>Error</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>VariablyModified</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,


<decl><name>Syntactic</name> <init>= <expr><name>UnexpandedPack</name> <operator>|</operator> <name>Instantiation</name> <operator>|</operator> <name>Error</name></expr></init></decl>,

<decl><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>(<argument><expr><name>VariablyModified</name></expr></argument>)</argument_list></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>Dependence</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>None</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Dependence</name><argument_list>(<argument>TypeDependence D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>V</name><argument_list>(<argument>translate(D, TypeDependence::UnexpandedPack, UnexpandedPack) |
translate(D, TypeDependence::Instantiation, Instantiation) |
translate(D, TypeDependence::Dependent, Dependent) |
translate(D, TypeDependence::Error, Error) |
translate(D, TypeDependence::VariablyModified, VariablyModified)</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Dependence</name><argument_list>(<argument>ExprDependence D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>V</name><argument_list>(<argument>translate(D, ExprDependence::UnexpandedPack, UnexpandedPack) |
translate(D, ExprDependence::Instantiation, Instantiation) |
translate(D, ExprDependence::Type, Type) |
translate(D, ExprDependence::Value, Value) |
translate(D, ExprDependence::Error, Error)</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Dependence</name><argument_list>(<argument>NestedNameSpecifierDependence D</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>V</name> <argument_list>( <argument>translate(D, NNSDependence::UnexpandedPack, UnexpandedPack) |
translate(D, NNSDependence::Instantiation, Instantiation) |
translate(D, NNSDependence::Dependent, Dependent) |
translate(D, NNSDependence::Error, Error)</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Dependence</name><argument_list>(<argument>TemplateArgumentDependence D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>V</name><argument_list>(<argument>translate(D, TADependence::UnexpandedPack, UnexpandedPack) |
translate(D, TADependence::Instantiation, Instantiation) |
translate(D, TADependence::Dependent, Dependent) |
translate(D, TADependence::Error, Error)</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Dependence</name><argument_list>(<argument>TemplateNameDependence D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>V</name><argument_list>(<argument>translate(D, TNDependence::UnexpandedPack, UnexpandedPack) |
translate(D, TNDependence::Instantiation, Instantiation) |
translate(D, TNDependence::Dependent, Dependent) |
translate(D, TNDependence::Error, Error)</argument>)</argument_list></macro> <block>{}</block>


<name>Dependence</name> <macro><name>syntactic</name><argument_list>()</argument_list></macro> <block>{
<expr><name>Dependence</name> <name>Result</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name><name>Result</name><operator>.</operator><name>V</name></name> <operator>&amp;=</operator> <name>Syntactic</name></expr>;
<return>return <expr><name>Result</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>TypeDependence</name> <macro><name>type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>UnexpandedPack</name></expr></argument>, <argument><expr><name>TypeDependence</name><operator>::</operator><name>UnexpandedPack</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Instantiation</name></expr></argument>, <argument><expr><name>TypeDependence</name><operator>::</operator><name>Instantiation</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Dependent</name></expr></argument>, <argument><expr><name>TypeDependence</name><operator>::</operator><name>Dependent</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>, <argument><expr><name>TypeDependence</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>VariablyModified</name></expr></argument>, <argument><expr><name>TypeDependence</name><operator>::</operator><name>VariablyModified</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ExprDependence</name> <macro><name>expr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>UnexpandedPack</name></expr></argument>, <argument><expr><name>ExprDependence</name><operator>::</operator><name>UnexpandedPack</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Instantiation</name></expr></argument>, <argument><expr><name>ExprDependence</name><operator>::</operator><name>Instantiation</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name>ExprDependence</name><operator>::</operator><name>Type</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>ExprDependence</name><operator>::</operator><name>Value</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>, <argument><expr><name>ExprDependence</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NestedNameSpecifierDependence</name> <macro><name>nestedNameSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>UnexpandedPack</name></expr></argument>, <argument><expr><name>NNSDependence</name><operator>::</operator><name>UnexpandedPack</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Instantiation</name></expr></argument>, <argument><expr><name>NNSDependence</name><operator>::</operator><name>Instantiation</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Dependent</name></expr></argument>, <argument><expr><name>NNSDependence</name><operator>::</operator><name>Dependent</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>, <argument><expr><name>NNSDependence</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>TemplateArgumentDependence</name> <macro><name>templateArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>UnexpandedPack</name></expr></argument>, <argument><expr><name>TADependence</name><operator>::</operator><name>UnexpandedPack</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Instantiation</name></expr></argument>, <argument><expr><name>TADependence</name><operator>::</operator><name>Instantiation</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Dependent</name></expr></argument>, <argument><expr><name>TADependence</name><operator>::</operator><name>Dependent</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>, <argument><expr><name>TADependence</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>TemplateNameDependence</name> <macro><name>templateName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>UnexpandedPack</name></expr></argument>, <argument><expr><name>TNDependence</name><operator>::</operator><name>UnexpandedPack</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Instantiation</name></expr></argument>, <argument><expr><name>TNDependence</name><operator>::</operator><name>Instantiation</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Dependent</name></expr></argument>, <argument><expr><name>TNDependence</name><operator>::</operator><name>Dependent</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>translate</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>, <argument><expr><name>TNDependence</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Bits</name></type> <name>V</name></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>U</name></type> <name>translate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>Bits</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>FromBit</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>ToBit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>Bits</name> <operator>&amp;</operator> <name>FromBit</name><operator>)</operator></expr> ?</condition><then> <expr><name>ToBit</name></expr> </then><else>: <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>using</name></type> <name>NNSDependence</name> <init>= <expr><name>NestedNameSpecifierDependence</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TADependence</name> <init>= <expr><name>TemplateArgumentDependence</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TNDependence</name> <init>= <expr><name>TemplateNameDependence</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function><type><specifier>inline</specifier> <name>ExprDependence</name></type> <name>toExprDependence</name><parameter_list>(<parameter><decl><type><name>TemplateArgumentDependence</name></type> <name>TA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>TA</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>expr</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>ExprDependence</name></type> <name>toExprDependence</name><parameter_list>(<parameter><decl><type><name>TypeDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>expr</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>ExprDependence</name></type> <name>toExprDependence</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>expr</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>ExprDependence</name></type> <name>turnTypeToValueDependence</name><parameter_list>(<parameter><decl><type><name>ExprDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><name>D</name> <operator>&amp;</operator> <operator>~</operator><name>ExprDependence</name><operator>::</operator><name>Type</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>ExprDependence</name></type> <name>turnValueToTypeDependence</name><parameter_list>(<parameter><decl><type><name>ExprDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>D</name> <operator>&amp;</operator> <name>ExprDependence</name><operator>::</operator><name>Value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>D</name> <operator>|=</operator> <name>ExprDependence</name><operator>::</operator><name>Type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>TypeDependence</name></type> <name>toTypeDependence</name><parameter_list>(<parameter><decl><type><name>ExprDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TypeDependence</name></type> <name>toTypeDependence</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TypeDependence</name></type> <name>toTypeDependence</name><parameter_list>(<parameter><decl><type><name>TemplateNameDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TypeDependence</name></type> <name>toTypeDependence</name><parameter_list>(<parameter><decl><type><name>TemplateArgumentDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>TypeDependence</name></type> <name>toSyntacticDependence</name><parameter_list>(<parameter><decl><type><name>TypeDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>syntactic</name><argument_list>()</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>NestedNameSpecifierDependence</name></type>
<name>toNestedNameSpecifierDependendence</name><parameter_list>(<parameter><decl><type><name>TypeDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>nestedNameSpecifier</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>TemplateArgumentDependence</name></type>
<name>toTemplateArgumentDependence</name><parameter_list>(<parameter><decl><type><name>TypeDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>templateArgument</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TemplateArgumentDependence</name></type>
<name>toTemplateArgumentDependence</name><parameter_list>(<parameter><decl><type><name>TemplateNameDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>templateArgument</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TemplateArgumentDependence</name></type>
<name>toTemplateArgumentDependence</name><parameter_list>(<parameter><decl><type><name>ExprDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>templateArgument</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>TemplateNameDependence</name></type>
<name>toTemplateNameDependence</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierDependence</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Dependence</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>templateName</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
