<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/SyncScope.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SYNCSCOPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SYNCSCOPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



















<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SyncScope</name> <block>{<block_content>
<expr_stmt><expr><name>OpenCLWorkGroup</name></expr><operator>,</operator>
<expr><name>OpenCLDevice</name></expr><operator>,</operator>
<expr><name>OpenCLAllSVMDevices</name></expr><operator>,</operator>
<expr><name>OpenCLSubGroup</name></expr><operator>,</operator>
<expr><name>Last</name> <operator>=</operator> <name>OpenCLSubGroup</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getAsString</name><argument_list>(<argument>SyncScope S</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>S</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SyncScope</name><operator>::</operator><name>OpenCLWorkGroup</name></expr>:</case>
<return>return <expr><literal type="string">"opencl_workgroup"</literal></expr>;</return>
<case>case <expr><name>SyncScope</name><operator>::</operator><name>OpenCLDevice</name></expr>:</case>
<return>return <expr><literal type="string">"opencl_device"</literal></expr>;</return>
<case>case <expr><name>SyncScope</name><operator>::</operator><name>OpenCLAllSVMDevices</name></expr>:</case>
<return>return <expr><literal type="string">"opencl_allsvmdevices"</literal></expr>;</return>
<case>case <expr><name>SyncScope</name><operator>::</operator><name>OpenCLSubGroup</name></expr>:</case>
<return>return <expr><literal type="string">"opencl_subgroup"</literal></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("Invalid synch scope"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>AtomicScopeModelKind</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>OpenCL</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AtomicScopeModel</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>AtomicScopeModel</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>SyncScope</name> <macro><name>map</name><argument_list>(<argument>unsigned S</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isValid</name><argument_list>(<argument><expr><name>unsigned</name> <name>S</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>virtual</name> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getRuntimeValues</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>unsigned</name> <macro><name>getFallBackValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomicScopeModel</name></expr></argument>&gt;</argument_list></name> <macro><name>create</name><argument_list>(<argument>AtomicScopeModelKind K</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AtomicScopeOpenCLModel</name> <range>: <expr><name>public</name> <name>AtomicScopeModel</name> <block>{
<expr><name>public</name><operator>:</operator>



enum <name>ID</name> <block>{
<expr><name>WorkGroup</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>Device</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><name>AllSVMDevices</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><name>SubGroup</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><name>Last</name> <operator>=</operator> <name>SubGroup</name></expr>
}</block></expr>;

<macro><name>AtomicScopeOpenCLModel</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>SyncScope</name> <macro><name>map</name><argument_list>(<argument>unsigned S</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ID</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WorkGroup</name></expr>:</case>
<return>return <expr><name>SyncScope</name><operator>::</operator><name>OpenCLWorkGroup</name></expr>;</return>
<case>case <expr><name>Device</name></expr>:</case>
<return>return <expr><name>SyncScope</name><operator>::</operator><name>OpenCLDevice</name></expr>;</return>
<case>case <expr><name>AllSVMDevices</name></expr>:</case>
<return>return <expr><name>SyncScope</name><operator>::</operator><name>OpenCLAllSVMDevices</name></expr>;</return>
<case>case <expr><name>SubGroup</name></expr>:</case>
<return>return <expr><name>SyncScope</name><operator>::</operator><name>OpenCLSubGroup</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("Invalid language synch scope value"</block></switch>)</block></expr>;
}</block>

<name>bool</name> <macro><name>isValid</name><argument_list>(<argument>unsigned S</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>S</name> <operator>&gt;=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>WorkGroup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>S</name> <operator>&lt;=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Last</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getRuntimeValues</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>Last</name> <operator>==</operator> <name>SubGroup</name></expr></argument>, <argument><expr><literal type="string">"Does not include all synch scopes"</literal></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name><name>Scopes</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>WorkGroup</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Device</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>AllSVMDevices</name></expr></argument>)</argument_list></call></expr>, <macro><name>static_cast</name></macro><expr><operator>&lt;</operator><name>unsigned</name><operator>&gt;</operator><operator>(</operator><name>SubGroup</name><operator>)</operator></expr>}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>Scopes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getFallBackValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>AllSVMDevices</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomicScopeModel</name></expr></argument>&gt;</argument_list></name>
<name>AtomicScopeModel</name><operator>::</operator><macro><name>create</name><argument_list>(<argument>AtomicScopeModelKind K</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>K</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AtomicScopeModelKind</name><operator>::</operator><name>None</name></expr>:</case>
<return>return <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomicScopeModel</name></expr></argument>&gt;</argument_list></name><block>{}</block></expr>;</return>
<case>case <expr><name>AtomicScopeModelKind</name><operator>::</operator><name>OpenCL</name></expr>:</case>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>AtomicScopeOpenCLModel</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Invalid atomic scope model kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
