<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_FLOWSENSITIVE_DATAFLOWWORKLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_FLOWSENSITIVE_DATAFLOWWORKLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/Analyses/PostOrderCFGView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PriorityQueue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Comp</name></expr></argument>, <argument><expr><name>unsigned</name> <name>QueueSize</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>DataflowWorklistBase</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitVector</name> <name>EnqueuedBlocks</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PostOrderCFGView</name> <modifier>*</modifier></type><name>POV</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>,
<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><name>QueueSize</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>Comp</name></expr></argument>&gt;</argument_list></name>
<name>WorkList</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>DataflowWorklistBase</name><argument_list>(<argument>const CFG &amp;Cfg</argument>, <argument>PostOrderCFGView *POV</argument>, <argument>Comp C</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>EnqueuedBlocks</name><argument_list>(<argument><expr><call><name><name>Cfg</name><operator>.</operator><name>getNumBlockIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>POV</name><argument_list>(<argument><expr><name>POV</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>WorkList</name><argument_list>(<argument>C</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>PostOrderCFGView</name> <operator>*</operator><macro><name>getCFGView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>POV</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>enqueueBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Block</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>EnqueuedBlocks</name><index>[<expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>EnqueuedBlocks</name><index>[<expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>WorkList</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>dequeue</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>WorkList</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>WorkList</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>WorkList</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>EnqueuedBlocks</name><index>[<expr><call><name><name>B</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>B</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ReversePostOrderCompare</name> <block>{
<expr_stmt><expr><name>PostOrderCFGView</name><operator>::</operator><name>BlockOrderCompare</name> <name>Cmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Cmp</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name><name>struct</name> <name>ForwardDataflowWorklist</name></name></type>
<range>: <expr><name><name>DataflowWorklistBase</name><argument_list type="generic">&lt;<argument><expr><name>ReversePostOrderCompare</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>ForwardDataflowWorklist</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFG</name> <operator>&amp;</operator><name>Cfg</name></expr></argument>, <argument><expr><name>AnalysisDeclContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DataflowWorklistBase</name><argument_list>(
<argument>Cfg</argument>, <argument>Ctx.getAnalysis&lt;PostOrderCFGView&gt;()</argument>,
<argument>ReversePostOrderCompare{
Ctx.getAnalysis&lt;PostOrderCFGView&gt;()-&gt;getComparator()}</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>enqueueSuccessors</name><argument_list>(<argument>const CFGBlock *Block</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>auto</name></type> <name>B</name> <range>: <expr><call><name><name>Block</name><operator>-&gt;</operator><name>succs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enqueueBlock</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>
}</expr>;




struct <expr><name>BackwardDataflowWorklist</name>
<operator>:</operator> <name><name>DataflowWorklistBase</name><argument_list type="generic">&lt;<argument><expr><name>PostOrderCFGView</name><operator>::</operator><name>BlockOrderCompare</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>BackwardDataflowWorklist</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFG</name> <operator>&amp;</operator><name>Cfg</name></expr></argument>, <argument><expr><name>AnalysisDeclContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DataflowWorklistBase</name><argument_list>(
<argument>Cfg</argument>, <argument>Ctx.getAnalysis&lt;PostOrderCFGView&gt;()</argument>,
<argument>Ctx.getAnalysis&lt;PostOrderCFGView&gt;()-&gt;getComparator()</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>enqueuePredecessors</name><argument_list>(<argument>const CFGBlock *Block</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>auto</name></type> <name>B</name> <range>: <expr><call><name><name>Block</name><operator>-&gt;</operator><name>preds</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enqueueBlock</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>
}</expr>;

}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
