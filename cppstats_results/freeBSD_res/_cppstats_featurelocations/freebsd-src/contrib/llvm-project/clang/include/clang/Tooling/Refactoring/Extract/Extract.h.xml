<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_EXTRACT_EXTRACT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_EXTRACT_EXTRACT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/ASTSelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRules.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name> <name>ExtractFunction</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SourceChangeRefactoringRule</name> <block>{
<expr><name>public</name><operator>:</operator>





<specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>ExtractFunction</name></expr></argument>&gt;</argument_list></name> <macro><name>initiate</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>,
<argument>CodeRangeASTSelection Code</argument>,
<argument>Optional&lt;std::string&gt; DeclName</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>RefactoringDescriptor</name> <operator>&amp;</operator><call><name>describe</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<macro><name>ExtractFunction</name><argument_list>(<argument>CodeRangeASTSelection Code</argument>, <argument>Optional&lt;std::string&gt; DeclName</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Code</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>DeclName</name><argument_list>(<argument>DeclName ? std::move(*DeclName) : <literal type="string">"extracted"</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>AtomicChanges</name></expr></argument>&gt;</argument_list></name>
<macro><name>createSourceReplacements</name><argument_list>(<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>CodeRangeASTSelection</name> <name>Code</name></expr>;




<expr><name>std</name><operator>::</operator><name>string</name> <name>DeclName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
