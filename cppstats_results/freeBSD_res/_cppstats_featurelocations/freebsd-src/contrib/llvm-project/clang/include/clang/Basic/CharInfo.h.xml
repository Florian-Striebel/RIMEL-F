<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/CharInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_CHARINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_CHARINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DataTypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>charinfo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>InfoTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>CHAR_HORZ_WS</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
<decl><name>CHAR_VERT_WS</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
<decl><name>CHAR_SPACE</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
<decl><name>CHAR_DIGIT</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
<decl><name>CHAR_XLETTER</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
<decl><name>CHAR_UPPER</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,
<decl><name>CHAR_LOWER</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>,
<decl><name>CHAR_UNDER</name> <init>= <expr><literal type="number">0x0080</literal></expr></init></decl>,
<decl><name>CHAR_PERIOD</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>CHAR_RAWDEL</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,
<decl><name>CHAR_PUNCT</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <block>{
<decl><name>CHAR_XUPPER</name> <init>= <expr><name>CHAR_XLETTER</name> <operator>|</operator> <name>CHAR_UPPER</name></expr></init></decl>,
<decl><name>CHAR_XLOWER</name> <init>= <expr><name>CHAR_XLETTER</name> <operator>|</operator> <name>CHAR_LOWER</name></expr></init></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<function><type><name>LLVM_READNONE</name> <specifier>inline</specifier> <name>bool</name></type> <name>isASCII</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">127</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isIdentifierHead</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AllowDollar</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>|</operator><name>CHAR_UNDER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AllowDollar</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isIdentifierBody</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AllowDollar</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>|</operator><name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_UNDER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AllowDollar</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isHorizontalWhitespace</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_HORZ_WS</name><operator>|</operator><name>CHAR_SPACE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isVerticalWhitespace</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CHAR_VERT_WS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isWhitespace</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_HORZ_WS</name><operator>|</operator><name>CHAR_VERT_WS</name><operator>|</operator><name>CHAR_SPACE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isDigit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CHAR_DIGIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isLowercase</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CHAR_LOWER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isUppercase</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CHAR_UPPER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isLetter</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isAlphanumeric</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isHexDigit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_XLETTER</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isPunctuation</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UNDER</name><operator>|</operator><name>CHAR_PERIOD</name><operator>|</operator><name>CHAR_RAWDEL</name><operator>|</operator><name>CHAR_PUNCT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isPrintable</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>|</operator><name>CHAR_PERIOD</name><operator>|</operator><name>CHAR_PUNCT</name><operator>|</operator>
<name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_UNDER</name><operator>|</operator><name>CHAR_RAWDEL</name><operator>|</operator><name>CHAR_SPACE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isPreprocessingNumberBody</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator>
<operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>|</operator><name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_UNDER</name><operator>|</operator><name>CHAR_PERIOD</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isRawStringDelimBody</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>charinfo</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>InfoTable</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CHAR_UPPER</name><operator>|</operator><name>CHAR_LOWER</name><operator>|</operator><name>CHAR_PERIOD</name><operator>|</operator>
<name>CHAR_DIGIT</name><operator>|</operator><name>CHAR_UNDER</name><operator>|</operator><name>CHAR_RAWDEL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>char</name></type> <name>toLowercase</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isUppercase</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>char</name></type> <name>toUppercase</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isLowercase</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>LLVM_READONLY</name> <specifier>inline</specifier> <name>bool</name></type> <name>isValidIdentifier</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>S</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AllowDollar</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isIdentifierHead</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AllowDollar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>StringRef</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>E</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIdentifierBody</name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>, <argument><expr><name>AllowDollar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
