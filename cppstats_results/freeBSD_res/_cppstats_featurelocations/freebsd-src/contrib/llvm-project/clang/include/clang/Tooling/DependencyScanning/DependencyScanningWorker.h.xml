<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_WORKER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_WORKER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/PCHContainerOperations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PreprocessorExcludedConditionalDirectiveSkipMapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/CompilationDatabase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/DependencyScanningService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/DependencyScanning/ModuleDepCollector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DependencyOutputOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dependencies</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningWorkerFilesystem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DependencyConsumer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>DependencyConsumer</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name>
<call><name>handleDependencyOutputOpts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DependencyOutputOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>handleFileDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>handlePrebuiltModuleDependency</name><parameter_list>(<parameter><decl><type><name>PrebuiltModuleDep</name></type> <name>PMD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>handleModuleDependency</name><parameter_list>(<parameter><decl><type><name>ModuleDeps</name></type> <name>MD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>handleContextHash</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>Hash</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningWorker</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DependencyScanningWorker</name><argument_list>(<argument><expr><name>DependencyScanningService</name> <operator>&amp;</operator><name>Service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>computeDependencies</name><argument_list>(<argument>const std::string &amp;Input</argument>,
<argument>StringRef WorkingDirectory</argument>,
<argument>const CompilationDatabase &amp;CDB</argument>,
<argument>DependencyConsumer &amp;Consumer</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name></type> <name>DiagOpts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ExcludedPreprocessorDirectiveSkipMapping</name></expr></argument>&gt;</argument_list></name> <name>PPSkipMappings</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>RealFS</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DependencyScanningWorkerFilesystem</name></expr></argument>&gt;</argument_list></name> <name>DepFS</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ScanningOutputFormat</name></type> <name>Format</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
