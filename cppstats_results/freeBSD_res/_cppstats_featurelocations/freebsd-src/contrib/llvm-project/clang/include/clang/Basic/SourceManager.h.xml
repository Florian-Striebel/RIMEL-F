<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/SourceManager.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SOURCEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SOURCEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LineTableInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>namespace</name></type> <name>SrcMgr</name> <block>{<block_content>








<enum>enum <name>CharacteristicKind</name> <block>{
<decl><name>C_User</name></decl>,
<decl><name>C_System</name></decl>,
<decl><name>C_ExternCSystem</name></decl>,
<decl><name>C_User_ModuleMap</name></decl>,
<decl><name>C_System_ModuleMap</name></decl>
}</block>;</enum>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isSystem</name><parameter_list>(<parameter><decl><type><name>CharacteristicKind</name></type> <name>CK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>CK</name> <operator>!=</operator> <name>C_User</name> <operator>&amp;&amp;</operator> <name>CK</name> <operator>!=</operator> <name>C_User_ModuleMap</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isModuleMap</name><parameter_list>(<parameter><decl><type><name>CharacteristicKind</name></type> <name>CK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>CK</name> <operator>==</operator> <name>C_User_ModuleMap</name> <operator>||</operator> <name>CK</name> <operator>==</operator> <name>C_System_ModuleMap</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>class</name></type> <name>LineOffsetMapping</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Storage</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getLines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Storage</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Storage</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <operator>*</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLines</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <operator>*</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLines</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>int</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>getLines</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LineOffsetMapping</name></type> <name>get</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <name>Buffer</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Alloc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LineOffsetMapping</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>LineOffsetMapping</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>LineOffsets</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Storage</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>alignas</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list> <name>ContentCache</name> <block>{<block_content>


<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>

<label><name>public</name>:</label>








<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>OrigEntry</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>ContentsEntry</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>StringRef</name></type> <name>Filename</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>mutable</name> <name>LineOffsetMapping</name></type> <name>SourceLineCache</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>BufferOverridden</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFileVolatile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>IsTransient</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>IsBufferInvalid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ContentCache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>Ent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ContentCache</name><argument_list>(<argument>Ent</argument>, <argument>Ent</argument>)</argument_list></macro> <block>{}</block>

<call><name>ContentCache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>Ent</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>contentEnt</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>OrigEntry</name><argument_list>(<argument><expr><name>Ent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ContentsEntry</name><argument_list>(<argument><expr><name>contentEnt</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BufferOverridden</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsFileVolatile</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTransient</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsBufferInvalid</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>




<call><name>ContentCache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ContentCache</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>BufferOverridden</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsFileVolatile</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTransient</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsBufferInvalid</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><name>OrigEntry</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>OrigEntry</name></name></expr>;
<expr><name>ContentsEntry</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>ContentsEntry</name></name></expr>;

<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>RHS</name><operator>.</operator><name>Buffer</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>RHS</name><operator>.</operator><name>SourceLineCache</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"Passed ContentCache object cannot own a buffer."</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>ContentCache</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ContentCache</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getBufferOrNone</name><argument_list>(<argument>DiagnosticsEngine &amp;Diag</argument>, <argument>FileManager &amp;FM</argument>,
<argument>SourceLocation Loc = SourceLocation()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>unsigned</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>unsigned</name> <macro><name>getSizeBytesMapped</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name><operator>::</operator><name>BufferKind</name> <macro><name>getMemoryBufferKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getBufferIfLoaded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Buffer</name><operator>-&gt;</operator><name>getMemBufferRef</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getBufferDataIfLoaded</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Buffer</name><operator>-&gt;</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>B</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>IsBufferInvalid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Buffer</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>setUnownedBuffer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <name>B</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Buffer</name> <operator>&amp;&amp;</operator> <literal type="string">"Expected to be called right after construction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setBuffer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name><operator>::</operator><call><name>getMemBuffer</name><argument_list>(<argument><expr><operator>*</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getInvalidBOM</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>BufStr</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>ContentCache</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="string">"ContentCache must be 8-byte aligned."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<decl_stmt><decl><type><name>class</name></type> <name>FileInfo</name> <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>SourceManager</name></expr>;</expr_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>ASTWriter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>ASTReader</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>SourceLocation</name></type> <name>IncludeLoc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>NumCreatedFIDs</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HasLineDirectives</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ContentCache</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CharacteristicKind</name></expr></argument>&gt;</argument_list></name>
<name>ContentAndKind</name></expr>;</expr_stmt>

<label><name>public</name>:</label>

<function><type><specifier>static</specifier> <name>FileInfo</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>IL</name></decl></parameter>, <parameter><decl><type><name>ContentCache</name> <modifier>&amp;</modifier></type><name>Con</name></decl></parameter>,
<parameter><decl><type><name>CharacteristicKind</name></type> <name>FileCharacter</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FileInfo</name></type> <name>X</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>IncludeLoc</name></name> <operator>=</operator> <name>IL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>NumCreatedFIDs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>HasLineDirectives</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>X</name><operator>.</operator><name>ContentAndKind</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>X</name><operator>.</operator><name>ContentAndKind</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>FileCharacter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Con</name><operator>.</operator><name>Filename</name></name> <operator>=</operator> <name>Filename</name></expr>;</expr_stmt>
<return>return <expr><name>X</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getIncludeLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IncludeLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ContentCache</name> <operator>&amp;</operator><macro><name>getContentCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>ContentAndKind</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>CharacteristicKind</name> <macro><name>getFileCharacteristic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ContentAndKind</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasLineDirectives</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasLineDirectives</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setHasLineDirectives</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>HasLineDirectives</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getContentCache</name><argument_list>()</argument_list></call><operator>.</operator><name>Filename</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>ExpansionInfo</name> <block>{<block_content>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>SpellingLoc</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>SourceLocation</name></type> <name>ExpansionLocStart</name></decl>, <decl><type ref="prev"/><name>ExpansionLocEnd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ExpansionIsTokenRange</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getSpellingLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>SpellingLoc</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getExpansionLocStart</name><argument_list>()</argument_list></call> <operator>:</operator> <name>SpellingLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getExpansionLocStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExpansionLocStart</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getExpansionLocEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ExpansionLocEnd</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getExpansionLocStart</name><argument_list>()</argument_list></call>
<operator>:</operator> <name>ExpansionLocEnd</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isExpansionTokenRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ExpansionIsTokenRange</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>CharSourceRange</name> <macro><name>getExpansionLocRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharSourceRange</name><argument_list>(
<argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><call><name>getExpansionLocStart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getExpansionLocEnd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>isExpansionTokenRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMacroArgExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name>getExpansionLocStart</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ExpansionLocEnd</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMacroBodyExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getExpansionLocStart</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ExpansionLocEnd</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isFunctionMacroExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getExpansionLocStart</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>getExpansionLocStart</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>getExpansionLocEnd</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<function><type><specifier>static</specifier> <name>ExpansionInfo</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SpellingLoc</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>End</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ExpansionIsTokenRange</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ExpansionInfo</name></type> <name>X</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>SpellingLoc</name></name> <operator>=</operator> <name>SpellingLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>ExpansionLocStart</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>ExpansionLocEnd</name></name> <operator>=</operator> <name>End</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>ExpansionIsTokenRange</name></name> <operator>=</operator> <name>ExpansionIsTokenRange</name></expr>;</expr_stmt>
<return>return <expr><name>X</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>ExpansionInfo</name></type> <name>createForMacroArg</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SpellingLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ExpansionLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>



<return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>SpellingLoc</name></expr></argument>, <argument><expr><name>ExpansionLoc</name></expr></argument>, <argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ExpansionInfo</name></type> <name>createForTokenSplit</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SpellingLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>SpellingLoc</name></expr></argument>, <argument><expr><name>Start</name></expr></argument>, <argument><expr><name>End</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileInfo</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ExpansionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"FileInfo must be no larger than ExpansionInfo."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>SLocEntry</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>OffsetBits</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Offset</name> <operator>:</operator> <name>OffsetBits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>IsExpansion</name> <operator>:</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>FileInfo</name></type> <name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExpansionInfo</name></type> <name>Expansion</name></decl>;</decl_stmt>
}</block>;</union>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SLocEntry</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Offset</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExpansion</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>File</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsExpansion</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isExpansion</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FileInfo</name> <operator>&amp;</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFile</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Not a file SLocEntry!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>File</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ExpansionInfo</name> <operator>&amp;</operator><macro><name>getExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isExpansion</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Not a macro expansion SLocEntry!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Expansion</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SLocEntry</name></type> <name>get</name><argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Offset</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileInfo</name> <operator>&amp;</operator><name>FI</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>Offset</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>OffsetBits</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Offset is too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SLocEntry</name></type> <name>E</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name>Offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>IsExpansion</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>File</name></name> <operator>=</operator> <name>FI</name></expr>;</expr_stmt>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SLocEntry</name></type> <name>get</name><argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Offset</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExpansionInfo</name> <operator>&amp;</operator><name>Expansion</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>Offset</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>OffsetBits</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Offset is too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SLocEntry</name></type> <name>E</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name>Offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>.</operator><name>IsExpansion</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;E.Expansion</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ExpansionInfo</name><argument_list>(<argument><expr><name>Expansion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}


class <macro><name>ExternalSLocEntrySource</name></macro> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ExternalSLocEntrySource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ReadSLocEntry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ID</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getModuleImportLoc</name><argument_list>(<argument>int ID</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>InBeforeInTUCacheEntry</name> <block>{<block_content>



<decl_stmt><decl><type><name>FileID</name></type> <name>LQueryFID</name></decl>, <decl><type ref="prev"/><name>RQueryFID</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsLQFIDBeforeRQFID</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>FileID</name></type> <name>CommonFID</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>LCommonOffset</name></decl>, <decl><type ref="prev"/><name>RCommonOffset</name></decl>;</decl_stmt>

<label><name>public</name>:</label>




<decl_stmt><decl><type><name>bool</name></type> <name>isCacheValid</name><argument_list>(<argument><expr><name>FileID</name> <name>LHS</name></expr></argument>, <argument><expr><name>FileID</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>LQueryFID</name> <operator>==</operator> <name>LHS</name> <operator>&amp;&amp;</operator> <name>RQueryFID</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>getCachedResult</name><argument_list>(<argument><expr><name>unsigned</name> <name>LOffset</name></expr></argument>, <argument><expr><name>unsigned</name> <name>ROffset</name></expr></argument>)</argument_list> const <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>LQueryFID</name> <operator>!=</operator> <name>CommonFID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>LOffset</name> <operator>=</operator> <name>LCommonOffset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>RQueryFID</name> <operator>!=</operator> <name>CommonFID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ROffset</name> <operator>=</operator> <name>RCommonOffset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>LOffset</name> <operator>==</operator> <name>ROffset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsLQFIDBeforeRQFID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LOffset</name> <operator>&lt;</operator> <name>ROffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>setQueryFIDs</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>LHS</name></decl></parameter>, <parameter><decl><type><name>FileID</name></type> <name>RHS</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isLFIDBeforeRFID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>LHS</name> <operator>!=</operator> <name>RHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LQueryFID</name> <operator>=</operator> <name>LHS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RQueryFID</name> <operator>=</operator> <name>RHS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IsLQFIDBeforeRQFID</name> <operator>=</operator> <name>isLFIDBeforeRFID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>LQueryFID</name> <operator>=</operator> <name>RQueryFID</name> <operator>=</operator> <call><name>FileID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsLQFIDBeforeRQFID</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setCommonLoc</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>commonFID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>lCommonOffset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>rCommonOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CommonFID</name> <operator>=</operator> <name>commonFID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LCommonOffset</name> <operator>=</operator> <name>lCommonOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RCommonOffset</name> <operator>=</operator> <name>rCommonOffset</name></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>using</name></type> <name>ModuleBuildStack</name> <init>= <expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>FullSourceLoc</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>SourceManager</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diag</name></expr>;

<expr><name>FileManager</name> <operator>&amp;</operator><name>FileMgr</name></expr>;

<expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>ContentCacheAlloc</name></expr>;







<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name><operator>*</operator></expr></argument>, <argument><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>FileInfos</name></expr>;



<expr><name>bool</name> <name>OverridenFilesKeepOriginalName</name> <operator>=</operator> <name>true</name></expr>;



<expr><name>bool</name> <name>UserFilesAreVolatile</name></expr>;




<expr><name>bool</name> <name>FilesAreTransient</name> <operator>=</operator> <name>false</name></expr>;

struct <expr><name>OverriddenFilesInfoTy</name> <block>{


<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>OverriddenFiles</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>OverriddenFilesWithBuffer</name></expr>;
}</block></expr>;



<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OverriddenFilesInfoTy</name></expr></argument>&gt;</argument_list></name> <name>OverriddenFilesInfo</name></expr>;

<expr><name>OverriddenFilesInfoTy</name> <operator>&amp;</operator><macro><name>getOverriddenFilesInfo</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>OverriddenFilesInfo</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>OverriddenFilesInfo</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name><argument_list>(<argument>new OverriddenFilesInfoTy</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name>OverriddenFilesInfo</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>MemBufferInfos</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>LocalSLocEntryTable</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>LoadedSLocEntryTable</name></decl>;</decl_stmt>




<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>NextLocalOffset</name></expr>;</expr_stmt>





<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>CurrentLoadedOffset</name></expr>;</expr_stmt>



<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>MaxLoadedOffset</name> <operator>=</operator>
<literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitVector</name> <name>SLocEntryLoaded</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ExternalSLocEntrySource</name> <modifier>*</modifier></type><name>ExternalSLocEntries</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>mutable</name> <name>FileID</name></type> <name>LastFileIDLookup</name></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LineTableInfo</name></expr></argument>&gt;</argument_list></name> <name>LineTable</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>mutable</name> <name>FileID</name></type> <name>LastLineNoFileIDQuery</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>ContentCache</name> <operator>*</operator><name>LastLineNoContentCache</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>LastLineNoFilePos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>LastLineNoResult</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileID</name></type> <name>MainFileID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileID</name></type> <name>PreambleFileID</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>NumLinearScans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>NumBinaryProbes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>IncludedLocMap</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>IsBeforeInTUCacheKey</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>FileID</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>InBeforeInTUCache</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>IsBeforeInTUCacheKey</name></expr></argument>, <argument><expr><name>InBeforeInTUCacheEntry</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>InBeforeInTUCache</name></type> <name>IBTUCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>InBeforeInTUCacheEntry</name></type> <name>IBTUCacheOverflow</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>InBeforeInTUCacheEntry</name> <modifier>&amp;</modifier></type><name>getInBeforeInTUCache</name><argument_list>(<argument><expr><name>FileID</name> <name>LFID</name></expr></argument>, <argument><expr><name>FileID</name> <name>RFID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>FakeBufferForRecovery</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name></expr></argument>&gt;</argument_list></name> <name>FakeContentCacheForRecovery</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name></expr></argument>&gt;</argument_list></name> <name>FakeSLocEntryForRecovery</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>MacroArgsMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MacroArgsMap</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>MacroArgsCacheMap</name></expr>;</expr_stmt>








<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>FullSourceLoc</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>StoredModuleBuildStack</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>SourceManager</name><argument_list>(<argument>DiagnosticsEngine &amp;Diag</argument>, <argument>FileManager &amp;FileMgr</argument>,
<argument>bool UserFilesAreVolatile = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>explicit</name></type> <name>SourceManager</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SourceManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>clearIDTables</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>initializeForReplay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>Old</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><macro><name>getDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Diag</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>FileManager</name> <operator>&amp;</operator><macro><name>getFileManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FileMgr</name></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>void</name></type> <name>setOverridenFilesKeepOriginalName</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>OverridenFilesKeepOriginalName</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>userFilesAreVolatile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UserFilesAreVolatile</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ModuleBuildStack</name> <macro><name>getModuleBuildStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>StoredModuleBuildStack</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setModuleBuildStack</name><parameter_list>(<parameter><decl><type><name>ModuleBuildStack</name></type> <name>stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>StoredModuleBuildStack</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>StoredModuleBuildStack</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stack</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>pushModuleBuildStack</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>moduleName</name></decl></parameter>, <parameter><decl><type><name>FullSourceLoc</name></type> <name>importLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>StoredModuleBuildStack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>moduleName</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>importLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<expr_stmt><expr><name>FileID</name> <macro><name>getMainFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MainFileID</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setMainFileID</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MainFileID</name> <operator>=</operator> <name>FID</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function_decl><type><name>bool</name></type> <name>isMainFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>&amp;</modifier></type><name>SourceFile</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>setPreambleFileID</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>Preamble</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>PreambleFileID</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"PreambleFileID already set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PreambleFileID</name> <operator>=</operator> <name>Preamble</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>FileID</name> <macro><name>getPreambleFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PreambleFileID</name></expr>;</return> }</block></expr></expr_stmt>









<decl_stmt><decl><type><name>FileID</name></type> <name>createFileID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>SourceFile</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>IncludePos</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileCharacter</name></expr></argument>,
<argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileID</name></type> <name>createFileID</name><argument_list>(<argument><expr><name>FileEntryRef</name> <name>SourceFile</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>IncludePos</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileCharacter</name></expr></argument>,
<argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>FileID</name></type> <name>createFileID</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileCharacter</name> <operator>=</operator> <name>SrcMgr</name><operator>::</operator><name>C_User</name></expr></argument>,
<argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>IncludeLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>FileID</name></type> <name>createFileID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <operator>&amp;</operator><name>Buffer</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileCharacter</name> <operator>=</operator> <name>SrcMgr</name><operator>::</operator><name>C_User</name></expr></argument>,
<argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>IncludeLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>FileID</name></type> <name>getOrCreateFileID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>SourceFile</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileCharacter</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><name>SourceLocation</name></type> <name>createMacroArgExpansionLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ExpansionLoc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>TokLength</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>SourceLocation</name></type>
<name>createExpansionLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>ExpansionLocStart</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ExpansionLocEnd</name></expr></argument>, <argument><expr><name>unsigned</name> <name>TokLength</name></expr></argument>,
<argument><expr><name>bool</name> <name>ExpansionIsTokenRange</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>SourceLocation</name></type> <name>createTokenSplitLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SpellingLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>TokenStart</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>TokenEnd</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name>
<call><name>getMemoryBufferForFileOrNone</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <macro><name>getMemoryBufferForFileOrFake</name><argument_list>(<argument>const FileEntry *File</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>B</name> <init>= <expr><call><name>getMemoryBufferForFileOrNone</name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>B</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getFakeBufferForRecovery</name><argument_list>()</argument_list></call></expr>;</return>
}








void <macro><name>overrideFileContents</name><argument_list>(<argument>const FileEntry *SourceFile</argument>,
<argument>const llvm::MemoryBufferRef &amp;Buffer</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>overrideFileContents</name><argument_list>(<argument><expr><name>SourceFile</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name><operator>::</operator><call><name>getMemBuffer</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>








<decl_stmt><decl><type><name>void</name></type> <name>overrideFileContents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>SourceFile</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>overrideFileContents</name><argument_list>(<argument><expr><name>FileEntryRef</name> <name>SourceFile</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>overrideFileContents</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>SourceFile</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>







<function_decl><type><name>void</name></type> <name>overrideFileContents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>SourceFile</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>NewFile</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>isFileOverridden</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>OverriddenFilesInfo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>OverriddenFilesInfo</name><operator>-&gt;</operator><name>OverriddenFilesWithBuffer</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>OverriddenFilesInfo</name><operator>-&gt;</operator><name>OverriddenFiles</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name><name>OverriddenFilesInfo</name><operator>-&gt;</operator><name>OverriddenFiles</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>bypassFileContentsOverride</name><parameter_list>(<parameter><decl><type><name>FileEntryRef</name></type> <name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>setFileIsTransient</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>SourceFile</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>setAllFilesAreTransient</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Transient</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FilesAreTransient</name> <operator>=</operator> <name>Transient</name></expr>;</expr_stmt>
</block_content>}</block></function>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getBufferOrNone</name><argument_list>(<argument>FileID FID</argument>, <argument>SourceLocation Loc = SourceLocation()</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentCache</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBufferOrNone</name><argument_list>(
<argument><expr><name>Diag</name></expr></argument>, <argument><expr><call><name>getFileManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
}





llvm<expr_stmt><expr><operator>::</operator><name>MemoryBufferRef</name>
<macro><name>getBufferOrFake</name><argument_list>(<argument>FileID FID</argument>, <argument>SourceLocation Loc = SourceLocation()</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>B</name> <init>= <expr><call><name>getBufferOrNone</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>B</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getFakeBufferForRecovery</name><argument_list>()</argument_list></call></expr>;</return>
}


const <decl_stmt><decl><type><name>FileEntry</name> <modifier>*</modifier></type><name>getFileEntryForID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentCache</name><argument_list>()</argument_list></call><operator>.</operator><name>OrigEntry</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>getFileEntryRefForID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getFileEntryForID</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getLastRef</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></type> <name>getNonBuiltinFilenameForID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>getFileEntryForSLocEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><name>sloc</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><call><name><name>sloc</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentCache</name><argument_list>()</argument_list></call><operator>.</operator><name>OrigEntry</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>StringRef</name></type> <name>getBufferData</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getBufferDataOrNone</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getBufferDataIfLoaded</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getNumCreatedFIDsForFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><name>NumCreatedFIDs</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>setNumCreatedFIDsForFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>unsigned</name> <name>NumFIDs</name></expr></argument>,
<argument><expr><name>bool</name> <name>Force</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Force</name> <operator>||</operator> <call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><name>NumCreatedFIDs</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Already set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>SrcMgr</name><operator>::</operator><name>FileInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>NumCreatedFIDs</name> <operator>=</operator> <name>NumFIDs</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>











<decl_stmt><decl><type><name>FileID</name></type> <name>getFileID</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>SpellingLoc</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocOffset</name> <operator>=</operator> <call><name><name>SpellingLoc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isOffsetInFileID</name><argument_list>(<argument><expr><name>LastFileIDLookup</name></expr></argument>, <argument><expr><name>SLocOffset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LastFileIDLookup</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getFileIDSlow</name><argument_list>(<argument><expr><name>SLocOffset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>getFilename</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>SpellingLoc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getLocForStartOfFile</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFileLoc</name><argument_list>(<argument><expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getLocForEndOfFile</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFileLoc</name><argument_list>(<argument><expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>+</operator>
<call><name>getFileIDSize</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getIncludeLoc</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryForFile</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIncludeLoc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getModuleImportLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>FileID</name> <name>FID</name> <operator>=</operator> <call><name>getFileID</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;



<if_stmt><if>if <condition>(<expr><name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name><name>ExternalSLocEntries</name><operator>-&gt;</operator><name>getModuleImportLoc</name></name><argument_list>(<argument><expr><name><name>FID</name><operator>.</operator><name>ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
}



SourceLocation <macro><name>getExpansionLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Loc</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getExpansionLocSlowCase</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
}




SourceLocation <macro><name>getFileLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Loc</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getFileLocSlowCase</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
}





CharSourceRange <macro><name>getImmediateExpansionRange</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <decl_stmt><decl><type><specifier>const</specifier></type></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>getExpansionRange</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>getExpansionRange</name><argument_list>(<argument><expr><name>SourceRange</name> <name>Range</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Begin</name> <init>= <expr><call><name>getExpansionRange</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>End</name> <init>= <expr><call><name>getExpansionRange</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>CharSourceRange</name><argument_list>(<argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><call><name><name>End</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>End</name><operator>.</operator><name>isTokenRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>getExpansionRange</name><argument_list>(<argument><expr><name>CharSourceRange</name> <name>Range</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>Expansion</name> <init>= <expr><call><name>getExpansionRange</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>getAsRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Expansion</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>Range</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Expansion</name><operator>.</operator><name>setTokenRange</name></name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>isTokenRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Expansion</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getSpellingLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Loc</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getSpellingLocSlowCase</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getImmediateSpellingLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getComposedLoc</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryOrNull</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>GlobalOffset</name> <operator>=</operator> <call><name><name>Entry</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Offset</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name><name>Entry</name><operator>-&gt;</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>SourceLocation</name><operator>::</operator><call><name>getFileLoc</name><argument_list>(<argument><expr><name>GlobalOffset</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>SourceLocation</name><operator>::</operator><call><name>getMacroLoc</name><argument_list>(<argument><expr><name>GlobalOffset</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDecomposedLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>FileID</name> <name>FID</name> <operator>=</operator> <call><name>getFileID</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryOrNull</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name>FileID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>Entry</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}





std<expr_stmt><expr><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDecomposedExpansionLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>FileID</name> <name>FID</name> <operator>=</operator> <call><name>getFileID</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <operator>*</operator><name>E</name> <operator>=</operator> <call><name>getSLocEntryOrNull</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name>FileID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<name>unsigned</name> <name>Offset</name> <operator>=</operator> <call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call><operator>-</operator><call><name><name>E</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getDecomposedExpansionLocSlowCase</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
}





std<expr_stmt><expr><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDecomposedSpellingLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>FileID</name> <name>FID</name> <operator>=</operator> <call><name>getFileID</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <operator>*</operator><name>E</name> <operator>=</operator> <call><name>getSLocEntryOrNull</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name>FileID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<name>unsigned</name> <name>Offset</name> <operator>=</operator> <call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call><operator>-</operator><call><name><name>E</name><operator>-&gt;</operator><name>getOffset</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getDecomposedSpellingLocSlowCase</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}



std<expr_stmt><expr><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDecomposedIncludedLoc</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>getFileOffset</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>SpellingLoc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getDecomposedLoc</name><argument_list>(<argument><expr><name>SpellingLoc</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>isMacroArgExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <operator>*</operator><name>StartLoc</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>isMacroBodyExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>isAtStartOfImmediateMacroExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <operator>*</operator><name>MacroBegin</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type>
<name>isAtEndOfImmediateMacroExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <operator>*</operator><name>MacroEnd</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type>
<name>isInSLocAddrSpace</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Start</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Length</name></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <operator>*</operator><name>RelativeOffset</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name><name>Start</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>NextLocalOffset</name> <operator>&amp;&amp;</operator>
<call><name><name>Start</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call><operator>+</operator><name>Length</name> <operator>&lt;=</operator> <name>NextLocalOffset</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name><name>Start</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name> <operator>&amp;&amp;</operator>
<call><name><name>Start</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call><operator>+</operator><name>Length</name> <operator>&lt;</operator> <name>MaxLoadedOffset</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Chunk is not valid SLoc address space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LocOffs</name> <operator>=</operator> <call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>BeginOffs</name> <operator>=</operator> <call><name><name>Start</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>EndOffs</name> <operator>=</operator> <name>BeginOffs</name> <operator>+</operator> <name>Length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LocOffs</name> <operator>&gt;=</operator> <name>BeginOffs</name> <operator>&amp;&amp;</operator> <name>LocOffs</name> <operator>&lt;</operator> <name>EndOffs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RelativeOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>RelativeOffset</name> <operator>=</operator> <name>LocOffs</name> <operator>-</operator> <name>BeginOffs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>isInSameSLocAddrSpace</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>LHS</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>RHS</name></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>IntTy</name> <operator>*</operator><name>RelativeOffset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LHSOffs</name> <operator>=</operator> <call><name><name>LHS</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>RHSOffs</name> <operator>=</operator> <call><name><name>RHS</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>LHSLoaded</name> <init>= <expr><name>LHSOffs</name> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>RHSLoaded</name> <init>= <expr><name>RHSOffs</name> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>LHSLoaded</name> <operator>==</operator> <name>RHSLoaded</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RelativeOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>RelativeOffset</name> <operator>=</operator> <name>RHSOffs</name> <operator>-</operator> <name>LHSOffs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getCharacterData</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>SL</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name></type> <name>getColumnNumber</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>unsigned</name> <name>FilePos</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getSpellingColumnNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getExpansionColumnNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getPresumedColumnNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name></type> <name>getLineNumber</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>, <argument><expr><name>unsigned</name> <name>FilePos</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getSpellingLineNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getExpansionLineNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getPresumedLineNumber</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>StringRef</name></type> <name>getBufferName</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <macro><name>getFileCharacteristic</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<decl_stmt><decl><type><name>PresumedLoc</name></type> <name>getPresumedLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>bool</name> <name>UseLineDirectives</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>isInMainFile</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>isWrittenInSameFile</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc1</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc2</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getFileID</name><argument_list>(<argument><expr><name>Loc1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>getFileID</name><argument_list>(<argument><expr><name>Loc2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>isWrittenInMainFile</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getFileID</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>getMainFileID</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isWrittenInBuiltinFile</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Filename</name><argument_list>(<argument><expr><call><name>getPresumedLoc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name><name>Filename</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"&lt;built-in&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isWrittenInCommandLineFile</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Filename</name><argument_list>(<argument><expr><call><name>getPresumedLoc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name><name>Filename</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"&lt;command line&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isWrittenInScratchSpace</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Filename</name><argument_list>(<argument><expr><call><name>getPresumedLoc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name><name>Filename</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"&lt;scratch space&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isInSystemHeader</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isSystem</name><argument_list>(<argument><expr><call><name>getFileCharacteristic</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isInExternCSystemHeader</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getFileCharacteristic</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SrcMgr</name><operator>::</operator><name>C_ExternCSystem</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isInSystemMacro</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>loc</name><operator>.</operator><name>isMacroID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>isWrittenInScratchSpace</name><argument_list>(<argument><expr><call><name>getSpellingLoc</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>getImmediateMacroCallerLoc</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isWrittenInScratchSpace</name><argument_list>(<argument><expr><call><name>getSpellingLoc</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><call><name>isInSystemMacro</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>isInSystemHeader</name><argument_list>(<argument><expr><call><name>getSpellingLoc</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>getFileIDSize</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isInFileID</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>FileID</name> <name>FID</name></expr></argument>,
<argument><expr><name>unsigned</name> <operator>*</operator><name>RelativeOffset</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Offs</name> <operator>=</operator> <call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isOffsetInFileID</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><name>Offs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RelativeOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>RelativeOffset</name> <operator>=</operator> <name>Offs</name> <operator>-</operator> <call><name>getSLocEntry</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function_decl><type><name>unsigned</name></type> <name>getLineTableFilenameID</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>AddLineNote</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>unsigned</name> <name>LineNo</name></expr></argument>, <argument><expr><name>int</name> <name>FilenameID</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsFileEntry</name></expr></argument>, <argument><expr><name>bool</name> <name>IsFileExit</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>FileKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasLineTable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LineTable</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>LineTableInfo</name> <modifier>&amp;</modifier></type><name>getLineTable</name><parameter_list>()</parameter_list>;</function_decl>







<expr_stmt><expr><name>size_t</name> <macro><name>getContentCacheSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ContentCacheAlloc</name><operator>.</operator><name>getTotalMemory</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<struct>struct <name>MemoryBufferSizes</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>malloc_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mmap_bytes</name></decl>;</decl_stmt>

<macro><name>MemoryBufferSizes</name><argument_list>(<argument>size_t malloc_bytes</argument>, <argument>size_t mmap_bytes</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>malloc_bytes</name><argument_list>(<argument><expr><name>malloc_bytes</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>mmap_bytes</name><argument_list>(<argument>mmap_bytes</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>



<expr_stmt><expr><name>MemoryBufferSizes</name> <macro><name>getMemoryBufferSizes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>size_t</name> <macro><name>getDataStructureSizes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<decl_stmt><decl><type><name>SourceLocation</name></type> <name>translateFileLineCol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>SourceFile</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Line</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Col</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>FileID</name></type> <name>translateFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>SourceFile</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>translateFile</name><argument_list>(<argument><expr><name>FileEntryRef</name> <name>SourceFile</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>translateFile</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>SourceFile</name><operator>.</operator><name>getFileEntry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>translateLineCol</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Line</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Col</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getMacroArgExpandedLocation</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isBeforeInTranslationUnit</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>LHS</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>RHS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<macro><name>isInTheSameTranslationUnit</name><argument_list>(<argument>std::pair&lt;FileID</argument>, <argument>unsigned&gt; &amp;LOffs</argument>,
<argument>std::pair&lt;FileID</argument>, <argument>unsigned&gt; &amp;ROffs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isBeforeInSLocAddrSpace</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>LHS</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isBeforeInSLocAddrSpace</name><argument_list>(<argument><expr><name>LHS</name></expr></argument>, <argument><expr><call><name><name>RHS</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>isBeforeInSLocAddrSpace</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>LHS</name></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LHSOffset</name> <operator>=</operator> <call><name><name>LHS</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>LHSLoaded</name> <init>= <expr><name>LHSOffset</name> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>RHSLoaded</name> <init>= <expr><name>RHS</name> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>LHSLoaded</name> <operator>==</operator> <name>RHSLoaded</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LHSOffset</name> <operator>&lt;</operator> <name>RHS</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LHSLoaded</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isPointWithin</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Location</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Start</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>End</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Location</name> <operator>==</operator> <name>Start</name> <operator>||</operator> <name>Location</name> <operator>==</operator> <name>End</name> <operator>||</operator>
<operator>(</operator><call><name>isBeforeInTranslationUnit</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name>Location</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>isBeforeInTranslationUnit</name><argument_list>(<argument><expr><name>Location</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>fileinfo_iterator</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name><operator>*</operator></expr></argument>, <argument><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fileinfo_iterator</name> <macro><name>fileinfo_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FileInfos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>fileinfo_iterator</name> <macro><name>fileinfo_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FileInfos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasFileInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>FileInfos</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>FileInfos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>local_sloc_entry_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>LocalSLocEntryTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><macro><name>getLocalSLocEntry</name><argument_list>(<argument>unsigned Index</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Index</name> <operator>&lt;</operator> <call><name><name>LocalSLocEntryTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid index"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>LocalSLocEntryTable</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>loaded_sloc_entry_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>LoadedSLocEntryTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><macro><name>getLoadedSLocEntry</name><argument_list>(<argument>unsigned Index</argument>,
<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Index</name> <operator>&lt;</operator> <call><name><name>LoadedSLocEntryTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid index"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>SLocEntryLoaded</name><index>[<expr><name>Index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>LoadedSLocEntryTable</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>loadSLocEntry</name><argument_list>(<argument><expr><name>Index</name></expr></argument>, <argument><expr><name>Invalid</name></expr></argument>)</argument_list></call></expr>;</return>
}

const <expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><macro><name>getSLocEntry</name><argument_list>(<argument>FileID FID</argument>,
<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Invalid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>Invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>LocalSLocEntryTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><call><name>getSLocEntryByID</name><argument_list>(<argument><expr><name><name>FID</name><operator>.</operator><name>ID</name></name></expr></argument>, <argument><expr><name>Invalid</name></expr></argument>)</argument_list></call></expr>;</return>
}

SourceLocation<expr_stmt><expr><operator>::</operator><name>UIntTy</name> <macro><name>getNextLocalOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NextLocalOffset</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setExternalSLocEntrySource</name><parameter_list>(<parameter><decl><type><name>ExternalSLocEntrySource</name> <modifier>*</modifier></type><name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>LoadedSLocEntryTable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Invalidating existing loaded entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ExternalSLocEntries</name> <operator>=</operator> <name>Source</name></expr>;</expr_stmt>
</block_content>}</block></function>







<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name></expr></argument>&gt;</argument_list></name>
<macro><name>AllocateLoadedSLocEntries</name><argument_list>(<argument>unsigned NumSLocEntries</argument>,
<argument>SourceLocation::UIntTy TotalSize</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLoadedSourceLocation</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>CurrentLoadedOffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLocalSourceLocation</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>Loc</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>NextLocalOffset</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLoadedFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="string">"Using FileID sentinel value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLocalFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>isLoadedFileID</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getImmediateMacroCallerLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Loc</name><operator>.</operator><name>isMacroID</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Loc</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>isMacroArgExpansion</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getImmediateSpellingLoc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>getImmediateExpansionRange</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getTopMacroCallerLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <macro><name>getFakeBufferForRecovery</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name> <operator>&amp;</operator><macro><name>getFakeContentCacheForRecovery</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><macro><name>loadSLocEntry</name><argument_list>(<argument>unsigned Index</argument>, <argument>bool *Invalid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>*</operator><macro><name>getSLocEntryOrNull</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>bool</name> <name>Invalid</name> <operator>=</operator> <name>false</name></expr>;
<expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntry</name><argument_list>(<argument><expr><name>FID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Invalid</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><name>Invalid</name></expr> ?</condition><then> <expr><name>nullptr</name></expr> </then><else>: <expr><operator>&amp;</operator><name>Entry</name></expr></else></ternary></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>*</operator><macro><name>getSLocEntryForFile</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntryOrNull</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Entry</name><operator>-&gt;</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Entry</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
}



const <expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><macro><name>getSLocEntryByID</name><argument_list>(<argument>int ID</argument>,
<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>ID</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="string">"Using FileID sentinel value"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>ID</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getLoadedSLocEntryByID</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>Invalid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getLocalSLocEntry</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

const <expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator>
<macro><name>getLoadedSLocEntryByID</name><argument_list>(<argument>int ID</argument>, <argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getLoadedSLocEntry</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><name>ID</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Invalid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type>
<name>createExpansionLocImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>ExpansionInfo</name> <operator>&amp;</operator><name>Expansion</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>TokLength</name></expr></argument>, <argument><expr><name>int</name> <name>LoadedID</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>isOffsetInFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocOffset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <name>SrcMgr</name><operator>::</operator><name>SLocEntry</name> <operator>&amp;</operator><name>Entry</name> <operator>=</operator> <call><name>getSLocEntry</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SLocOffset</name> <operator>&lt;</operator> <call><name><name>Entry</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>FID</name><operator>.</operator><name>ID</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>FID</name><operator>.</operator><name>ID</name></name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>LocalSLocEntryTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SLocOffset</name> <operator>&lt;</operator> <name>NextLocalOffset</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><name>SLocOffset</name> <operator>&lt;</operator> <call><name>getSLocEntryByID</name><argument_list>(<argument><expr><name><name>FID</name><operator>.</operator><name>ID</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>FileID</name></type> <name>getPreviousFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>FileID</name></type> <name>getNextFileID</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>FileID</name></type> <name>createFileIDImpl</name><argument_list>(<argument><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name> <operator>&amp;</operator><name>File</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Filename</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>IncludePos</name></expr></argument>,
<argument><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <name>DirCharacter</name></expr></argument>, <argument><expr><name>int</name> <name>LoadedID</name></expr></argument>,
<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>LoadedOffset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name> <operator>&amp;</operator><macro><name>getOrCreateContentCache</name><argument_list>(<argument>FileEntryRef SourceFile</argument>,
<argument>bool isSystemFile = false</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>ContentCache</name> <operator>&amp;</operator>
<call><name>createMemBufferContentCache</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FileID</name></type> <name>getFileIDSlow</name><argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocOffset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>getFileIDLocal</name><argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocOffset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>getFileIDLoaded</name><argument_list>(<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocOffset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getExpansionLocSlowCase</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getSpellingLocSlowCase</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getFileLocSlowCase</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDecomposedExpansionLocSlowCase</name><argument_list>(<argument>const SrcMgr::SLocEntry *E</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDecomposedSpellingLocSlowCase</name><argument_list>(<argument>const SrcMgr::SLocEntry *E</argument>,
<argument>unsigned Offset</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>computeMacroArgsCache</name><argument_list>(<argument><expr><name>MacroArgsMap</name> <operator>&amp;</operator><name>MacroArgsCache</name></expr></argument>, <argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>associateFileChunkWithMacroArgExp</name><argument_list>(<argument><expr><name>MacroArgsMap</name> <operator>&amp;</operator><name>MacroArgsCache</name></expr></argument>,
<argument><expr><name>FileID</name> <name>FID</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>SpellLoc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ExpansionLoc</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExpansionLength</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BeforeThanCompare</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>BeforeThanCompare</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>BeforeThanCompare</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SM</name><argument_list>(<argument>SM</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>SourceLocation</name> <name>LHS</name><operator>,</operator> <name>SourceLocation</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>, <argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>BeforeThanCompare</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>BeforeThanCompare</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SM</name><argument_list>(<argument>SM</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>SourceRange</name> <name>LHS</name><operator>,</operator> <name>SourceRange</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>RHS</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SourceManagerForFile</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>SourceManagerForFile</name><argument_list>(<argument>StringRef FileName</argument>, <argument>StringRef Content</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>SourceMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>SourceMgr</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <name>FileMgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticsEngine</name></expr></argument>&gt;</argument_list></name> <name>Diagnostics</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SourceManager</name></expr></argument>&gt;</argument_list></name> <name>SourceMgr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
