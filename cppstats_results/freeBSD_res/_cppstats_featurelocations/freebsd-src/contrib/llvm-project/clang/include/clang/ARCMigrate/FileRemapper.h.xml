<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ARCMigrate/FileRemapper.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ARCMIGRATE_FILEREMAPPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ARCMIGRATE_FILEREMAPPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBufferRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>arcmt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileRemapper</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <name>FileMgr</name></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Target</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <name>MappingsTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>MappingsTy</name></type> <name>FromToMappings</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ToFromMappings</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FileRemapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>FileRemapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>initFromDisk</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>outputDir</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignoreIfFilesChanged</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>initFromFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ignoreIfFilesChanged</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>flushToDisk</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>outputDir</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>flushToFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>outputPath</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>overwriteOriginal</name><parameter_list>(<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>outputDir</name> <init>= <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>remap</name><argument_list>(<argument><expr><name>StringRef</name> <name>filePath</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>memBuf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>applyMappings</name><argument_list>(<argument><expr><name>PreprocessorOptions</name> <operator>&amp;</operator><name>PPOpts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>forEachMapping</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>StringRef</name>, <name>StringRef</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>CaptureFile</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>StringRef</name>, <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>CaptureBuffer</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>outputDir</name> <init>= <expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>remap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>memBuf</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>remap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>newfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>getOriginalFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>filePath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resetTarget</name><parameter_list>(<parameter><decl><type><name>Target</name> <modifier>&amp;</modifier></type><name>targ</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diag</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getRemapInfoFile</name><argument_list>(<argument>StringRef outputDir</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
