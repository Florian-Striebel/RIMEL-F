<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TemplateName.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TEMPLATENAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TEMPLATENAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DependenceFlags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PointerLikeTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DependentTemplateName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifier</name></decl>;</decl_stmt>
<enum_decl>enum <name>OverloadedOperatorKind</name> : <type><name>int</name></type>;</enum_decl>
<decl_stmt><decl><type><name>class</name></type> <name>OverloadedTemplateStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AssumedTemplateStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PartialDiagnostic</name></decl>;</decl_stmt>
<struct_decl>struct <name>PrintingPolicy</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>QualifiedTemplateName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SubstTemplateTemplateParmPackStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SubstTemplateTemplateParmStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateArgument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TemplateTemplateParmDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>UncommonTemplateNameStorage</name> <block>{<block_content>
<label><name>protected</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>Overloaded</name></decl>,
<decl><name>Assumed</name></decl>,
<decl><name>SubstTemplateTemplateParm</name></decl>,
<decl><name>SubstTemplateTemplateParmPack</name></decl>
}</block>;</enum>

<struct>struct <name>BitsTag</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Size</name> <range>: <expr><literal type="number">30</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>BitsTag</name></name></type> <name>Bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>PointerAlignment</name></decl>;</decl_stmt>
}</block>;</union>

<macro><name>UncommonTemplateNameStorage</name><argument_list>(<argument>Kind kind</argument>, <argument>unsigned size</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>Bits</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Bits</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>public</name>:</label>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Bits</name><operator>.</operator><name>Size</name></name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>OverloadedTemplateStorage</name> <modifier>*</modifier></type><name>getAsOverloadedStorage</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>Bits</name><operator>.</operator><name>Kind</name></name> <operator>==</operator> <name>Overloaded</name></expr>
?</condition><then> <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>OverloadedTemplateStorage</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>AssumedTemplateStorage</name> <modifier>*</modifier></type><name>getAsAssumedTemplateName</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>Bits</name><operator>.</operator><name>Kind</name></name> <operator>==</operator> <name>Assumed</name></expr>
?</condition><then> <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>AssumedTemplateStorage</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SubstTemplateTemplateParmStorage</name> <modifier>*</modifier></type><name>getAsSubstTemplateTemplateParm</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>Bits</name><operator>.</operator><name>Kind</name></name> <operator>==</operator> <name>SubstTemplateTemplateParm</name></expr>
?</condition><then> <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>SubstTemplateTemplateParmStorage</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SubstTemplateTemplateParmPackStorage</name> <modifier>*</modifier></type><name>getAsSubstTemplateTemplateParmPack</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>Bits</name><operator>.</operator><name>Kind</name></name> <operator>==</operator> <name>SubstTemplateTemplateParmPack</name></expr>
?</condition><then> <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>SubstTemplateTemplateParmPackStorage</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>OverloadedTemplateStorage</name> <range>: <expr><name>public</name> <name>UncommonTemplateNameStorage</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTContext</name></expr>;

<macro><name>OverloadedTemplateStorage</name><argument_list>(<argument>unsigned size</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>UncommonTemplateNameStorage</name><argument_list>(<argument>Overloaded</argument>, <argument>size</argument>)</argument_list></macro> <expr><block>{}</block>

<name>NamedDecl</name> <operator>*</operator><operator>*</operator><macro><name>getStorage</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>NamedDecl</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><macro><name>getStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<name>using</name> <name>iterator</name> <operator>=</operator> <name>NamedDecl</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getStorage</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>decls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;







<expr><name>class</name> <name>SubstTemplateTemplateParmPackStorage</name>
<operator>:</operator> <name>public</name> <name>UncommonTemplateNameStorage</name></expr>, <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name>
<block>{
<expr><name>TemplateTemplateParmDecl</name> <operator>*</operator><name>Parameter</name></expr>;
<expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>*</operator><name>Arguments</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>SubstTemplateTemplateParmPackStorage</name><argument_list>(<argument>TemplateTemplateParmDecl *Parameter</argument>,
<argument>unsigned Size</argument>,
<argument>const TemplateArgument *Arguments</argument>)</argument_list></macro>
<operator>:</operator> <call><name>UncommonTemplateNameStorage</name><argument_list>(<argument><expr><name>SubstTemplateTemplateParmPack</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>Parameter</name></expr></argument>)</argument_list></call></expr>, <macro><name>Arguments</name><argument_list>(<argument>Arguments</argument>)</argument_list></macro> <expr><block>{}</block>


<name>TemplateTemplateParmDecl</name> <operator>*</operator><macro><name>getParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Parameter</name></expr>;</return>
}</block>



<name>TemplateArgument</name> <macro><name>getArgumentPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>TemplateTemplateParmDecl</name> <operator>*</operator><name>Parameter</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>ArgPack</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;




























<expr><name>class</name> <name>TemplateName</name> <block>{
<expr><name>using</name> <name>StorageType</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>TemplateDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>UncommonTemplateNameStorage</name> <operator>*</operator></expr></argument>,
<argument><expr><name>QualifiedTemplateName</name> <operator>*</operator></expr></argument>, <argument><expr><name>DependentTemplateName</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>StorageType</name> <name>Storage</name></expr>;

<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>

enum <name>NameKind</name> <block>{

<expr><name>Template</name></expr>,


<expr><name>OverloadedTemplate</name></expr>,



<expr><name>AssumedTemplate</name></expr>,



<expr><name>QualifiedTemplate</name></expr>,



<expr><name>DependentTemplate</name></expr>,



<expr><name>SubstTemplateTemplateParm</name></expr>,




<expr><name>SubstTemplateTemplateParmPack</name></expr>
}</block></expr>;

<expr><call><name>TemplateName</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>TemplateDecl</name> <operator>*</operator><name>Template</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>OverloadedTemplateStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>AssumedTemplateStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>SubstTemplateTemplateParmStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>SubstTemplateTemplateParmPackStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>QualifiedTemplateName</name> <operator>*</operator><name>Qual</name></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>TemplateName</name><argument_list>(<argument><expr><name>DependentTemplateName</name> <operator>*</operator><name>Dep</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>NameKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>TemplateDecl</name> <operator>*</operator><macro><name>getAsTemplateDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>OverloadedTemplateStorage</name> <operator>*</operator><macro><name>getAsOverloadedTemplate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>AssumedTemplateStorage</name> <operator>*</operator><macro><name>getAsAssumedTemplateName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>SubstTemplateTemplateParmStorage</name> <operator>*</operator><macro><name>getAsSubstTemplateTemplateParm</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>SubstTemplateTemplateParmPackStorage</name> <operator>*</operator>
<macro><name>getAsSubstTemplateTemplateParmPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>QualifiedTemplateName</name> <operator>*</operator><macro><name>getAsQualifiedTemplateName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>DependentTemplateName</name> <operator>*</operator><macro><name>getAsDependentTemplateName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>TemplateName</name> <macro><name>getUnderlying</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>TemplateName</name> <macro><name>getNameToSubstitute</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>TemplateNameDependence</name> <macro><name>getDependence</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>bool</name> <macro><name>isDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>bool</name> <macro><name>isInstantiationDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>bool</name> <macro><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;









<expr><name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>const PrintingPolicy &amp;Policy</argument>,
<argument>bool SuppressNNS = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>void</name> <macro><name>dump</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><call><name><name>Storage</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>


<name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Storage</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<specifier>static</specifier> <name>TemplateName</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *Ptr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>TemplateName</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



<expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name>,
<name>TemplateName</name> <name>N</name><operator>)</operator></expr>;



<expr><name>class</name> <name>SubstTemplateTemplateParmStorage</name>
<operator>:</operator> <name>public</name> <name>UncommonTemplateNameStorage</name></expr>, <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTContext</name></expr>;

<expr><name>TemplateTemplateParmDecl</name> <operator>*</operator><name>Parameter</name></expr>;
<expr><name>TemplateName</name> <name>Replacement</name></expr>;

<macro><name>SubstTemplateTemplateParmStorage</name><argument_list>(<argument>TemplateTemplateParmDecl *parameter</argument>,
<argument>TemplateName replacement</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>UncommonTemplateNameStorage</name><argument_list>(<argument><expr><name>SubstTemplateTemplateParm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Parameter</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>)</argument_list></call></expr>, <macro><name>Replacement</name><argument_list>(<argument>replacement</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>TemplateTemplateParmDecl</name> <operator>*</operator><macro><name>getParameter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Parameter</name></expr>;</return> }</block>
<name>TemplateName</name> <macro><name>getReplacement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Replacement</name></expr>;</return> }</block>

<name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>,
<argument>TemplateTemplateParmDecl *parameter</argument>,
<argument>TemplateName replacement</argument>)</argument_list></macro></expr>;
}</block></expr>;

<expr><specifier>inline</specifier> <name>TemplateName</name> <name>TemplateName</name><operator>::</operator><macro><name>getUnderlying</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><name>SubstTemplateTemplateParmStorage</name> <modifier>*</modifier></type><name>subst</name>
<init>= <expr><call><name>getAsSubstTemplateTemplateParm</name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>subst</name><operator>-&gt;</operator><name>getReplacement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUnderlying</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>












<name>class</name> <name>QualifiedTemplateName</name> <operator>:</operator> <name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTContext</name></expr>;








<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Qualifier</name></expr>;



<expr><name>TemplateDecl</name> <operator>*</operator><name>Template</name></expr>;

<macro><name>QualifiedTemplateName</name><argument_list>(<argument>NestedNameSpecifier *NNS</argument>, <argument>bool TemplateKeyword</argument>,
<argument>TemplateDecl *Template</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Qualifier</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>, <argument><expr><ternary><condition><expr><name>TemplateKeyword</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>, <macro><name>Template</name><argument_list>(<argument>Template</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>

<name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getQualifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Qualifier</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>bool</name> <macro><name>hasTemplateKeyword</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Qualifier</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>TemplateDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Template</name></expr>;</return> }</block>



<name>TemplateDecl</name> <operator>*</operator><macro><name>getTemplateDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Template</name></expr>;</return> }</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{
<expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><call><name>getQualifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>hasTemplateKeyword</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTemplateDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>NestedNameSpecifier *NNS</argument>,
<argument>bool TemplateKeyword</argument>, <argument>TemplateDecl *Template</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddBoolean</name></name><argument_list>(<argument><expr><name>TemplateKeyword</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Template</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;









<expr><name>class</name> <name>DependentTemplateName</name> <operator>:</operator> <name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTContext</name></expr>;







<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>Qualifier</name></expr>;


<expr>union <block>{



<expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><name>Identifier</name></expr>;




<expr><name>OverloadedOperatorKind</name> <name>Operator</name></expr>;
}</block></expr>;







<expr><name>TemplateName</name> <name>CanonicalTemplateName</name></expr>;

<expr><call><name>DependentTemplateName</name><argument_list>(<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>Qualifier</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><name>Identifier</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Qualifier</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Identifier</name><argument_list>(<argument><expr><name>Identifier</name></expr></argument>)</argument_list></call></expr>,
<macro><name>CanonicalTemplateName</name><argument_list>(<argument>this</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>DependentTemplateName</name><argument_list>(<argument>NestedNameSpecifier *Qualifier</argument>,
<argument>const IdentifierInfo *Identifier</argument>,
<argument>TemplateName Canon</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Qualifier</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Identifier</name><argument_list>(<argument><expr><name>Identifier</name></expr></argument>)</argument_list></call></expr>,
<macro><name>CanonicalTemplateName</name><argument_list>(<argument>Canon</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>DependentTemplateName</name><argument_list>(<argument>NestedNameSpecifier *Qualifier</argument>,
<argument>OverloadedOperatorKind Operator</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Qualifier</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Operator</name><argument_list>(<argument><expr><name>Operator</name></expr></argument>)</argument_list></call></expr>,
<macro><name>CanonicalTemplateName</name><argument_list>(<argument>this</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>DependentTemplateName</name><argument_list>(<argument>NestedNameSpecifier *Qualifier</argument>,
<argument>OverloadedOperatorKind Operator</argument>,
<argument>TemplateName Canon</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Qualifier</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Operator</name><argument_list>(<argument><expr><name>Operator</name></expr></argument>)</argument_list></call></expr>,
<macro><name>CanonicalTemplateName</name><argument_list>(<argument>Canon</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>

<name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getQualifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Qualifier</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>bool</name> <macro><name>isIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Qualifier</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>getIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIdentifier</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Template name isn't an identifier?"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Identifier</name></expr>;</return>
}</block>



<name>bool</name> <macro><name>isOverloadedOperator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Qualifier</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>OverloadedOperatorKind</name> <macro><name>getOperator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isOverloadedOperator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Template name isn't an overloaded operator?"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Operator</name></expr>;</return>
}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><call><name>getQualifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><call><name>getQualifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getOperator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>NestedNameSpecifier *NNS</argument>,
<argument>const IdentifierInfo *Identifier</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddBoolean</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Identifier</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>NestedNameSpecifier *NNS</argument>,
<argument>OverloadedOperatorKind Operator</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddBoolean</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><name>Operator</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;

}</block>

<name>namespace</name> <name>llvm</name> <block>{


<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>TemplateName</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::TemplateName TN</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>TN</name><operator>.</operator><name>getAsVoidPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>TemplateName</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *Ptr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>TemplateName</name><operator>::</operator><call><name>getFromVoidPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<specifier>static</specifier> <name>constexpr</name> <name>int</name> <name>NumLowBitsAvailable</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;

}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
