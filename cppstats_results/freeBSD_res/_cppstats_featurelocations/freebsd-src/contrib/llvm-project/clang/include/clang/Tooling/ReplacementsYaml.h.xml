<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/ReplacementsYaml.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REPLACEMENTSYAML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REPLACEMENTSYAML_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<macro><name>LLVM_YAML_IS_SEQUENCE_VECTOR</name><argument_list>(<argument>clang::tooling::Replacement</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>yaml</name> <block>{<block_content>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Replacement</name></expr></argument>&gt;</argument_list></name> <block>{


struct <expr><name>NormalizedReplacement</name> <block>{
<expr><call><name>NormalizedReplacement</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IO</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>FilePath</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Length</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>ReplacementText</name><argument_list>(<argument><literal type="string">""</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>NormalizedReplacement</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IO</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Replacement</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>FilePath</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>Offset</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Length</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>ReplacementText</name><argument_list>(<argument>R.getReplacementText()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Replacement</name> <macro><name>denormalize</name><argument_list>(<argument>const IO &amp;</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><call><name>Replacement</name><argument_list>(<argument><expr><name>FilePath</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>,
<argument><expr><name>ReplacementText</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>std</name><operator>::</operator><name>string</name> <name>FilePath</name></expr>;
<expr><name>unsigned</name> <name>int</name> <name>Offset</name></expr>;
<expr><name>unsigned</name> <name>int</name> <name>Length</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ReplacementText</name></expr>;
}</block></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>, <argument>clang::tooling::Replacement &amp;R</argument>)</argument_list></macro> <block>{
<expr><name><name>MappingNormalization</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedReplacement</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Replacement</name></expr></argument>&gt;</argument_list></name>
<call><name>Keys</name><argument_list>(<argument><expr><name>Io</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"FilePath"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>FilePath</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Offset"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>Offset</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Length"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"ReplacementText"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>ReplacementText</name></name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>TranslationUnitReplacements</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>,
<argument>clang::tooling::TranslationUnitReplacements &amp;Doc</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"MainSourceFile"</literal></expr></argument>, <argument><expr><name><name>Doc</name><operator>.</operator><name>MainSourceFile</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Replacements"</literal></expr></argument>, <argument><expr><name><name>Doc</name><operator>.</operator><name>Replacements</name></name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
