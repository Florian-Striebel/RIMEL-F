<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_REWRITE_CORE_REWRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_REWRITE_CORE_REWRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Rewrite/Core/RewriteBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Rewriter</name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>*</modifier></type><name>SourceMgr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>*</modifier></type><name>LangOpts</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>RewriteBuffer</name></expr></argument>&gt;</argument_list></name> <name>RewriteBuffers</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<struct>struct <name>RewriteOptions</name> <block>{


<decl_stmt><decl><type><name>bool</name></type> <name>IncludeInsertsAtBeginOfRange</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IncludeInsertsAtEndOfRange</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>














<decl_stmt><decl><type><name>bool</name></type> <name>RemoveLineIfEmpty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>RewriteOptions</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>buffer_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>RewriteBuffer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_buffer_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>RewriteBuffer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>explicit</name></type> <name>Rewriter</name><parameter_list>()</parameter_list> <init>= <expr/>default</init>;</function_decl>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Rewriter</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SourceMgr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>LangOpts</name><argument_list>(<argument>&amp;LO</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>setSourceMgr</name><argument_list>(<argument>SourceManager &amp;SM</argument>, <argument>const LangOptions &amp;LO</argument>)</argument_list></macro> <block>{
<expr><name>SourceMgr</name> <operator>=</operator> <operator>&amp;</operator><name>SM</name></expr>;
<expr><name>LangOpts</name> <operator>=</operator> <operator>&amp;</operator><name>LO</name></expr>;
}</block>

<name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceMgr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>SourceMgr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>LangOpts</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>isRewritable</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Loc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>int</name></type> <name>getRangeSize</name><argument_list>(<argument><expr><name>SourceRange</name> <name>Range</name></expr></argument>,
<argument><expr><name>RewriteOptions</name> <name>opts</name> <operator>=</operator> <call><name>RewriteOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getRangeSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CharSourceRange</name> <operator>&amp;</operator><name>Range</name></expr></argument>,
<argument><expr><name>RewriteOptions</name> <name>opts</name> <operator>=</operator> <call><name>RewriteOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getRewrittenText</name><argument_list>(<argument>CharSourceRange Range</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getRewrittenText</name><argument_list>(<argument>SourceRange Range</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRewrittenText</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<function_decl><type><name>bool</name></type> <name>InsertText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>InsertAfter</name> <init>= <expr><name>true</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>indentNewLines</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>bool</name></type> <name>InsertTextAfter</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>InsertText</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>bool</name></type> <name>InsertTextAfterToken</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>bool</name></type> <name>InsertTextBefore</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>InsertText</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>Str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>bool</name></type> <name>RemoveText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Length</name></decl></parameter>,
<parameter><decl><type><name>RewriteOptions</name></type> <name>opts</name> <init>= <expr><call><name>RewriteOptions</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>bool</name></type> <name>RemoveText</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>RewriteOptions</name></type> <name>opts</name> <init>= <expr><call><name>RewriteOptions</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RemoveText</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeSize</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>RemoveText</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>RewriteOptions</name></type> <name>opts</name> <init>= <expr><call><name>RewriteOptions</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RemoveText</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeSize</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function_decl><type><name>bool</name></type> <name>ReplaceText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OrigLength</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>NewStr</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>bool</name></type> <name>ReplaceText</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>NewStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ReplaceText</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeSize</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NewStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>ReplaceText</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>NewStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ReplaceText</name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeSize</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NewStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function_decl><type><name>bool</name></type> <name>ReplaceText</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>replacementRange</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>IncreaseIndentation</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>parentIndent</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>bool</name></type> <name>IncreaseIndentation</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>parentIndent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>IncreaseIndentation</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>parentIndent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function_decl><type><name>RewriteBuffer</name> <modifier>&amp;</modifier></type><name>getEditBuffer</name><parameter_list>(<parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>const</specifier> <name>RewriteBuffer</name> <modifier>*</modifier></type><name>getRewriteBufferFor</name><argument_list>(<argument><expr><name>FileID</name> <name>FID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>RewriteBuffer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator>
<call><name><name>RewriteBuffers</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>I</name> <operator>==</operator> <call><name><name>RewriteBuffers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nullptr</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>buffer_iterator</name></type> <name>buffer_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>RewriteBuffers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>buffer_iterator</name></type> <name>buffer_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>RewriteBuffers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_buffer_iterator</name> <macro><name>buffer_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>RewriteBuffers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_buffer_iterator</name> <macro><name>buffer_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>RewriteBuffers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>






<function_decl><type><name>bool</name></type> <name>overwriteChangedFiles</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getLocationOffsetAndFileID</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>FileID</name> <operator>&amp;</operator><name>FID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
