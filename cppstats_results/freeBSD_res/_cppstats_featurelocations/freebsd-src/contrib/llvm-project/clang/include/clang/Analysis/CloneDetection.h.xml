<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/CloneDetection.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_CLONEDETECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_CLONEDETECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompoundStmt</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>StmtSequence</name> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>StartIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndIndex</name></decl>;</decl_stmt>

<label><name>public</name>:</label>












<macro><name>StmtSequence</name><argument_list>(<argument>const CompoundStmt *Stmt</argument>, <argument>const Decl *D</argument>, <argument>unsigned StartIndex</argument>,
<argument>unsigned EndIndex</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<expr_stmt><expr><call><name>StmtSequence</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>Stmt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>StmtSequence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>iterator</name>;</typedef>


<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>begin</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>begin</name><argument_list>()</argument_list></call><index>[<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>holdsSequence</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EndIndex</name> <operator>-</operator> <name>StartIndex</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getContainingDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>D</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>holdsSequence</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EndIndex</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>StartIndex</name></expr></argument>, <argument><expr><name>EndIndex</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>S</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>StartIndex</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>EndIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>StartIndex</name></expr></argument>, <argument><expr><name>EndIndex</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>S</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>StartIndex</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>EndIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>














<decl_stmt><decl><type><name>class</name></type> <name>CloneDetector</name> <block>{<block_content>

<label><name>public</name>:</label>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StmtSequence</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>CloneGroup</name></expr>;</expr_stmt></typedef>



<function_decl><type><name>void</name></type> <name>analyzeCodeBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>









<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>constrainClones</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>, <argument><expr><name>T</name> <name>C</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>constrain</name></name><argument_list>(<argument><expr><name>CloneGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>constrainClones</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>, <argument><expr><name>T1</name> <name>C</name></expr></argument>,
<argument><expr><name>Ts</name><operator>...</operator> <name>ConstraintList</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>constrainClones</name><argument_list>(<argument><expr><name>CloneGroups</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constrainClones</name><argument_list>(<argument><expr><name>CloneGroups</name></expr></argument>, <argument><expr><name>ConstraintList</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>findClones</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><name>Ts</name><operator>...</operator> <name>ConstraintList</name></expr></argument>)</argument_list> <block>{<block_content>



<decl_stmt><decl><type><name>CloneGroup</name></type> <name>AllClones</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>AllClones</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>Sequences</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>C</name> <range>: <expr><name>Sequences</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>AllClones</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>AllClones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>constrainClones</name><argument_list>(<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>ConstraintList</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>CloneGroup</name></type> <name>Sequences</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CloneConstraint</name> <block>{<block_content>
<label><name>public</name>:</label>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>filterGroups</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>CloneDetector</name><operator>::</operator><name>CloneGroup</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Filter</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CloneGroups</name><operator>.</operator><name>erase</name></name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name>remove_if</name><argument_list>(<argument><expr><call><name><name>CloneGroups</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>CloneGroups</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>CloneGroups</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>splitCloneGroups</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>Compare</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>RecursiveCloneTypeIIHashConstraint</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Sequences</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>RecursiveCloneTypeIIVerifyConstraint</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Sequences</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>MinComplexityConstraint</name> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MinComplexity</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>MinComplexityConstraint</name><argument_list>(<argument>unsigned MinComplexity</argument>)</argument_list></macro>
: <macro><name>MinComplexity</name><argument_list>(<argument>MinComplexity</argument>)</argument_list></macro> <block>{<block_content/>}</block>





<decl_stmt><decl><type><name>size_t</name></type> <name>calculateStmtComplexity</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StmtSequence</name> <operator>&amp;</operator><name>Seq</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>Limit</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ParentMacroStack</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>CloneConstraint</name><operator>::</operator><call><name>filterGroups</name><argument_list>(
<argument><expr><name>CloneGroups</name></expr></argument>, <argument><expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>CloneDetector</name><operator>::</operator><name>CloneGroup</name> <operator>&amp;</operator><name>A</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>A</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>calculateStmtComplexity</name><argument_list>(<argument><expr><call><name><name>A</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MinComplexity</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>MinComplexity</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
};


<decl_stmt><decl><type><name>class</name></type> <name>MinGroupSizeConstraint</name> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MinGroupSize</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>MinGroupSizeConstraint</name><argument_list>(<argument>unsigned MinGroupSize = <literal type="number">2</literal></argument>)</argument_list></macro>
: <macro><name>MinGroupSize</name><argument_list>(<argument>MinGroupSize</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>CloneConstraint</name><operator>::</operator><call><name>filterGroups</name><argument_list>(<argument><expr><name>CloneGroups</name></expr></argument>,
<argument><expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>CloneDetector</name><operator>::</operator><name>CloneGroup</name> <operator>&amp;</operator><name>A</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>MinGroupSize</name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
};


<struct>struct <name>OnlyLargestCloneConstraint</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FilenamePatternConstraint</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>IgnoredFilesPattern</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Regex</name></expr></argument>&gt;</argument_list></name> <name>IgnoredFilesRegex</name></expr>;</expr_stmt>

<macro><name>FilenamePatternConstraint</name><argument_list>(<argument>StringRef IgnoredFilesPattern</argument>)</argument_list></macro>
: <macro><name>IgnoredFilesPattern</name><argument_list>(<argument>IgnoredFilesPattern</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>IgnoredFilesRegex</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Regex</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"^("</literal> <operator>+</operator>
<call><name><name>IgnoredFilesPattern</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"$)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>isAutoGenerated</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CloneDetector</name><operator>::</operator><name>CloneGroup</name> <operator>&amp;</operator><name>Group</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>CloneConstraint</name><operator>::</operator><call><name>filterGroups</name><argument_list>(
<argument><expr><name>CloneGroups</name></expr></argument>, <argument><expr><index>[<expr><name>this</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>CloneDetector</name><operator>::</operator><name>CloneGroup</name> <operator>&amp;</operator><name>Group</name><operator>)</operator> <block>{
<return>return <expr><call><name>isAutoGenerated</name><argument_list>(<argument><expr><name>Group</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
}</block>
<decl/></struct>};


<decl_stmt><decl><type><name>class</name></type> <name>VariablePattern</name> <block>{<block_content>


<struct>struct <name>VariableOccurence</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>KindID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Mention</name></decl>;</decl_stmt>

<macro><name>VariableOccurence</name><argument_list>(<argument>size_t KindID</argument>, <argument>const Stmt *Mention</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>KindID</name><argument_list>(<argument><expr><name>KindID</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Mention</name><argument_list>(<argument>Mention</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VariableOccurence</name></expr></argument>&gt;</argument_list></name> <name>Occurences</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Variables</name></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>addVariableOccurence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VarDecl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Mention</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>addVariables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>


<macro><name>VariablePattern</name><argument_list>(<argument>const StmtSequence &amp;Sequence</argument>)</argument_list></macro> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name> <range>: <expr><name>Sequence</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addVariables</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>



<struct>struct <name>SuspiciousClonePair</name> <block>{


<struct>struct <name>SuspiciousCloneInfo</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>Variable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Mention</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>Suggestion</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SuspiciousCloneInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>Variable</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>Mention</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>Suggestion</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Variable</name><argument_list>(<argument><expr><name>Variable</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Mention</name><argument_list>(<argument><expr><name>Mention</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Suggestion</name><argument_list>(<argument>Suggestion</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>SuspiciousCloneInfo</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>SuspiciousCloneInfo</name></type> <name>FirstCloneInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SuspiciousCloneInfo</name></type> <name>SecondCloneInfo</name></decl>;</decl_stmt>
}</block>;</struct>
























<decl_stmt><decl><type><name>unsigned</name></type> <name>countPatternDifferences</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>VariablePattern</name> <operator>&amp;</operator><name>Other</name></expr></argument>,
<argument><expr><name>VariablePattern</name><operator>::</operator><name>SuspiciousClonePair</name> <operator>*</operator><name>FirstMismatch</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>MatchingVariablePatternConstraint</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>constrain</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CloneDetector</name><operator>::</operator><name>CloneGroup</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CloneGroups</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block>;</struct>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
