<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CHECKERS_SVALEXPLAINER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CHECKERS_SVALEXPLAINER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SValExplainer</name> <range>: <expr><name>public</name> <name><name>FullSValVisitor</name><argument_list type="generic">&lt;<argument><expr><name>SValExplainer</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>private</name><operator>:</operator>
<name>ASTContext</name> <operator>&amp;</operator><name>ACtx</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>printStmt</name><argument_list>(<argument>const Stmt *S</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>S</name><operator>-&gt;</operator><name>printPretty</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>PrintingPolicy</name><argument_list>(<argument><expr><call><name><name>ACtx</name><operator>.</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isThisObject</name><argument_list>(<argument>const SymbolicRegion *R</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>S</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRegionValue</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXThisRegion</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SValExplainer</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ACtx</name><argument_list>(<argument>Ctx</argument>)</argument_list></macro> <block>{}</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>VisitUnknownVal</name><argument_list>(<argument>UnknownVal V</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"unknown value"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitUndefinedVal</name><argument_list>(<argument>UndefinedVal V</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"undefined value"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitLocMemRegionVal</name><argument_list>(<argument>loc::MemRegionVal V</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>R</name> <operator>=</operator> <call><name><name>V</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>SR</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymbolicRegion</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isThisObject</name><argument_list>(<argument><expr><name>SR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><call><name><name>SR</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return "pointer to " + Visit(R</block></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitLocConcreteInt</name><argument_list>(<argument>loc::ConcreteInt V</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>I</name> <operator>=</operator> <call><name><name>V</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"concrete memory address '"</literal> <operator>&lt;&lt;</operator> <name>I</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitNonLocSymbolVal</name><argument_list>(<argument>nonloc::SymbolVal V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Visit</name><argument_list>(<argument><expr><call><name><name>V</name><operator>.</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitNonLocConcreteInt</name><argument_list>(<argument>nonloc::ConcreteInt V</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>I</name> <operator>=</operator> <call><name><name>V</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><call><name><name>I</name><operator>.</operator><name>isSigned</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"signed "</literal></expr> </then><else>: <expr><literal type="string">"unsigned "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <call><name><name>I</name><operator>.</operator><name>getBitWidth</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">"-bit integer '"</literal> <operator>&lt;&lt;</operator> <name>I</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitNonLocLazyCompoundVal</name><argument_list>(<argument>nonloc::LazyCompoundVal V</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"lazily frozen compound value of "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>V</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolRegionValue</name><argument_list>(<argument>const SymbolRegionValue *S</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>R</name> <operator>=</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>V</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>VarRegion</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>D</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>V</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"argument '"</literal> <operator>+</operator> <call><name><name>D</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><literal type="string">"initial value of "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolConjured</name><argument_list>(<argument>const SymbolConjured *S</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"symbol of type '"</literal> <operator>+</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsString</name><argument_list>()</argument_list></call> <operator>+</operator>
<literal type="string">"' conjured at statement '"</literal> <operator>+</operator> <call><name>printStmt</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getStmt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolDerived</name><argument_list>(<argument>const SymbolDerived *S</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"value derived from ("</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getParentSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="string">") for "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolExtent</name><argument_list>(<argument>const SymbolExtent *S</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"extent of "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolMetadata</name><argument_list>(<argument>const SymbolMetadata *S</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"metadata of type '"</literal> <operator>+</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' tied to "</literal> <operator>+</operator>
<call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymIntExpr</name><argument_list>(<argument>const SymIntExpr *S</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">") "</literal>
<operator>&lt;&lt;</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>BinaryOperator</name><operator>::</operator><call><name>getOpcodeStr</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal>
<operator>&lt;&lt;</operator> <call><name><name>S</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymSymExpr</name><argument_list>(<argument>const SymSymExpr *S</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"("</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">") "</literal> <operator>+</operator>
<name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>BinaryOperator</name><operator>::</operator><call><name>getOpcodeStr</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="string">" ("</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymbolicRegion</name><argument_list>(<argument>const SymbolicRegion *R</argument>)</argument_list></macro> <block>{


<if_stmt><if>if <condition>(<expr><call><name>isThisObject</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"'this' object"</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>R</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call>
<operator>.</operator><call><name>getCanonicalType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>getAs</name><argument_list type="generic">&lt;<argument><expr><name>ObjCObjectPointerType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"object at "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>HeapSpaceRegion</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getMemorySpace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"heap segment that starts at "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"pointee of "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name>string</name> <macro><name>VisitAllocaRegion</name><argument_list>(<argument>const AllocaRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"region allocated by '"</literal> <operator>+</operator> <call><name>printStmt</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitCompoundLiteralRegion</name><argument_list>(<argument>const CompoundLiteralRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"compound literal "</literal> <operator>+</operator> <call><name>printStmt</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getLiteralExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitStringRegion</name><argument_list>(<argument>const StringRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"string literal "</literal> <operator>+</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getString</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitElementRegion</name><argument_list>(<argument>const ElementRegion *R</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"element of type '"</literal> <operator>&lt;&lt;</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getElementType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsString</name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">"' with index "</literal></expr>;

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>R</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>getAs</name><argument_list type="generic">&lt;<argument><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <call><name><name>I</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal> <operator>&lt;&lt;</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">" of "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSuperRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name>string</name> <macro><name>VisitNonParamVarRegion</name><argument_list>(<argument>const NonParamVarRegion *R</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name> <operator>=</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name> <operator>=</operator> <call><name><name>VD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"parameter '"</literal> <operator>+</operator> <name>Name</name> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>VD</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>BlocksAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"block variable '"</literal> <operator>+</operator> <name>Name</name> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>VD</name><operator>-&gt;</operator><name>hasLocalStorage</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"local variable '"</literal> <operator>+</operator> <name>Name</name> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>VD</name><operator>-&gt;</operator><name>isStaticLocal</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"static local variable '"</literal> <operator>+</operator> <name>Name</name> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>VD</name><operator>-&gt;</operator><name>hasGlobalStorage</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"global variable '"</literal> <operator>+</operator> <name>Name</name> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"A variable is either local or global"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitObjCIvarRegion</name><argument_list>(<argument>const ObjCIvarRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"instance variable '"</literal> <operator>+</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNameAsString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' of "</literal> <operator>+</operator>
<call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSuperRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitFieldRegion</name><argument_list>(<argument>const FieldRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"field '"</literal> <operator>+</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNameAsString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' of "</literal> <operator>+</operator>
<call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSuperRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitCXXTempObjectRegion</name><argument_list>(<argument>const CXXTempObjectRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"temporary object constructed at statement '"</literal> <operator>+</operator>
<call><name>printStmt</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitCXXBaseObjectRegion</name><argument_list>(<argument>const CXXBaseObjectRegion *R</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">"base object '"</literal> <operator>+</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getQualifiedNameAsString</name><argument_list>()</argument_list></call> <operator>+</operator>
<literal type="string">"' inside "</literal> <operator>+</operator> <call><name>Visit</name><argument_list>(<argument><expr><call><name><name>R</name><operator>-&gt;</operator><name>getSuperRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitParamVarRegion</name><argument_list>(<argument>const ParamVarRegion *R</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator><name>PVD</name> <operator>=</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name> <operator>=</operator> <call><name><name>PVD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"parameter '"</literal> <operator>&lt;&lt;</operator> <name>Name</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>

<name>unsigned</name> <name>Index</name> <operator>=</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <name>Index</name> <operator>&lt;&lt;</operator> <name>llvm</name><operator>::</operator><call><name>getOrdinalSuffix</name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" parameter of "</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Parent</name> <init>= <expr><call><name><name>R</name><operator>-&gt;</operator><name>getStackFrame</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDecl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"function '"</literal> <operator>&lt;&lt;</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"()'"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>CD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"C++ constructor '"</literal> <operator>&lt;&lt;</operator> <call><name><name>CD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"()'"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>MD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>MD</name><operator>-&gt;</operator><name>isClassMethod</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"Objective-C method '+"</literal> <operator>&lt;&lt;</operator> <call><name><name>MD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"Objective-C method '-"</literal> <operator>&lt;&lt;</operator> <call><name><name>MD</name><operator>-&gt;</operator><name>getQualifiedNameAsString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>BlockDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>BlockDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>isConversionFromLambda</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"lambda"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"block"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name>string</name> <macro><name>VisitSVal</name><argument_list>(<argument>SVal V</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <name>V</name></expr>;
<return>return <expr><literal type="string">"a value unsupported by the explainer: ("</literal> <operator>+</operator>
<name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitSymExpr</name><argument_list>(<argument>SymbolRef S</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>S</name><operator>-&gt;</operator><name>dumpToStream</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="string">"a symbolic expression unsupported by the explainer: ("</literal> <operator>+</operator>
<name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>VisitMemRegion</name><argument_list>(<argument>const MemRegion *R</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Str</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <name>R</name></expr>;
<return>return <expr><literal type="string">"a memory region unsupported by the explainer ("</literal> <operator>+</operator>
<name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
}</block></expr></expr_stmt>
};

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
