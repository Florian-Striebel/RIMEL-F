<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/Pragma.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_PRAGMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_PRAGMA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PragmaNamespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Token</name></decl>;</decl_stmt>





<enum>enum <name>PragmaIntroducerKind</name> <block>{



<decl><name>PIK_HashPragma</name></decl>,




<decl><name>PIK__Pragma</name></decl>,





<decl><name>PIK___pragma</name></decl>
}</block>;</enum>


<struct>struct <name>PragmaIntroducer</name> <block>{
<decl_stmt><decl><type><name>PragmaIntroducerKind</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
}</block>;</struct>










<decl_stmt><decl><type><name>class</name></type> <name>PragmaHandler</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PragmaHandler</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>PragmaHandler</name><argument_list>(<argument>StringRef name</argument>)</argument_list></macro> : <macro><name>Name</name><argument_list>(<argument>name</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PragmaHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Name</name></expr>;</return> }</block></expr></expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>HandlePragma</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>, <parameter><decl><type><name>PragmaIntroducer</name></type> <name>Introducer</name></decl></parameter>,
<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>FirstToken</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function><type><name>virtual</name> <name>PragmaNamespace</name> <modifier>*</modifier></type><name>getIfNamespace</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>EmptyPragmaHandler</name> <range>: <expr><name>public</name> <name>PragmaHandler</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>EmptyPragmaHandler</name><argument_list>(<argument>StringRef Name = StringRef()</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>HandlePragma</name><argument_list>(<argument>Preprocessor &amp;PP</argument>, <argument>PragmaIntroducer Introducer</argument>,
<argument>Token &amp;FirstToken</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>PragmaNamespace</name> <range>: <expr><name>public</name> <name>PragmaHandler</name> <block>{


<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PragmaHandler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Handlers</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>PragmaNamespace</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <operator>:</operator> <macro><name>PragmaHandler</name><argument_list>(<argument>Name</argument>)</argument_list></macro> <block>{}</block>





<name>PragmaHandler</name> <operator>*</operator><macro><name>FindHandler</name><argument_list>(<argument>StringRef Name</argument>,
<argument>bool IgnoreNull = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>void</name> <call><name>AddPragma</name><argument_list>(<argument><expr><name>PragmaHandler</name> <operator>*</operator><name>Handler</name></expr></argument>)</argument_list></call></expr>;



<expr><name>void</name> <call><name>RemovePragmaHandler</name><argument_list>(<argument><expr><name>PragmaHandler</name> <operator>*</operator><name>Handler</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Handlers</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>HandlePragma</name><argument_list>(<argument>Preprocessor &amp;PP</argument>, <argument>PragmaIntroducer Introducer</argument>,
<argument>Token &amp;Tok</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>PragmaNamespace</name> <operator>*</operator><macro><name>getIfNamespace</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>this</name></expr>;</return> }</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
