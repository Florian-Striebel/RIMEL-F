<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SMTCONSTRAINTMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SMTCONSTRAINTMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/JsonSupport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h"</cpp:file></cpp:include>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableSet</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SymbolRef</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>SMTExpr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>ConstraintSMTType</name></expr>;</expr_stmt></typedef>
<macro><name>REGISTER_TRAIT_WITH_PROGRAMSTATE</name><argument_list>(<argument>ConstraintSMT</argument>, <argument>ConstraintSMTType</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SMTConstraintManager</name> <range>: <expr><name>public</name> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SimpleConstraintManager</name> <block>{
<expr><name>mutable</name> <name>llvm</name><operator>::</operator><name>SMTSolverRef</name> <name>Solver</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>CreateZ3Solver</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>SMTConstraintManager</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>ExprEngine</name> <operator>*</operator><name>EE</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SValBuilder</name> <operator>&amp;</operator><name>SB</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SimpleConstraintManager</name><argument_list>(<argument>EE</argument>, <argument>SB</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>SMTConstraintManager</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;





<expr><name>ProgramStateRef</name> <macro><name>assumeSym</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name> <operator>=</operator> <call><name>getBasicVals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContext</name><argument_list>()</argument_list></call></expr>;

<expr><name>QualType</name> <name>RetTy</name></expr>;
<expr><name>bool</name> <name>hasComparison</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>Exp</name> <operator>=</operator>
<name>SMTConv</name><operator>::</operator><call><name>getExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RetTy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasComparison</name></expr></argument>)</argument_list></call></expr>;



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasComparison</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>RetTy</name><operator>-&gt;</operator><name>isBooleanType</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>assumeExpr</name><argument_list>(
<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>,
<argument><expr><name>SMTConv</name><operator>::</operator><call><name>getZeroExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>, <argument><expr><operator>!</operator><name>Assumption</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><call><name>assumeExpr</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><ternary><condition><expr><name>Assumption</name></expr> ?</condition><then> <expr><name>Exp</name></expr> </then><else>: <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>mkNot</name></name><argument_list>(<argument><expr><name>Exp</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>assumeSymInclusiveRange</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>, <argument><expr><name>SymbolRef</name> <name>Sym</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>,
<argument><expr><name>bool</name> <name>InRange</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name> <init>= <expr><call><name>getBasicVals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>assumeExpr</name><argument_list>(
<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>SMTConv</name><operator>::</operator><call><name>getRangeExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>From</name></expr></argument>, <argument><expr><name>To</name></expr></argument>, <argument><expr><name>InRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ProgramStateRef</name></type> <name>assumeSymUnsupported</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Assumption</name></decl></parameter>)</parameter_list> override <block>{<block_content>

<return>return <expr><name>State</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ConditionTruthVal</name></type> <name>checkNull</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name> <init>= <expr><call><name>getBasicVals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QualType</name></type> <name>RetTy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>VarExp</name> <operator>=</operator> <name>SMTConv</name><operator>::</operator><call><name>getExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RetTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>Exp</name> <operator>=</operator>
<name>SMTConv</name><operator>::</operator><call><name>getZeroExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>VarExp</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>NotExp</name> <operator>=</operator>
<name>SMTConv</name><operator>::</operator><call><name>getZeroExpr</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>VarExp</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ConditionTruthVal</name></type> <name>isSat</name> <init>= <expr><call><name>checkModel</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConditionTruthVal</name></type> <name>isNotSat</name> <init>= <expr><call><name>checkModel</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>NotExp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>isSat</name><operator>.</operator><name>isConstrainedTrue</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>isNotSat</name><operator>.</operator><name>isConstrainedFalse</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>isSat</name><operator>.</operator><name>isConstrainedFalse</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>isNotSat</name><operator>.</operator><name>isConstrainedTrue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>ConditionTruthVal</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><macro><name>getSymVal</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>SymbolRef Sym</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>BasicValueFactory</name> <operator>&amp;</operator><name>BVF</name> <operator>=</operator> <call><name>getBasicVals</name><argument_list>()</argument_list></call></expr>;
<expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name> <operator>=</operator> <call><name><name>BVF</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>SymbolData</name> <modifier>*</modifier></type><name>SD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymbolData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QualType</name></type> <name>Ty</name> <init>= <expr><call><name><name>Sym</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Ty</name><operator>-&gt;</operator><name>isRealFloatingType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSize</name></name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!</operator><call><name><name>Ty</name><operator>-&gt;</operator><name>isSignedIntegerOrEnumerationType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>Exp</name> <operator>=</operator> <name>SMTConv</name><operator>::</operator><call><name>fromData</name><argument_list>(<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>SD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Solver</name><operator>-&gt;</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addStateConstraints</name><argument_list>(<argument><expr><name>State</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>isSat</name> <init>= <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>check</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>isSat</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>isSat</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Solver</name><operator>-&gt;</operator><name>getInterpretation</name></name><argument_list>(<argument><expr><name>Exp</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>NotExp</name> <operator>=</operator> <name>SMTConv</name><operator>::</operator><call><name>fromBinOp</name><argument_list>(
<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>, <argument><expr><name>BO_NE</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name><name>Ty</name><operator>-&gt;</operator><name>isBooleanType</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>mkBoolean</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getBoolValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>mkBitvector</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>, <argument><expr><call><name><name>Value</name><operator>.</operator><name>getBitWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Solver</name><operator>-&gt;</operator><name>addConstraint</name></name><argument_list>(<argument><expr><name>NotExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>isNotSat</name> <init>= <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>check</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>isNotSat</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>isNotSat</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>&amp;</operator><call><name><name>BVF</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

if (const SymbolCast *SC = dyn_cast&lt;SymbolCast&gt;(Sym</block></if></if_stmt>))</block> <block>{
<expr><name>SymbolRef</name> <name>CastSym</name> <operator>=</operator> <call><name><name>SC</name><operator>-&gt;</operator><name>getOperand</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>QualType</name> <name>CastTy</name> <operator>=</operator> <call><name><name>SC</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><call><name><name>CastTy</name><operator>-&gt;</operator><name>isVoidType</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><name>Value</name></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>Value</name> <operator>=</operator> <call><name>getSymVal</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>CastSym</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><call><name><name>BVF</name><operator>.</operator><name>Convert</name></name><argument_list>(<argument><expr><call><name><name>SC</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>BinarySymExpr</name> <modifier>*</modifier></type><name>BSE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BinarySymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><name>LHS</name></expr><operator>,</operator> <expr><operator>*</operator><name>RHS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>SymIntExpr</name> <modifier>*</modifier></type><name>SIE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymIntExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LHS</name> <operator>=</operator> <call><name>getSymVal</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name><name>SIE</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RHS</name> <operator>=</operator> <operator>&amp;</operator><call><name><name>SIE</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <name>IntSymExpr</name> <modifier>*</modifier></type><name>ISE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>IntSymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LHS</name> <operator>=</operator> <operator>&amp;</operator><call><name><name>ISE</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RHS</name> <operator>=</operator> <call><name>getSymVal</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name><name>ISE</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><specifier>const</specifier> <name>SymSymExpr</name> <modifier>*</modifier></type><name>SSM</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymSymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LHS</name> <operator>=</operator> <call><name>getSymVal</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name><name>SSM</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RHS</name> <operator>=</operator> <ternary><condition><expr><name>LHS</name></expr> ?</condition><then> <expr><call><name>getSymVal</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><call><name><name>SSM</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unsupported binary expression to get symbol value!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>LHS</name> <operator>||</operator> <operator>!</operator><name>RHS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>ConvertedLHS</name></expr><operator>,</operator> <expr><name>ConvertedRHS</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>LTy</name></decl>, <decl><type ref="prev"/><name>RTy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>ConvertedLHS</name></expr></argument>, <argument><expr><name>LTy</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>SMTConv</name><operator>::</operator><call><name>fixAPSInt</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><operator>*</operator><name>LHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>ConvertedRHS</name></expr></argument>, <argument><expr><name>RTy</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>SMTConv</name><operator>::</operator><call><name>fixAPSInt</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><operator>*</operator><name>RHS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SMTConv</name><operator>::</operator><call><name><name>doIntTypeConversion</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SMTConv</name><operator>::</operator><name>castAPSInt</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>Solver</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>ConvertedLHS</name></expr></argument>, <argument><expr><name>LTy</name></expr></argument>, <argument><expr><name>ConvertedRHS</name></expr></argument>, <argument><expr><name>RTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>BVF</name><operator>.</operator><name>evalAPSInt</name></name><argument_list>(<argument><expr><call><name><name>BSE</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConvertedLHS</name></expr></argument>, <argument><expr><name>ConvertedRHS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unsupported expression to get symbol value!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ProgramStateRef</name></type> <name>removeDeadBindings</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>SymbolReaper</name> <modifier>&amp;</modifier></type><name>SymReaper</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>CZ</name> <init>= <expr><name><name>State</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>CZFactory</name> <operator>=</operator> <name><name>State</name><operator>-&gt;</operator><name>get_context</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>CZ</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name><name>CZ</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>SymReaper</name><operator>.</operator><name>isDead</name></name><argument_list>(<argument><expr><name><name>I</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CZ</name> <operator>=</operator> <call><name><name>CZFactory</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>CZ</name></expr></argument>, <argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>State</name><operator>-&gt;</operator><name>set</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><name>CZ</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>printJson</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>, <argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>NL</name> <operator>=</operator> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>unsigned</name> <name>int</name> <name>Space</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>bool</name> <name>IsDot</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><name>ConstraintSMTType</name></type> <name>Constraints</name> <init>= <expr><name><name>State</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>Out</name></expr></argument>, <argument><expr><name>Space</name></expr></argument>, <argument><expr><name>IsDot</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\"constraints\": "</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Constraints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"null,"</literal> <operator>&lt;&lt;</operator> <name>NL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>Space</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="char">'['</literal> <operator>&lt;&lt;</operator> <name>NL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ConstraintSMTType</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Constraints</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>I</name> <operator>!=</operator> <call><name><name>Constraints</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>Out</name></expr></argument>, <argument><expr><name>Space</name></expr></argument>, <argument><expr><name>IsDot</name></expr></argument>)</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">"{ \"symbol\": \""</literal> <operator>&lt;&lt;</operator> <name><name>I</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\", \"range\": \""</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>Out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"\" }"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>Constraints</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Out</name> <operator>&lt;&lt;</operator> <name>NL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>Space</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Indent</name><argument_list>(<argument><expr><name>Out</name></expr></argument>, <argument><expr><name>Space</name></expr></argument>, <argument><expr><name>IsDot</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"],"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>haveEqualConstraints</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>S1</name></expr></argument>,
<argument><expr><name>ProgramStateRef</name> <name>S2</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><name><name>S1</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>==</operator> <name><name>S2</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>canReasonAbout</name><argument_list>(<argument><expr><name>SVal</name> <name>X</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>TI</name> <init>= <expr><call><name>getBasicVals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTargetInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>nonloc</name><operator>::</operator><name>SymbolVal</name></expr></argument>&gt;</argument_list></name></type> <name>SymVal</name> <init>= <expr><name><name>X</name><operator>.</operator><name>getAs</name></name><operator>&lt;</operator><name>nonloc</name><operator>::</operator><name>SymbolVal</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SymVal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SymExpr</name> <modifier>*</modifier></type><name>Sym</name> <init>= <expr><call><name><name>SymVal</name><operator>-&gt;</operator><name>getSymbol</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>Ty</name> <init>= <expr><call><name><name>Sym</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>Ty</name><operator>-&gt;</operator><name>isComplexType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Ty</name><operator>-&gt;</operator><name>isComplexIntegerType</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>Ty</name><operator>-&gt;</operator><name>isSpecificBuiltinType</name></name><argument_list>(<argument><expr><name>BuiltinType</name><operator>::</operator><name>LongDouble</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>&amp;</operator><call><name><name>TI</name><operator>.</operator><name>getLongDoubleFormat</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>x87DoubleExtended</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>&amp;</operator><call><name><name>TI</name><operator>.</operator><name>getLongDoubleFormat</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>PPCDoubleDouble</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Ty</name><operator>-&gt;</operator><name>isRealFloatingType</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>isFPSupported</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>SymbolData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SValBuilder</name> <modifier>&amp;</modifier></type><name>SVB</name> <init>= <expr><call><name>getSValBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>SymbolCast</name> <modifier>*</modifier></type><name>SC</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymbolCast</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>canReasonAbout</name><argument_list>(<argument><expr><call><name><name>SVB</name><operator>.</operator><name>makeSymbolVal</name></name><argument_list>(<argument><expr><call><name><name>SC</name><operator>-&gt;</operator><name>getOperand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>BinarySymExpr</name> <modifier>*</modifier></type><name>BSE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BinarySymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>SymIntExpr</name> <modifier>*</modifier></type><name>SIE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymIntExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>canReasonAbout</name><argument_list>(<argument><expr><call><name><name>SVB</name><operator>.</operator><name>makeSymbolVal</name></name><argument_list>(<argument><expr><call><name><name>SIE</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>IntSymExpr</name> <modifier>*</modifier></type><name>ISE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>IntSymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>canReasonAbout</name><argument_list>(<argument><expr><call><name><name>SVB</name><operator>.</operator><name>makeSymbolVal</name></name><argument_list>(<argument><expr><call><name><name>ISE</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>SymSymExpr</name> <modifier>*</modifier></type><name>SSE</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SymSymExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>canReasonAbout</name><argument_list>(<argument><expr><call><name><name>SVB</name><operator>.</operator><name>makeSymbolVal</name></name><argument_list>(<argument><expr><call><name><name>SSE</name><operator>-&gt;</operator><name>getLHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>canReasonAbout</name><argument_list>(<argument><expr><call><name><name>SVB</name><operator>.</operator><name>makeSymbolVal</name></name><argument_list>(<argument><expr><call><name><name>SSE</name><operator>-&gt;</operator><name>getRHS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unsupported expression to reason about!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>dump</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>protected</name><operator>:</operator>

<name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeExpr</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::SMTExprRef &amp;Exp</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name>checkModel</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isConstrainedTrue</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>State</name><operator>-&gt;</operator><name>add</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name>nullptr</name></expr>;</return>
}



virtual <decl_stmt><decl><type><name>void</name></type> <name>addStateConstraints</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>)</argument_list> const <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>CZ</name> <init>= <expr><name><name>State</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>CZ</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>IE</name> <init>= <expr><call><name><name>CZ</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <name>IE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name></expr></argument>&gt;</argument_list></name> <name>ASTs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SMTExprRef</name> <name>Constraint</name> <operator>=</operator> <name>I</name><operator>++</operator><operator>-&gt;</operator><name>second</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>I</name> <operator>!=</operator> <name>IE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Constraint</name> <operator>=</operator> <call><name><name>Solver</name><operator>-&gt;</operator><name>mkAnd</name></name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>, <argument><expr><name>I</name><operator>++</operator><operator>-&gt;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name><name>Solver</name><operator>-&gt;</operator><name>addConstraint</name></name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>ConditionTruthVal</name></type> <name>checkModel</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>, <argument><expr><name>SymbolRef</name> <name>Sym</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>SMTExprRef</name> <operator>&amp;</operator><name>Exp</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>NewState</name> <init>=
<expr><name><name>State</name><operator>-&gt;</operator><name>add</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>, <argument><expr><name>Exp</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <name>ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewState</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>ConstraintSMT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name> <init>= <expr><call><name><name>ID</name><operator>.</operator><name>ComputeHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>Cached</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Cached</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>Solver</name><operator>-&gt;</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addStateConstraints</name><argument_list>(<argument><expr><name>NewState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><call><name><name>Solver</name><operator>-&gt;</operator><name>check</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>res</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Cached</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <call><name>ConditionTruthVal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Cached</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <call><name>ConditionTruthVal</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name><name>Cached</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>ConditionTruthVal</name></expr></argument>&gt;</argument_list></name> <name>Cached</name></expr>;</expr_stmt>
};

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
