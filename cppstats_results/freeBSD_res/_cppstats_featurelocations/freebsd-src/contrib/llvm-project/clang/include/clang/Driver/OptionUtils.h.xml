<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/OptionUtils.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_OPTIONUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_OPTIONUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/OptSpecifier.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ArgList</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>getLastArgIntValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptSpecifier</name> <name>Id</name></expr></argument>, <argument><expr><name>int</name> <name>Default</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diags</name> <operator>=</operator> <name>nullptr</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>int</name></type> <name>getLastArgIntValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptSpecifier</name> <name>Id</name></expr></argument>, <argument><expr><name>int</name> <name>Default</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getLastArgIntValue</name><argument_list>(<argument><expr><name>Args</name></expr></argument>, <argument><expr><name>Id</name></expr></argument>, <argument><expr><name>Default</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getLastArgUInt64Value</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptSpecifier</name> <name>Id</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>Default</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diags</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>getLastArgUInt64Value</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptSpecifier</name> <name>Id</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>Default</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Base</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getLastArgUInt64Value</name><argument_list>(<argument><expr><name>Args</name></expr></argument>, <argument><expr><name>Id</name></expr></argument>, <argument><expr><name>Default</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
