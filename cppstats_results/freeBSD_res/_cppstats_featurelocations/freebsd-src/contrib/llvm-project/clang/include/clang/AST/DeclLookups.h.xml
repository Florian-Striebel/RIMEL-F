<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclLookups.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLLOOKUPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLLOOKUPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclContextInternals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExternalASTSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<expr_stmt><expr><name>class</name> <name>DeclContext</name><operator>::</operator><name>all_lookups_iterator</name> <block>{
<expr><name>StoredDeclsMap</name><operator>::</operator><name>iterator</name> <name>It</name></expr>, <expr><name>End</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>value_type</name> <operator>=</operator> <name>lookup_result</name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>lookup_result</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>lookup_result</name></expr>;
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>std</name><operator>::</operator><name>ptrdiff_t</name></expr>;

<expr><call><name>all_lookups_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>all_lookups_iterator</name><argument_list>(<argument>StoredDeclsMap::iterator It</argument>,
<argument>StoredDeclsMap::iterator End</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>It</name><argument_list>(<argument><expr><name>It</name></expr></argument>)</argument_list></call></expr>, <macro><name>End</name><argument_list>(<argument>End</argument>)</argument_list></macro> <expr><block>{}</block>

<name>DeclarationName</name> <macro><name>getLookupName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>It</name><operator>-&gt;</operator><name>first</name></name></expr>;</return> }</block>

<name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>It</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>getLookupResult</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>) <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>It</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>getLookupResult</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>all_lookups_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{



<do>do <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>It</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> while (It != End &amp;&amp;
It-&gt;first == DeclarationName::getUsingDirectiveName(</block></do>))</block></block></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>all_lookups_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>all_lookups_iterator</name> <call><name>tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>all_lookups_iterator</name> <name>x</name><operator>,</operator> <name>all_lookups_iterator</name> <name>y</name><operator>)</operator> <block>{
<return>return <expr><name><name>x</name><operator>.</operator><name>It</name></name> <operator>==</operator> <name><name>y</name><operator>.</operator><name>It</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>all_lookups_iterator</name> <name>x</name><operator>,</operator> <name>all_lookups_iterator</name> <name>y</name><operator>)</operator> <block>{
<return>return <expr><name><name>x</name><operator>.</operator><name>It</name></name> <operator>!=</operator> <name><name>y</name><operator>.</operator><name>It</name></name></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>DeclContext</name><operator>::</operator><name>lookups_range</name> <name>DeclContext</name><operator>::</operator><macro><name>lookups</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>DeclContext</name> <operator>*</operator><name>Primary</name> <operator>=</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getPrimaryContext</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Primary</name><operator>-&gt;</operator><name>hasExternalVisibleStorage</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getParentASTContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExternalSource</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>completeVisibleDeclsMap</name><argument_list>(<argument><expr><name>Primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<decl><type><name>StoredDeclsMap</name> <modifier>*</modifier></type><name>Map</name> <init>= <expr><call><name><name>Primary</name><operator>-&gt;</operator><name>buildLookup</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lookups_range</name><argument_list>(<argument><expr><call><name>all_lookups_iterator</name><argument_list>(<argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>all_lookups_iterator</name><argument_list>(<argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>lookups_range</name><argument_list>(<argument><expr><call><name>all_lookups_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>all_lookups_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

inline <expr_stmt><expr><name>DeclContext</name><operator>::</operator><name>lookups_range</name>
<name>DeclContext</name><operator>::</operator><macro><name>noload_lookups</name><argument_list>(<argument>bool PreserveInternalState</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>DeclContext</name> <operator>*</operator><name>Primary</name> <operator>=</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclContext</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getPrimaryContext</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PreserveInternalState</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>-&gt;</operator><name>loadLazyLocalLexicalLookups</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<decl><type><name>StoredDeclsMap</name> <modifier>*</modifier></type><name>Map</name> <init>= <expr><call><name><name>Primary</name><operator>-&gt;</operator><name>getLookupPtr</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lookups_range</name><argument_list>(<argument><expr><call><name>all_lookups_iterator</name><argument_list>(<argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>all_lookups_iterator</name><argument_list>(<argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Map</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>lookups_range</name><argument_list>(<argument><expr><call><name>all_lookups_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>all_lookups_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
