<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/TemplateDeduction.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_TEMPLATEDEDUCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_TEMPLATEDEDUCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Ownership.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/SemaConcept.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConcept.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclAccessPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<struct_decl>struct <name>DeducedPack</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>sema</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>TemplateDeductionInfo</name> <block>{<block_content>

<decl_stmt><decl><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>Deduced</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>HasSFINAEDiagnostic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>DeducedDepth</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ExplicitArgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>SuppressedDiagnostics</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>TemplateDeductionInfo</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>unsigned DeducedDepth = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DeducedDepth</name><argument_list>(<argument>DeducedDepth</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>TemplateDeductionInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateDeductionInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TemplateDeductionInfo</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TemplateDeductionInfo</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<enum>enum <name>ForBaseTag</name> <block>{ <decl><name>ForBase</name></decl> }</block>;</enum>


<expr_stmt><expr><call><name>TemplateDeductionInfo</name><argument_list>(<argument><expr><name>ForBaseTag</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TemplateDeductionInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Deduced</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>Deduced</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Loc</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>Loc</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DeducedDepth</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>DeducedDepth</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ExplicitArgs</name><argument_list>(<argument>Info.ExplicitArgs</argument>)</argument_list></macro> <expr><block>{}</block>



<name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Loc</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getDeducedDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DeducedDepth</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumExplicitArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExplicitArgs</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>take</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>Result</name> <init>= <expr><name>Deduced</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Deduced</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>takeSFINAEDiagnostic</name><parameter_list>(<parameter><decl><type><name>PartialDiagnosticAt</name> <modifier>&amp;</modifier></type><name>PD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>HasSFINAEDiagnostic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PD</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>PD</name><operator>.</operator><name>second</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearSFINAEDiagnostic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clearSFINAEDiagnostic</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>HasSFINAEDiagnostic</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>PartialDiagnosticAt</name> <operator>&amp;</operator><macro><name>peekSFINAEDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasSFINAEDiagnostic</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setExplicitArgs</name><parameter_list>(<parameter><decl><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>NewDeduced</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Deduced</name> <operator>=</operator> <name>NewDeduced</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ExplicitArgs</name> <operator>=</operator> <call><name><name>Deduced</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>NewDeduced</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Deduced</name> <operator>=</operator> <name>NewDeduced</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>hasSFINAEDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HasSFINAEDiagnostic</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>addSFINAEDiagnostic</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>PartialDiagnostic</name></type> <name>PD</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>HasSFINAEDiagnostic</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>PD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>HasSFINAEDiagnostic</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>addSuppressedDiagnostic</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>PartialDiagnostic</name></type> <name>PD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>HasSFINAEDiagnostic</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>PD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>using</name></type> <name>diag_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>diag_iterator</name> <macro><name>diag_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>diag_iterator</name> <macro><name>diag_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>SuppressedDiagnostics</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>















<decl_stmt><decl><type><name>TemplateParameter</name></type> <name>Param</name></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>TemplateArgument</name></type> <name>FirstArg</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>TemplateArgument</name></type> <name>SecondArg</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>CallArgIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DeducedPack</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>PendingDeducedPacks</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ConstraintSatisfaction</name></type> <name>AssociatedConstraintsSatisfaction</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>



<struct>struct <name>DeductionFailureInfo</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Result</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HasDiagnostic</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>


<macro><name>alignas</name><argument_list>(<argument>PartialDiagnosticAt</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>Diagnostic</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartialDiagnosticAt</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>



<function_decl><type><name>PartialDiagnosticAt</name> <modifier>*</modifier></type><name>getSFINAEDiagnostic</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>TemplateParameter</name></type> <name>getTemplateParameter</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>TemplateArgumentList</name> <modifier>*</modifier></type><name>getTemplateArgumentList</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>*</modifier></type><name>getFirstArg</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>*</modifier></type><name>getSecondArg</name><parameter_list>()</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getCallArgIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>








<struct>struct <name>TemplateSpecCandidate</name> <block>{


<decl_stmt><decl><type><name>DeclAccessPair</name></type> <name>FoundDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Specialization</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DeductionFailureInfo</name></type> <name>DeductionFailure</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>DeclAccessPair</name></type> <name>Found</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Spec</name></decl></parameter>, <parameter><decl><type><name>DeductionFailureInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FoundDecl</name> <operator>=</operator> <name>Found</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Specialization</name> <operator>=</operator> <name>Spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DeductionFailure</name> <operator>=</operator> <name>Info</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>NoteDeductionFailure</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ForTakingAddress</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>TemplateSpecCandidateSet</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TemplateSpecCandidate</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>Candidates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ForTakingAddress</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>destroyCandidates</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>TemplateSpecCandidateSet</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>bool ForTakingAddress = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ForTakingAddress</name><argument_list>(<argument>ForTakingAddress</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>TemplateSpecCandidateSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateSpecCandidateSet</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TemplateSpecCandidateSet</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TemplateSpecCandidateSet</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>TemplateSpecCandidateSet</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>destroyCandidates</name><argument_list>()</argument_list></call></expr>; }</block>

<name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TemplateSpecCandidate</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Candidates</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Candidates</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Candidates</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>TemplateSpecCandidate</name> <modifier>&amp;</modifier></type><name>addCandidate</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Candidates</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Candidates</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>NoteCandidates</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>NoteCandidates</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>TemplateSpecCandidateSet</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>NoteCandidates</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
