<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ContinuousRangeMap.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_CONTINUOUSRANGEMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_CONTINUOUSRANGEMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>











<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Int</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>, <argument><expr><name>unsigned</name> <name>InitialCapacity</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ContinuousRangeMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Int</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>value_type</name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_reference</name> <init>= <expr><specifier>const</specifier> <name>value_type</name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>value_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_pointer</name> <init>= <expr><specifier>const</specifier> <name>value_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>Representation</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>InitialCapacity</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Representation</name></type> <name>Rep</name></decl>;</decl_stmt>

<struct>struct <name>Compare</name> <block>{
<expr_stmt><expr><name>bool</name> <macro><name>operator</name> <argument_list>()</argument_list></macro><operator>(</operator><name>const_reference</name> <name>L</name><operator>,</operator> <name>Int</name> <name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>L</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name>R</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name> <argument_list>()</argument_list></macro><operator>(</operator><name>Int</name> <name>L</name><operator>,</operator> <name>const_reference</name> <name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>L</name> <operator>&lt;</operator> <name><name>R</name><operator>.</operator><name>first</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name> <argument_list>()</argument_list></macro><operator>(</operator><name>Int</name> <name>L</name><operator>,</operator> <name>Int</name> <name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>operator</name> <argument_list>()</argument_list></macro><operator>(</operator><name>const_reference</name> <name>L</name><operator>,</operator> <name>const_reference</name> <name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>L</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>R</name><operator>.</operator><name>first</name></name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>value_type</name> <modifier>&amp;</modifier></type><name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Rep</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Rep</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Rep</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Rep</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>&lt;</operator> <name><name>Val</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Must insert keys in order."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Rep</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>insertOrReplace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>value_type</name> <modifier>&amp;</modifier></type><name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>iterator</name></type> <name>I</name> <init>= <expr><name>llvm</name><operator>::</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>Rep</name></expr></argument>, <argument><expr><name>Val</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>I</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name><name>Val</name><operator>.</operator><name>first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>Val</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>Rep</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>typename</name> <name>Representation</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>typename</name> <name>Representation</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>iterator</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>Int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>iterator</name></type> <name>I</name> <init>= <expr><name>llvm</name><operator>::</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>Rep</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <call><name><name>Rep</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>I</name></expr>;</expr_stmt>
<return>return <expr><name>I</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>const_iterator</name></type> <name>find</name><argument_list>(<argument><expr><name>Int</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>ContinuousRangeMap</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>find</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>reference</name></type> <name>back</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_reference</name> <macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Rep</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Builder</name> <block>{<block_content>
<decl_stmt><decl><type><name>ContinuousRangeMap</name> <modifier>&amp;</modifier></type><name>Self</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Builder</name><argument_list>(<argument><expr><name>ContinuousRangeMap</name> <operator>&amp;</operator><name>Self</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Self</name><argument_list>(<argument>Self</argument>)</argument_list></macro> <block>{}</block>
<call><name>Builder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Builder</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Builder</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Builder</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Builder</name><argument_list>()</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><call><name>sort</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Rep</name></name></expr></argument>, <argument><expr><call><name>Compare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Self</name><operator>.</operator><name>Rep</name><operator>.</operator><name>erase</name></name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name>unique</name><argument_list>(
<argument><expr><call><name><name>Self</name><operator>.</operator><name>Rep</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Self</name><operator>.</operator><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><index>[]</index><operator>(</operator><name>const_reference</name> <name>A</name><operator>,</operator> <name>const_reference</name> <name>B</name><operator>)</operator> <block>{


<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>A</name> <operator>==</operator> <name>B</name> <operator>||</operator> <name><name>A</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name><name>B</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"ContinuousRangeMap::Builder given non-unique keys"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>A</name> <operator>==</operator> <name>B</name></expr>;</return>
}</block></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Self</name><operator>.</operator><name>Rep</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>insert</name><argument_list>(<argument>const value_type &amp;Val</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Self</name><operator>.</operator><name>Rep</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Builder</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
