<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/Compilation.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_COMPILATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_COMPILATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DerivedArgList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputArgList</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ToolChain</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Compilation</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Driver</name> <modifier>&amp;</modifier></type><name>TheDriver</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>ToolChain</name> <modifier>&amp;</modifier></type><name>DefaultToolChain</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ActiveOffloadMask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<name>OrderedOffloadingToolchains</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>*</operator><name>Args</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator><name>TranslatedArgs</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Action</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>AllActions</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>ActionList</name></type> <name>Actions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>JobList</name></type> <name>Jobs</name></decl>;</decl_stmt>



<struct>struct <macro><name>TCArgsKey</name></macro> <name>final</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ToolChain</name> <modifier>*</modifier></type><name>TC</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>BoundArch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>DeviceOffloadKind</name> <operator>=</operator> <name>Action</name><operator>::</operator><name>OFK_None</name></expr>;</expr_stmt>

<macro><name>TCArgsKey</name><argument_list>(<argument>const ToolChain *TC</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>TC</name><argument_list>(<argument><expr><name>TC</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BoundArch</name><argument_list>(<argument><expr><name>BoundArch</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DeviceOffloadKind</name><argument_list>(<argument>DeviceOffloadKind</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>TCArgsKey</name> <operator>&amp;</operator><name>K</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>TC</name> <operator>&lt;</operator> <name><name>K</name><operator>.</operator><name>TC</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>TC</name> <operator>==</operator> <name><name>K</name><operator>.</operator><name>TC</name></name> <operator>&amp;&amp;</operator> <name>BoundArch</name> <operator>&lt;</operator> <name><name>K</name><operator>.</operator><name>BoundArch</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>TC</name> <operator>==</operator> <name><name>K</name><operator>.</operator><name>TC</name></name> <operator>&amp;&amp;</operator> <name>BoundArch</name> <operator>==</operator> <name><name>K</name><operator>.</operator><name>BoundArch</name></name> <operator>&amp;&amp;</operator>
<name>DeviceOffloadKind</name> <operator>&lt;</operator> <name><name>K</name><operator>.</operator><name>DeviceOffloadKind</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
}</block>
<decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>TCArgsKey</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>TCArgs</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <name>TempFiles</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ArgStringMap</name></type> <name>ResultFiles</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ArgStringMap</name></type> <name>FailureResultFiles</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Redirects</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>PostCallback</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ForDiagnostics</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ContainsError</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ForceKeepTempFiles</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>Compilation</name><argument_list>(<argument>const Driver &amp;D</argument>, <argument>const ToolChain &amp;DefaultToolChain</argument>,
<argument>llvm::opt::InputArgList *Args</argument>,
<argument>llvm::opt::DerivedArgList *TranslatedArgs</argument>, <argument>bool ContainsError</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Compilation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><macro><name>getDriver</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheDriver</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><macro><name>getDefaultToolChain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefaultToolChain</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>isOffloadingHostKind</name><argument_list>(<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>Kind</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>ActiveOffloadMask</name> <operator>&amp;</operator> <name>Kind</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>const_offload_toolchains_iterator</name> <init>=
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_offload_toolchains_range</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>const_offload_toolchains_iterator</name></expr></argument>,
<argument><expr><name>const_offload_toolchains_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>Kind</name></expr></argument>&gt;</argument_list></name>
<name>const_offload_toolchains_range</name> <macro><name>getOffloadToolChains</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>OrderedOffloadingToolchains</name><operator>.</operator><name>equal_range</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>Kind</name></expr></argument>&gt;</argument_list></name> <name>bool</name> <macro><name>hasOffloadToolChain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>OrderedOffloadingToolchains</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name><name>OrderedOffloadingToolchains</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>Kind</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>ToolChain</name> <operator>*</operator><macro><name>getSingleOffloadToolChain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>TCs</name> <operator>=</operator> <call><name><name>getOffloadToolChains</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>TCs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name><name>TCs</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"No tool chains of the selected kind exist!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name><name>TCs</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>TCs</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"More than one tool chain of the this kind exist."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>TCs</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addOffloadDeviceToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>*</operator><name>DeviceToolChain</name></expr></argument>,
<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>OffloadKind</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>OffloadKind</name> <operator>!=</operator> <name>Action</name><operator>::</operator><name>OFK_Host</name> <operator>&amp;&amp;</operator> <name>OffloadKind</name> <operator>!=</operator> <name>Action</name><operator>::</operator><name>OFK_None</name> <operator>&amp;&amp;</operator>
<literal type="string">"This is not a device tool chain!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ActiveOffloadMask</name> <operator>|=</operator> <name>OffloadKind</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>OrderedOffloadingToolchains</name><operator>.</operator><name>insert</name></name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>OffloadKind</name></expr></argument>, <argument><expr><name>DeviceToolChain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <operator>&amp;</operator><macro><name>getInputArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>Args</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><macro><name>getArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>TranslatedArgs</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><macro><name>getArgs</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>TranslatedArgs</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ActionList</name> <modifier>&amp;</modifier></type><name>getActions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Actions</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ActionList</name> <operator>&amp;</operator><macro><name>getActions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Actions</name></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>*</modifier></type><name>MakeAction</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Arg</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>RawPtr</name> <init>= <expr><name>new</name> <call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>AllActions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Action</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RawPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RawPtr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>JobList</name> <modifier>&amp;</modifier></type><name>getJobs</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Jobs</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>JobList</name> <operator>&amp;</operator><macro><name>getJobs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Jobs</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addCommand</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Command</name></expr></argument>&gt;</argument_list></name> <name>C</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Jobs</name><operator>.</operator><name>addJob</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><macro><name>getTempFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TempFiles</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ArgStringMap</name> <operator>&amp;</operator><macro><name>getResultFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ResultFiles</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ArgStringMap</name> <operator>&amp;</operator><macro><name>getFailureResultFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FailureResultFiles</name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>setPostCallback</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CB</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>PostCallback</name> <operator>=</operator> <name>CB</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getSysRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator>
<macro><name>getArgsForToolChain</name><argument_list>(<argument>const ToolChain *TC</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro></expr>;</expr_stmt>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addTempFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>TempFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Name</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addResultFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JobAction</name> <modifier>*</modifier></type><name>JA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ResultFiles</name><index>[<expr><name>JA</name></expr>]</index></name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>Name</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addFailureResultFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JobAction</name> <modifier>*</modifier></type><name>JA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>FailureResultFiles</name><index>[<expr><name>JA</name></expr>]</index></name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>Name</name></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>bool</name></type> <name>CleanupFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>File</name></expr></argument>, <argument><expr><name>bool</name> <name>IssueErrors</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>CleanupFileList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>Files</name></expr></argument>,
<argument><expr><name>bool</name> <name>IssueErrors</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>CleanupFileMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArgStringMap</name> <operator>&amp;</operator><name>Files</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>JobAction</name> <operator>*</operator><name>JA</name></expr></argument>,
<argument><expr><name>bool</name> <name>IssueErrors</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>ExecuteCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Command</name> <operator>*</operator><operator>&amp;</operator><name>FailingCommand</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>ExecuteJobs</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>JobList</name> <operator>&amp;</operator><name>Jobs</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Command</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FailingCommands</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>initCompilationForDiagnostics</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isForDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ForDiagnostics</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>containsError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ContainsError</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setContainsError</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ContainsError</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>






<function_decl><type><name>void</name></type> <name>Redirect</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>Redirects</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
