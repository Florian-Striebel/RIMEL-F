<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CurrentSourceLocExprScope.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_CURRENT_SOURCE_LOC_EXPR_SCOPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_CURRENT_SOURCE_LOC_EXPR_SCOPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CurrentSourceLocExprScope</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>DefaultExpr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>



<decl_stmt><decl><type><name>class</name></type> <name>SourceLocExprScopeGuard</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getDefaultExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefaultExpr</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>explicit</name></type> <name>CurrentSourceLocExprScope</name><parameter_list>()</parameter_list> <init>= <expr/>default</init>;</function_decl>

<label><name>private</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>CurrentSourceLocExprScope</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>DefaultExpr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DefaultExpr</name><argument_list>(<argument>DefaultExpr</argument>)</argument_list></macro> <block>{}</block>

<call><name>CurrentSourceLocExprScope</name><argument_list>(<argument><expr><name>CurrentSourceLocExprScope</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>CurrentSourceLocExprScope</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><name>CurrentSourceLocExprScope</name> <specifier>const</specifier> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>class</name> <name>CurrentSourceLocExprScope</name><operator>::</operator><name>SourceLocExprScopeGuard</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SourceLocExprScopeGuard</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>DefaultExpr</name></expr></argument>,
<argument><expr><name>CurrentSourceLocExprScope</name> <operator>&amp;</operator><name>Current</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Current</name><argument_list>(<argument><expr><name>Current</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>OldVal</name><argument_list>(<argument><expr><name>Current</name></expr></argument>)</argument_list></call></expr>, <macro><name>Enable</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>DefaultExpr</name> <operator>&amp;&amp;</operator> <literal type="string">"the new scope should not be empty"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Enable</name> <operator>=</operator> <operator>(</operator><call><name><name>Current</name><operator>.</operator><name>getDefaultExpr</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <call><name>CurrentSourceLocExprScope</name><argument_list>(<argument><expr><name>DefaultExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<operator>~</operator><macro><name>SourceLocExprScopeGuard</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Enable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <name>OldVal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<call><name>SourceLocExprScopeGuard</name><argument_list>(<argument><expr><name>SourceLocExprScopeGuard</name> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>SourceLocExprScopeGuard</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>SourceLocExprScopeGuard</name> <specifier>const</specifier> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;

<expr><name>CurrentSourceLocExprScope</name> <operator>&amp;</operator><name>Current</name></expr>;
<expr><name>CurrentSourceLocExprScope</name> <name>OldVal</name></expr>;
<expr><name>bool</name> <name>Enable</name></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
