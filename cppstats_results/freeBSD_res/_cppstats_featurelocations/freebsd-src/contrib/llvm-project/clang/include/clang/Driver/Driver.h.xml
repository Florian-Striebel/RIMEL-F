<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/Driver.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_DRIVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_DRIVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Phases.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Arg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/ArgList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/StringSaver.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Triple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Compilation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InputInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JobList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JobAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SanitizerArgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ToolChain</name></decl>;</decl_stmt>


<enum>enum <name>LTOKind</name> <block>{
<decl><name>LTOK_None</name></decl>,
<decl><name>LTOK_Full</name></decl>,
<decl><name>LTOK_Thin</name></decl>,
<decl><name>LTOK_Unknown</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>Driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name></type> <name>VFS</name></decl>;</decl_stmt>

<enum>enum <name>DriverMode</name> <block>{
<decl><name>GCCMode</name></decl>,
<decl><name>GXXMode</name></decl>,
<decl><name>CPPMode</name></decl>,
<decl><name>CLMode</name></decl>,
<decl><name>FlangMode</name></decl>
}</block> <decl><name>Mode</name></decl>;</enum>

<enum>enum <name>SaveTempsMode</name> <block>{
<decl><name>SaveTempsNone</name></decl>,
<decl><name>SaveTempsCwd</name></decl>,
<decl><name>SaveTempsObj</name></decl>
}</block> <decl><name>SaveTemps</name></decl>;</enum>

<enum>enum <name>BitcodeEmbedMode</name> <block>{
<decl><name>EmbedNone</name></decl>,
<decl><name>EmbedMarker</name></decl>,
<decl><name>EmbedBitcode</name></decl>
}</block> <decl><name>BitcodeEmbed</name></decl>;</enum>


<decl_stmt><decl><type><name>LTOKind</name></type> <name>LTOMode</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LTOKind</name></type> <name>OffloadLTOMode</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>OpenMPRuntimeKind</name> <block>{


<decl><name>OMPRT_Unknown</name></decl>,



<decl><name>OMPRT_OMP</name></decl>,




<decl><name>OMPRT_GOMP</name></decl>,




<decl><name>OMPRT_IOMP5</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>DiagnosticBuilder</name></type> <name>Diag</name><argument_list>(<argument><expr><name>unsigned</name> <name>DiagID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>.</operator><name>Report</name></name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<label><name>public</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Dir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ClangExecutable</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ParsedClangName</name></type> <name>ClangNameParts</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>InstalledDir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ResourceDir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>SystemConfigDir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>UserConfigDir</name></expr>;</expr_stmt>





<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>prefix_list</name>;</typedef>
<decl_stmt><decl><type><name>prefix_list</name></type> <name>PrefixDirs</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>SysRoot</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DyldPrefix</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DriverTitle</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>HostBits</name></expr><operator>,</operator> <expr><name>HostMachine</name></expr><operator>,</operator> <expr><name>HostSystem</name></expr><operator>,</operator> <expr><name>HostRelease</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CCPrintStatReportFilename</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CCPrintOptionsFilename</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CCPrintHeadersFilename</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CCLogDiagnosticsFilename</name></expr>;</expr_stmt>


<typedef>typedef <type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>types</name><operator>::</operator><name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type>
<name>InputList</name>;</typedef>


<expr_stmt><expr><name>bool</name> <macro><name>CCCIsCXX</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name> <operator>==</operator> <name>GXXMode</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>CCCIsCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name> <operator>==</operator> <name>CPPMode</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>CCCIsCC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name> <operator>==</operator> <name>GCCMode</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>IsCLMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name> <operator>==</operator> <name>CLMode</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>IsFlangMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Mode</name> <operator>==</operator> <name>FlangMode</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>CCCPrintBindings</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CCPrintOptions</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CCPrintHeaders</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>CCLogDiagnostics</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>CCGenDiagnostics</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CCPrintProcessStats</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>CC1ToolFunc</name>)<parameter_list>(<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ArgV</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>CC1ToolFunc</name></type> <name>CC1Main</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>TargetTriple</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CCCGenericGCCName</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ConfigFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>Alloc</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringSaver</name> <name>Saver</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name></expr></argument>&gt;</argument_list></name> <name>CfgOptions</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name></expr></argument>&gt;</argument_list></name> <name>CLOptions</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CheckInputsExist</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>



<decl_stmt><decl><type><name>unsigned</name></type> <name>GenReproducer</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressMissingInputWarning</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ToolChain</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ToolChains</name></expr>;</expr_stmt>

<label><name>private</name>:</label>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateInputArgs</name><argument_list>(<argument>const llvm::opt::InputArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>phases</name><operator>::</operator><name>ID</name> <macro><name>getFinalPhase</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;DAL</argument>,
<argument>llvm::opt::Arg **FinalPhaseArg = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>handleArguments</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputList</name> <operator>&amp;</operator><name>Inputs</name></expr></argument>, <argument><expr><name>ActionList</name> <operator>&amp;</operator><name>Actions</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>setUpResponseFiles</name><parameter_list>(<parameter><decl><type><name>Compilation</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>Command</name> <modifier>&amp;</modifier></type><name>Cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>generatePrefixedToolNames</name><argument_list>(<argument><expr><name>StringRef</name> <name>Tool</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Names</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>












<function_decl><type><name>bool</name></type> <name>getCrashDiagnosticFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>ReproCrashFilename</name></decl></parameter>,
<parameter><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">128</literal></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>CrashDiagDir</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>



<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetResourcesPath</name><argument_list>(<argument>StringRef BinaryPath</argument>,
<argument>StringRef CustomResourceDir = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<macro><name>Driver</name><argument_list>(<argument>StringRef ClangExecutable</argument>, <argument>StringRef TargetTriple</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>, <argument>std::string Title = <literal type="string">"clang LLVM compiler"</literal></argument>,
<argument>IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; VFS = nullptr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getCCCGenericGCCName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CCCGenericGCCName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getConfigFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ConfigFile</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>OptTable</name> <operator>&amp;</operator><macro><name>getOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDriverOptTable</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><macro><name>getDiags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Diags</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><macro><name>getVFS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>VFS</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>getCheckInputsExist</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CheckInputsExist</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCheckInputsExist</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CheckInputsExist</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setTargetAndMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParsedClangName</name> <modifier>&amp;</modifier></type><name>TM</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ClangNameParts</name> <operator>=</operator> <name>TM</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getTitle</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>DriverTitle</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setTitle</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>Value</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>DriverTitle</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getTargetTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TargetTriple</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClangProgramPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ClangExecutable</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getInstalledDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>InstalledDir</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>InstalledDir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>Dir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>void</name></type> <name>setInstalledDir</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>InstalledDir</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isSaveTempsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SaveTemps</name> <operator>!=</operator> <name>SaveTempsNone</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSaveTempsObj</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SaveTemps</name> <operator>==</operator> <name>SaveTempsObj</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>embedBitcodeEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BitcodeEmbed</name> <operator>!=</operator> <name>EmbedNone</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>embedBitcodeInObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>BitcodeEmbed</name> <operator>==</operator> <name>EmbedBitcode</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>embedBitcodeMarkerOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>BitcodeEmbed</name> <operator>==</operator> <name>EmbedMarker</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>OpenMPRuntimeKind</name></type> <name>getOpenMPRuntime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<function_decl><type><name>void</name></type> <name>CreateOffloadingDeviceToolChains</name><parameter_list>(<parameter><decl><type><name>Compilation</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>InputList</name> <modifier>&amp;</modifier></type><name>Inputs</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>Compilation</name> <modifier>*</modifier></type><name>BuildCompilation</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>InputArgList</name> <macro><name>ParseArgStrings</name><argument_list>(<argument>ArrayRef&lt;const char *&gt; Args</argument>,
<argument>bool IsClCompatMode</argument>,
<argument>bool &amp;ContainsError</argument>)</argument_list></macro></expr>;</expr_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>BuildInputs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>InputList</name> <operator>&amp;</operator><name>Inputs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>BuildActions</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputList</name> <operator>&amp;</operator><name>Inputs</name></expr></argument>, <argument><expr><name>ActionList</name> <operator>&amp;</operator><name>Actions</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>BuildUniversalActions</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputList</name> <operator>&amp;</operator><name>BAInputs</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>DiagnoseInputExistence</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Value</name></expr></argument>, <argument><expr><name>types</name><operator>::</operator><name>ID</name> <name>Ty</name></expr></argument>,
<argument><expr><name>bool</name> <name>TypoCorrect</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>BuildJobs</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<function_decl><type><name>int</name></type> <name>ExecuteCompilation</name><parameter_list>(<parameter><decl><type><name>Compilation</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Command</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>FailingCommands</name></decl></parameter>)</parameter_list>;</function_decl>



<struct>struct <name>CompilationDiagnosticReport</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>TemporaryFiles</name></expr>;</expr_stmt>
}</block>;</struct>




<function_decl><type><name>void</name></type> <name>generateCompilationDiagnostics</name><parameter_list>(
<parameter><decl><type><name>Compilation</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Command</name> <modifier>&amp;</modifier></type><name>FailingCommand</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>AdditionalInformation</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>CompilationDiagnosticReport</name> <modifier>*</modifier></type><name>GeneratedReport</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>PrintActions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>PrintHelp</name><argument_list>(<argument><expr><name>bool</name> <name>ShowHidden</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>PrintVersion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetFilePath</name><argument_list>(<argument>StringRef Name</argument>, <argument>const ToolChain &amp;TC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetProgramPath</name><argument_list>(<argument>StringRef Name</argument>, <argument>const ToolChain &amp;TC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>HandleAutocompletions</name><argument_list>(<argument><expr><name>StringRef</name> <name>PassedFlags</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>HandleImmediateArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Compilation</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>Action</name> <modifier>*</modifier></type><name>ConstructPhaseAction</name><argument_list>(
<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><name>phases</name><operator>::</operator><name>ID</name> <name>Phase</name></expr></argument>,
<argument><expr><name>Action</name> <operator>*</operator><name>Input</name></expr></argument>,
<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>TargetDeviceOffloadKind</name> <operator>=</operator> <name>Action</name><operator>::</operator><name>OFK_None</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>InputInfo</name></type>
<name>BuildJobsForAction</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>*</operator><name>TC</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>BoundArch</name></expr></argument>, <argument><expr><name>bool</name> <name>AtTopLevel</name></expr></argument>, <argument><expr><name>bool</name> <name>MultipleArchs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>LinkingOutput</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>InputInfo</name></expr></argument>&gt;</argument_list></name>
<operator>&amp;</operator><name>CachedResults</name></expr></argument>,
<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>TargetDeviceOffloadKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getDefaultImageName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetNamedOutputPath</name><argument_list>(<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>JobAction</name> <operator>&amp;</operator><name>JA</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BaseInput</name></expr></argument>, <argument><expr><name>StringRef</name> <name>BoundArch</name></expr></argument>,
<argument><expr><name>bool</name> <name>AtTopLevel</name></expr></argument>, <argument><expr><name>bool</name> <name>MultipleArchs</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>NormalizedTriple</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetTemporaryPath</name><argument_list>(<argument>StringRef Prefix</argument>, <argument>StringRef Suffix</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetTemporaryDirectory</name><argument_list>(<argument>StringRef Prefix</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetClPchPath</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>StringRef BaseName</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ShouldUseClangCompiler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JobAction</name> <operator>&amp;</operator><name>JA</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ShouldUseFlangCompiler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JobAction</name> <operator>&amp;</operator><name>JA</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ShouldEmitStaticLibrary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isUsingLTO</name><argument_list>(<argument><expr><name>bool</name> <name>IsOffload</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getLTOMode</name><argument_list>(<argument><expr><name>IsOffload</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTOK_None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>LTOKind</name></type> <name>getLTOMode</name><argument_list>(<argument><expr><name>bool</name> <name>IsOffload</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>IsOffload</name></expr> ?</condition><then> <expr><name>OffloadLTOMode</name></expr> </then><else>: <expr><name>LTOMode</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>




<function_decl><type><name>bool</name></type> <name>loadConfigFile</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>readConfigFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FileName</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>setDriverMode</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>DriverModeValue</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>setLTOMode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>ToolChain</name> <modifier>&amp;</modifier></type><name>getToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getIncludeExcludeOptionFlagMasks</name><argument_list>(<argument>bool IsClCompatMode</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>InputInfo</name></type> <name>BuildJobsForActionNoCache</name><argument_list>(
<argument><expr><name>Compilation</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>*</operator><name>TC</name></expr></argument>, <argument><expr><name>StringRef</name> <name>BoundArch</name></expr></argument>,
<argument><expr><name>bool</name> <name>AtTopLevel</name></expr></argument>, <argument><expr><name>bool</name> <name>MultipleArchs</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>LinkingOutput</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>InputInfo</name></expr></argument>&gt;</argument_list></name>
<operator>&amp;</operator><name>CachedResults</name></expr></argument>,
<argument><expr><name>Action</name><operator>::</operator><name>OffloadKind</name> <name>TargetDeviceOffloadKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>







<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetReleaseVersion</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Major</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Minor</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Micro</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>HadExtra</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetReleaseVersion</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>,
<parameter><decl><type><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></type> <name>Digits</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>getDefaultModuleCachePath</name><parameter_list>(<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isOptimizationLevelFast</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>willEmitRemarks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getDriverMode</name><argument_list>(<argument>StringRef ProgName</argument>, <argument>ArrayRef&lt;const char *&gt; Args</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>IsClangCL</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>DriverMode</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
