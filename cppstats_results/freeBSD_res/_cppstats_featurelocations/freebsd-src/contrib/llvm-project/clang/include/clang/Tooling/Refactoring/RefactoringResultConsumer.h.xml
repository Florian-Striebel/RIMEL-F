<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_RESULT_CONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_RESULT_CONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/AtomicChange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/Rename/SymbolOccurrences.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>RefactoringResultConsumer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>RefactoringResultConsumer</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>void</name> <macro><name>handleError</name><argument_list>(<argument>llvm::Error Err</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name>AtomicChanges</name></type> <name>SourceReplacements</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>defaultResultHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name>SymbolOccurrences</name></type> <name>Occurrences</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>defaultResultHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>defaultResultHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>handleError</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><literal type="string">"unsupported refactoring result"</literal></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
