<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/SourceLocation.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SOURCELOCATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SOURCELOCATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>DenseMapInfo</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FoldingSetNodeID</name></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>FoldingSetTrait</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>FileID</name> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ID</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>ID</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>&lt;=</operator> <name><name>RHS</name><operator>.</operator><name>ID</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>RHS</name> <operator>&lt;</operator> <operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>FileID</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>RHS</name> <operator>&lt;=</operator> <operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>FileID</name></type> <name>getSentinel</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>get</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>unsigned</name> <macro><name>getHashValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>FileID</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FileID</name></type> <name>F</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>F</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
<return>return <expr><name>F</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>int</name> <macro><name>getOpaqueValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
















<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<macro><name>friend</name></macro> struct <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>FoldingSetTrait</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>UIntTy</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>IntTy</name> <init>= <expr><name>int32_t</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>UIntTy</name></type> <name>ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<enum_decl>enum : <macro><name>UIntTy</name></macro> <block>{ <decl><name>MacroIDBit</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UIntTy</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> }</block>;</enum_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>ID</name> <operator>&amp;</operator> <name>MacroIDBit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMacroID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>ID</name> <operator>&amp;</operator> <name>MacroIDBit</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>UIntTy</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name> <operator>&amp;</operator> <operator>~</operator><name>MacroIDBit</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>SourceLocation</name></type> <name>getFileLoc</name><parameter_list>(<parameter><decl><type><name>UIntTy</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ID</name> <operator>&amp;</operator> <name>MacroIDBit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Ran out of source locations!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>L</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>L</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt>
<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SourceLocation</name></type> <name>getMacroLoc</name><parameter_list>(<parameter><decl><type><name>UIntTy</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ID</name> <operator>&amp;</operator> <name>MacroIDBit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Ran out of source locations!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>L</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>L</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>MacroIDBit</name> <operator>|</operator> <name>ID</name></expr>;</expr_stmt>
<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getLocWithOffset</name><argument_list>(<argument><expr><name>IntTy</name> <name>Offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>getOffset</name><argument_list>()</argument_list></call><operator>+</operator><name>Offset</name><operator>)</operator> <operator>&amp;</operator> <name>MacroIDBit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"offset overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>L</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>L</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>ID</name><operator>+</operator><name>Offset</name></expr>;</expr_stmt>
<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>UIntTy</name> <macro><name>getRawEncoding</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name></expr>;</return> }</block></expr></expr_stmt>





<function><type><specifier>static</specifier> <name>SourceLocation</name></type> <name>getFromRawEncoding</name><parameter_list>(<parameter><decl><type><name>UIntTy</name></type> <name>Encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>X</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>X</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>Encoding</name></expr>;</expr_stmt>
<return>return <expr><name>X</name></expr>;</return>
</block_content>}</block></function>






<expr_stmt><expr><name>void</name><operator>*</operator> <macro><name>getPtrEncoding</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>getRawEncoding</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><specifier>static</specifier> <name>SourceLocation</name></type> <name>getFromPtrEncoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><operator>(</operator><name>SourceLocation</name><operator>::</operator><name>UIntTy</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>Encoding</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isPairOfFileLocations</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Start</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Start</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>End</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>End</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getHashValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>printToString</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SourceRange</name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>E</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SourceRange</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>SourceRange</name><argument_list>(<argument>SourceLocation loc</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>E</name><argument_list>(<argument>loc</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>SourceRange</name><argument_list>(<argument>SourceLocation begin</argument>, <argument>SourceLocation end</argument>)</argument_list></macro> <operator>:</operator> <call><name>B</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>E</name><argument_list>(<argument>end</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SourceLocation</name> <macro><name>getBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>B</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>E</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setBegin</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setEnd</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>E</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>B</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>E</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SourceRange</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>B</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>B</name></name> <operator>&amp;&amp;</operator> <name>E</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>E</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SourceRange</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>B</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>B</name></name> <operator>||</operator> <name>E</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>E</name></name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>fullyContains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceRange</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>B</name> <operator>&lt;=</operator> <name><name>other</name><operator>.</operator><name>B</name></name> <operator>&amp;&amp;</operator> <name>E</name> <operator>&gt;=</operator> <name><name>other</name><operator>.</operator><name>E</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>printToString</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>CharSourceRange</name> <block>{<block_content>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsTokenRange</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CharSourceRange</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>CharSourceRange</name><argument_list>(<argument>SourceRange R</argument>, <argument>bool ITR</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Range</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsTokenRange</name><argument_list>(<argument>ITR</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>CharSourceRange</name> <macro><name>getTokenRange</name><argument_list>(<argument>SourceRange R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CharSourceRange</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>CharSourceRange</name></type> <name>getCharRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CharSourceRange</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CharSourceRange</name></type> <name>getTokenRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getTokenRange</name><argument_list>(<argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CharSourceRange</name></type> <name>getCharRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getCharRange</name><argument_list>(<argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>isTokenRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsTokenRange</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isCharRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>IsTokenRange</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Range</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceRange</name> <macro><name>getAsRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Range</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setBegin</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>setBegin</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setEnd</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>setEnd</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setTokenRange</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>TR</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsTokenRange</name> <operator>=</operator> <name>TR</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Range</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>PresumedLoc</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>ID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Line</name></decl>, <decl><type ref="prev"/><name>Col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>IncludeLoc</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PresumedLoc</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>PresumedLoc</name><argument_list>(<argument>const char *FN</argument>, <argument>FileID FID</argument>, <argument>unsigned Ln</argument>, <argument>unsigned Co</argument>,
<argument>SourceLocation IL</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Filename</name><argument_list>(<argument><expr><name>FN</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ID</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Line</name><argument_list>(<argument><expr><name>Ln</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Col</name><argument_list>(<argument><expr><name>Co</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IncludeLoc</name><argument_list>(<argument>IL</argument>)</argument_list></macro> <expr><block>{}</block>





<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Filename</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Filename</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Filename</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>getFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ID</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>unsigned</name> <macro><name>getLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Line</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>unsigned</name> <macro><name>getColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Col</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>SourceLocation</name> <macro><name>getIncludeLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>IncludeLoc</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>FullSourceLoc</name> <range>: <expr><name>public</name> <name>SourceLocation</name> <block>{
<expr><specifier>const</specifier> <name>SourceManager</name> <operator>*</operator><name>SrcMgr</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>FullSourceLoc</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>explicit</name> <macro><name>FullSourceLoc</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const SourceManager &amp;SM</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SourceLocation</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>, <macro><name>SrcMgr</name><argument_list>(<argument>&amp;SM</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>hasManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>bool</name> <name>hasSrcMgr</name> <operator>=</operator> <name>SrcMgr</name> <operator>!=</operator> <name>nullptr</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>hasSrcMgr</name> <operator>==</operator> <call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"FullSourceLoc has location but no manager"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>hasSrcMgr</name></expr>;</return>
}</block>


<specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>SrcMgr</name> <operator>&amp;&amp;</operator> <literal type="string">"SourceManager is NULL."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>SrcMgr</name></expr>;</return>
}</block>

<name>FileID</name> <macro><name>getFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>FullSourceLoc</name> <macro><name>getExpansionLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>FullSourceLoc</name> <macro><name>getSpellingLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>FullSourceLoc</name> <macro><name>getFileLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>PresumedLoc</name> <macro><name>getPresumedLoc</name><argument_list>(<argument>bool UseLineDirectives = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>isMacroArgExpansion</name><argument_list>(<argument>FullSourceLoc *StartLoc = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>FullSourceLoc</name> <macro><name>getImmediateMacroCallerLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FullSourceLoc</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getModuleImportLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>unsigned</name> <macro><name>getFileOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>unsigned</name> <macro><name>getExpansionLineNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>unsigned</name> <macro><name>getExpansionColumnNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>unsigned</name> <macro><name>getSpellingLineNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>unsigned</name> <macro><name>getSpellingColumnNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getCharacterData</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>unsigned</name> <macro><name>getLineNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>unsigned</name> <macro><name>getColumnNumber</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><macro><name>getFileEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>StringRef</name> <macro><name>getBufferData</name><argument_list>(<argument>bool *Invalid = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;





<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDecomposedLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>isInSystemHeader</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>bool</name> <macro><name>isBeforeInTranslationUnitThan</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>bool</name> <macro><name>isBeforeInTranslationUnitThan</name><argument_list>(<argument>FullSourceLoc Loc</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Loc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>SrcMgr</name> <operator>==</operator> <name><name>Loc</name><operator>.</operator><name>SrcMgr</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Loc comes from another SourceManager!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>isBeforeInTranslationUnitThan</name><argument_list>(<argument><expr><operator>(</operator><name>SourceLocation</name><operator>)</operator><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


struct <name>BeforeThanCompare</name> <block>{
<expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>FullSourceLoc</name><operator>&amp;</operator> <name>lhs</name>, <specifier>const</specifier> <name>FullSourceLoc</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>lhs</name><operator>.</operator><name>isBeforeInTranslationUnitThan</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;




<expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>friend</name> <name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FullSourceLoc</name> <operator>&amp;</operator><name>LHS</name>, <specifier>const</specifier> <name>FullSourceLoc</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>LHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>SrcMgr</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SrcMgr</name></name></expr>;</return>
}</block>

<name>friend</name> <name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FullSourceLoc</name> <operator>&amp;</operator><name>LHS</name>, <specifier>const</specifier> <name>FullSourceLoc</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block>
}</expr>;

}</block>

<name>namespace</name> <name>llvm</name> <block>{



<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>FileID</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>FileID</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>FileID</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>FileID</name><operator>::</operator><call><name>getSentinel</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::FileID S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>S</name><operator>.</operator><name>getHashValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::FileID LHS</argument>, <argument>clang::FileID RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;




<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>SourceLocation</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>constexpr</name> <name>clang</name><operator>::</operator><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><name>clang</name><operator>::</operator><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><operator>~</operator><name>Zero</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>SourceLocation</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>constexpr</name> <name>clang</name><operator>::</operator><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><name>clang</name><operator>::</operator><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><operator>~</operator><name>Zero</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::SourceLocation Loc</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Loc</name><operator>.</operator><name>getHashValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::SourceLocation LHS</argument>, <argument>clang::SourceLocation RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>FoldingSetTrait</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>SourceLocation</name> <operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

}</block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
