<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATE_FWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATE_FWD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramStateManager</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>ProgramStateRetain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProgramStateRelease</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>IntrusiveRefCntPtrInfo</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>ProgramState</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>retain</name><argument_list>(<argument>const clang::ento::ProgramState *state</argument>)</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><call><name>ProgramStateRetain</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>static</specifier> <name>void</name> <macro><name>release</name><argument_list>(<argument>const clang::ento::ProgramState *state</argument>)</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><call><name>ProgramStateRelease</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<typedef>typedef <type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ProgramState</name></expr></argument>&gt;</argument_list></name></type> <name>ProgramStateRef</name>;</typedef>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
