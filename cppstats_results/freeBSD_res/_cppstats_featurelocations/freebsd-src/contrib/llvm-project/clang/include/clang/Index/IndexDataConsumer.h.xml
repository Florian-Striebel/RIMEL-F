<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Index/IndexDataConsumer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_INDEXDATACONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_INDEXDATACONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Index/IndexSymbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ImportDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IndexDataConsumer</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>ASTNodeInfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>OrigE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>OrigD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>ContainerDC</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IndexDataConsumer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>setPreprocessor</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Preprocessor</name></expr></argument>&gt;</argument_list></name> <name>PP</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>


<function><type><name>virtual</name> <name>bool</name></type> <name>handleDeclOccurrence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRelation</name></expr></argument>&gt;</argument_list></name></type> <name>Relations</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>ASTNodeInfo</name></type> <name>ASTNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>bool</name></type> <name>handleMacroOccurrence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MacroInfo</name> <modifier>*</modifier></type><name>MI</name></decl></parameter>, <parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>virtual</name> <name>bool</name></type> <name>handleModuleOccurrence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ImportDecl</name> <modifier>*</modifier></type><name>ImportD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Module</name> <modifier>*</modifier></type><name>Mod</name></decl></parameter>, <parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
