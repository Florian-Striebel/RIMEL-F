<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DataCollection.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DATACOLLECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DATACOLLECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>data_collection</name> <block>{<block_content>






<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getMacroStack</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>ASTContext &amp;Context</argument>)</argument_list></macro></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addDataToConsumer</name><argument_list>(<argument><expr><name>T</name> <operator>&amp;</operator><name>DataConsumer</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Str</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>DataConsumer</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>addDataToConsumer</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>DataConsumer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QualType</name> <modifier>&amp;</modifier></type><name>QT</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addDataToConsumer</name><argument_list>(<argument><expr><name>DataConsumer</name></expr></argument>, <argument><expr><call><name><name>QT</name><operator>.</operator><name>getAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name> <name>Type</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator> <name>std</name><operator>::</operator><name><name>is_enum</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name>
<macro><name>addDataToConsumer</name><argument_list>(<argument>T &amp;DataConsumer</argument>, <argument>Type Data</argument>)</argument_list></macro> <block>{
<expr><call><name><name>DataConsumer</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
