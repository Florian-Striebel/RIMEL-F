<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/QualTypeNames.h">


























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_QUALTYPENAMES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_QUALTYPENAMES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>TypeName</name> <block>{<block_content>








<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getFullyQualifiedName</name><argument_list>(<argument>QualType QT</argument>, <argument>const ASTContext &amp;Ctx</argument>,
<argument>const PrintingPolicy &amp;Policy</argument>,
<argument>bool WithGlobalNsPrefix = false</argument>)</argument_list></macro></expr>;</expr_stmt>










<function_decl><type><name>QualType</name></type> <name>getFullyQualifiedType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>QT</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>WithGlobalNsPrefix</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
