<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/TemplateInstCallback.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TEMPLATE_INST_CALLBACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TEMPLATE_INST_CALLBACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>TemplateInstantiationCallback</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TemplateInstantiationCallback</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Sema</name> <modifier>&amp;</modifier></type><name>TheSema</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>finalize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Sema</name> <modifier>&amp;</modifier></type><name>TheSema</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>atTemplateBegin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><name>TheSema</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name><operator>::</operator><name>CodeSynthesisContext</name> <operator>&amp;</operator><name>Inst</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>atTemplateEnd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><name>TheSema</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name><operator>::</operator><name>CodeSynthesisContext</name> <operator>&amp;</operator><name>Inst</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TemplateInstantiationCallbackPtrs</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>TemplateInstantiationCallbackPtrs</name> <modifier>&amp;</modifier></type><name>Callbacks</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Sema</name> <modifier>&amp;</modifier></type><name>TheSema</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>C</name> <operator>:</operator> <name>Callbacks</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>initialize</name></name><argument_list>(<argument><expr><name>TheSema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TemplateInstantiationCallbackPtrs</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>finalize</name><parameter_list>(<parameter><decl><type><name>TemplateInstantiationCallbackPtrs</name> <modifier>&amp;</modifier></type><name>Callbacks</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Sema</name> <modifier>&amp;</modifier></type><name>TheSema</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>C</name> <operator>:</operator> <name>Callbacks</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>finalize</name></name><argument_list>(<argument><expr><name>TheSema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TemplateInstantiationCallbackPtrs</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>atTemplateBegin</name><argument_list>(<argument><expr><name>TemplateInstantiationCallbackPtrs</name> <operator>&amp;</operator><name>Callbacks</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><name>TheSema</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name><operator>::</operator><name>CodeSynthesisContext</name> <operator>&amp;</operator><name>Inst</name></expr></argument>)</argument_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>C</name> <operator>:</operator> <name>Callbacks</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>atTemplateBegin</name></name><argument_list>(<argument><expr><name>TheSema</name></expr></argument>, <argument><expr><name>Inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TemplateInstantiationCallbackPtrs</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>atTemplateEnd</name><argument_list>(<argument><expr><name>TemplateInstantiationCallbackPtrs</name> <operator>&amp;</operator><name>Callbacks</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><name>TheSema</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Sema</name><operator>::</operator><name>CodeSynthesisContext</name> <operator>&amp;</operator><name>Inst</name></expr></argument>)</argument_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>C</name> <operator>:</operator> <name>Callbacks</name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>atTemplateEnd</name></name><argument_list>(<argument><expr><name>TheSema</name></expr></argument>, <argument><expr><name>Inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
