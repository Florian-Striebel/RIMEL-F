<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/APINotes/Types.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_APINOTES_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_APINOTES_TYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>api_notes</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RetainCountConventionKind</name> <block>{<block_content>
<expr_stmt><expr><name>None</name></expr><operator>,</operator>
<expr><name>CFReturnsRetained</name></expr><operator>,</operator>
<expr><name>CFReturnsNotRetained</name></expr><operator>,</operator>
<expr><name>NSReturnsRetained</name></expr><operator>,</operator>
<expr><name>NSReturnsNotRetained</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>EnumExtensibilityKind</name> <block>{<block_content>
<expr_stmt><expr><name>None</name></expr><operator>,</operator>
<expr><name>Open</name></expr><operator>,</operator>
<expr><name>Closed</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SwiftNewTypeKind</name> <block>{<block_content>
<expr_stmt><expr><name>None</name></expr><operator>,</operator>
<expr><name>Struct</name></expr><operator>,</operator>
<expr><name>Enum</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CommonEntityInfo</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>UnavailableMsg</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Unavailable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UnavailableInSwift</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>SwiftPrivateSpecified</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>SwiftPrivate</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>SwiftName</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonEntityInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Unavailable</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UnavailableInSwift</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SwiftPrivateSpecified</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SwiftPrivate</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>isSwiftPrivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SwiftPrivateSpecified</name> <operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SwiftPrivate</name></expr></argument>)</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setSwiftPrivate</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>Private</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>SwiftPrivateSpecified</name> <operator>=</operator> <call><name><name>Private</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SwiftPrivate</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Private</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Private</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>CommonEntityInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{

<if_stmt><if>if <condition>(<expr><name><name>RHS</name><operator>.</operator><name>Unavailable</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Unavailable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>UnavailableMsg</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UnavailableMsg</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>UnavailableMsg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

if (RHS.UnavailableInSwift</block></if></if_stmt>) <block>{
<expr><name>UnavailableInSwift</name> <operator>=</operator> <name>true</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>UnavailableMsg</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UnavailableMsg</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>UnavailableMsg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SwiftPrivateSpecified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setSwiftPrivate</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>isSwiftPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>SwiftName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SwiftName</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>SwiftName</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>UnavailableMsg</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>UnavailableMsg</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>Unavailable</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Unavailable</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>UnavailableInSwift</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>UnavailableInSwift</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>SwiftPrivateSpecified</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SwiftPrivateSpecified</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>SwiftPrivate</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SwiftPrivate</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>SwiftName</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SwiftName</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CommonTypeInfo</name> <range>: <expr><name>public</name> <name>CommonEntityInfo</name> <block>{



<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SwiftBridge</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>NSErrorDomain</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CommonTypeInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>CommonEntityInfo</name><argument_list>()</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSwiftBridge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SwiftBridge</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setSwiftBridge</name><argument_list>(<argument>const llvm::Optional&lt;std::string&gt; &amp;SwiftType</argument>)</argument_list></macro> <block>{
<expr><name>SwiftBridge</name> <operator>=</operator> <name>SwiftType</name></expr>;
}</block>

<name>void</name> <macro><name>setSwiftBridge</name><argument_list>(<argument>const llvm::Optional&lt;llvm::StringRef&gt; &amp;SwiftType</argument>)</argument_list></macro> <block>{
<expr><name>SwiftBridge</name> <operator>=</operator> <name>SwiftType</name>
<operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><operator>*</operator><name>SwiftType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;
}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getNSErrorDomain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NSErrorDomain</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setNSErrorDomain</name><argument_list>(<argument>const llvm::Optional&lt;std::string&gt; &amp;Domain</argument>)</argument_list></macro> <block>{
<expr><name>NSErrorDomain</name> <operator>=</operator> <name>Domain</name></expr>;
}</block>

<name>void</name> <macro><name>setNSErrorDomain</name><argument_list>(<argument>const llvm::Optional&lt;llvm::StringRef&gt; &amp;Domain</argument>)</argument_list></macro> <block>{
<expr><name>NSErrorDomain</name> <operator>=</operator>
<ternary><condition><expr><name>Domain</name></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><operator>*</operator><name>Domain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>llvm</name><operator>::</operator><name>None</name></expr></else></ternary></expr>;
}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;

<expr><name>CommonTypeInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{

<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SwiftBridge</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setSwiftBridge</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>getSwiftBridge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NSErrorDomain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setNSErrorDomain</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>getNSErrorDomain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>SwiftBridge</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SwiftBridge</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NSErrorDomain</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NSErrorDomain</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCContextInfo</name> <range>: <expr><name>public</name> <name>CommonTypeInfo</name> <block>{

<expr><name>unsigned</name> <name>HasDefaultNullability</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>DefaultNullability</name> <operator>:</operator> <literal type="number">2</literal></expr>;


<expr><name>unsigned</name> <name>HasDesignatedInits</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>SwiftImportAsNonGenericSpecified</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>SwiftImportAsNonGeneric</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>SwiftObjCMembersSpecified</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>SwiftObjCMembers</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ObjCContextInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>CommonTypeInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>HasDefaultNullability</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>DefaultNullability</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HasDesignatedInits</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>SwiftImportAsNonGenericSpecified</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SwiftImportAsNonGeneric</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>SwiftObjCMembersSpecified</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>SwiftObjCMembers</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>





<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getDefaultNullability</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HasDefaultNullability</name>
<operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DefaultNullability</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block>


<name>void</name> <macro><name>setDefaultNullability</name><argument_list>(<argument>NullabilityKind Kind</argument>)</argument_list></macro> <block>{
<expr><name>HasDefaultNullability</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>DefaultNullability</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasDesignatedInits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasDesignatedInits</name></expr>;</return> }</block>
<name>void</name> <macro><name>setHasDesignatedInits</name><argument_list>(<argument>bool Value</argument>)</argument_list></macro> <block>{ <expr><name>HasDesignatedInits</name> <operator>=</operator> <name>Value</name></expr>; }</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>getSwiftImportAsNonGeneric</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><ternary><condition><expr><name>SwiftImportAsNonGenericSpecified</name></expr>
?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SwiftImportAsNonGeneric</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>llvm</name><operator>::</operator><name>None</name></expr></else></ternary></expr>;</return>
}</block>
<name>void</name> <macro><name>setSwiftImportAsNonGeneric</name><argument_list>(<argument>llvm::Optional&lt;bool&gt; Value</argument>)</argument_list></macro> <block>{
<expr><name>SwiftImportAsNonGenericSpecified</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>SwiftImportAsNonGeneric</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Value</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;
}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>getSwiftObjCMembers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><ternary><condition><expr><name>SwiftObjCMembersSpecified</name></expr> ?</condition><then> <expr><name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SwiftObjCMembers</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>llvm</name><operator>::</operator><name>None</name></expr></else></ternary></expr>;</return>
}</block>
<name>void</name> <macro><name>setSwiftObjCMembers</name><argument_list>(<argument>llvm::Optional&lt;bool&gt; Value</argument>)</argument_list></macro> <block>{
<expr><name>SwiftObjCMembersSpecified</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>SwiftObjCMembers</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Value</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;
}</block>



<name>void</name> <macro><name>stripModuleLocalInfo</name><argument_list>()</argument_list></macro> <block>{
<expr><name>HasDefaultNullability</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>DefaultNullability</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;

<expr><name>ObjCContextInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{

<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getDefaultNullability</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>Nullability</name> <init>= <expr><call><name><name>RHS</name><operator>.</operator><name>getDefaultNullability</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setDefaultNullability</name><argument_list>(<argument><expr><operator>*</operator><name>Nullability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SwiftImportAsNonGenericSpecified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setSwiftImportAsNonGeneric</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>getSwiftImportAsNonGeneric</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SwiftObjCMembersSpecified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setSwiftObjCMembers</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>getSwiftObjCMembers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>HasDesignatedInits</name> <operator>|=</operator> <name><name>RHS</name><operator>.</operator><name>HasDesignatedInits</name></name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

LLVM_DUMP_METHOD <decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>getDefaultNullability</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getDefaultNullability</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>HasDesignatedInits</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>HasDesignatedInits</name></name> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>getSwiftImportAsNonGeneric</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getSwiftImportAsNonGeneric</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>getSwiftObjCMembers</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getSwiftObjCMembers</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>VariableInfo</name> <range>: <expr><name>public</name> <name>CommonEntityInfo</name> <block>{

<expr><name>unsigned</name> <name>NullabilityAudited</name> <operator>:</operator> <literal type="number">1</literal></expr>;



<expr><name>unsigned</name> <name>Nullable</name> <operator>:</operator> <literal type="number">2</literal></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>Type</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>VariableInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>CommonEntityInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>NullabilityAudited</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>Nullable</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getNullability</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NullabilityAudited</name> <operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Nullable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setNullabilityAudited</name><argument_list>(<argument>NullabilityKind kind</argument>)</argument_list></macro> <block>{
<expr><name>NullabilityAudited</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>Nullable</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Type</name></expr>;</return> }</block>
<name>void</name> <macro><name>setType</name><argument_list>(<argument>const std::string &amp;type</argument>)</argument_list></macro> <block>{ <expr><name>Type</name> <operator>=</operator> <name>type</name></expr>; }</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;

<expr><name>VariableInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NullabilityAudited</name> <operator>&amp;&amp;</operator> <name><name>RHS</name><operator>.</operator><name>NullabilityAudited</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setNullabilityAudited</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>RHS</name><operator>.</operator><name>getNullability</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><call><name><name>Type</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Type</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

LLVM_DUMP_METHOD <decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NullabilityAudited</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NullabilityAudited</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>Nullable</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Nullable</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Type</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCPropertyInfo</name> <range>: <expr><name>public</name> <name>VariableInfo</name> <block>{
<expr><name>unsigned</name> <name>SwiftImportAsAccessorsSpecified</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>SwiftImportAsAccessors</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ObjCPropertyInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>VariableInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>SwiftImportAsAccessorsSpecified</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>SwiftImportAsAccessors</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>getSwiftImportAsAccessors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SwiftImportAsAccessorsSpecified</name>
<operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SwiftImportAsAccessors</name></expr></argument>)</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block>
<name>void</name> <macro><name>setSwiftImportAsAccessors</name><argument_list>(<argument>llvm::Optional&lt;bool&gt; Value</argument>)</argument_list></macro> <block>{
<expr><name>SwiftImportAsAccessorsSpecified</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>SwiftImportAsAccessors</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Value</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;
}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;


<expr><name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getNullability</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>Nullable</name> <init>= <expr><call><name><name>RHS</name><operator>.</operator><name>getDefaultNullability</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setNullabilityAudited</name><argument_list>(<argument><expr><operator>*</operator><name>Nullable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>VariableInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SwiftImportAsAccessorsSpecified</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setSwiftImportAsAccessors</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>getSwiftImportAsAccessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

LLVM_DUMP_METHOD <decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>getSwiftImportAsAccessors</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>getSwiftImportAsAccessors</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ObjCPropertyInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ParamInfo</name> <range>: <expr><name>public</name> <name>VariableInfo</name> <block>{

<expr><name>unsigned</name> <name>NoEscapeSpecified</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>NoEscape</name> <operator>:</operator> <literal type="number">1</literal></expr>;




<expr><name>unsigned</name> <name>RawRetainCountConvention</name> <operator>:</operator> <literal type="number">3</literal></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ParamInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>VariableInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>NoEscapeSpecified</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NoEscape</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>RawRetainCountConvention</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>isNoEscape</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NoEscapeSpecified</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>NoEscape</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setNoEscape</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>Value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>NoEscapeSpecified</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NoEscape</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Value</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RetainCountConventionKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getRetainCountConvention</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RawRetainCountConvention</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RetainCountConventionKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RawRetainCountConvention</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}
void
<macro><name>setRetainCountConvention</name><argument_list>(<argument>llvm::Optional&lt;RetainCountConventionKind&gt; Value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>RawRetainCountConvention</name> <operator>=</operator>
<ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getRetainCountConvention</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Value</name> <operator>&amp;&amp;</operator> <literal type="string">"bitfield too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>ParamInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>VariableInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NoEscapeSpecified</name> <operator>&amp;&amp;</operator> <name><name>RHS</name><operator>.</operator><name>NoEscapeSpecified</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NoEscapeSpecified</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NoEscape</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>NoEscape</name></name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RawRetainCountConvention</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RawRetainCountConvention</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>RawRetainCountConvention</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

friend <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VariableInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NoEscapeSpecified</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NoEscapeSpecified</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NoEscape</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NoEscape</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>RawRetainCountConvention</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>RawRetainCountConvention</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ParamInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FunctionInfo</name> <range>: <expr><name>public</name> <name>CommonEntityInfo</name> <block>{
<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>unsigned</name> <name>NullabilityKindMask</name> <operator>=</operator> <literal type="number">0x3</literal></expr>;
<expr><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>unsigned</name> <name>NullabilityKindSize</name> <operator>=</operator> <literal type="number">2</literal></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>unsigned</name> <name>ReturnInfoIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>public</name><operator>:</operator>





<name>unsigned</name> <name>NullabilityAudited</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>NumAdjustedNullable</name> <operator>:</operator> <literal type="number">8</literal></expr>;


<expr><name>unsigned</name> <name>RawRetainCountConvention</name> <operator>:</operator> <literal type="number">3</literal></expr>;






<expr><name>uint64_t</name> <name>NullabilityPayload</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>ResultType</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ParamInfo</name></expr></argument>&gt;</argument_list></name> <name>Params</name></expr>;

<expr><call><name>FunctionInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>CommonEntityInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>NullabilityAudited</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NumAdjustedNullable</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>RawRetainCountConvention</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getMaxNullabilityIndex</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>NullabilityPayload</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>/</operator> <name>NullabilityKindSize</name><operator>)</operator></expr>;</return>
}</block>

<name>void</name> <macro><name>addTypeInfo</name><argument_list>(<argument>unsigned index</argument>, <argument>NullabilityKind kind</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;=</operator> <call><name>getMaxNullabilityIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>NullabilityKindMask</name></expr></argument>)</argument_list></call></expr>;

<expr><name>NullabilityAudited</name> <operator>=</operator> <name>true</name></expr>;
<if_stmt><if>if <condition>(<expr><name>NumAdjustedNullable</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NumAdjustedNullable</name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<name>NullabilityPayload</name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>NullabilityKindMask</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>index</name> <operator>*</operator> <name>NullabilityKindSize</name><operator>)</operator><operator>)</operator></block></expr>;


<expr><name>unsigned</name> <name>kindValue</name> <operator>=</operator> <operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&lt;&lt;</operator> <operator>(</operator><name>index</name> <operator>*</operator> <name>NullabilityKindSize</name><operator>)</operator></expr>;
<expr><name>NullabilityPayload</name> <operator>|=</operator> <name>kindValue</name></expr>;
}</block>


<name>void</name> <macro><name>addReturnTypeInfo</name><argument_list>(<argument>NullabilityKind kind</argument>)</argument_list></macro> <block>{
<expr><call><name>addTypeInfo</name><argument_list>(<argument><expr><name>ReturnInfoIndex</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>void</name> <macro><name>addParamTypeInfo</name><argument_list>(<argument>unsigned index</argument>, <argument>NullabilityKind kind</argument>)</argument_list></macro> <block>{
<expr><call><name>addTypeInfo</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>NullabilityKind</name> <macro><name>getParamTypeInfo</name><argument_list>(<argument>unsigned index</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>NullabilityKind</name> <macro><name>getReturnTypeInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RetainCountConventionKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getRetainCountConvention</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RawRetainCountConvention</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>RetainCountConventionKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RawRetainCountConvention</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}
void
<macro><name>setRetainCountConvention</name><argument_list>(<argument>llvm::Optional&lt;RetainCountConventionKind&gt; Value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>RawRetainCountConvention</name> <operator>=</operator>
<ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getRetainCountConvention</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Value</name> <operator>&amp;&amp;</operator> <literal type="string">"bitfield too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>NullabilityKind</name></type> <name>getTypeInfo</name><argument_list>(<argument><expr><name>unsigned</name> <name>index</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NullabilityAudited</name> <operator>&amp;&amp;</operator>
<literal type="string">"Checking the type adjustment on non-audited method."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>NumAdjustedNullable</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NullabilityKind</name><operator>::</operator><name>NonNull</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>nullability</name> <init>= <expr><name>NullabilityPayload</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>index</name> <operator>*</operator> <name>NullabilityKindSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NullabilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullability</name> <operator>&amp;</operator> <name>NullabilityKindMask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonEntityInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NullabilityAudited</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NullabilityAudited</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NumAdjustedNullable</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NumAdjustedNullable</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>NullabilityPayload</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NullabilityPayload</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>ResultType</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ResultType</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Params</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Params</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>RawRetainCountConvention</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>RawRetainCountConvention</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodInfo</name> <range>: <expr><name>public</name> <name>FunctionInfo</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>unsigned</name> <name>DesignatedInit</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>RequiredInit</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><call><name>ObjCMethodInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>FunctionInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>DesignatedInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>RequiredInit</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator>, <specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;

<expr><name>ObjCMethodInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCContextInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NullabilityAudited</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>Nullable</name> <init>= <expr><call><name><name>RHS</name><operator>.</operator><name>getDefaultNullability</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NullabilityAudited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addTypeInfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>Nullable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>

LLVM_DUMP_METHOD void dump(llvm::raw_ostream &amp;OS</block></if></if_stmt>)</block></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>DesignatedInit</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>DesignatedInit</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>RequiredInit</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>RequiredInit</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ObjCMethodInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>GlobalVariableInfo</name> <range>: <expr><name>public</name> <name>VariableInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>GlobalVariableInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>VariableInfo</name><argument_list>()</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>GlobalFunctionInfo</name> <range>: <expr><name>public</name> <name>FunctionInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>GlobalFunctionInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>FunctionInfo</name><argument_list>()</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>EnumConstantInfo</name> <range>: <expr><name>public</name> <name>CommonEntityInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>EnumConstantInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>CommonEntityInfo</name><argument_list>()</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TagInfo</name> <range>: <expr><name>public</name> <name>CommonTypeInfo</name> <block>{
<expr><name>unsigned</name> <name>HasFlagEnum</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>IsFlagEnum</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>public</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>EnumExtensibilityKind</name></expr></argument>&gt;</argument_list></name> <name>EnumExtensibility</name></expr>;

<expr><call><name>TagInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>CommonTypeInfo</name><argument_list>()</argument_list></call></expr>, <expr><call><name>HasFlagEnum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IsFlagEnum</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>isFlagEnum</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>HasFlagEnum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsFlagEnum</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setFlagEnum</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>Value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>HasFlagEnum</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsFlagEnum</name> <operator>=</operator> <ternary><condition><expr><call><name><name>Value</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>Value</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>TagInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasFlagEnum</name> <operator>&amp;&amp;</operator> <name>HasFlagEnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFlagEnum</name><argument_list>(<argument><expr><call><name><name>RHS</name><operator>.</operator><name>isFlagEnum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EnumExtensibility</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EnumExtensibility</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>EnumExtensibility</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

friend <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<call><name><name>LHS</name><operator>.</operator><name>isFlagEnum</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>RHS</name><operator>.</operator><name>isFlagEnum</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>EnumExtensibility</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>EnumExtensibility</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>TagInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TypedefInfo</name> <range>: <expr><name>public</name> <name>CommonTypeInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SwiftNewTypeKind</name></expr></argument>&gt;</argument_list></name> <name>SwiftWrapper</name></expr>;

<expr><call><name>TypedefInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>CommonTypeInfo</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>TypedefInfo</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>RHS</name></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SwiftWrapper</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SwiftWrapper</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>SwiftWrapper</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CommonTypeInfo</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RHS</name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>SwiftWrapper</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>SwiftWrapper</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>TypedefInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
