<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/CommandLineSourceLoc.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_COMMANDLINESOURCELOC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_COMMANDLINESOURCELOC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/CommandLine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<struct>struct <name>ParsedSourceLocation</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Column</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<function><type><specifier>static</specifier> <name>ParsedSourceLocation</name></type> <name>FromString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ParsedSourceLocation</name></type> <name>PSL</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>ColSplit</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>rsplit</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>LineSplit</name> <operator>=</operator>
<call><name><name>ColSplit</name><operator>.</operator><name>first</name><operator>.</operator><name>rsplit</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ColSplit</name><operator>.</operator><name>second</name><operator>.</operator><name>getAsInteger</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>PSL</name><operator>.</operator><name>Column</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>LineSplit</name><operator>.</operator><name>second</name><operator>.</operator><name>getAsInteger</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>PSL</name><operator>.</operator><name>Line</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>PSL</name><operator>.</operator><name>FileName</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name><name>LineSplit</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>PSL</name><operator>.</operator><name>FileName</name></name> <operator>==</operator> <literal type="string">"-"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>PSL</name><operator>.</operator><name>FileName</name></name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>PSL</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>llvm</name><operator>::</operator><call><name>Twine</name><argument_list>(<argument><expr><name>FileName</name> <operator>==</operator> <literal type="string">"&lt;stdin&gt;"</literal> <operator>?</operator> <literal type="string">"-"</literal> <operator>:</operator> <name>FileName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator>
<call><name>Twine</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name>Twine</name><argument_list>(<argument><expr><name>Column</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>


<struct>struct <name>ParsedSourceRange</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>Begin</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>End</name></expr>;</expr_stmt>










<function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ParsedSourceRange</name></expr></argument>&gt;</argument_list></name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>RangeSplit</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>rsplit</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndLine</name></decl>, <decl><type ref="prev"/><name>EndColumn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasEndLoc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>RangeSplit</name><operator>.</operator><name>second</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Split</name> <operator>=</operator> <call><name><name>RangeSplit</name><operator>.</operator><name>second</name><operator>.</operator><name>rsplit</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Split</name><operator>.</operator><name>first</name><operator>.</operator><name>getAsInteger</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>EndLine</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name><name>Split</name><operator>.</operator><name>second</name><operator>.</operator><name>getAsInteger</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>EndColumn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>RangeSplit</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>Str</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>HasEndLoc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Begin</name> <init>= <expr><name>ParsedSourceLocation</name><operator>::</operator><call><name>FromString</name><argument_list>(<argument><expr><name><name>RangeSplit</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Begin</name><operator>.</operator><name>FileName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasEndLoc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>EndLine</name> <operator>=</operator> <name><name>Begin</name><operator>.</operator><name>Line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>EndColumn</name> <operator>=</operator> <name><name>Begin</name><operator>.</operator><name>Column</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ParsedSourceRange</name><block>{<expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Begin</name><operator>.</operator><name>FileName</name></name></expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name><name>Begin</name><operator>.</operator><name>Line</name></name></expr>, <expr><name><name>Begin</name><operator>.</operator><name>Column</name></name></expr>}</block></expr>,
<expr><block>{<expr><name>EndLine</name></expr>, <expr><name>EndColumn</name></expr>}</block></expr>}</block></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>cl</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name><name>parser</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ParsedSourceLocation</name></expr></argument>&gt;</argument_list></name></type> <name>final</name>
<range>: <expr><name>public</name> <name><name>basic_parser</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ParsedSourceLocation</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>inline</specifier> <name>bool</name> <macro><name>parse</name><argument_list>(<argument>Option &amp;O</argument>, <argument>StringRef ArgName</argument>, <argument>StringRef ArgValue</argument>,
<argument>clang::ParsedSourceLocation &amp;Val</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name>
<name><name>parser</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ParsedSourceLocation</name></expr></argument>&gt;</argument_list></name><operator>::</operator>
<macro><name>parse</name><argument_list>(<argument>Option &amp;O</argument>, <argument>StringRef ArgName</argument>, <argument>StringRef ArgValue</argument>,
<argument>clang::ParsedSourceLocation &amp;Val</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>namespace</name> <name>clang</name></expr>;

<expr><name>Val</name> <operator>=</operator> <name>ParsedSourceLocation</name><operator>::</operator><call><name>FromString</name><argument_list>(<argument><expr><name>ArgValue</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Val</name><operator>.</operator><name>FileName</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"error: "</literal>
<operator>&lt;&lt;</operator> <literal type="string">"source location must be of the form filename:line:column\n"</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>

return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
