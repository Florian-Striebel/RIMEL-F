<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_ANALYSISBASEDWARNINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_ANALYSISBASEDWARNINGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BlockExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>sema</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionScopeInfo</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>sema</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisBasedWarnings</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Policy</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AnalysisBasedWarnings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>enableCheckFallThrough</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>enableCheckUnreachable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>enableThreadSafetyAnalysis</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>enableConsumedAnalysis</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Policy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function><type><name>void</name></type> <name>disableCheckFallThrough</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>enableCheckFallThrough</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Policy</name></type> <name>DefaultPolicy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InterProceduralData</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>InterProceduralData</name></expr></argument>&gt;</argument_list></name> <name>IPData</name></expr>;</expr_stmt>

<enum>enum <name>VisitFlag</name> <block>{ <decl><name>NotVisited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>Visited</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>Pending</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>VisitFlag</name></expr></argument>&gt;</argument_list></name> <name>VisitedFD</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>NumFunctionsAnalyzed</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumFunctionsWithBadCFGs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumCFGBlocks</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxCFGBlocksPerFunction</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumUninitAnalysisFunctions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumUninitAnalysisVariables</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxUninitAnalysisVariablesPerFunction</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumUninitAnalysisBlockVisits</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxUninitAnalysisBlockVisitsPerFunction</name></decl>;</decl_stmt>



<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AnalysisBasedWarnings</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>AnalysisBasedWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>IssueWarnings</name><parameter_list>(<parameter><decl><type><name>Policy</name></type> <name>P</name></decl></parameter>, <parameter><decl><type><name>FunctionScopeInfo</name> <modifier>*</modifier></type><name>fscope</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>BlockType</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Policy</name></type> <name>getDefaultPolicy</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>DefaultPolicy</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
