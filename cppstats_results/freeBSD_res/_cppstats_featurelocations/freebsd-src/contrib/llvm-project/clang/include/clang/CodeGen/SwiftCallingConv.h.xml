<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_SWIFTCALLINGCONV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_SWIFTCALLINGCONV_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CanonicalType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IntegerType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StructType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VectorType</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordLayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ABIArgInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGFunctionInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>swiftcall</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SwiftAggLowering</name> <block>{<block_content>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>

<struct>struct <name>StorageEntry</name> <block>{
<decl_stmt><decl><type><name>CharUnits</name></type> <name>Begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>End</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>Type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>End</name> <operator>-</operator> <name>Begin</name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StorageEntry</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>Entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Finished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SwiftAggLowering</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CGM</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>addOpaqueData</name><argument_list>(<argument>CharUnits begin</argument>, <argument>CharUnits end</argument>)</argument_list></macro> <block>{
<expr><call><name>addEntry</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addTypedData</name><argument_list>(<argument>QualType type</argument>, <argument>CharUnits begin</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>addTypedData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>CharUnits</name></type> <name>begin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addTypedData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>CharUnits</name></type> <name>begin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ASTRecordLayout</name> <modifier>&amp;</modifier></type><name>layout</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>addTypedData</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>begin</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>addTypedData</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>begin</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"didn't finish lowering before calling empty()"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>Entries</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>shouldPassIndirectly</name><argument_list>(<argument><expr><name>bool</name> <name>asReturnValue</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>EnumerationCallback</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>CharUnits</name> <name>offset</name>, <name>CharUnits</name> <name>end</name>, <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>enumerateComponents</name><argument_list>(<argument><expr><name>EnumerationCallback</name> <name>callback</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name><operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Type</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getCoerceAndExpandTypes</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>addBitFieldData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>CharUnits</name></type> <name>begin</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>bitOffset</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>addLegalTypedData</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>begin</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>addEntry</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>begin</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>splitVectorEntry</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>shouldMergeEntries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StorageEntry</name> <modifier>&amp;</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StorageEntry</name> <modifier>&amp;</modifier></type><name>second</name></decl></parameter>,
<parameter><decl><type><name>CharUnits</name></type> <name>chunkSize</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function_decl><type><name>bool</name></type> <name>shouldPassIndirectly</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>types</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>asReturnValue</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CharUnits</name></type> <name>getMaximumVoluntaryIntegerSize</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>getNaturalAlignment</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isLegalIntegerType</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isLegalVectorType</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>vectorSize</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>VectorType</name> <operator>*</operator><name>vectorTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isLegalVectorType</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>vectorSize</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>eltTy</name></expr></argument>, <argument><expr><name>unsigned</name> <name>numElts</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name><operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>splitLegalVectorType</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>, <argument>CharUnits vectorSize</argument>,
<argument>llvm::VectorType *vectorTy</argument>)</argument_list></macro></expr>;</expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>legalizeVectorType</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>CharUnits</name> <name>vectorSize</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>VectorType</name> <operator>*</operator><name>vectorTy</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>types</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<function_decl><type><name>bool</name></type> <name>mustPassRecordIndirectly</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ABIArgInfo</name></type> <name>classifyReturnType</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>, <parameter><decl><type><name>CanQualType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ABIArgInfo</name></type> <name>classifyArgumentType</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>, <parameter><decl><type><name>CanQualType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>computeABIInfo</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>, <parameter><decl><type><name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>FI</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isSwiftErrorLoweredInRegister</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
