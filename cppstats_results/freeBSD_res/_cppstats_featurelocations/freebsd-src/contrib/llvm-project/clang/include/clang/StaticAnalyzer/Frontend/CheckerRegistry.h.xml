<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_FRONTEND_CHECKERREGISTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_FRONTEND_CHECKERREGISTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/CheckerRegistryData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>









































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLANG_ANALYZER_API_VERSION_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Version.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLANG_ANALYZER_API_VERSION_STRING</name></cpp:macro> <cpp:value>CLANG_VERSION_STRING</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CheckerManager</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>CheckerRegistry</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>CheckerRegistry</name><argument_list>(<argument>CheckerRegistryData &amp;Data</argument>, <argument>ArrayRef&lt;std::string&gt; Plugins</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>, <argument>AnalyzerOptions &amp;AnOpts</argument>,
<argument>ArrayRef&lt;std::function&lt;void(CheckerRegistry &amp;)&gt;&gt;
CheckerRegistrationFns = {}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




<function_decl><type><name>void</name></type> <name>initializeRegistry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CheckerManager</name> <modifier>&amp;</modifier></type><name>Mgr</name></decl></parameter>)</parameter_list>;</function_decl>


<label><name>private</name>:</label>




<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MGR</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>void</name></type> <name>initializeManager</name><parameter_list>(<parameter><decl><type><name>MGR</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<function_decl><type><name><name>mgr</name><operator>.</operator><name>template</name></name></type> <name><name>registerChecker</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>bool</name></type> <name>returnTrue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CheckerManager</name> <modifier>&amp;</modifier></type><name>mgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>


<function_decl><type><name>void</name></type> <name>addChecker</name><parameter_list>(<parameter><decl><type><name>RegisterCheckerFn</name></type> <name>Fn</name></decl></parameter>, <parameter><decl><type><name>ShouldRegisterFunction</name></type> <name>sfn</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>FullName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Desc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DocsUri</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsHidden</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>addChecker</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FullName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Desc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DocsUri</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsHidden</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>


<expr_stmt><expr><call><name>addChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CheckerRegistry</name><operator>::</operator><name><name>initializeManager</name><argument_list type="generic">&lt;<argument><expr><name>CheckerManager</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>CheckerRegistry</name><operator>::</operator><name><name>returnTrue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>FullName</name></expr></argument>, <argument><expr><name>Desc</name></expr></argument>, <argument><expr><name>DocsUri</name></expr></argument>,
<argument><expr><name>IsHidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>addDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FullName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Dependency</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>addWeakDependency</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FullName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Dependency</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>addCheckerOption</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>OptionType</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>CheckerFullName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>OptionName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DefaultValStr</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Description</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DevelopmentStatus</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsHidden</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>addPackage</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FullName</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>addPackageOption</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>OptionType</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>PackageFullName</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>OptionName</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DefaultValStr</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Description</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>DevelopmentStatus</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsHidden</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>initializeManager</name><argument_list>(<argument><expr><name>CheckerManager</name> <operator>&amp;</operator><name>CheckerMgr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>void</name> <macro><name>validateCheckerOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>IsWeak</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>resolveDependencies</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolveCheckerAndPackageOptions</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>CheckerRegistryData</name> <modifier>&amp;</modifier></type><name>Data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AnalyzerOptions</name> <modifier>&amp;</modifier></type><name>AnOpts</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
