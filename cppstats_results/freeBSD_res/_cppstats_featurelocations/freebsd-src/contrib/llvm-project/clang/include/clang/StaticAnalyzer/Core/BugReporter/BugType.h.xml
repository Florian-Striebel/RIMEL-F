<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugType.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_BUGREPORTER_BUGTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/CommonBugCategories.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Checker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BugReporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExprEngine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BugType</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>CheckerNameRef</name></type> <name>CheckerName</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>Description</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>Category</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CheckerBase</name> <modifier>*</modifier></type><name>Checker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>SuppressOnSink</name></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>BugType</name><argument_list>(<argument>CheckerNameRef CheckerName</argument>, <argument>StringRef Name</argument>, <argument>StringRef Cat</argument>,
<argument>bool SuppressOnSink = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CheckerName</name><argument_list>(<argument><expr><name>CheckerName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Description</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Category</name><argument_list>(<argument><expr><name>Cat</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Checker</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SuppressOnSink</name><argument_list>(<argument>SuppressOnSink</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>BugType</name><argument_list>(<argument>const CheckerBase *Checker</argument>, <argument>StringRef Name</argument>, <argument>StringRef Cat</argument>,
<argument>bool SuppressOnSink = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>CheckerName</name><argument_list>(<argument><expr><call><name><name>Checker</name><operator>-&gt;</operator><name>getCheckerName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Description</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Category</name><argument_list>(<argument><expr><name>Cat</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Checker</name><argument_list>(<argument><expr><name>Checker</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SuppressOnSink</name><argument_list>(<argument>SuppressOnSink</argument>)</argument_list></macro> <expr><block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>BugType</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Description</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getCategory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Category</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>StringRef</name> <macro><name>getCheckerName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{





<expr><name>StringRef</name> <name>Ret</name> <operator>=</operator> <name>Checker</name> <operator>?</operator> <call><name><name>Checker</name><operator>-&gt;</operator><name>getCheckerName</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>CheckerName</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Ret</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Checker name is not set properly."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Ret</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isSuppressOnSink</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SuppressOnSink</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BuiltinBug</name> <range>: <expr><name>public</name> <name>BugType</name> <block>{
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>desc</name></expr>;
<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>BuiltinBug</name><argument_list>(<argument>class CheckerNameRef checker</argument>, <argument>const char *name</argument>,
<argument>const char *description</argument>)</argument_list></macro>
<operator>:</operator> <call><name>BugType</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>categories</name><operator>::</operator><name>LogicError</name></expr></argument>)</argument_list></call></expr>, <macro><name>desc</name><argument_list>(<argument>description</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>BuiltinBug</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckerBase</name> <operator>*</operator><name>checker</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>BugType</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>categories</name><operator>::</operator><name>LogicError</name></expr></argument>)</argument_list></call></expr>, <macro><name>desc</name><argument_list>(<argument>description</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>BuiltinBug</name><argument_list>(<argument>class CheckerNameRef checker</argument>, <argument>const char *name</argument>)</argument_list></macro>
<operator>:</operator> <call><name>BugType</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>categories</name><operator>::</operator><name>LogicError</name></expr></argument>)</argument_list></call></expr>, <macro><name>desc</name><argument_list>(<argument>name</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>BuiltinBug</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckerBase</name> <operator>*</operator><name>checker</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>BugType</name><argument_list>(<argument><expr><name>checker</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>categories</name><operator>::</operator><name>LogicError</name></expr></argument>)</argument_list></call></expr>, <macro><name>desc</name><argument_list>(<argument>name</argument>)</argument_list></macro> <expr><block>{}</block>

<name>StringRef</name> <macro><name>getDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>desc</name></expr>;</return> }</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
