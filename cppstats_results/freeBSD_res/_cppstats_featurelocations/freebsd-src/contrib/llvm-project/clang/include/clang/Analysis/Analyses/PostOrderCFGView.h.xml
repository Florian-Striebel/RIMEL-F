<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/PostOrderCFGView.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_POSTORDERCFGVIEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_POSTORDERCFGVIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PostOrderIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PostOrderCFGView</name> <range>: <expr><name>public</name> <name>ManagedAnalysis</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>






<name>class</name> <name>CFGBlockSet</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>BitVector</name> <name>VisitedBlockIDs</name></expr>;

<expr><name>public</name><operator>:</operator>


struct <name>iterator</name> <block>{ <expr><name>using</name> <name>value_type</name> <operator>=</operator> <specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr>; }</block></expr>;

<expr><call><name>CFGBlockSet</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>CFGBlockSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFG</name> <operator>*</operator><name>G</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>VisitedBlockIDs</name><argument_list>(<argument>G-&gt;getNumBlockIDs()</argument>, <argument>false</argument>)</argument_list></macro> <block>{}</block>



<name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>NoneType</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>const CFGBlock *Block</argument>)</argument_list></macro> <block>{




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>None</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><call><name><name>VisitedBlockIDs</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>None</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<call><name><name>VisitedBlockIDs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>None</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>




<function><type><name>bool</name></type> <name>alreadySet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>VisitedBlockIDs</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><call><name><name>Block</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>po_iterator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>po_iterator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFG</name> <operator>*</operator></expr></argument>, <argument><expr><name>CFGBlockSet</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Blocks</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>BlockOrderTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockOrderTy</name></type> <name>BlockOrder</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>friend</name></macro> <struct_decl>struct <name>BlockOrderCompare</name>;</struct_decl>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reverse_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_reverse_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PostOrderCFGView</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFG</name> <operator>*</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Blocks</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Blocks</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Blocks</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Blocks</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>begin</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<struct>struct <name>BlockOrderCompare</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>PostOrderCFGView</name> <modifier>&amp;</modifier></type><name>POV</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BlockOrderCompare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PostOrderCFGView</name> <operator>&amp;</operator><name>pov</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>POV</name><argument_list>(<argument>pov</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>b1</name><operator>,</operator> <specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>b2</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><name>BlockOrderCompare</name> <macro><name>getComparator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>BlockOrderCompare</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>getTag</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PostOrderCFGView</name></expr></argument>&gt;</argument_list></name>
<call><name>create</name><argument_list>(<argument><expr><name>AnalysisDeclContext</name> <operator>&amp;</operator><name>analysisContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
