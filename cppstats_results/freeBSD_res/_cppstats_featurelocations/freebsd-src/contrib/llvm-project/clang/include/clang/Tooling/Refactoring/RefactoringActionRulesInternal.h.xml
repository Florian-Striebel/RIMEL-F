<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRulesInternal.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULES_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULES_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringResultConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringRuleContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>findError</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ignoreError</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FirstT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RestT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ignoreError</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>FirstT</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>First</name></decl></parameter>, <parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>RestT</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>Rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>First</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>consumeError</name><argument_list>(<argument><expr><call><name><name>First</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ignoreError</name><argument_list>(<argument><expr><name>Rest</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FirstT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RestT</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name>Error</name> <macro><name>findError</name><argument_list>(<argument>Expected&lt;FirstT&gt; &amp;First</argument>, <argument>Expected&lt;RestT&gt; &amp;... Rest</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>First</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ignoreError</name><argument_list>(<argument><expr><name>Rest</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>First</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
return findError(Rest...</block></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RuleType</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RequirementTypes</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>Is</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>invokeRuleAfterValidatingRequirements</name><argument_list>(
<argument><expr><name>RefactoringResultConsumer</name> <operator>&amp;</operator><name>Consumer</name></expr></argument>, <argument><expr><name>RefactoringRuleContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Requirements</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>Is</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>Values</name> <init>=
<expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Is</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Requirements</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>evaluate</name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Err</name> <init>= <expr><call><name>findError</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Is</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Values</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Consumer</name><operator>.</operator><name>handleError</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>auto</name></type> <name>Rule</name> <init>=
<expr><name>RuleType</name><operator>::</operator><call><name>initiate</name><argument_list>(<argument><expr><name>Context</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Is</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Values</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Rule</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Consumer</name><operator>.</operator><name>handleError</name></name><argument_list>(<argument><expr><call><name><name>Rule</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Rule</name><operator>-&gt;</operator><name>invoke</name></name><argument_list>(<argument><expr><name>Consumer</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>visitRefactoringOptionsImpl</name><parameter_list>(<parameter><decl><type><name>RefactoringOptionVisitor</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FirstT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RestT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>visitRefactoringOptionsImpl</name><parameter_list>(<parameter><decl><type><name>RefactoringOptionVisitor</name> <modifier>&amp;</modifier></type><name>Visitor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FirstT</name> <modifier>&amp;</modifier></type><name>First</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RestT</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>Rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct>struct <name>OptionGatherer</name> <block>{
<decl_stmt><decl><type><name>RefactoringOptionVisitor</name> <modifier>&amp;</modifier></type><name>Visitor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>RefactoringOptionsRequirement</name> <operator>&amp;</operator><name>Requirement</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Option</name> <range>: <expr><call><name><name>Requirement</name><operator>.</operator><name>getRefactoringOptions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Option</name><operator>-&gt;</operator><name>passToVisitor</name></name><argument_list>(<argument><expr><name>Visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>RefactoringActionRuleRequirement</name> <operator>&amp;</operator><operator>)</operator> <block>{}</block></expr></expr_stmt>
}</block>;</struct>
<expr_stmt><expr><operator>(</operator><name>OptionGatherer</name><block>{<expr><name>Visitor</name></expr>}</block><operator>)</operator><operator>(</operator><name>First</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>visitRefactoringOptionsImpl</name><argument_list>(<argument><expr><name>Visitor</name></expr></argument>, <argument><expr><name>Rest</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>RequirementTypes</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>Is</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>visitRefactoringOptions</name><argument_list>(
<argument><expr><name>RefactoringOptionVisitor</name> <operator>&amp;</operator><name>Visitor</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Requirements</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>Is</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>visitRefactoringOptionsImpl</name><argument_list>(<argument><expr><name>Visitor</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Is</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Requirements</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Base</name></expr></argument>, <argument><expr><name>typename</name> <name>First</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Rest</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>HasBaseOf</name> <range>: <expr><name>std</name><operator>::</operator><name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name><name>HasBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>First</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name><name>HasBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Rest</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>true_type</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>false_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Base</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>HasBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Base</name></expr></argument>, <argument><expr><name>typename</name> <name>First</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Rest</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>AreBaseOf</name> <range>: <expr><name>std</name><operator>::</operator><name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name><name>AreBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>First</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>AreBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Rest</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>true_type</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>false_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Base</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>AreBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RuleType</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>RequirementTypes</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringActionRule</name></expr></argument>&gt;</argument_list></name>
<macro><name>createRefactoringActionRule</name><argument_list>(<argument>const RequirementTypes &amp;... Requirements</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringActionRuleBase</name></expr></argument>, <argument><expr><name>RuleType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Expected a refactoring action rule type"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name><name>AreBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringActionRuleRequirement</name></expr></argument>,
<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Expected a list of refactoring action rules"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>class</name> <name>Rule</name> <name>final</name> <operator>:</operator> <name>public</name> <name>RefactoringActionRule</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Rule</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>Requirements</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Requirements</name><argument_list>(<argument>Requirements</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>invoke</name><argument_list>(<argument>RefactoringResultConsumer &amp;Consumer</argument>,
<argument>RefactoringRuleContext &amp;Context</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>internal</name><operator>::</operator><call><name><name>invokeRuleAfterValidatingRequirements</name><argument_list type="generic">&lt;<argument><expr><name>RuleType</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>Consumer</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>, <argument><expr><name>Requirements</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>index_sequence_for</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasSelectionRequirement</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>internal</name><operator>::</operator><name><name>HasBaseOf</name><argument_list type="generic">&lt;<argument><expr><name>SourceSelectionRequirement</name></expr></argument>,
<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
}</block>

<name>void</name> <macro><name>visitRefactoringOptions</name><argument_list>(<argument>RefactoringOptionVisitor &amp;Visitor</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>internal</name><operator>::</operator><call><name>visitRefactoringOptions</name><argument_list>(
<argument><expr><name>Visitor</name></expr></argument>, <argument><expr><name>Requirements</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>index_sequence_for</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>RequirementTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>Requirements</name></expr>;
}</block></expr>;

<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>Rule</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>Requirements</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
