<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/BackendUtil.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_BACKENDUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_BACKENDUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/ModuleSummaryIndex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BitcodeModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Expected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBufferRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>

<enum>enum <name>BackendAction</name> <block>{
<decl><name>Backend_EmitAssembly</name></decl>,
<decl><name>Backend_EmitBC</name></decl>,
<decl><name>Backend_EmitLL</name></decl>,
<decl><name>Backend_EmitNothing</name></decl>,
<decl><name>Backend_EmitMCNull</name></decl>,
<decl><name>Backend_EmitObj</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>void</name></type> <name>EmitBackendOutput</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>HeaderSearchOptions</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><name>CGOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>TOpts</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LOpts</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>TDesc</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><name>BackendAction</name> <name>Action</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name> <name>OS</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>EmbedBitcode</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>*</operator><name>M</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><name>CGOpts</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <name>Buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
