<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/BasicValueFactory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BlockDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBoolLiteralExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LocationContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StackFrameContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ConditionTruthVal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramStateManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StoreRef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SValBuilder</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BasicValueFactory</name></type> <name>BasicVals</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SymbolManager</name></type> <name>SymMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MemRegionManager</name></type> <name>MemMgr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProgramStateManager</name> <modifier>&amp;</modifier></type><name>StateMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>QualType</name></type> <name>ArrayIndexTy</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>ArrayIndexWidth</name></decl>;</decl_stmt>

<function_decl><type><name>SVal</name></type> <name>evalCastKind</name><parameter_list>(<parameter><decl><type><name>UndefinedVal</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>CastTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>OriginalTy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SVal</name></type> <name>evalCastKind</name><parameter_list>(<parameter><decl><type><name>UnknownVal</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>CastTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>OriginalTy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SVal</name></type> <name>evalCastKind</name><parameter_list>(<parameter><decl><type><name>Loc</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>CastTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>OriginalTy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SVal</name></type> <name>evalCastKind</name><parameter_list>(<parameter><decl><type><name>NonLoc</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>CastTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>OriginalTy</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>loc</name><operator>::</operator><name>ConcreteInt</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>loc</name><operator>::</operator><name>GotoLabel</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>, <argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>loc</name><operator>::</operator><name>MemRegionVal</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>CompoundVal</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>LazyCompoundVal</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>LocAsInteger</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>SymbolVal</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalCastSubKind</name><argument_list>(<argument><expr><name>nonloc</name><operator>::</operator><name>PointerToMember</name> <name>V</name></expr></argument>, <argument><expr><name>QualType</name> <name>CastTy</name></expr></argument>,
<argument><expr><name>QualType</name> <name>OriginalTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SValBuilder</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>stateMgr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Context</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BasicVals</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SymMgr</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BasicVals</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MemMgr</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>StateMgr</name><argument_list>(<argument><expr><name>stateMgr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ArrayIndexTy</name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>LongLongTy</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ArrayIndexWidth</name><argument_list>(<argument>context.getTypeSize(ArrayIndexTy)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>SValBuilder</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>haveSameType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymExpr</name> <modifier>*</modifier></type><name>Sym1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SymExpr</name> <modifier>*</modifier></type><name>Sym2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>haveSameType</name><argument_list>(<argument><expr><call><name><name>Sym1</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Sym2</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>haveSameType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Ty1</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>Ty2</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><operator>(</operator><call><name><name>Context</name><operator>.</operator><name>getCanonicalType</name></name><argument_list>(<argument><expr><name>Ty1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>Context</name><operator>.</operator><name>getCanonicalType</name></name><argument_list>(<argument><expr><name>Ty2</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name><name>Ty1</name><operator>-&gt;</operator><name>isIntegralOrEnumerationType</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>Ty2</name><operator>-&gt;</operator><name>isIntegralOrEnumerationType</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>SVal</name></type> <name>evalCast</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>CastTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>OriginalTy</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>SVal</name></type> <name>evalIntegralCast</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>castTy</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>originalType</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>evalMinus</name><parameter_list>(<parameter><decl><type><name>NonLoc</name></type> <name>val</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>evalComplement</name><parameter_list>(<parameter><decl><type><name>NonLoc</name></type> <name>val</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<decl_stmt><decl><type><name>virtual</name> <name>SVal</name></type> <name>evalBinOpNN</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>lhs</name></expr></argument>, <argument><expr><name>NonLoc</name> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>resultTy</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>SVal</name></type> <name>evalBinOpLL</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>Loc</name> <name>lhs</name></expr></argument>, <argument><expr><name>Loc</name> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>resultTy</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>SVal</name></type> <name>evalBinOpLN</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>Loc</name> <name>lhs</name></expr></argument>, <argument><expr><name>NonLoc</name> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>resultTy</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><macro><name>getKnownValue</name><argument_list>(<argument>ProgramStateRef state</argument>, <argument>SVal val</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<function_decl><type><name>virtual</name> <name>SVal</name></type> <name>simplifySVal</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Val</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>SVal</name></type> <name>makeSymExprValNN</name><argument_list>(<argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>lhs</name></expr></argument>, <argument><expr><name>NonLoc</name> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>resultTy</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SVal</name></type> <name>evalBinOp</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>SVal</name> <name>lhs</name></expr></argument>, <argument><expr><name>SVal</name> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>ConditionTruthVal</name></type> <name>areEqual</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SVal</name></type> <name>evalEQ</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>evalEQ</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>DefinedOrUnknownSVal</name></type> <name>lhs</name></decl></parameter>,
<parameter><decl><type><name>DefinedOrUnknownSVal</name></type> <name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>getContext</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Context</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Context</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ProgramStateManager</name> <modifier>&amp;</modifier></type><name>getStateManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>StateMgr</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>QualType</name> <macro><name>getConditionType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Context</name><operator>.</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call><operator>.</operator><name>CPlusPlus</name> <operator>?</operator> <name><name>Context</name><operator>.</operator><name>BoolTy</name></name> <operator>:</operator> <name><name>Context</name><operator>.</operator><name>IntTy</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getArrayIndexType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ArrayIndexTy</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>BasicValueFactory</name> <modifier>&amp;</modifier></type><name>getBasicValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>BasicVals</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>BasicValueFactory</name> <operator>&amp;</operator><macro><name>getBasicValueFactory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BasicVals</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>SymbolManager</name> <modifier>&amp;</modifier></type><name>getSymbolManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>SymMgr</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>SymbolManager</name> <operator>&amp;</operator><macro><name>getSymbolManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SymMgr</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>MemRegionManager</name> <modifier>&amp;</modifier></type><name>getRegionManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MemMgr</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>MemRegionManager</name> <operator>&amp;</operator><macro><name>getRegionManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MemMgr</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><specifier>const</specifier> <name>SymbolConjured</name><modifier>*</modifier></type> <name>conjureSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>visitCount</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbolTag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>SymMgr</name><operator>.</operator><name>conjureSymbol</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>visitCount</name></expr></argument>, <argument><expr><name>symbolTag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>SymbolConjured</name><modifier>*</modifier></type> <name>conjureSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>visitCount</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbolTag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>SymMgr</name><operator>.</operator><name>conjureSymbol</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>visitCount</name></expr></argument>, <argument><expr><name>symbolTag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>makeZeroVal</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>getRegionValueSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>conjureSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbolTag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>conjureSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbolTag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>conjureSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>visitCount</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>getConjuredHeapSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Count</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>getConjuredHeapSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedOrUnknownSVal</name></type> <name>getDerivedRegionValueSymbolVal</name><parameter_list>(
<parameter><decl><type><name>SymbolRef</name></type> <name>parentSymbol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedSVal</name></type> <name>getMetadataSymbolVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbolTag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedSVal</name></type> <name>getMemberPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedSVal</name></type> <name>getFunctionPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DefinedSVal</name></type> <name>getBlockPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>CanQualType</name></type> <name>locTy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>locContext</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>blockCount</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></type> <name>getConstantVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>NonLoc</name></type> <name>makeCompoundVal</name><argument_list>(<argument><expr><name>QualType</name> <name>type</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <name>vals</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>CompoundVal</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getCompoundValData</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>NonLoc</name></type> <name>makeLazyCompoundVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StoreRef</name> <modifier>&amp;</modifier></type><name>store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>LazyCompoundVal</name><argument_list>(
<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getLazyCompoundValData</name></name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makePointerToMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclaratorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>PointerToMember</name><argument_list>(<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makePointerToMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PointerToMemberData</name> <modifier>*</modifier></type><name>PTMD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>PointerToMember</name><argument_list>(<argument><expr><name>PTMD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makeZeroArrayIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ArrayIndexTy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makeArrayIndex</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>ArrayIndexTy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>SVal</name></type> <name>convertToArrayIndex</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeIntVal</name><argument_list>(<argument>const IntegerLiteral* integer</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(
<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><call><name><name>integer</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>integer</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isUnsignedIntegerOrEnumerationType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeBoolVal</name><argument_list>(<argument>const ObjCBoolLiteralExpr *boolean</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>makeTruthVal</name><argument_list>(<argument><expr><call><name><name>boolean</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>boolean</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <call><name>makeBoolVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXBoolLiteralExpr</name> <operator>*</operator><name>boolean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeIntVal</name><argument_list>(<argument>const llvm::APSInt&amp; integer</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>loc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeIntLocVal</name><argument_list>(<argument>const llvm::APSInt &amp;integer</argument>)</argument_list></macro> <block>{
<return>return <expr><name>loc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>NonLoc</name></type> <name>makeIntVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APInt</name><operator>&amp;</operator> <name>integer</name></expr></argument>, <argument><expr><name>bool</name> <name>isUnsigned</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>DefinedSVal</name></type> <name>makeIntVal</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>integer</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Loc</name><operator>::</operator><call><name>isLocType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makeIntVal</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>integer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isUnsigned</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getIntValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makeIntValWithPtrWidth</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>integer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isUnsigned</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(
<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getIntWithPtrWidth</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NonLoc</name></type> <name>makeLocAsInteger</name><parameter_list>(<parameter><decl><type><name>Loc</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>LocAsInteger</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getPersistentSValWithData</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>NonLoc</name></type> <name>makeNonLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>lhs</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NonLoc</name></type> <name>makeNonLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>rhs</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>lhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NonLoc</name></type> <name>makeNonLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>lhs</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>rhs</name></expr></argument>, <argument><expr><name>QualType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>NonLoc</name></type> <name>makeNonLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymExpr</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>fromTy</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>toTy</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeTruthVal</name><argument_list>(<argument>bool b</argument>, <argument>QualType type</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getTruthValue</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>nonloc</name><operator>::</operator><name>ConcreteInt</name> <macro><name>makeTruthVal</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getTruthValue</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<function><type><name>Loc</name></type> <name>makeNullWithType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getZeroWithTypeSize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Loc</name></type> <name>makeNull</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getZeroWithPtrWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Loc</name></type> <name>makeLoc</name><parameter_list>(<parameter><decl><type><name>SymbolRef</name></type> <name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>MemRegionVal</name><argument_list>(<argument><expr><call><name><name>MemMgr</name><operator>.</operator><name>getSymbolicRegion</name></name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Loc</name></type> <name>makeLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name><modifier>*</modifier></type> <name>region</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>MemRegionVal</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Loc</name></type> <name>makeLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddrLabelExpr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>GotoLabel</name><argument_list>(<argument><expr><call><name><name>expr</name><operator>-&gt;</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Loc</name></type> <name>makeLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>integer</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>loc</name><operator>::</operator><call><name>ConcreteInt</name><argument_list>(<argument><expr><call><name><name>BasicVals</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>loc</name><operator>::</operator><name>MemRegionVal</name></expr></argument>&gt;</argument_list></name></type> <name>getCastedMemRegionVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>SVal</name></type> <name>makeSymbolVal</name><parameter_list>(<parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Loc</name><operator>::</operator><call><name>isLocType</name><argument_list>(<argument><expr><call><name><name>Sym</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>makeLoc</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nonloc</name><operator>::</operator><call><name>SymbolVal</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>loc</name><operator>::</operator><name>MemRegionVal</name> <call><name>getCXXThis</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StackFrameContext</name> <operator>*</operator><name>SFC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>loc</name><operator>::</operator><name>MemRegionVal</name> <call><name>getCXXThis</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StackFrameContext</name> <operator>*</operator><name>SFC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>SValBuilder</name><modifier>*</modifier></type> <name>createSimpleSValBuilder</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>alloc</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>stateMgr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
