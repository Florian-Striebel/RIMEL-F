<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_DOMINATORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_DOMINATORS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DepthFirstIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/GraphTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GenericIteratedDominanceFrontier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GenericDomTree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/GenericDomTreeConstruction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>





<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>DomTreeNode</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DomTreeNodeBase</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>IsPostDom</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CFGDominatorTreeImpl</name> <range>: <expr><name>public</name> <name>ManagedAnalysis</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>DominatorTreeBase</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>DominatorTreeBase</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name></expr></argument>, <argument><expr><name>IsPostDom</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><call><name>CFGDominatorTreeImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<macro><name>CFGDominatorTreeImpl</name><argument_list>(<argument>CFG *cfg</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>buildDominatorTree</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>CFGDominatorTreeImpl</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>DominatorTreeBase</name> <operator>&amp;</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>DT</name></expr>;</return> }</block>

<name>CFG</name> <operator>*</operator><macro><name>getCFG</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>cfg</name></expr>;</return> }</block>


<name>CFGBlock</name> <operator>*</operator><macro><name>getRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>DomTreeNode</name> <operator>*</operator><macro><name>getRootNode</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>




<name>bool</name> <macro><name>compare</name><argument_list>(<argument>CFGDominatorTreeImpl &amp;Other</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>DomTreeNode</name> <operator>*</operator><name>R</name> <operator>=</operator> <call><name>getRootNode</name><argument_list>()</argument_list></call></expr>;
<expr><name>DomTreeNode</name> <operator>*</operator><name>OtherR</name> <operator>=</operator> <call><name><name>Other</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>R</name> <operator>||</operator> <operator>!</operator><name>OtherR</name> <operator>||</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>OtherR</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><call><name><name>DT</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>buildDominatorTree</name><parameter_list>(<parameter><decl><type><name>CFG</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>DT</name><operator>.</operator><name>recalculate</name></name><argument_list>(<argument><expr><operator>*</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Immediate "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>IsPostDom</name></expr> ?</condition><then> <expr><literal type="string">"post "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
<operator>&lt;&lt;</operator> <literal type="string">"dominance tree (Node#,IDom#):\n"</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>CFG</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>cfg</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>E</name> <operator>=</operator> <call><name><name>cfg</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>I</name> <operator>&amp;&amp;</operator>
<literal type="string">"LLVM's Dominator tree builder uses nullpointers to signify the "</literal>
<literal type="string">"virtual root!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DomTreeNode</name> <modifier>*</modifier></type><name>IDom</name> <init>= <expr><call><name><name>DT</name><operator>.</operator><name>getNode</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getIDom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>IDom</name> <operator>&amp;&amp;</operator> <call><name><name>IDom</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">","</literal>
<operator>&lt;&lt;</operator> <call><name><name>IDom</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBlockID</name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>IsEntryBlock</name> <init>= <expr><operator>*</operator><name>I</name> <operator>==</operator> <operator>&amp;</operator><call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsExitBlock</name> <init>= <expr><operator>*</operator><name>I</name> <operator>==</operator> <operator>&amp;</operator><call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getExit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsDomTreeRoot</name> <init>= <expr><operator>!</operator><name>IDom</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IsPostDom</name> <operator>&amp;&amp;</operator> <name>IsEntryBlock</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsPostDomTreeRoot</name> <init>=
<expr><name>IDom</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>IDom</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>IsPostDom</name> <operator>&amp;&amp;</operator> <name>IsExitBlock</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>IsDomTreeRoot</name> <operator>||</operator> <name>IsPostDomTreeRoot</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"If the immediate dominator node is nullptr, the CFG block "</literal>
<literal type="string">"should be the exit point (since it's the root of the dominator "</literal>
<literal type="string">"tree), or if the CFG block it refers to is a nullpointer, it "</literal>
<literal type="string">"must be the entry block (since it's the root of the post "</literal>
<literal type="string">"dominator tree)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>IsDomTreeRoot</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>IsPostDomTreeRoot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <call><name><operator>(</operator><operator>*</operator><name>I</name><operator>)</operator><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<decl_stmt><decl><type><name>bool</name></type> <name>dominates</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>B</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>dominates</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>properlyDominates</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>B</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>properlyDominates</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>CFGBlock</name> <modifier>*</modifier></type><name>findNearestCommonDominator</name><parameter_list>(<parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>findNearestCommonDominator</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>findNearestCommonDominator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>findNearestCommonDominator</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>changeImmediateDominator</name><parameter_list>(<parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>NewIDom</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>DT</name><operator>.</operator><name>changeImmediateDominator</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>NewIDom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>isReachableFromEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>DT</name><operator>.</operator><name>isReachableFromEntry</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>releaseMemory</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DT</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Module</name><operator>*</operator> <name>M</name><operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>DT</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>CFG</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DominatorTreeBase</name></type> <name>DT</name></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>using</name></type> <name>CFGDomTree</name> <init>= <expr><name><name>CFGDominatorTreeImpl</name><argument_list type="generic">&lt; <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>CFGPostDomTree</name> <init>= <expr><name><name>CFGDominatorTreeImpl</name><argument_list type="generic">&lt; <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>void</name> <name><name>CFGDominatorTreeImpl</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>anchor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>void</name> <name><name>CFGDominatorTreeImpl</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>anchor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>IDFCalculatorDetail</name> <block>{<block_content>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>IsPostDom</name><operator>&gt;</operator>
struct <name><name>ChildrenGetterTy</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CFGBlock</name></expr></argument>, <argument><expr><name>IsPostDom</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <name>typename</name> <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CFGBlock</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>NodeRef</name></expr>;
<expr><name>using</name> <name>ChildrenTy</name> <operator>=</operator> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NodeRef</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>ChildrenTy</name> <macro><name>get</name><argument_list>(<argument>const NodeRef &amp;N</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>OrderedNodeTy</name> <operator>=</operator>
<name>typename</name> <name><name>IDFCalculatorBase</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CFGBlock</name></expr></argument>, <argument><expr><name>IsPostDom</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>OrderedNodeTy</name></expr>;

<expr><name>auto</name> <name>Children</name> <operator>=</operator> <call><name><name>children</name><argument_list type="generic">&lt;<argument><expr><name>OrderedNodeTy</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;
<expr><name>ChildrenTy</name> <name>Ret</name><block>{<expr><call><name><name>Children</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>, <macro><name>Children</name></macro><expr><operator>.</operator><macro><name>end</name><argument_list>()</argument_list></macro></expr>}</block></expr>;
<expr><call><name><name>Ret</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>Ret</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Ret</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Ret</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Ret</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ControlDependencyCalculator</name> <range>: <expr><name>public</name> <name>ManagedAnalysis</name> <block>{
<expr><name>using</name> <name>IDFCalculator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>IDFCalculatorBase</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>CFGBlockVector</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>CFGBlockSet</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>CFGPostDomTree</name> <name>PostDomTree</name></expr>;
<expr><name>IDFCalculator</name> <name>IDFCalc</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>CFGBlock</name> <operator>*</operator></expr></argument>, <argument><expr><name>CFGBlockVector</name></expr></argument>&gt;</argument_list></name> <name>ControlDepenencyMap</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ControlDependencyCalculator</name><argument_list>(<argument><expr><name>CFG</name> <operator>*</operator><name>cfg</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>PostDomTree</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>, <macro><name>IDFCalc</name><argument_list>(<argument>PostDomTree.getBase()</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>CFGPostDomTree</name> <operator>&amp;</operator><macro><name>getCFGPostDomTree</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PostDomTree</name></expr>;</return> }</block>


<specifier>const</specifier> <name>CFGBlockVector</name> <operator>&amp;</operator><macro><name>getControlDependencies</name><argument_list>(<argument>CFGBlock *A</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>It</name> <operator>=</operator> <call><name><name>ControlDepenencyMap</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>==</operator> <call><name><name>ControlDepenencyMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CFGBlockSet</name></type> <name>DefiningBlock</name> <init>= <expr><block>{<expr><name>A</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>IDFCalc</name><operator>.</operator><name>setDefiningBlocks</name></name><argument_list>(<argument><expr><name>DefiningBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFGBlockVector</name></type> <name>ControlDependencies</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>IDFCalc</name><operator>.</operator><name>calculate</name></name><argument_list>(<argument><expr><name>ControlDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>It</name> <operator>=</operator> <macro><name>ControlDepenencyMap</name></macro><operator>.</operator><macro><name>insert</name><argument_list>(<argument>{A</argument>, <argument>ControlDependencies}</argument>)</argument_list></macro><operator>.</operator><name>first</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

assert(It != ControlDepenencyMap.end(</block></if></if_stmt>))</block></expr>;
<return>return <expr><name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
}</block></expr></range></decl></decl_stmt>


<function><type><name>bool</name></type> <name>isControlDependent</name><parameter_list>(<parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>is_contained</name><argument_list>(<argument><expr><call><name>getControlDependencies</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dump</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CFG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name><name>PostDomTree</name><operator>.</operator><name>getCFG</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Control dependencies (Node#,Dependency#):\n"</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>BB</name> <range>: <expr><operator>*</operator><name>cfg</name></expr></range></decl></init>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>BB</name> <operator>&amp;&amp;</operator>
<literal type="string">"LLVM's Dominator tree builder uses nullpointers to signify the "</literal>
<literal type="string">"virtual root!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>CFGBlock</name> <modifier>*</modifier></type><name>isControlDependency</name> <range>: <expr><call><name>getControlDependencies</name><argument_list>(<argument><expr><name>BB</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">","</literal>
<operator>&lt;&lt;</operator> <call><name><name>isControlDependency</name><operator>-&gt;</operator><name>getBlockID</name></name><argument_list>()</argument_list></call>
<operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>





<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DomTreeNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <operator>::</operator><name>clang</name><operator>::</operator><name>DomTreeNode</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>ChildIteratorType</name> <operator>=</operator> <operator>::</operator><name>clang</name><operator>::</operator><name>DomTreeNode</name><operator>::</operator><name>const_iterator</name></expr>;

<expr><specifier>static</specifier> <name>NodeRef</name> <macro><name>getEntryNode</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{ <return>return <expr><name>N</name></expr>;</return> }</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_begin</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_end</name><argument_list>(<argument>NodeRef N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>using</name> <name>nodes_iterator</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>pointer_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>df_iterator</name><argument_list type="generic">&lt;<argument><expr><operator>::</operator><name>clang</name><operator>::</operator><name>DomTreeNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>::clang::DomTreeNode *N</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name>df_begin</name><argument_list>(<argument><expr><call><name>getEntryNode</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name><argument_list>(<argument>::clang::DomTreeNode *N</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name>df_end</name><argument_list>(<argument><expr><call><name>getEntryNode</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CFGDomTree</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DomTreeNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>NodeRef</name> <macro><name>getEntryNode</name><argument_list>(<argument>clang::CFGDomTree *DT</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>DT</name><operator>-&gt;</operator><name>getRootNode</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>clang::CFGDomTree *N</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name>df_begin</name><argument_list>(<argument><expr><call><name>getEntryNode</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name><argument_list>(<argument>clang::CFGDomTree *N</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name>df_end</name><argument_list>(<argument><expr><call><name>getEntryNode</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
