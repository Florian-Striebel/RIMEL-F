<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLANG_AST_ABSTRACTBASICWRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLANG_AST_ABSTRACTBASICWRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>makeOptionalFromNullable</name><argument_list>(<argument>const T &amp;value</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><call><name><name>value</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call>
<operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call>
<operator>:</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>makeOptionalFromPointer</name><argument_list>(<argument>T *value</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>value</name> <operator>?</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>llvm</name><operator>::</operator><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>







































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AbstractBasicWriter.inc"</cpp:file></cpp:include>




















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Impl</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DataStreamBasicWriter</name> <range>: <expr><name>public</name> <name><name>BasicWriterBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>using</name> <name><name>BasicWriterBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>asImpl</name></expr>;
<expr><call><name>DataStreamBasicWriter</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>BasicWriterBase</name></macro><operator>&lt;</operator><name>Impl</name><operator>&gt;</operator><operator>(</operator><name>ctx</name><operator>)</operator> <block>{}</block>

<name>public</name><operator>:</operator>


<name>Impl</name> <operator>&amp;</operator><macro><name>find</name><argument_list>(<argument>const char *propertyName</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<name>Impl</name> <operator>&amp;</operator><macro><name>writeObject</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>writeEnum</name><argument_list>(<argument>T value</argument>)</argument_list></macro> <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>writeArray</name><argument_list>(<argument>llvm::ArrayRef&lt;T&gt; array</argument>)</argument_list></macro> <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>array</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>elt</name> <range>: <expr><name>array</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>WriteDispatcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

template &lt;class T&gt;
void writeOptional(llvm::Optional&lt;T&gt; value</block></for>) <block>{
<expr><name><name>WriteDispatcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PackOptionalValue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>pack</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></block>

<name>void</name> <macro><name>writeAPSInt</name><argument_list>(<argument>const llvm::APSInt &amp;value</argument>)</argument_list></macro> <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeBool</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>isUnsigned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeAPInt</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>writeAPInt</name><argument_list>(<argument>const llvm::APInt &amp;value</argument>)</argument_list></macro> <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBitWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><name>words</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>getRawData</name></name><argument_list>()</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getNumWords</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt64</name><argument_list>(<argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>

<name>void</name> <macro><name>writeFixedPointSemantics</name><argument_list>(<argument>const llvm::FixedPointSemantics &amp;sema</argument>)</argument_list></macro> <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>sema</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>sema</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>sema</name><operator>.</operator><name>isSigned</name></name><argument_list>()</argument_list></call> <operator>|</operator> <call><name><name>sema</name><operator>.</operator><name>isSaturated</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator>
<call><name><name>sema</name><operator>.</operator><name>hasUnsignedPadding</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>writeLValuePathSerializationHelper</name><argument_list>(
<argument>APValue::LValuePathSerializationHelper lvaluePath</argument>)</argument_list></macro> <block>{
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>APValue</name><operator>::</operator><name>LValuePathEntry</name></expr></argument>&gt;</argument_list></name> <name>path</name> <operator>=</operator> <name><name>lvaluePath</name><operator>.</operator><name>Path</name></name></expr>;
<expr><name>QualType</name> <name>elemTy</name> <operator>=</operator> <call><name><name>lvaluePath</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeQualType</name><argument_list>(<argument><expr><name>elemTy</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <operator>&amp;</operator><name>ctx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>BasicWriterBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><operator>)</operator><name>this</name><operator>)</operator><operator>-&gt;</operator><call><name>getASTContext</name><argument_list>()</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>auto</name></type> <name>elem</name> <range>: <expr><name>path</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elemTy</name><operator>-&gt;</operator><name>getAs</name></name><operator>&lt;</operator><name>RecordType</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>getAsBaseOrMember</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>baseOrMember</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getAsBaseOrMember</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>recordDecl</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXRecordDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>baseOrMember</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><name>recordDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>getRecordType</name></name><argument_list>(<argument><expr><name>recordDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>valueDecl</name> <init>= <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>baseOrMember</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><name>valueDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name><name>valueDecl</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
} else <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>getAsArrayIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>getAsArrayType</name></name><argument_list>(<argument><expr><name>elemTy</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getElementType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
}

void writeQualifiers(Qualifiers value</block></block></block></if></if_stmt>)</block_content> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getAsOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"update this if the value size changes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getAsOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

void writeExceptionSpecInfo(
const FunctionProtoType::ExceptionSpecInfo &amp;esi</block></block></if></if_stmt>)</block_content> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>Type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name>EST_Dynamic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeArray</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>Exceptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (isComputedNoexcept(esi.Type</block></if></if_stmt>)</block_content></block></block></for>) <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeExprRef</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>NoexceptExpr</name></name></expr></argument>)</argument_list></call></expr>;
}</block></block></expr> <if_stmt><if type="elseif">else if <condition>(<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name>EST_Uninstantiated</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>SourceDecl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>SourceTemplate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (esi.Type == EST_Unevaluated</block></if></if_stmt>) <block>{
<expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><name><name>esi</name><operator>.</operator><name>SourceDecl</name></name></expr></argument>)</argument_list></call></expr>;
}</block></block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>writeExtParameterInfo</name><argument_list>(<argument><expr><name>FunctionProtoType</name><operator>::</operator><name>ExtParameterInfo</name> <name>epi</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name><name>epi</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"opaque value doesn't fit into uint32_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>epi</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>writeNestedNameSpecifier</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>NNS</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>nestedNames</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>NNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>nestedNames</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NNS</name> <operator>=</operator> <call><name><name>NNS</name><operator>-&gt;</operator><name>getPrefix</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeUInt32</name><argument_list>(<argument><expr><call><name><name>nestedNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>nestedNames</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NNS</name> <operator>=</operator> <call><name><name>nestedNames</name><operator>.</operator><name>pop_back_val</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NestedNameSpecifier</name><operator>::</operator><name>SpecifierKind</name> <name>kind</name> <operator>=</operator> <call><name><name>NNS</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeNestedNameSpecifierKind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Identifier</name></expr>:</case>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeIdentifier</name><argument_list>(<argument><expr><call><name><name>NNS</name><operator>-&gt;</operator><name>getAsIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Namespace</name></expr>:</case>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeNamespaceDeclRef</name><argument_list>(<argument><expr><call><name><name>NNS</name><operator>-&gt;</operator><name>getAsNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>NamespaceAlias</name></expr>:</case>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeNamespaceAliasDeclRef</name><argument_list>(<argument><expr><call><name><name>NNS</name><operator>-&gt;</operator><name>getAsNamespaceAlias</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>TypeSpec</name></expr>:</case>
<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>TypeSpecWithTemplate</name></expr>:</case>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeQualType</name><argument_list>(<argument><expr><call><name>QualType</name><argument_list>(<argument><expr><call><name><name>NNS</name><operator>-&gt;</operator><name>getAsType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Global</name></expr>:</case>

<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Super</name></expr>:</case>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeDeclRef</name><argument_list>(<argument><expr><call><name><name>NNS</name><operator>-&gt;</operator><name>getAsRecordDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad nested name specifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
