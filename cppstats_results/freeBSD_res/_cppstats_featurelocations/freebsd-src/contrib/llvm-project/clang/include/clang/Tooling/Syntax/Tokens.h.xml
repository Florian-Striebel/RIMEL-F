<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_SYNTAX_TOKENS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_SYNTAX_TOKENS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>syntax</name> <block>{<block_content>



<struct>struct <name>FileRange</name> <block>{

<macro><name>FileRange</name><argument_list>(<argument>FileID File</argument>, <argument>unsigned BeginOffset</argument>, <argument>unsigned EndOffset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>FileRange</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation BeginLoc</argument>, <argument>unsigned Length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>FileRange</name><argument_list>(<argument>const SourceManager &amp;SM</argument>, <argument>SourceLocation BeginLoc</argument>,
<argument>SourceLocation EndLoc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>file</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>File</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>beginOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Begin</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>endOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>length</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name> <operator>-</operator> <name>Begin</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>contains</name><argument_list>(<argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Begin</name> <operator>&lt;=</operator> <name>Offset</name> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>&lt;</operator> <name>End</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>touches</name><argument_list>(<argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Begin</name> <operator>&lt;=</operator> <name>Offset</name> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>&lt;=</operator> <name>End</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>text</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>toCharRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>L</name><operator>,</operator> <specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>L</name><operator>.</operator><name>File</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>Begin</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>End</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>File</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>Begin</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>End</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>L</name><operator>,</operator> <specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>L</name> <operator>==</operator> <name>R</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FileID</name></type> <name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>End</name></decl>;</decl_stmt>
}</block>;</struct>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>R</name><operator>)</operator></expr>;</expr_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Token</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Token</name><argument_list>(<argument>SourceLocation Location</argument>, <argument>unsigned Length</argument>, <argument>tok::TokenKind Kind</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>explicit</name></type> <name>Token</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Token</name> <operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <macro><name>kind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>location</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Location</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>endLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Location</name><operator>.</operator><name>getLocWithOffset</name></name><argument_list>(<argument><expr><name>Length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>length</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Length</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>text</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>FileRange</name></type> <name>range</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>FileRange</name></type> <name>range</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>&amp;</operator><name>First</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>&amp;</operator><name>Last</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>dumpForTests</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>str</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Length</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>T</name><operator>)</operator></expr>;</expr_stmt>



























<decl_stmt><decl><type><name>class</name></type> <name>TokenBuffer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TokenBuffer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SourceMgr</name><argument_list>(<argument>&amp;SourceMgr</argument>)</argument_list></macro> <block>{}</block>

<call><name>TokenBuffer</name><argument_list>(<argument><expr><name>TokenBuffer</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TokenBuffer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TokenBuffer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TokenBuffer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>TokenBuffer</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TokenBuffer</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TokenBuffer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>expandedTokens</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExpandedTokens</name></expr>;</return>
}</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>indexExpandedTokens</name><parameter_list>()</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>expandedTokens</name><argument_list>(<argument>SourceRange R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





























<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>spelledForExpanded</name><argument_list>(<argument>llvm::ArrayRef&lt;syntax::Token&gt; Expanded</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




























<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<macro><name>expandedForSpelled</name><argument_list>(<argument>llvm::ArrayRef&lt;syntax::Token&gt; Spelled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<struct>struct <name>Expansion</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>Spelled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>Expanded</name></expr>;</expr_stmt>
}</block>;</struct>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Expansion</name></expr></argument>&gt;</argument_list></name>
<macro><name>expansionStartingAt</name><argument_list>(<argument>const syntax::Token *Spelled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Expansion</name></expr></argument>&gt;</argument_list></name>
<macro><name>expansionsOverlapping</name><argument_list>(<argument>llvm::ArrayRef&lt;syntax::Token&gt; Spelled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>spelledTokens</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator><macro><name>spelledTokenAt</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>macroExpansions</name><argument_list>(<argument>FileID FID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>sourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>SourceMgr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>dumpForTests</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>








<struct>struct <name>Mapping</name> <block>{


<decl_stmt><decl><type><name>unsigned</name></type> <name>BeginSpelled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndSpelled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>BeginExpanded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndExpanded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>str</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>MarkedFile</name> <block>{





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>SpelledTokens</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name> <name>Mappings</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>BeginExpanded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndExpanded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TokenCollector</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Mapping</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>spelledForExpandedToken</name><argument_list>(<argument>const syntax::Token *Expanded</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Mapping</name> <modifier>*</modifier></type>
<name>mappingStartingBeforeSpelled</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MarkedFile</name> <operator>&amp;</operator><name>F</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator><name>Spelled</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Expansion</name></type> <name>makeExpansion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MarkedFile</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Mapping</name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>MarkedFile</name> <modifier>&amp;</modifier></type><name>fileForSpelled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>Spelled</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>ExpandedTokens</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>ExpandedTokIndex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>MarkedFile</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>*</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name>
<macro><name>spelledTokensTouching</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>const syntax::TokenBuffer &amp;Tokens</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name>
<macro><name>spelledTokensTouching</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>llvm::ArrayRef&lt;syntax::Token&gt; Tokens</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator>
<macro><name>spelledIdentifierTouching</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>llvm::ArrayRef&lt;syntax::Token&gt; Tokens</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>Token</name> <operator>*</operator>
<macro><name>spelledIdentifierTouching</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>const syntax::TokenBuffer &amp;Tokens</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>tokenize</name><argument_list>(<argument>FileID FID</argument>, <argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LO</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name>
<call><name>tokenize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileRange</name> <operator>&amp;</operator><name>FR</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>TokenCollector</name> <block>{<block_content>
<label><name>public</name>:</label>



<expr_stmt><expr><call><name>TokenCollector</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>LLVM_NODISCARD</name> <name>TokenBuffer</name> <call><name>consume</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator></expr>;</expr_stmt>

<label><name>private</name>:</label>

















<decl_stmt><decl><type><name>using</name></type> <name>PPExpansions</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Builder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CollectPPExpansions</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>syntax</name><operator>::</operator><name>Token</name></expr></argument>&gt;</argument_list></name> <name>Expanded</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PPExpansions</name></type> <name>Expansions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CollectPPExpansions</name> <modifier>*</modifier></type><name>Collector</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
