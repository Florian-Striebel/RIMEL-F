<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/OperatorKinds.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_OPERATORKINDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_OPERATORKINDS_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<enum>enum <name>OverloadedOperatorKind</name> : <type><name>int</name></type> <block>{
<decl><name>OO_None</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERLOADED_OPERATOR</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>,<parameter><type><name>Spelling</name></type></parameter>,<parameter><type><name>Token</name></type></parameter>,<parameter><type><name>Unary</name></type></parameter>,<parameter><type><name>Binary</name></type></parameter>,<parameter><type><name>MemberOnly</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OO_##Name,</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OperatorKinds.def"</cpp:file></cpp:include>
<decl><name>NUM_OVERLOADED_OPERATORS</name></decl>
}</block>;</enum>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getOperatorSpelling</name><parameter_list>(<parameter><decl><type><name>OverloadedOperatorKind</name></type> <name>Operator</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>inline</specifier> <name>OverloadedOperatorKind</name></type>
<name>getRewrittenOverloadedOperator</name><parameter_list>(<parameter><decl><type><name>OverloadedOperatorKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OO_Less</name></expr>:</case>
<case>case <expr><name>OO_LessEqual</name></expr>:</case>
<case>case <expr><name>OO_Greater</name></expr>:</case>
<case>case <expr><name>OO_GreaterEqual</name></expr>:</case>
<return>return <expr><name>OO_Spaceship</name></expr>;</return>

<case>case <expr><name>OO_ExclaimEqual</name></expr>:</case>
<return>return <expr><name>OO_EqualEqual</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>OO_None</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isCompoundAssignmentOperator</name><parameter_list>(<parameter><decl><type><name>OverloadedOperatorKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Kind</name> <operator>&gt;=</operator> <name>OO_PlusEqual</name> <operator>&amp;&amp;</operator> <name>Kind</name> <operator>&lt;=</operator> <name>OO_PipeEqual</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
