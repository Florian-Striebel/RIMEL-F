<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/include/unwind.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UNWIND_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNWIND_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__libunwind_config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ntverp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBUNWIND_UNAVAIL</name></cpp:macro> <cpp:value>__attribute__ (( unavailable ))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBUNWIND_UNAVAIL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{
<decl><name>_URC_NO_REASON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_FOREIGN_EXCEPTION_CAUGHT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_URC_FATAL_PHASE2_ERROR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>_URC_FATAL_PHASE1_ERROR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_URC_NORMAL_STOP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>_URC_END_OF_STACK</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>_URC_HANDLER_FOUND</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>_URC_INSTALL_CONTEXT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>_URC_CONTINUE_UNWIND</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>_URC_FAILURE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></enum></type> <name>_Unwind_Reason_Code</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>_UA_SEARCH_PHASE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UA_CLEANUP_PHASE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>_UA_HANDLER_FRAME</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>_UA_FORCE_UNWIND</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>_UA_END_OF_STACK</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_Action</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>_Unwind_Context</name></name></type> <name>_Unwind_Context</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint32_t</name></type> <name>_Unwind_State</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_VIRTUAL_UNWIND_FRAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_UNWIND_FRAME_STARTING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_UNWIND_FRAME_RESUME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_ACTION_MASK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_FORCE_UNWIND</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>uint32_t</name></type> <name>_Unwind_EHT_Header</name>;</typedef>





<struct_decl>struct <name>_Unwind_Exception</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>_Unwind_Exception</name></name></type> <name>_Unwind_Exception</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_Unwind_Exception</name></name></type> <name>_Unwind_Control_Block</name>;</typedef>

<struct>struct <name>_Unwind_Exception</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>exception_class</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>exception_cleanup</name>)<parameter_list>(<parameter><decl><type><name>_Unwind_Reason_Code</name></type></decl></parameter>, <parameter><decl><type><name>_Unwind_Control_Block</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved5</name></decl>;</decl_stmt>
}</block> <decl><name>unwinder_cache</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bitpattern</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>barrier_cache</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bitpattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>cleanup_cache</name></decl>;</struct>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fnstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Unwind_EHT_Header</name><modifier>*</modifier></type> <name>ehtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>additional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block> <decl><name>pr_cache</name></decl>;</struct>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>int</name> <range>:<expr><literal type="number">0</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__aligned__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Stop_Fn</name>)
<parameter_list>(<parameter><decl><type><name>_Unwind_State</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Exception</name><modifier>*</modifier></type> <name>exceptionObject</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name><modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Personality_Fn</name>)<parameter_list>(
<parameter><decl><type><name>_Unwind_State</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exceptionObject</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct_decl>struct <name>_Unwind_Context</name>;</struct_decl>
<struct_decl>struct <name>_Unwind_Exception</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>_Unwind_Exception</name></name></type> <name>_Unwind_Exception</name>;</typedef>

<struct>struct <name>_Unwind_Exception</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>exception_class</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>exception_cleanup</name>)<parameter_list>(<parameter><decl><type><name>_Unwind_Reason_Code</name></type> <name>reason</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>private_</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>private_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>private_2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_POINTER__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>




<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__aligned__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Stop_Fn</name>)
<parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Action</name></type> <name>actions</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>exceptionClass</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Exception</name><modifier>*</modifier></type> <name>exceptionObject</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name><modifier>*</modifier></type> <name>context</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>stop_parameter</name></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Personality_Fn</name>)<parameter_list>(
<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Action</name></type> <name>actions</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>exceptionClass</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exceptionObject</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_SjLj_RaiseException</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SjLj_Resume</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_RaiseException</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_Resume</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_DeleteException</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{
<decl><name>_UVRSC_CORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSC_VFP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSC_WMMXD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_UVRSC_WMMXC</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_RegClass</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>_UVRSD_UINT32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSD_VFPX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSD_UINT64</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_UVRSD_FLOAT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>_UVRSD_DOUBLE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_DataRepresentation</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>_UVRSR_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSR_NOT_IMPLEMENTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSR_FAILED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_Result</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_Complete</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name><modifier>*</modifier></type> <name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_VRS_Result</name></type>
<name>_Unwind_VRS_Get</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>_Unwind_VRS_RegClass</name></type> <name>regclass</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>regno</name></decl></parameter>, <parameter><decl><type><name>_Unwind_VRS_DataRepresentation</name></type> <name>representation</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_VRS_Result</name></type>
<name>_Unwind_VRS_Set</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>_Unwind_VRS_RegClass</name></type> <name>regclass</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>regno</name></decl></parameter>, <parameter><decl><type><name>_Unwind_VRS_DataRepresentation</name></type> <name>representation</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_VRS_Result</name></type>
<name>_Unwind_VRS_Pop</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>_Unwind_VRS_RegClass</name></type> <name>regclass</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>discriminator</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_VRS_DataRepresentation</name></type> <name>representation</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_UNWIND_LEVEL1_EXTERNAL_LINKAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name></cpp:macro> <cpp:value>static __inline__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name>
<name>uintptr_t</name></type> <name>_Unwind_GetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_Unwind_VRS_Get</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>_UVRSC_CORE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>index</name></expr></argument>, <argument><expr><name>_UVRSD_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name>
<name>void</name></type> <name>_Unwind_SetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_Unwind_VRS_Set</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>_UVRSC_CORE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>index</name></expr></argument>, <argument><expr><name>_UVRSD_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name>
<name>uintptr_t</name></type> <name>_Unwind_GetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_Unwind_GetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0x1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT_UNWIND_LEVEL1</name>
<name>void</name></type> <name>_Unwind_SetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>thumb_bit</name> <init>= <expr><call><name>_Unwind_GetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0x1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_Unwind_SetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>value</name> <operator>|</operator> <name>thumb_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetRegionStart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type>
<name>_Unwind_GetLanguageSpecificData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_SjLj_ForcedUnwind</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stop_parameter</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_ForcedUnwind</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stop_parameter</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>_Unwind_FunctionContext_t</name>;</typedef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SjLj_Register</name><parameter_list>(<parameter><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>fc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SjLj_Unregister</name><parameter_list>(<parameter><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>fc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_SjLj_Resume_or_Rethrow</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_Resume_or_Rethrow</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Trace_Fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_Backtrace</name><parameter_list>(<parameter><decl><type><name>_Unwind_Trace_Fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetCFA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetIPInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ipBefore</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__deregister_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list>;</function_decl>






<struct>struct <name>dwarf_eh_bases</name> <block>{
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>tbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>dbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>func</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_Unwind_Find_FDE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dwarf_eh_bases</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>_Unwind_FindEnclosingFunction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetDataRelBase</name><argument_list>(<argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>_Unwind_GetTextRelBase</name><argument_list>(<argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_info_bases</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ob</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>tb</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>db</name></expr></argument>)</argument_list> <name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_info</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ob</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_info_table_bases</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ob</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>tb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>db</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_info_table</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ob</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_table</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>__deregister_frame_info</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>__deregister_frame_info_bases</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>fde</name></expr></argument>)</argument_list>
<name>LIBUNWIND_UNAVAIL</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>_EXCEPTION_RECORD</name></name></type> <name>EXCEPTION_RECORD</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_CONTEXT</name></name></type> <name>CONTEXT</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_DISPATCHER_CONTEXT</name></name></type> <name>DISPATCHER_CONTEXT</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>VER_PRODUCTBUILD</name> <operator>&lt;</operator> <literal type="number">8000</literal></expr></cpp:elif>
<typedef>typedef <type><name><name>struct</name> <name>_DISPATCHER_CONTEXT</name></name></type> <name>DISPATCHER_CONTEXT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>EXCEPTION_DISPOSITION</name></type> <name>_GCC_specific_handler</name><parameter_list>(<parameter><decl><type><name>EXCEPTION_RECORD</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>CONTEXT</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>DISPATCHER_CONTEXT</name> <modifier>*</modifier></type><name>disp</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Personality_Fn</name></type> <name>pers</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
