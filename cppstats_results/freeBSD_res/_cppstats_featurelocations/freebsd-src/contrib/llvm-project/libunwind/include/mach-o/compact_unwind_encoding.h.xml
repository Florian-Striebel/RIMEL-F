<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/include/mach-o/compact_unwind_encoding.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__COMPACT_UNWIND_ENCODING__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMPACT_UNWIND_ENCODING__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>























<typedef>typedef <type><name>uint32_t</name></type> <name>compact_unwind_encoding_t</name>;</typedef>



<enum>enum <block>{
<decl><name>UNWIND_IS_NOT_FUNCTION_START</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>,
<decl><name>UNWIND_HAS_LSDA</name> <init>= <expr><literal type="number">0x40000000</literal></expr></init></decl>,
<decl><name>UNWIND_PERSONALITY_MASK</name> <init>= <expr><literal type="number">0x30000000</literal></expr></init></decl>,
}</block>;</enum>





















<enum>enum <block>{
<decl><name>UNWIND_X86_MODE_MASK</name> <init>= <expr><literal type="number">0x0F000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_MODE_EBP_FRAME</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_MODE_STACK_IMMD</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_MODE_STACK_IND</name> <init>= <expr><literal type="number">0x03000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_MODE_DWARF</name> <init>= <expr><literal type="number">0x04000000</literal></expr></init></decl>,

<decl><name>UNWIND_X86_EBP_FRAME_REGISTERS</name> <init>= <expr><literal type="number">0x00007FFF</literal></expr></init></decl>,
<decl><name>UNWIND_X86_EBP_FRAME_OFFSET</name> <init>= <expr><literal type="number">0x00FF0000</literal></expr></init></decl>,

<decl><name>UNWIND_X86_FRAMELESS_STACK_SIZE</name> <init>= <expr><literal type="number">0x00FF0000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_FRAMELESS_STACK_ADJUST</name> <init>= <expr><literal type="number">0x0000E000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_FRAMELESS_STACK_REG_COUNT</name> <init>= <expr><literal type="number">0x00001C00</literal></expr></init></decl>,
<decl><name>UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION</name> <init>= <expr><literal type="number">0x000003FF</literal></expr></init></decl>,

<decl><name>UNWIND_X86_DWARF_SECTION_OFFSET</name> <init>= <expr><literal type="number">0x00FFFFFF</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>UNWIND_X86_REG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_EBX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_ECX</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_EDX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_EDI</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_ESI</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>UNWIND_X86_REG_EBP</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
}</block>;</enum>












































































































<enum>enum <block>{
<decl><name>UNWIND_X86_64_MODE_MASK</name> <init>= <expr><literal type="number">0x0F000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_MODE_RBP_FRAME</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_MODE_STACK_IMMD</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_MODE_STACK_IND</name> <init>= <expr><literal type="number">0x03000000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_MODE_DWARF</name> <init>= <expr><literal type="number">0x04000000</literal></expr></init></decl>,

<decl><name>UNWIND_X86_64_RBP_FRAME_REGISTERS</name> <init>= <expr><literal type="number">0x00007FFF</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_RBP_FRAME_OFFSET</name> <init>= <expr><literal type="number">0x00FF0000</literal></expr></init></decl>,

<decl><name>UNWIND_X86_64_FRAMELESS_STACK_SIZE</name> <init>= <expr><literal type="number">0x00FF0000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_FRAMELESS_STACK_ADJUST</name> <init>= <expr><literal type="number">0x0000E000</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT</name> <init>= <expr><literal type="number">0x00001C00</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION</name> <init>= <expr><literal type="number">0x000003FF</literal></expr></init></decl>,

<decl><name>UNWIND_X86_64_DWARF_SECTION_OFFSET</name> <init>= <expr><literal type="number">0x00FFFFFF</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>UNWIND_X86_64_REG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_RBX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_R12</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_R13</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_R14</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_R15</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>UNWIND_X86_64_REG_RBP</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
}</block>;</enum>






















































<enum>enum <block>{
<decl><name>UNWIND_ARM64_MODE_MASK</name> <init>= <expr><literal type="number">0x0F000000</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_MODE_FRAMELESS</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_MODE_DWARF</name> <init>= <expr><literal type="number">0x03000000</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_MODE_FRAME</name> <init>= <expr><literal type="number">0x04000000</literal></expr></init></decl>,

<decl><name>UNWIND_ARM64_FRAME_X19_X20_PAIR</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_X21_X22_PAIR</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_X23_X24_PAIR</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_X25_X26_PAIR</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_X27_X28_PAIR</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_D8_D9_PAIR</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_D10_D11_PAIR</name> <init>= <expr><literal type="number">0x00000200</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_D12_D13_PAIR</name> <init>= <expr><literal type="number">0x00000400</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_FRAME_D14_D15_PAIR</name> <init>= <expr><literal type="number">0x00000800</literal></expr></init></decl>,

<decl><name>UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK</name> <init>= <expr><literal type="number">0x00FFF000</literal></expr></init></decl>,
<decl><name>UNWIND_ARM64_DWARF_SECTION_OFFSET</name> <init>= <expr><literal type="number">0x00FFFFFF</literal></expr></init></decl>,
}</block>;</enum>







































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWIND_SECTION_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<struct>struct <name>unwind_info_section_header</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commonEncodingsArraySectionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commonEncodingsArrayCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>personalityArraySectionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>personalityArrayCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>indexSectionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>indexCount</name></decl>;</decl_stmt>




}</block>;</struct>

<struct>struct <name>unwind_info_section_header_index_entry</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>functionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>secondLevelPagesSectionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lsdaIndexArraySectionOffset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>unwind_info_section_header_lsda_index_entry</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>functionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lsdaOffset</name></decl>;</decl_stmt>
}</block>;</struct>








<struct>struct <name>unwind_info_regular_second_level_entry</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>functionOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>compact_unwind_encoding_t</name></type> <name>encoding</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWIND_SECOND_LEVEL_REGULAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<struct>struct <name>unwind_info_regular_second_level_page_header</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>entryPageOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>entryCount</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWIND_SECOND_LEVEL_COMPRESSED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<struct>struct <name>unwind_info_compressed_second_level_page_header</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>entryPageOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>entryCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>encodingsPageOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>encodingsCount</name></decl>;</decl_stmt>


}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWIND_INFO_COMPRESSED_ENTRY_FUNC_OFFSET</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(entry &amp; 0x00FFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNWIND_INFO_COMPRESSED_ENTRY_ENCODING_INDEX</name><parameter_list>(<parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((entry &gt;&gt; 24) &amp; 0xFF)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
