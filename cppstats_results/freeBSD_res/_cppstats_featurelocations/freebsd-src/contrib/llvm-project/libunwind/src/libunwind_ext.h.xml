<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/src/libunwind_ext.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBUNWIND_EXT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBUNWIND_EXT__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libunwind.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unwind.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNW_STEP_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNW_STEP_END</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_getcontext</name><parameter_list>(<parameter><decl><type><name>unw_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_init_local</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_step</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_get_reg</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>, <parameter><decl><type><name>unw_word_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_get_fpreg</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>, <parameter><decl><type><name>unw_fpreg_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_set_reg</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>, <parameter><decl><type><name>unw_word_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_set_fpreg</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>, <parameter><decl><type><name>unw_fpreg_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_resume</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__unw_save_vfp_as_X</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__unw_regname</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_get_proc_info</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_proc_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_is_fpreg</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unw_regnum_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_is_signal_frame</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__unw_get_proc_name</name><parameter_list>(<parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unw_word_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__unw_iterate_dwarf_unwind_cache</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(
<parameter><decl><type><name>unw_word_t</name></type> <name>ip_start</name></decl></parameter>, <parameter><decl><type><name>unw_word_t</name></type> <name>ip_end</name></decl></parameter>, <parameter><decl><type><name>unw_word_t</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>unw_word_t</name></type> <name>mh</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__unw_add_dynamic_fde</name><parameter_list>(<parameter><decl><type><name>unw_word_t</name></type> <name>fde</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__unw_remove_dynamic_fde</name><parameter_list>(<parameter><decl><type><name>unw_word_t</name></type> <name>fde</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>decode_eht_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_VRS_Interpret</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
