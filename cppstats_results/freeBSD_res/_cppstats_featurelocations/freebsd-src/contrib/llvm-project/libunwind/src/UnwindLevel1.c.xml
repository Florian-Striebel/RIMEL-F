<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/src/UnwindLevel1.c">

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_UNWIND_LEVEL1_EXTERNAL_LINKAGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libunwind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libunwind_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_SUPPORT_SEH_UNWIND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase1</name><parameter_list>(<parameter><decl><type><name>unw_context_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>, <parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>stepResult</name> <init>= <expr><call><name>__unw_step</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stepResult</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): __unw_step() reached "</literal>
<literal type="string">"bottom =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stepResult</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): __unw_step failed =&gt; "</literal>
<literal type="string">"_URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE1_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>sp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): __unw_get_proc_info "</literal>
<literal type="string">"failed =&gt; _URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE1_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>_LIBUNWIND_TRACING_UNWINDING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>functionBuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name> <init>= <expr><name>functionBuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__unw_get_proc_name</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>functionBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>functionBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>frameInfo</name><operator>.</operator><name>end_ip</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>functionName</name> <operator>=</operator> <literal type="string">".anonymous."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>pc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): pc=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", start_ip=0x%"</literal> <name>PRIxPTR</name>
<literal type="string">", func=%s, lsda=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", personality=0x%"</literal> <name>PRIxPTR</name> <literal type="string">""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>,
<argument><expr><name><name>frameInfo</name><operator>.</operator><name>lsda</name></name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>p</name> <init>=
<expr><operator>(</operator><name>_Unwind_Personality_Fn</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>handler</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): calling personality function %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>p</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_UA_SEARCH_PHASE</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>,
<argument><expr><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cursor</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_HANDLER_FOUND</name></expr>:</case>


<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_SP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): _URC_HANDLER_FOUND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_NO_REASON</name></expr>;</return>

<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): _URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): _URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE1_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>_URC_NO_REASON</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase2</name><parameter_list>(<parameter><decl><type><name>unw_context_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>, <parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>stepResult</name> <init>= <expr><call><name>__unw_step</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stepResult</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): __unw_step() reached "</literal>
<literal type="string">"bottom =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stepResult</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): __unw_step failed =&gt; "</literal>
<literal type="string">"_URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unw_word_t</name></type> <name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_SP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): __unw_get_proc_info "</literal>
<literal type="string">"failed =&gt; _URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>_LIBUNWIND_TRACING_UNWINDING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>functionBuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name> <init>= <expr><name>functionBuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__unw_get_proc_name</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>functionBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>functionBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>frameInfo</name><operator>.</operator><name>end_ip</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>functionName</name> <operator>=</operator> <literal type="string">".anonymous."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): start_ip=0x%"</literal> <name>PRIxPTR</name>
<literal type="string">", func=%s, sp=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", lsda=0x%"</literal> <name>PRIxPTR</name>
<literal type="string">", personality=0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name></expr></argument>,
<argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>lsda</name></name></expr></argument>,
<argument><expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>p</name> <init>=
<expr><operator>(</operator><name>_Unwind_Personality_Fn</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>handler</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>action</name> <init>= <expr><name>_UA_CLEANUP_PHASE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator><name>_UA_CLEANUP_PHASE</name> <operator>|</operator> <name>_UA_HANDLER_FRAME</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>p</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cursor</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): _URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"during phase1 personality function said it would "</literal>
<literal type="string">"stop here, but now in phase2 it did not stop here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>_URC_INSTALL_CONTEXT</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): _URC_INSTALL_CONTEXT"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>_LIBUNWIND_TRACING_UNWINDING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>pc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_SP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): re-entering "</literal>
<literal type="string">"user code with ip=0x%"</literal> <name>PRIxPTR</name>
<literal type="string">", sp=0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__unw_resume</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"personality function returned unknown result %d"</literal></expr></argument>,
<argument><expr><name>personalityResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase2_forced</name><parameter_list>(<parameter><decl><type><name>unw_context_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>, <parameter><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stop_parameter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>__unw_step</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): __unw_step "</literal>
<literal type="string">"failed =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>_LIBUNWIND_TRACING_UNWINDING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>functionBuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name> <init>= <expr><name>functionBuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>__unw_get_proc_name</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>functionBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>functionBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>frameInfo</name><operator>.</operator><name>end_ip</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>functionName</name> <operator>=</operator> <literal type="string">".anonymous."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): start_ip=0x%"</literal> <name>PRIxPTR</name>
<literal type="string">", func=%s, lsda=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", personality=0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>,
<argument><expr><name><name>frameInfo</name><operator>.</operator><name>lsda</name></name></expr></argument>, <argument><expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>action</name> <init>=
<expr><operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator><name>_UA_FORCE_UNWIND</name> <operator>|</operator> <name>_UA_CLEANUP_PHASE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>stopResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>stop</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cursor</name><operator>)</operator></expr></argument>, <argument><expr><name>stop_parameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): stop function returned %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>stopResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stopResult</name> <operator>!=</operator> <name>_URC_NO_REASON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): stopped by stop function"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frameInfo</name><operator>.</operator><name>handler</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>p</name> <init>=
<expr><operator>(</operator><name>_Unwind_Personality_Fn</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name><name>frameInfo</name><operator>.</operator><name>handler</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): calling personality function %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>p</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cursor</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned "</literal>
<literal type="string">"_URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>_URC_INSTALL_CONTEXT</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned "</literal>
<literal type="string">"_URC_INSTALL_CONTEXT"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__unw_resume</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned %d, "</literal>
<literal type="string">"_URC_FATAL_PHASE2_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>personalityResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): calling stop "</literal>
<literal type="string">"function with _UA_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>lastAction</name> <init>=
<expr><operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator><name>_UA_FORCE_UNWIND</name> <operator>|</operator> <name>_UA_CLEANUP_PHASE</name> <operator>|</operator> <name>_UA_END_OF_STACK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stop</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lastAction</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cursor</name><operator>)</operator></expr></argument>, <argument><expr><name>stop_parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_RaiseException</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_RaiseException(ex_obj=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>phase1</name> <init>= <expr><call><name>unwind_phase1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>phase1</name> <operator>!=</operator> <name>_URC_NO_REASON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>phase1</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>unwind_phase2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_Resume</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Resume(ex_obj=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unwind_phase2_forced</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator><name>_Unwind_Stop_Fn</name><operator>)</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unwind_phase2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Resume() can't return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_ForcedUnwind</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stop_parameter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_ForcedUnwind(ex_obj=%p, stop=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>stop_parameter</name></expr>;</expr_stmt>


<return>return <expr><call><name>unwind_phase2_forced</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>stop_parameter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetLanguageSpecificData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNW_ESUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>frameInfo</name><operator>.</operator><name>lsda</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(
<argument><expr><literal type="string">"_Unwind_GetLanguageSpecificData(context=%p) =&gt; 0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>result</name><operator>)</operator> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"lsda at 0x%"</literal> <name>PRIxPTR</name> <literal type="string">" does not start with 0xFF"</literal></expr></argument>,
<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetRegionStart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNW_ESUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetRegionStart(context=%p) =&gt; 0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_DeleteException</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_DeleteException(ex_obj=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_cleanup</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>exception_object</name><operator>-&gt;</operator><name>exception_cleanup</name></name>)<argument_list>(<argument><expr><name>_URC_FOREIGN_EXCEPTION_CAUGHT</name></expr></argument>,
<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetGR(context=%p, reg=%d) =&gt; 0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>_Unwind_SetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SetGR(context=%p, reg=%d, value=0x%0"</literal> <name>PRIxPTR</name>
<literal type="string">")"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_set_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetIP(context=%p) =&gt; 0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>_Unwind_SetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SetIP(context=%p, value=0x%0"</literal> <name>PRIxPTR</name> <literal type="string">")"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_set_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
