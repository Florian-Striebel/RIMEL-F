<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/src/UnwindLevel1-gcc-ext.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libunwind_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libunwind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Unwind-EHABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_BUILD_ZERO_COST_APIS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_SUPPORT_SEH_UNWIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>private_1</name></cpp:macro> <cpp:value>private_[0]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_Resume_or_Rethrow</name><parameter_list>(<parameter><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Resume_or_Rethrow(ex_obj=%p), private_1=%ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>exception_object</name><operator>-&gt;</operator><name>unwinder_cache</name><operator>.</operator><name>reserved1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Resume_or_Rethrow(ex_obj=%p), private_1=%"</literal> <name>PRIdPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<return>return <expr><call><name>_Unwind_RaiseException</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_Unwind_RaiseException</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</return>


</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>_Unwind_Resume</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Resume_or_Rethrow() called _Unwind_RaiseException()"</literal>
<literal type="string">" which unexpectedly returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetDataRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetDataRelBase(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetDataRelBase() not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetTextRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetTextRelBase(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetTextRelBase() not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>_Unwind_FindEnclosingFunction</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_FindEnclosingFunction(pc=%p)"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNW_ESUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>start_ip</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_Backtrace</name><parameter_list>(<parameter><decl><type><name>_Unwind_Trace_Fn</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Backtrace(callback=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>_Unwind_Exception</name></type> <name>ex</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>exception_class</name></name> <operator>=</operator> <literal type="number">0x434C4E47554E5700</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>__unw_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">" _backtrace: ended because cursor reached "</literal>
<literal type="string">"bottom of stack, returning %d"</literal></expr></argument>,
<argument><expr><name>_URC_END_OF_STACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frameInfo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UNW_ESUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>unwindInfo</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>frameInfo</name><operator>.</operator><name>unwind_info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>pr_cache</name><operator>.</operator><name>fnstart</name></name> <operator>=</operator> <name><name>frameInfo</name><operator>.</operator><name>start_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>pr_cache</name><operator>.</operator><name>ehtp</name></name> <operator>=</operator> <operator>(</operator><name>_Unwind_EHT_Header</name> <operator>*</operator><operator>)</operator> <name>unwindInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>pr_cache</name><operator>.</operator><name>additional</name></name><operator>=</operator> <name><name>frameInfo</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cursor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>handler</name> <init>= <expr><operator>(</operator><name>_Unwind_Personality_Fn</name><operator>)</operator><name><name>frameInfo</name><operator>.</operator><name>handler</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handler</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>handler</name><argument_list>(<argument><expr><name>_US_VIRTUAL_UNWIND_FRAME</name> <operator>|</operator> <name>_US_FORCE_UNWIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>_URC_CONTINUE_UNWIND</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>_LIBUNWIND_TRACING_UNWINDING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>functionName</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>offset</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_proc_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">" _backtrace: start_ip=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", func=%s, lsda=0x%"</literal> <name>PRIxPTR</name> <literal type="string">", context=%p"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>start_ip</name></name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>lsda</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>cursor</name><operator>)</operator></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>_URC_NO_REASON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">" _backtrace: ended because callback returned %d"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>__sym_compat</name><argument_list>(<argument><expr><name>_Unwind_Backtrace</name></expr></argument>, <argument><expr><name>_Unwind_Backtrace</name></expr></argument>, <argument><expr><name>GCC_3</name><literal type="number">.3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>_LIBUNWIND_EXPORT</name> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_Unwind_Find_FDE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dwarf_eh_bases</name></name> <modifier>*</modifier></type><name>bases</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_proc_info_t</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_init_local</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_get_proc_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bases</name><operator>-&gt;</operator><name>tbase</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bases</name><operator>-&gt;</operator><name>dbase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bases</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>start_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_Find_FDE(pc=%p) =&gt; %p"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>unwind_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>unwind_info</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetCFA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__unw_get_reg</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_SP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetCFA(context=%p) =&gt; 0x%"</literal> <name>PRIxPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetIPInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ipBefore</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetIPInfo(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isSignalFrame</name> <init>= <expr><call><name>__unw_is_signal_frame</name><argument_list>(<argument><expr><operator>(</operator><name>unw_cursor_t</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>isSignalFrame</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ipBefore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ipBefore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>_Unwind_GetIP</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_SUPPORT_DWARF_UNWIND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type> <name>processFDE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isDeregister</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>addr</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isDeregister</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__unw_remove_dynamic_fde</name><argument_list>(<argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__unw_add_dynamic_fde</name><argument_list>(<argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame(%p)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>processFDE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__deregister_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__deregister_frame(%p)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>processFDE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame(%p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_add_dynamic_fde</name><argument_list>(<argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__deregister_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__deregister_frame(%p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__unw_remove_dynamic_fde</name><argument_list>(<argument><expr><operator>(</operator><name>unw_word_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_SUPPORT_FRAME_APIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame_info_bases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame_info_bases(%p,%p, %p, %p)"</literal></expr></argument>,
<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame_info(%p, %p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame_info_table_bases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tb</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame_info_table_bases"</literal>
<literal type="string">"(%p,%p, %p, %p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame_info_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame_info_table(%p, %p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>__register_frame_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__register_frame_table(%p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>__deregister_frame_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__deregister_frame_info(%p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>__deregister_frame_info_bases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>fde</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__deregister_frame_info_bases(%p)"</literal></expr></argument>, <argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
