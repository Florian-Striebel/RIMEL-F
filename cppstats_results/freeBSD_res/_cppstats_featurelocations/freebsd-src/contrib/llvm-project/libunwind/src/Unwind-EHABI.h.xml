<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/src/Unwind-EHABI.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UNWIND_EHABI_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNWIND_EHABI_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__libunwind_config.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_ARM_EHABI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unwind.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNW_EXIDX_CANTUNWIND</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>signExtendPrel31</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x40000000u</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>readPrel31</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>data</name><operator>)</operator> <operator>+</operator> <call><name>signExtendPrel31</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>__aeabi_unwind_cpp_pr0</name><parameter_list>(
<parameter><decl><type><name>_Unwind_State</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Control_Block</name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>__aeabi_unwind_cpp_pr1</name><parameter_list>(
<parameter><decl><type><name>_Unwind_State</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Control_Block</name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>__aeabi_unwind_cpp_pr2</name><parameter_list>(
<parameter><decl><type><name>_Unwind_State</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Control_Block</name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>, <parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
