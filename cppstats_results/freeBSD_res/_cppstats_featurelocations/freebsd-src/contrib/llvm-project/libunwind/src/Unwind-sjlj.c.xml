<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libunwind/src/Unwind-sjlj.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unwind.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_BUILD_SJLJ_APIS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>_Unwind_FunctionContext</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ve__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>resumeLocation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>resumeParameters</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>resumeLocation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>resumeParameters</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>personality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>lsda</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>jbuf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBUNWIND_HAS_NO_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_THREAD_LOCAL</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_THREAD_LOCAL</name></cpp:macro> <cpp:value>_Thread_local</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_THREAD_LOCAL</name></cpp:macro> <cpp:value>__declspec(thread)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBUNWIND_THREAD_LOCAL</name></cpp:macro> <cpp:value>__thread</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Unable to create thread local storage</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_DYLD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;System/pthread_machdep.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><specifier>static</specifier> <name>_LIBUNWIND_THREAD_LOCAL</name> struct <name>_Unwind_FunctionContext</name> <operator>*</operator><name>stack</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>__Unwind_SjLj_GetTopOfFunctionStack</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_pthread_getspecific_direct</name><argument_list>(<argument><expr><name>__PTK_LIBC_DYLD_Unwind_SjLj_Key</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>stack</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>__Unwind_SjLj_SetTopOfFunctionStack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_pthread_setspecific_direct</name><argument_list>(<argument><expr><name>__PTK_LIBC_DYLD_Unwind_SjLj_Key</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>stack</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_SjLj_Register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <call><name>__Unwind_SjLj_GetTopOfFunctionStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__Unwind_SjLj_SetTopOfFunctionStack</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_SjLj_Unregister</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_FunctionContext</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__Unwind_SjLj_SetTopOfFunctionStack</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>c</name> <init>= <expr><call><name>__Unwind_SjLj_GetTopOfFunctionStack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1: initial function-context=%p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>bool</name></type> <name>handlerNotFound</name> <init>= <expr><name>true</name></expr></init></decl>;</init> <condition><expr><name>handlerNotFound</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): reached "</literal>
<literal type="string">"bottom =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1: function-context=%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>personality</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): calling "</literal>
<literal type="string">"personality function %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>personality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>= <expr><call>(<modifier>*</modifier><name><name>c</name><operator>-&gt;</operator><name>personality</name></name>)<argument_list>(
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_UA_SEARCH_PHASE</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>,
<argument><expr><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_HANDLER_FOUND</name></expr>:</case>


<expr_stmt><expr><name>handlerNotFound</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): "</literal>
<literal type="string">"_URC_HANDLER_FOUND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_NO_REASON</name></expr>;</return>

<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): "</literal>
<literal type="string">"_URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase1(ex_ojb=%p): _URC_FATAL_PHASE1_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE1_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>_URC_NO_REASON</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>c</name> <init>= <expr><call><name>__Unwind_SjLj_GetTopOfFunctionStack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2s(ex_ojb=%p): context=%p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): __unw_step() reached "</literal>
<literal type="string">"bottom =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>personality</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>action</name> <init>= <expr><name>_UA_CLEANUP_PHASE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>c</name> <operator>==</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator>
<name>_UA_CLEANUP_PHASE</name> <operator>|</operator>
<name>_UA_HANDLER_FRAME</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>=
<expr><call>(<modifier>*</modifier><name><name>c</name><operator>-&gt;</operator><name>personality</name></name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>,
<argument><expr><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): _URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>c</name> <operator>==</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"during phase1 personality function said it would "</literal>
<literal type="string">"stop here, but now if phase2 it did not stop here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>_URC_INSTALL_CONTEXT</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): "</literal>
<literal type="string">"_URC_INSTALL_CONTEXT, will resume at "</literal>
<literal type="string">"landing pad %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>jbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__Unwind_SjLj_SetTopOfFunctionStack</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__builtin_longjmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"personality function returned unknown result %d"</literal></expr></argument>,
<argument><expr><name>personalityResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></while>



<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>_Unwind_Reason_Code</name></type>
<name>unwind_phase2_forced</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stop_parameter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>c</name> <init>= <expr><call><name>__Unwind_SjLj_GetTopOfFunctionStack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(
<argument><expr><literal type="string">"unwind_phase2(ex_ojb=%p): __unw_step() reached "</literal>
<literal type="string">"bottom =&gt; _URC_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_END_OF_STACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>action</name> <init>=
<expr><operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator><name>_UA_FORCE_UNWIND</name> <operator>|</operator> <name>_UA_CLEANUP_PHASE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>stopResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>stop</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>stop_parameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"stop function returned %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>stopResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stopResult</name> <operator>!=</operator> <name>_URC_NO_REASON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"stopped by stop function"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>personality</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_Personality_Fn</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>_Unwind_Personality_Fn</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>personality</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"calling personality function %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>personalityResult</name> <init>=
<expr><call>(<modifier>*</modifier><name>p</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>personalityResult</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>_URC_CONTINUE_UNWIND</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned _URC_CONTINUE_UNWIND"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>_URC_INSTALL_CONTEXT</name></expr>:</case>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned _URC_INSTALL_CONTEXT"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__Unwind_SjLj_SetTopOfFunctionStack</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__builtin_longjmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>jbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): "</literal>
<literal type="string">"personality returned %d, "</literal>
<literal type="string">"_URC_FATAL_PHASE2_ERROR"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name>personalityResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_UNWINDING</name><argument_list>(<argument><expr><literal type="string">"unwind_phase2_forced(ex_ojb=%p): calling stop "</literal>
<literal type="string">"function with _UA_END_OF_STACK"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_Action</name></type> <name>lastAction</name> <init>=
<expr><operator>(</operator><name>_Unwind_Action</name><operator>)</operator><operator>(</operator><name>_UA_FORCE_UNWIND</name> <operator>|</operator> <name>_UA_CLEANUP_PHASE</name> <operator>|</operator> <name>_UA_END_OF_STACK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>stop</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lastAction</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_class</name></name></expr></argument>, <argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>_Unwind_Context</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>stop_parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>_URC_FATAL_PHASE2_ERROR</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_SjLj_RaiseException</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SjLj_RaiseException(ex_obj=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>_Unwind_Reason_Code</name></type> <name>phase1</name> <init>= <expr><call><name>unwind_phase1</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>phase1</name> <operator>!=</operator> <name>_URC_NO_REASON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>phase1</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>unwind_phase2</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_SjLj_Resume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SjLj_Resume(ex_obj=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unwind_phase2_forced</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>,
<argument><expr><operator>(</operator><name>_Unwind_Stop_Fn</name><operator>)</operator> <name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>exception_object</name><operator>-&gt;</operator><name>private_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unwind_phase2</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SjLj_Resume() can't return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_SjLj_Resume_or_Rethrow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"__Unwind_SjLj_Resume_or_Rethrow(ex_obj=%p), "</literal>
<literal type="string">"private_1=%"</literal> <name>PRIuPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>, <argument><expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>private_1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_Unwind_SjLj_RaiseException</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</return>


</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>_Unwind_SjLj_Resume</name><argument_list>(<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"__Unwind_SjLj_Resume_or_Rethrow() called "</literal>
<literal type="string">"_Unwind_SjLj_Resume() which unexpectedly returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetLanguageSpecificData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetLanguageSpecificData(context=%p) "</literal>
<literal type="string">"=&gt; 0x%"</literal> <name>PRIuPTR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name><name>ufc</name><operator>-&gt;</operator><name>lsda</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ufc</name><operator>-&gt;</operator><name>lsda</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetGR(context=%p, reg=%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeParameters</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>_Unwind_SetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SetGR(context=%p, reg=%d, value=0x%"</literal> <name>PRIuPTR</name>
<literal type="string">")"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeParameters</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>new_value</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetIP(context=%p) =&gt; 0x%"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeLocation</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeLocation</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetIPInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ipBefore</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ipBefore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetIPInfo(context=%p, %p) =&gt; 0x%"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ipBefore</name></expr></argument>,
<argument><expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeLocation</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeLocation</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type> <name>_Unwind_SetIP</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>new_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_SetIP(context=%p, value=0x%"</literal> <name>PRIuPTR</name> <literal type="string">")"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ufc</name><operator>-&gt;</operator><name>resumeLocation</name></name> <operator>=</operator> <name>new_value</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetRegionStart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetRegionStart(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>void</name></type>
<name>_Unwind_DeleteException</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exception_object</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_DeleteException(ex_obj=%p)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exception_object</name><operator>-&gt;</operator><name>exception_cleanup</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>exception_object</name><operator>-&gt;</operator><name>exception_cleanup</name></name>)<argument_list>(<argument><expr><name>_URC_FOREIGN_EXCEPTION_CAUGHT</name></expr></argument>,
<argument><expr><name>exception_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetDataRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetDataRelBase(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetDataRelBase() not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type>
<name>_Unwind_GetTextRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetTextRelBase(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBUNWIND_ABORT</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetTextRelBase() not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>_LIBUNWIND_EXPORT</name> <name>uintptr_t</name></type> <name>_Unwind_GetCFA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBUNWIND_TRACE_API</name><argument_list>(<argument><expr><literal type="string">"_Unwind_GetCFA(context=%p)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Unwind_FunctionContext_t</name></type> <name>ufc</name> <init>= <expr><operator>(</operator><name>_Unwind_FunctionContext_t</name><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>


<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>ufc</name><operator>-&gt;</operator><name>jbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
