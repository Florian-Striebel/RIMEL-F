<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/sanitizer/allocator_interface.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ALLOCATOR_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_estimated_allocated_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>__sanitizer_get_ownership</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_allocated_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_current_allocated_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_heap_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_free_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>size_t</name></type> <name>__sanitizer_get_unmapped_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__sanitizer_malloc_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__sanitizer_free_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>__sanitizer_install_malloc_and_free_hooks</name><parameter_list>(
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>malloc_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__sanitizer_purge_allocator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
