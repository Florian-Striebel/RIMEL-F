<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/xray/xray_log_interface.h">


























































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_XRAY_LOG_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_XRAY_LOG_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray/xray_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>



<enum>enum <name>XRayLogInitStatus</name> <block>{


<decl><name>XRAY_LOG_UNINITIALIZED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,






<decl><name>XRAY_LOG_INITIALIZING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,





<decl><name>XRAY_LOG_INITIALIZED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,






<decl><name>XRAY_LOG_FINALIZING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,






<decl><name>XRAY_LOG_FINALIZED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>



<enum>enum <name>XRayLogFlushStatus</name> <block>{
<decl><name>XRAY_LOG_NOT_FLUSHING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>XRAY_LOG_FLUSHING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>XRAY_LOG_FLUSHED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>




<enum>enum <name>XRayLogRegisterStatus</name> <block>{
<decl><name>XRAY_REGISTRATION_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>XRAY_DUPLICATE_MODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>XRAY_MODE_NOT_FOUND</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>XRAY_INCOMPLETE_IMPL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>




<struct>struct <name>XRayLogImpl</name> <block>{















<function_decl><type><name>XRayLogInitStatus</name></type> (<modifier>*</modifier><name>log_init</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>XRayLogInitStatus</name></type> (<modifier>*</modifier><name>log_finalize</name>)<parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handle_arg0</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>XRayEntryType</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>XRayLogFlushStatus</name></type> (<modifier>*</modifier><name>flush_log</name>)<parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>




















<function_decl><type><name>void</name></type> <name>__xray_set_log_impl</name><parameter_list>(<parameter><decl><type><name>XRayLogImpl</name></type> <name>Impl</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>XRayLogRegisterStatus</name></type> <name>__xray_log_register_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>,
<parameter><decl><type><name>XRayLogImpl</name></type> <name>Impl</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>XRayLogRegisterStatus</name></type> <name>__xray_log_select_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__xray_log_get_current_mode</name><parameter_list>()</parameter_list>;</function_decl>
















<function_decl><type><name>void</name></type> <name>__xray_remove_log_impl</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>XRayLogInitStatus</name></type> <name>__xray_log_init</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>BufferSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxBuffers</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Args</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ArgsSize</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>XRayLogInitStatus</name></type> <name>__xray_log_init_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Config</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>XRayLogInitStatus</name></type> <name>__xray_log_init_mode_bin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Config</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>ConfigSize</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>XRayLogInitStatus</name></type> <name>__xray_log_finalize</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>XRayLogFlushStatus</name></type> <name>__xray_log_flushLog</name><parameter_list>()</parameter_list>;</function_decl>




<struct>struct <name>XRayBuffer</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name></decl>;</decl_stmt>
}</block>;</struct>








<function_decl><type><name>void</name></type> <name>__xray_log_set_buffer_iterator</name><parameter_list>(<parameter><function_decl><type><name>XRayBuffer</name></type> (<modifier>*</modifier><name>Iterator</name>)<parameter_list>(<parameter><decl><type><name>XRayBuffer</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__xray_log_remove_buffer_iterator</name><parameter_list>()</parameter_list>;</function_decl>


























<function_decl><type><name>XRayLogFlushStatus</name></type> <name>__xray_log_process_buffers</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Processor</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>XRayBuffer</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
