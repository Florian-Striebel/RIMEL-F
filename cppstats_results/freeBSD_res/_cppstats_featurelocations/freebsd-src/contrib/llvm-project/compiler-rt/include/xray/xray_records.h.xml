<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/xray/xray_records.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_XRAY_RECORDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_XRAY_RECORDS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>

<enum>enum <name>FileTypes</name> <block>{
<decl><name>NAIVE_LOG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FDR_LOG</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>


<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <name>FdrAdditionalHeaderData</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ThreadBufferSize</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FdrAdditionalHeaderData</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><literal type="string">"FdrAdditionalHeaderData != 16 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro> <name>XRayFileHeader</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint16_t</name></type> <name>Type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ConstantTSC</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>NonstopTSC</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<macro><name>alignas</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>uint64_t</name></type> <name>CycleFrequency</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>FreeForm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>TS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>FdrAdditionalHeaderData</name></name></type> <name>FdrData</name></decl>;</decl_stmt>
}</block>;</union>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XRayFileHeader</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"XRayFileHeader != 32 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <name>RecordTypes</name> <block>{
<decl><name>NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ARG_PAYLOAD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro> <name>XRayRecord</name> <block>{



<decl_stmt><decl><type><name>uint16_t</name></type> <name>RecordType</name> <init>= <expr><name>RecordTypes</name><operator>::</operator><name>NORMAL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>CPU</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>Type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>FuncId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>TSC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>TId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>PId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XRayRecord</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"XRayRecord != 32 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro> <name>XRayArgPayload</name> <block>{


<decl_stmt><decl><type><name>uint16_t</name></type> <name>RecordType</name> <init>= <expr><name>RecordTypes</name><operator>::</operator><name>ARG_PAYLOAD</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>FuncId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>TId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>PId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>Arg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>TailPadding</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XRayArgPayload</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"XRayArgPayload != 32 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
