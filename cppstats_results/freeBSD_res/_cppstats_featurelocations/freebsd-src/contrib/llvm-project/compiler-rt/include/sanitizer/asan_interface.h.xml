<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/sanitizer/asan_interface.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ASAN_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ASAN_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sanitizer/common_interface_defs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function_decl><type><name>void</name></type> <name>__asan_poison_memory_region</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>__asan_unpoison_memory_region</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>address_sanitizer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SANITIZE_ADDRESS__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_POISON_MEMORY_REGION</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asan_poison_memory_region((addr), (size))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_UNPOISON_MEMORY_REGION</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asan_unpoison_memory_region((addr), (size))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_POISON_MEMORY_REGION</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(addr), (void)(size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_UNPOISON_MEMORY_REGION</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(addr), (void)(size))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function_decl><type><name>int</name></type> <name>__asan_address_is_poisoned</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_region_is_poisoned</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__asan_describe_address</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>__asan_report_present</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_get_report_pc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_get_report_bp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_get_report_sp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_get_report_address</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>__asan_get_report_access_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>size_t</name></type> <name>__asan_get_report_access_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__asan_get_report_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__asan_locate_address</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_size</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>region_address</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>region_size</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>__asan_get_alloc_stack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>trace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>__asan_get_free_stack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>trace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__asan_get_shadow_mapping</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>shadow_scale</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>shadow_offset</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>__asan_report_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_write</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>access_size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__asan_set_death_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__asan_set_error_report_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__asan_on_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>__asan_print_accumulated_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__asan_default_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_get_current_fake_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__asan_addr_is_in_fake_stack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fake_stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>beg</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__asan_handle_no_return</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>__asan_update_allocation_context</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
