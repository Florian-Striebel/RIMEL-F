<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/sanitizer/common_interface_defs.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_COMMON_INTERFACE_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_COMMON_INTERFACE_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_feature</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>coverage_sandboxed</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>intptr_t</name></type> <name>coverage_fd</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>coverage_max_block_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>__sanitizer_sandbox_arguments</name>;</typedef>


<function_decl><type><name>void</name></type> <name>__sanitizer_set_report_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__sanitizer_set_report_fd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__sanitizer_get_report_path</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>__sanitizer_sandbox_on_notify</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sandbox_arguments</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>__sanitizer_report_error_summary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_summary</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>uint16_t</name></type> <name>__sanitizer_unaligned_load16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint32_t</name></type> <name>__sanitizer_unaligned_load32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint64_t</name></type> <name>__sanitizer_unaligned_load64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>__sanitizer_unaligned_store16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>__sanitizer_unaligned_store32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>__sanitizer_unaligned_store64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>__sanitizer_acquire_crash_state</name><parameter_list>()</parameter_list>;</function_decl>


















































<function_decl><type><name>void</name></type> <name>__sanitizer_annotate_contiguous_container</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>old_mid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>new_mid</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> <name>__sanitizer_verify_contiguous_container</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>__sanitizer_contiguous_container_find_bad_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>__sanitizer_print_stack_trace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>__sanitizer_symbolize_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>out_buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__sanitizer_symbolize_global</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_buf_size</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__sanitizer_set_death_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_memcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strncmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strncasecmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strcasecmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strstr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_strcasestr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__sanitizer_weak_hook_memmem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>called_pc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>__sanitizer_print_memory_profile</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>top_percent</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>max_number_of_contexts</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>void</name></type> <name>__sanitizer_start_switch_fiber</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>fake_stack_save</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>__sanitizer_finish_switch_fiber</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fake_stack_save</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bottom_old</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_old</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>__sanitizer_get_module_and_offset_for_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>module_path</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>module_path_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pc_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
