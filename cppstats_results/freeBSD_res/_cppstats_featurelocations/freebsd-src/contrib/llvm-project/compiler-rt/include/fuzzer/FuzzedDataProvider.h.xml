<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/fuzzer/FuzzedDataProvider.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>



<decl_stmt><decl><type><name>class</name></type> <name>FuzzedDataProvider</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>FuzzedDataProvider</name><argument_list>(<argument>const uint8_t *data</argument>, <argument>size_t size</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>data_ptr_</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>remaining_bytes_</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><call><name>FuzzedDataProvider</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>








<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>ConsumeBytes</name><argument_list>(<argument>size_t num_bytes</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>ConsumeBytesWithTerminator</name><argument_list>(<argument>size_t num_bytes</argument>, <argument>T terminator = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <call><name>ConsumeRemainingBytes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ConsumeBytesAsString</name><argument_list>(<argument>size_t num_bytes</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ConsumeRandomLengthString</name><argument_list>(<argument>size_t max_length</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ConsumeRandomLengthString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ConsumeRemainingBytesAsString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeIntegral</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeIntegralInRange</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeFloatingPoint</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeFloatingPointInRange</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeProbability</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ConsumeBool</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>ConsumeEnum</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>PickValueInArray</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call><index>[<expr><name>size</name></expr>]</index></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>PickValueInArray</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>size</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>PickValueInArray</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>initializer_list</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name></expr></argument>&gt;</argument_list></name> <name>list</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>size_t</name></type> <name>ConsumeData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>size_t</name></type> <name>remaining_bytes</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>remaining_bytes_</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>FuzzedDataProvider</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FuzzedDataProvider</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FuzzedDataProvider</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FuzzedDataProvider</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>CopyAndAdvance</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Advance</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>ConsumeBytes</name><argument_list>(<argument>size_t size</argument>, <argument>size_t num_bytes</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TS</name></expr></argument>, <argument><expr><name>typename</name> <name>TU</name></expr></argument>&gt;</argument_list></name> <name>TS</name></type> <name>ConvertUnsignedToSigned</name><parameter_list>(<parameter><decl><type><name>TU</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_ptr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining_bytes_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeBytes</name><argument_list>(<argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<expr><name>num_bytes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>ConsumeBytes</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeBytesWithTerminator</name><argument_list>(<argument>size_t num_bytes</argument>,
<argument>T terminator</argument>)</argument_list></macro> <block>{
<expr><name>num_bytes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name><name>ConsumeBytes</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>num_bytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>result</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>=</operator> <name>terminator</name></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeRemainingBytes</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>ConsumeBytes</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeBytesAsString</name><argument_list>(<argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>value_type</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ConsumeBytesAsString cannot convert the data to a string."</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>num_bytes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <call><name>result</name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>value_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data_ptr_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>Advance</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name>
<name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeRandomLengthString</name><argument_list>(<argument>size_t max_length</argument>)</argument_list></macro> <block>{






<expr><name>std</name><operator>::</operator><name>string</name> <name>result</name></expr>;


<expr><call><name><name>result</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>max_length</name></expr></argument>, <argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_length</name> <operator>&amp;&amp;</operator> <name>remaining_bytes_</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>next</name> <init>= <expr><call><name><name>ConvertUnsignedToSigned</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>data_ptr_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Advance</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>remaining_bytes_</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>ConvertUnsignedToSigned</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>data_ptr_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Advance</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block>
<name>result</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>
}

result<expr_stmt><expr><operator>.</operator><call><name>shrink_to_fit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}


inline <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeRandomLengthString</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ConsumeRandomLengthString</name><argument_list>(<argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeRemainingBytesAsString</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ConsumeBytesAsString</name><argument_list>(<argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeIntegral</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ConsumeIntegralInRange</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeIntegralInRange</name><argument_list>(<argument>T min</argument>, <argument>T max</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"An integral type is required."</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Unsupported integral type."</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<name>uint64_t</name> <name>range</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>min</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>range</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>remaining_bytes_</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><operator>--</operator><name>remaining_bytes_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>&lt;&lt;</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>|</operator> <name><name>data_ptr_</name><index>[<expr><name>remaining_bytes_</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>range</name> <operator>!=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>range</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>%</operator> <operator>(</operator><name>range</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>min</name> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}




template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> <name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeFloatingPoint</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>ConsumeFloatingPointInRange</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>lowest</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeFloatingPointInRange</name><argument_list>(<argument>T min</argument>, <argument>T max</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<name>T</name> <name>range</name> <operator>=</operator> <literal type="number">.0</literal></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>result</name> <init>= <expr><name>min</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>T</name></type> <name>zero</name><argument_list>(<argument><expr><literal type="number">.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <name>zero</name> <operator>&amp;&amp;</operator> <name><name>min</name> <argument_list type="generic">&lt; <argument><expr><name>zero</name> <operator>&amp;&amp;</operator> <name>max</name></expr></argument> &gt;</argument_list></name> <name>min</name> <operator>+</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>range</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>/</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>min</name> <operator>/</operator> <literal type="number">2.0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ConsumeBool</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>range</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name> <operator>+</operator> <name>range</name> <operator>*</operator> <call><name><name>ConsumeProbability</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> <name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeProbability</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"A floating point type is required."</literal></expr></argument>)</argument_list></call></expr>;



<expr><name>using</name> <name>IntegralType</name> <operator>=</operator>
<name>typename</name> <name>std</name><operator>::</operator><name>conditional</name><operator>&lt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>, <expr><name>uint32_t</name></expr>,
<expr><name>uint64_t</name><operator>&gt;</operator><operator>::</operator><name>type</name></expr>;

<expr><name>T</name> <name>result</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ConsumeIntegral</name><argument_list type="generic">&lt;<argument><expr><name>IntegralType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>result</name> <operator>/=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>IntegralType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeBool</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><literal type="number">1</literal> <operator>&amp;</operator> <call><name><name>ConsumeIntegral</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeEnum</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_enum</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"|T| must be an enum type."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>ConsumeIntegralInRange</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>T</name><operator>::</operator><name>kMaxValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>PickValueInArray</name><argument_list>(<argument>const T (&amp;array)[size]</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"The array must be non empty."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>array</name><index>[<expr><call><name><name>ConsumeIntegralInRange</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>PickValueInArray</name><argument_list>(<argument>const std::array&lt;T</argument>, <argument>size&gt; &amp;array</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"The array must be non empty."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>array</name><index>[<expr><call><name><name>ConsumeIntegralInRange</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>PickValueInArray</name><argument_list>(<argument>std::initializer_list&lt;const T&gt; list</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><operator>(</operator><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>ConsumeIntegralInRange</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}







inline <expr_stmt><expr><name>size_t</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeData</name><argument_list>(<argument>void *destination</argument>,
<argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<expr><name>num_bytes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>, <argument><expr><name>remaining_bytes_</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CopyAndAdvance</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_bytes</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>void</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>CopyAndAdvance</name><argument_list>(<argument>void *destination</argument>,
<argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>data_ptr_</name></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>Advance</name><argument_list>(<argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>inline</specifier> <name>void</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>Advance</name><argument_list>(<argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>&gt;</operator> <name>remaining_bytes_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<name>data_ptr_</name> <operator>+=</operator> <name>num_bytes</name></block></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining_bytes_</name> <operator>-=</operator> <name>num_bytes</name></expr>;</expr_stmt>
}

template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConsumeBytes</name><argument_list>(<argument>size_t size</argument>, <argument>size_t num_bytes</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Incompatible data type."</literal></expr></argument>)</argument_list></call></expr>;







<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <call><name>result</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>

<call><name>CopyAndAdvance</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>shrink_to_fit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>TS</name></expr><operator>,</operator> <expr><name>typename</name> <name>TU</name><operator>&gt;</operator>
<name>TS</name> <name>FuzzedDataProvider</name><operator>::</operator><macro><name>ConvertUnsignedToSigned</name><argument_list>(<argument>TU value</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TS</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TU</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Incompatible data types."</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TU</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_signed</name></expr></argument>,
<argument><expr><literal type="string">"Source type must be unsigned."</literal></expr></argument>)</argument_list></call></expr>;


<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_modulo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>



<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>constexpr</name> <specifier>auto</specifier></type> <name>TS_min</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>TS_min</name> <operator>+</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>TS</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name> <operator>-</operator> <name>TS_min</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
