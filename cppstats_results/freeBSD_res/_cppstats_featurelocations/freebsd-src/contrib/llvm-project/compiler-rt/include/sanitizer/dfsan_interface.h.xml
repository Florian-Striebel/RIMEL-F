<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/sanitizer/dfsan_interface.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sanitizer/common_interface_defs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>uint8_t</name></type> <name>dfsan_label</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>dfsan_origin</name>;</typedef>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dfsan_write_callback_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>dfsan_label</name></type> <name>dfsan_union</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>l2</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>dfsan_set_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>dfsan_add_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>dfsan_label</name></type> <name>dfsan_get_label</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>dfsan_origin</name></type> <name>dfsan_get_origin</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>dfsan_label</name></type> <name>dfsan_read_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>dfsan_has_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>elem</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>dfsan_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>dfsan_set_write_callback</name><parameter_list>(<parameter><decl><type><name>dfsan_write_callback_t</name></type> <name>labeled_write_callback</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>dfsan_weak_hook_memcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>caller_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>s1_label</name></decl></parameter>,
<parameter><decl><type><name>dfsan_label</name></type> <name>s2_label</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>n_label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dfsan_weak_hook_strncmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>caller_pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>s1_label</name></decl></parameter>,
<parameter><decl><type><name>dfsan_label</name></type> <name>s2_label</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>n_label</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>dfsan_print_origin_trace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>;</function_decl>



































<function_decl><type><name>size_t</name></type> <name>dfsan_sprint_origin_trace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_buf_size</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>size_t</name></type> <name>dfsan_sprint_stack_trace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_buf_size</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>dfsan_origin</name></type> <name>dfsan_get_init_origin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>dfsan_get_track_origins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>dfsan_set_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dfsan_set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
