<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/include/xray/xray_interface.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_XRAY_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_XRAY_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>


<enum>enum <name>XRayEntryType</name> <block>{
<decl><name>ENTRY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EXIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>TAIL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>LOG_ARGS_ENTRY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CUSTOM_EVENT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>TYPED_EVENT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>





















<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_set_handler</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>entry</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>XRayEntryType</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_remove_handler</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_set_handler_arg1</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>entry</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>XRayEntryType</name></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_remove_handler_arg1</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_set_customevent_handler</name><argument_list>(<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_remove_customevent_handler</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_set_typedevent_handler</name><argument_list>(<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__xray_remove_typedevent_handler</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint16_t</name></type> <name>__xray_register_event_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_type</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>XRayPatchingStatus</name> <block>{
<decl><name>NOT_INITIALIZED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SUCCESS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ONGOING</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FAILED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>



<function_decl><type><specifier>extern</specifier> <name>XRayPatchingStatus</name></type> <name>__xray_patch</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>XRayPatchingStatus</name></type> <name>__xray_unpatch</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>XRayPatchingStatus</name></type> <name>__xray_patch_function</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>XRayPatchingStatus</name></type> <name>__xray_unpatch_function</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>extern</specifier> <name>uintptr_t</name></type> <name>__xray_function_address</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>__xray_max_function_id</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_init</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
