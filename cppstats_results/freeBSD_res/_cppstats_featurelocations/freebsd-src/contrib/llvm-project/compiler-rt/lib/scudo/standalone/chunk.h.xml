<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/chunk.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_CHUNK_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CHUNK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"report.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Checksum</name></type> <name>HashAlgorithm</name></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>u16</name></type> <name>computeChecksum</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Seed</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>Array</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ArraySize</name></decl></parameter>)</parameter_list> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_2__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u32</name></type> <name>Crc</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CRC32_INTRINSIC</name><argument_list>(<argument><expr><name>Seed</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>ArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Crc</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CRC32_INTRINSIC</name><argument_list>(<argument><expr><name>Crc</name></expr></argument>, <argument><expr><name><name>Array</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u16</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Crc</name> <operator>^</operator> <operator>(</operator><name>Crc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>HashAlgorithm</name> <operator>==</operator> <name>Checksum</name><operator>::</operator><name>HardwareCRC32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>Crc</name> <init>= <expr><call><name>computeHardwareCRC32</name><argument_list>(<argument><expr><name>Seed</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>ArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Crc</name> <operator>=</operator> <call><name>computeHardwareCRC32</name><argument_list>(<argument><expr><name>Crc</name></expr></argument>, <argument><expr><name><name>Array</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u16</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Crc</name> <operator>^</operator> <operator>(</operator><name>Crc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>Checksum</name> <init>= <expr><call><name>computeBSDChecksum</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u16</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Seed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>ArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Checksum</name> <operator>=</operator> <call><name>computeBSDChecksum</name><argument_list>(<argument><expr><name>Checksum</name></expr></argument>, <argument><expr><name><name>Array</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>Checksum</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>namespace</name></type> <name>Chunk</name> <block>{<block_content>





<enum>enum <name>Origin</name> : <type><name>u8</name></type> <block>{
<decl><name>Malloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>New</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>NewArray</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>Memalign</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>State</name> : <type><name>u8</name></type> <block>{ <decl><name>Available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>Allocated</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>Quarantined</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<typedef>typedef <type><name>u64</name></type> <name>PackedHeader</name>;</typedef>

<struct>struct <name>UnpackedHeader</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>ClassId</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>State</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u8</name></type> <name>OriginOrWasZeroed</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>SizeOrUnusedBytes</name> <range>: <expr><literal type="number">20</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Offset</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Checksum</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name>atomic_u64</name></type> <name>AtomicPackedHeader</name>;</typedef>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UnpackedHeader</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PackedHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>ClassIdMask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>u8</name></type> <name>StateMask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>u8</name></type> <name>OriginMask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>SizeOrUnusedBytesMask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>OffsetMask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>ChecksumMask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>constexpr</name> <name>uptr</name></type> <name>getHeaderSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackedHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>AtomicPackedHeader</name> <modifier>*</modifier></type><name>getAtomicHeader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>AtomicPackedHeader</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>AtomicPackedHeader</name> <modifier>*</modifier></type><name>getConstAtomicHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>AtomicPackedHeader</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>u16</name></type> <name>computeHeaderChecksum</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>Header</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>UnpackedHeader</name></type> <name>ZeroChecksumHeader</name> <init>= <expr><operator>*</operator><name>Header</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ZeroChecksumHeader</name><operator>.</operator><name>Checksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>HeaderHolder</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>UnpackedHeader</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>HeaderHolder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ZeroChecksumHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HeaderHolder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>computeChecksum</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HeaderHolder</name></expr></argument>,
<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>HeaderHolder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>storeHeader</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Cookie</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>NewUnpackedHeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>NewUnpackedHeader</name><operator>-&gt;</operator><name>Checksum</name></name> <operator>=</operator>
<call><name>computeHeaderChecksum</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PackedHeader</name></type> <name>NewPackedHeader</name> <init>= <expr><call><name><name>bit_cast</name><argument_list type="generic">&lt;<argument><expr><name>PackedHeader</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><call><name>getAtomicHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NewPackedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>loadHeader</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>NewUnpackedHeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PackedHeader</name></type> <name>NewPackedHeader</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><call><name>getConstAtomicHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>NewUnpackedHeader</name> <operator>=</operator> <call><name><name>bit_cast</name><argument_list type="generic">&lt;<argument><expr><name>UnpackedHeader</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NewPackedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>NewUnpackedHeader</name><operator>-&gt;</operator><name>Checksum</name></name> <operator>!=</operator>
<call><name>computeHeaderChecksum</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportHeaderCorruption</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>compareExchangeHeader</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Cookie</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>NewUnpackedHeader</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>OldUnpackedHeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>NewUnpackedHeader</name><operator>-&gt;</operator><name>Checksum</name></name> <operator>=</operator>
<call><name>computeHeaderChecksum</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PackedHeader</name></type> <name>NewPackedHeader</name> <init>= <expr><call><name><name>bit_cast</name><argument_list type="generic">&lt;<argument><expr><name>PackedHeader</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PackedHeader</name></type> <name>OldPackedHeader</name> <init>= <expr><call><name><name>bit_cast</name><argument_list type="generic">&lt;<argument><expr><name>PackedHeader</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>OldUnpackedHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>atomic_compare_exchange_strong</name><argument_list>(
<argument><expr><call><name>getAtomicHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>OldPackedHeader</name></expr></argument>, <argument><expr><name>NewPackedHeader</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportHeaderRace</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>UnpackedHeader</name> <modifier>*</modifier></type><name>NewUnpackedHeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PackedHeader</name></type> <name>NewPackedHeader</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><call><name>getConstAtomicHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>NewUnpackedHeader</name> <operator>=</operator> <call><name><name>bit_cast</name><argument_list type="generic">&lt;<argument><expr><name>UnpackedHeader</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NewPackedHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>NewUnpackedHeader</name><operator>-&gt;</operator><name>Checksum</name></name> <operator>==</operator>
<call><name>computeHeaderChecksum</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>NewUnpackedHeader</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
