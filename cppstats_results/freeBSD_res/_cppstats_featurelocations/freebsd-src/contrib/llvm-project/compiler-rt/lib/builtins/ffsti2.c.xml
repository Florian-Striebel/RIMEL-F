<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ffsti2.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>COMPILER_RT_ABI</name> <name>int</name></type> <name>__ffsti2</name><parameter_list>(<parameter><decl><type><name>ti_int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>twords</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>di_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
