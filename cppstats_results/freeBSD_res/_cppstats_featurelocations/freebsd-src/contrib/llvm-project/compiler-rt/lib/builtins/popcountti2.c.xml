<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/popcountti2.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>COMPILER_RT_ABI</name> <name>int</name></type> <name>__popcountti2</name><parameter_list>(<parameter><decl><type><name>ti_int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tu_int</name></type> <name>x3</name> <init>= <expr><operator>(</operator><name>tu_int</name><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x3</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>tu_int</name><operator>)</operator><literal type="number">0x5555555555555555uLL</literal> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x5555555555555555uLL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>tu_int</name><operator>)</operator><literal type="number">0x3333333333333333uLL</literal> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x3333333333333333uLL</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>x3</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>tu_int</name><operator>)</operator><literal type="number">0x3333333333333333uLL</literal> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x3333333333333333uLL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>x3</name> <operator>+</operator> <operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>tu_int</name><operator>)</operator><literal type="number">0x0F0F0F0F0F0F0F0FuLL</literal> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x0F0F0F0F0F0F0F0FuLL</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>du_int</name></type> <name>x2</name> <init>= <expr><operator>(</operator><name>du_int</name><operator>)</operator><operator>(</operator><name>x3</name> <operator>+</operator> <operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>su_int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>su_int</name><operator>)</operator><operator>(</operator><name>x2</name> <operator>+</operator> <operator>(</operator><name>x2</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>



<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
