<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/lsan/lsan_common.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LSAN_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSAN_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stoptheworld.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_symbolizer.h"</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__ANDROID_API__</name> <operator>&lt;</operator> <literal type="number">28</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_MAC</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_MAC</name><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SANITIZER_LINUX</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_RISCV64</name> <operator>&amp;&amp;</operator> <name>SANITIZER_LINUX</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_FUCHSIA</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAN_SANITIZE_LEAKS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FlagParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ThreadRegistry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ThreadContextBase</name></decl>;</decl_stmt>
<struct_decl>struct <name>DTLS</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>


<enum>enum <name>ChunkTag</name> <block>{
<decl><name>kDirectlyLeaked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>kIndirectlyLeaked</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kReachable</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>kIgnored</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>Flags</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSAN_FLAG</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>DefaultValue</name></type></parameter>, <parameter><type><name>Description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_flags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSAN_FLAG</name></cpp:undef>

<function_decl><type><name>void</name></type> <name>SetDefaults</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>pointer_alignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>use_unaligned</name> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Flags</name></type> <name>lsan_flags</name></decl>;</decl_stmt>
<function><type><specifier>inline</specifier> <name>Flags</name> <modifier>*</modifier></type><name>flags</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>lsan_flags</name></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>RegisterLsanFlags</name><parameter_list>(<parameter><decl><type><name>FlagParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>Flags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>Leak</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>hit_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stack_trace_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_directly_leaked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_suppressed</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>LeakedObject</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>leak_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>LeakReport</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>LeakReport</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<function_decl><type><name>void</name></type> <name>AddLeakedChunk</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stack_trace_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>leaked_size</name></decl></parameter>,
<parameter><decl><type><name>ChunkTag</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportTopLeaks</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>max_leaks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintSummary</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>ApplySuppressions</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>UnsuppressedLeakCount</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>IndirectUnsuppressedLeakCount</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>PrintReportForLeak</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintLeakedObjectsForLeak</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>u32</name></type> <name>next_id_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>Leak</name></expr></argument>&gt;</argument_list></name></type> <name>leaks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>LeakedObject</name></expr></argument>&gt;</argument_list></name></type> <name>leaked_objects_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name></type> <name>Frontier</name>;</typedef>


<function_decl><type><name>void</name></type> <name>InitializePlatformSpecificModules</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessGlobalRegions</name><parameter_list>(<parameter><decl><type><name>Frontier</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessPlatformSpecificAllocations</name><parameter_list>(<parameter><decl><type><name>Frontier</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>RootRegion</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>CheckForLeaksParam</name> <block>{
<decl_stmt><decl><type><name>Frontier</name></type> <name>frontier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LeakReport</name></type> <name>leak_report</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>RootRegion</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>*</modifier></type><name>GetRootRegions</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ScanRootRegion</name><parameter_list>(<parameter><decl><type><name>Frontier</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>, <parameter><decl><type><name>RootRegion</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>region_begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>region_end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_readable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ForEachExtraStackRangeCb</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GetAdditionalThreadContextPtrs</name><parameter_list>(<parameter><decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptrs</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>LockStuffAndStopTheWorld</name><parameter_list>(<parameter><decl><type><name>StopTheWorldCallback</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>CheckForLeaksParam</name><modifier>*</modifier></type> <name>argument</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ScanRangeForPointers</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>Frontier</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>region_type</name></decl></parameter>, <parameter><decl><type><name>ChunkTag</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ScanGlobalRange</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Frontier</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>IgnoreObjectResult</name> <block>{
<decl><name>kIgnoreObjectSuccess</name></decl>,
<decl><name>kIgnoreObjectAlreadyIgnored</name></decl>,
<decl><name>kIgnoreObjectInvalid</name></decl>
}</block>;</enum>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MaybeCallLsanDefaultOptions</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitCommonLsan</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DoLeakCheck</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DoRecoverableLeakCheckVoid</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DisableCounterUnderflow</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>DisabledInThisThread</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>DisableInThisThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>EnableInThisThread</name><parameter_list>()</parameter_list>;</function_decl>


<struct>struct <name>ScopedInterceptorDisabler</name> <block>{
<macro><name>ScopedInterceptorDisabler</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>DisableInThisThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedInterceptorDisabler</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>EnableInThisThread</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsItaniumABIArrayCookie</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk_beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>chunk_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>chunk_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>chunk_beg</name> <operator>+</operator> <name>chunk_size</name> <operator>==</operator> <name>addr</name> <operator>&amp;&amp;</operator>
<operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>chunk_beg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsARMABIArrayCookie</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk_beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>chunk_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>chunk_size</name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>chunk_beg</name> <operator>+</operator> <name>chunk_size</name> <operator>==</operator> <name>addr</name> <operator>&amp;&amp;</operator>
<operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>chunk_beg</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsSpecialCaseOfOperatorNew0</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk_beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>chunk_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>IsARMABIArrayCookie</name><argument_list>(<argument><expr><name>chunk_beg</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>IsItaniumABIArrayCookie</name><argument_list>(<argument><expr><name>chunk_beg</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><name>ForEachChunkCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetAllocatorGlobalRange</name><parameter_list>(<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>LockAllocator</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnlockAllocator</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>WordIsPoisoned</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>void</name> <macro><name>LockThreadRegistry</name><argument_list>()</argument_list></macro> <name>NO_THREAD_SAFETY_ANALYSIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>void</name> <macro><name>UnlockThreadRegistry</name><argument_list>()</argument_list></macro> <name>NO_THREAD_SAFETY_ANALYSIS</name></expr>;</expr_stmt>
<function_decl><type><name>ThreadRegistry</name> <modifier>*</modifier></type><name>GetThreadRegistryLocked</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetThreadRangesLocked</name><parameter_list>(<parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>stack_begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>stack_end</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>tls_begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>tls_end</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>cache_begin</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>cache_end</name></decl></parameter>, <parameter><decl><type><name>DTLS</name> <modifier>*</modifier><modifier>*</modifier></type><name>dtls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GetAllThreadAllocatorCachesLocked</name><parameter_list>(<parameter><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>caches</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ForEachExtraStackRange</name><parameter_list>(<parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>, <parameter><decl><type><name>RangeIteratorCallback</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>EnsureMainThreadIDIsCorrect</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>PointsIntoChunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>GetUserBegin</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IgnoreObjectResult</name></type> <name>IgnoreObjectLocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>LoadedModule</name> <modifier>*</modifier></type><name>GetLinker</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>HasReportedLeaks</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>HandleLeaks</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>LsanMetadata</name> <block>{<block_content>
<label><name>public</name>:</label>

<function_decl><type><name>explicit</name></type> <name>LsanMetadata</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>allocated</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>ChunkTag</name> <macro><name>tag</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>set_tag</name><parameter_list>(<parameter><decl><type><name>ChunkTag</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>requested_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>stack_trace_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>metadata_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>SANITIZER_WEAK_ATTRIBUTE</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__lsan_default_options</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>SANITIZER_WEAK_ATTRIBUTE</name>
<name>int</name></type> <name>__lsan_is_turned_off</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>SANITIZER_WEAK_ATTRIBUTE</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__lsan_default_suppressions</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
