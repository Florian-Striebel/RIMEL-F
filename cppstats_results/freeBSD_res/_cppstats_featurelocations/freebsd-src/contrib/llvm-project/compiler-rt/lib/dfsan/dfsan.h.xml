<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/dfsan/dfsan.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dfsan_platform.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>u32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>u8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>uptr</name></expr>;</expr_stmt>


<typedef>typedef <type><name>u8</name></type> <name>dfsan_label</name>;</typedef>
<typedef>typedef <type><name>u32</name></type> <name>dfsan_origin</name>;</typedef>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<function_decl><type><name>void</name></type> <name>dfsan_add_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dfsan_set_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dfsan_label</name></type> <name>dfsan_read_label</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dfsan_label</name></type> <name>dfsan_union</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>dfsan_label</name></type> <name>l2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dfsan_clear_arg_tls</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dfsan_clear_thread_local_state</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>dfsan_origin</name></type> <name>dfsan_read_origin_of_first_taint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>dfsan_set_label_origin</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>dfsan_origin</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>dfsan_mem_origin_transfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></extern>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>dfsan_set_label</name><parameter_list>(<parameter><decl><type><name>dfsan_label</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dfsan_set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>dfsan_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>dfsan_init_is_running</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>initialize_interceptors</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>dfsan_label</name> <modifier>*</modifier></type><name>shadow_for</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>dfsan_label</name> <operator>*</operator><operator>)</operator><call><name>MEM_TO_SHADOW</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>dfsan_label</name> <modifier>*</modifier></type><name>shadow_for</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>shadow_for</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>unaligned_origin_for</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>MEM_TO_ORIGIN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>dfsan_origin</name> <modifier>*</modifier></type><name>origin_for</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>aligned_addr</name> <init>= <expr><call><name>unaligned_origin_for</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dfsan_origin</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>dfsan_origin</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aligned_addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>dfsan_origin</name> <modifier>*</modifier></type><name>origin_for</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>origin_for</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>dfsan_copy_memory</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dfsan_allocator_init</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dfsan_deallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dfsan_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dfsan_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dfsan_init</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
