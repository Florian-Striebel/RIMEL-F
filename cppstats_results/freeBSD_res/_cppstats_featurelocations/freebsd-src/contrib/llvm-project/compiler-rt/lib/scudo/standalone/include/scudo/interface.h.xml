<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/include/scudo/interface.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_INTERFACE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_INTERFACE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__scudo_default_options</name><parameter_list>()</parameter_list>;</function_decl>



<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function_decl><type><name>void</name></type> <name>__scudo_allocate_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function_decl><type><name>void</name></type> <name>__scudo_deallocate_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__scudo_print_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>iterate_callback</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>















































<function_decl><type><name>void</name></type> <name>__scudo_get_error_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>scudo_error_info</name></name> <modifier>*</modifier></type><name>error_info</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>fault_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stack_depot</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>region_info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ring_buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>memory</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>memory_tags</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>memory_addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>memory_size</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>scudo_error_type</name> <block>{
<decl><name>UNKNOWN</name></decl>,
<decl><name>USE_AFTER_FREE</name></decl>,
<decl><name>BUFFER_OVERFLOW</name></decl>,
<decl><name>BUFFER_UNDERFLOW</name></decl>,
}</block>;</enum>

<struct>struct <name>scudo_error_report</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>scudo_error_type</name></name></type> <name>error_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>allocation_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>allocation_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>allocation_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>allocation_trace</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>deallocation_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>deallocation_trace</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>scudo_error_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>scudo_error_report</name></name></type> <name><name>reports</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__scudo_get_stack_depot_addr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>__scudo_get_stack_depot_size</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__scudo_get_region_info_addr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>__scudo_get_region_info_size</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__scudo_get_ring_buffer_addr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>__scudo_get_ring_buffer_size</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_DECAY_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_DECAY_TIME</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PURGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PURGE</name></cpp:macro> <cpp:value>-101</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_MEMTAG_TUNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MEMTAG_TUNING</name></cpp:macro> <cpp:value>-102</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_THREAD_DISABLE_MEM_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_THREAD_DISABLE_MEM_INIT</name></cpp:macro> <cpp:value>-103</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_CACHE_COUNT_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CACHE_COUNT_MAX</name></cpp:macro> <cpp:value>-200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_CACHE_SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CACHE_SIZE_MAX</name></cpp:macro> <cpp:value>-201</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_TSDS_COUNT_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TSDS_COUNT_MAX</name></cpp:macro> <cpp:value>-202</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_MEMTAG_TUNING_BUFFER_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MEMTAG_TUNING_BUFFER_OVERFLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_MEMTAG_TUNING_UAF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MEMTAG_TUNING_UAF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
