<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerRandom.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_RANDOM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_RANDOM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Random</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>minstd_rand</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Random</name><argument_list>(<argument>unsigned int seed</argument>)</argument_list></macro> <operator>:</operator> <name>std</name><operator>::</operator><macro><name>minstd_rand</name><argument_list>(<argument>seed</argument>)</argument_list></macro> <block>{}</block>
<name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>std</name></name><operator>::</operator><name>minstd_rand</name><operator>::</operator><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</return> }</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <macro><name>Rand</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><call><name><name>this</name><operator>-&gt;</operator><name>operator</name></name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>size_t</name> <macro><name>RandBool</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><call><name><name>this</name><operator>-&gt;</operator><name>operator</name></name><argument_list>()</argument_list></call><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>;</return> }</block>
<name>size_t</name> <macro><name>SkewTowardsLast</name><argument_list>(<argument>size_t n</argument>)</argument_list></macro> <block>{
<expr><name>size_t</name> <name>T</name> <operator>=</operator> <call><call><name><name>this</name><operator>-&gt;</operator><name>operator</name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;
<expr><name>size_t</name> <name>Res</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Res</name></expr>;</return>
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>T</name> <name>n</name><operator>)</operator> <block>{
<return>return <expr><name>n</name> <operator>?</operator> <call><name><name>Rand</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>%</operator> <name>n</name> <operator>:</operator> <literal type="number">0</literal></expr>;</return>
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>T</name> <name>From</name>, <name>T</name> <name>To</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>From</name> <operator>&lt;</operator> <name>To</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>RangeSize</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>To</name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><call><name><name>this</name><operator>-&gt;</operator><name>operator</name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>RangeSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>From</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
