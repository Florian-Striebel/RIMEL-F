<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMutate.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_MUTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_MUTATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerRandom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MutationDispatcher</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MutationDispatcher</name><argument_list>(<argument><expr><name>Random</name> <operator>&amp;</operator><name>Rand</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FuzzingOptions</name> <operator>&amp;</operator><name>Options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>MutationDispatcher</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>void</name> <call><name>StartMutationSequence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>PrintMutationSequence</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Verbose</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>MutationSequence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>RecordSuccessfulMutationSequence</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_Custom</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_CustomCrossOver</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_ShuffleBytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_EraseBytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_InsertByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_InsertRepeatedBytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_ChangeByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_ChangeBit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_CopyPart</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Mutate_AddWordFromManualDictionary</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Mutate_AddWordFromTORC</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Mutate_AddWordFromPersistentAutoDictionary</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Mutate_ChangeASCIIInteger</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Mutate_ChangeBinaryInteger</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Mutate_CrossOver</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>size_t</name></type> <name>Mutate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>size_t</name></type> <name>MutateWithMask</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Mask</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>size_t</name></type> <name>DefaultMutate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>CrossOver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>Size2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxOutSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AddWordToManualDictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Word</name> <modifier>&amp;</modifier></type><name>W</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintRecommendedDictionary</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetCrossOverWith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>*</modifier></type><name>U</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CrossOverWith</name> <operator>=</operator> <name>U</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>Random</name> <modifier>&amp;</modifier></type><name>GetRand</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Rand</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<struct>struct <name>Mutator</name> <block>{
<macro><name>size_t</name> <argument_list>(<argument>MutationDispatcher::*Fn</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><name>Data</name><operator>,</operator> <name>size_t</name> <name>Size</name><operator>,</operator> <name>size_t</name> <name>Max</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>size_t</name></type> <name>AddWordFromDictionary</name><parameter_list>(<parameter><decl><type><name>Dictionary</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>MutateImpl</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>,
<parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Mutator</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Mutators</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>InsertPartOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>FromSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>To</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>ToSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxToSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>CopyPartOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>FromSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>To</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>ToSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>ApplyDictionaryEntry</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>,
<parameter><decl><type><name>DictionaryEntry</name> <modifier>&amp;</modifier></type><name>DE</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>DictionaryEntry</name></type> <name>MakeDictionaryEntryFromCMP</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>Arg1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>Arg2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DictionaryEntry</name></type> <name>MakeDictionaryEntryFromCMP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Word</name> <modifier>&amp;</modifier></type><name>Arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Word</name> <modifier>&amp;</modifier></type><name>Arg2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DictionaryEntry</name></type> <name>MakeDictionaryEntryFromCMP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Arg2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Arg1Mutation</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Arg2Mutation</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>ArgSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Random</name> <modifier>&amp;</modifier></type><name>Rand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FuzzingOptions</name></type> <name>Options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Dictionary</name></type> <name>ManualDictionary</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Dictionary</name></type> <name>PersistentAutoDictionary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>DictionaryEntry</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>CurrentDictionaryEntrySequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kCmpDictionaryEntriesDequeSize</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DictionaryEntry</name></type> <name><name>CmpDictionaryEntriesDeque</name><index>[<expr><name>kCmpDictionaryEntriesDequeSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>CmpDictionaryEntriesDequeIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>*</modifier></type><name>CrossOverWith</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>MutateInPlaceHere</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>MutateWithMaskTemp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>CustomCrossOverInPlaceHere</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Mutator</name></expr></argument>&gt;</argument_list></name></type> <name>Mutators</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Mutator</name></expr></argument>&gt;</argument_list></name></type> <name>DefaultMutators</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Mutator</name></expr></argument>&gt;</argument_list></name></type> <name>CurrentMutatorSequence</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
