<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/lsan/lsan_thread.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LSAN_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSAN_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_thread_registry.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadContextLsanBase</name> <range>: <expr><name>public</name> <name>ThreadContextBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ThreadContextLsanBase</name><argument_list>(<argument>int tid</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>OnFinished</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>uptr</name> <macro><name>stack_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>stack_begin_</name></expr>;</return> }</block>
<name>uptr</name> <macro><name>stack_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>stack_end_</name></expr>;</return> }</block>
<name>uptr</name> <macro><name>cache_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>cache_begin_</name></expr>;</return> }</block>
<name>uptr</name> <macro><name>cache_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>cache_end_</name></expr>;</return> }</block>


<specifier>static</specifier> <name>void</name> <macro><name>ThreadStart</name><argument_list>(<argument>u32 tid</argument>, <argument>tid_t os_id</argument>, <argument>ThreadType thread_type</argument>,
<argument>void *onstarted_arg</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<operator>~</operator><macro><name>ThreadContextLsanBase</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>uptr</name> <name>stack_begin_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>stack_end_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>cache_begin_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>cache_end_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ThreadContext</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>InitializeThreadRegistry</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeMainThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>u32</name></type> <name>ThreadCreate</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadFinish</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadDetach</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadJoin</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>u32</name></type> <name>ThreadTid</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>u32</name></type> <name>GetCurrentThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetCurrentThread</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>CurrentThreadContext</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>EnsureMainThreadIDIsCorrect</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
