<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_solaris.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_PLATFORM_LIMITS_SOLARIS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_PLATFORM_LIMITS_SOLARIS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_utsname_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_stat_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_stat64_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_rusage_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>siginfo_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_itimerval_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>pthread_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>pthread_mutex_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>pthread_cond_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>pid_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>timeval_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>uid_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>gid_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>mbstate_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_timezone_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_tms_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_itimerspec_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_sigevent_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_stack_t_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_sched_param_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_statfs64_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_statfs_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_sockaddr_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>ucontext_t_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_timespec_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_rlimit_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_utimbuf_sz</name></decl>;</decl_stmt>

<struct>struct <name>__sanitizer_sem_t</name> <block>{

<decl_stmt><decl><type><name>u32</name></type> <name>sem_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>sem_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>sem_magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>sem_pad1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>sem_pad2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_ipc_perm</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cgid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name><name>pad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>__sanitizer_shmid_ds</name> <block>{
<decl_stmt><decl><type><name>__sanitizer_ipc_perm</name></type> <name>shm_perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>shm_segsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>shm_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>shm_lkcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shm_lpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shm_cpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>shm_nattch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>shm_cnattch</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>shm_atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>shm_dtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>shm_ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>shm_amp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>shm_gransize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>shm_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>shm_pad4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>long</name></type> <name>shm_atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shm_pad1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>shm_dtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shm_pad2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>shm_ctime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>shm_amp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>shm_gransize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>shm_allocated</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_statvfs_sz</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_statvfs64_sz</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>__sanitizer_iovec</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iov_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>iov_len</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_ifaddrs</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>__sanitizer_ifaddrs</name></name> <modifier>*</modifier></type><name>ifa_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ifa_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>ifa_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifa_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifa_netmask</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ifa_dstaddr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ifa_dstaddr</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifa_dstaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifa_data</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>unsigned</name></type> <name>__sanitizer_pthread_key_t</name>;</typedef>

<struct>struct <name>__sanitizer_XDR</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x_ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>x_public</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>x_private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>x_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x_handy</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>__sanitizer_XDR_ENCODE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>__sanitizer_XDR_DECODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>__sanitizer_XDR_FREE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>__sanitizer_passwd</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_passwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pw_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pw_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_age</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_gecos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_shell</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_group</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gr_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gr_passwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gr_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gr_mem</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>long</name></type> <name>__sanitizer_time_t</name>;</typedef>

<typedef>typedef <type><name>long</name></type> <name>__sanitizer_suseconds_t</name>;</typedef>

<struct>struct <name>__sanitizer_timeval</name> <block>{
<decl_stmt><decl><type><name>__sanitizer_time_t</name></type> <name>tv_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__sanitizer_suseconds_t</name></type> <name>tv_usec</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_itimerval</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>__sanitizer_timeval</name></name></type> <name>it_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>__sanitizer_timeval</name></name></type> <name>it_value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_timeb</name> <block>{
<decl_stmt><decl><type><name>__sanitizer_time_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>millitm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>timezone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>dstflag</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_ether_addr</name> <block>{
<decl_stmt><decl><type><name>u8</name></type> <name><name>octet</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_tm</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tm_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_mday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_mon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_wday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_yday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_isdst</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_msghdr</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>msg_namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>__sanitizer_iovec</name></name> <modifier>*</modifier></type><name>msg_iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>msg_iovlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg_control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>msg_controllen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_flags</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>__sanitizer_cmsghdr</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>cmsg_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmsg_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmsg_type</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<struct>struct <name>__sanitizer_dirent</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>d_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>d_reclen</name></decl>;</decl_stmt>

}</block>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>__sanitizer_dirent</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>d_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>d_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>d_reclen</name></decl>;</decl_stmt>

}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>__sanitizer_dirent64</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>d_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>d_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>d_reclen</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name>long</name></type> <name>__sanitizer_clock_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>__sanitizer_clockid_t</name>;</typedef>



<union>union <name>__sanitizer_pthread_attr_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>align</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>__sanitizer_sigset_t</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>__bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_siginfo</name> <block>{

<decl_stmt><decl><type><name>u64</name></type> <name><name>opaque</name><index>[<expr><literal type="number">128</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u64</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>__sanitizer_sighandler_ptr</name> <init>= <macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><expr><operator>(</operator><name>int</name> <name>sig</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>__sanitizer_sigactionhandler_ptr</name> <init>=
<macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><expr><operator>(</operator><name>int</name> <name>sig</name>, <name>__sanitizer_siginfo</name> <operator>*</operator><name>siginfo</name>, <name>void</name> <operator>*</operator><name>uctx</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<struct>struct <name>__sanitizer_sigaction</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sa_flags</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__sanitizer_sigactionhandler_ptr</name></type> <name>sigaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__sanitizer_sighandler_ptr</name></type> <name>handler</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>__sanitizer_sigset_t</name></type> <name>sa_mask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name><name>sa_resv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>__sanitizer_kernel_sigset_t</name> <block>{
<decl_stmt><decl><type><name>u8</name></type> <name><name>sig</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_kernel_sigaction_t</name> <block>{
<union>union <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sigaction</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>__sanitizer_siginfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sa_flags</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>sa_restorer</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__sanitizer_kernel_sigset_t</name></type> <name>sa_mask</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>sig_ign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>sig_dfl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>sig_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>sa_siginfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>af_inet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>af_inet6</name></decl>;</decl_stmt>
<function_decl><type><name>uptr</name></type> <name>__sanitizer_in_addr_sz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>__sanitizer_dl_phdr_info</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>dlpi_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlpi_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dlpi_phdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>dlpi_phnum</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_ElfW_Phdr_sz</name></decl>;</decl_stmt>

<struct>struct <name>__sanitizer_addrinfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ai_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_socktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_protocol</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparcv9</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>_ai_pad</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ai_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_canonname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ai_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>__sanitizer_addrinfo</name></name> <modifier>*</modifier></type><name>ai_next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_hostent</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>h_aliases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_addrtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>h_addr_list</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>__sanitizer_pollfd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>revents</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>__sanitizer_nfds_t</name>;</typedef>

<struct>struct <name>__sanitizer_glob_t</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>gl_pathc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gl_pathv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>gl_offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gl_pathp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gl_pathn</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>glob_nomatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>glob_altdirfunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>path_max</name></decl>;</decl_stmt>

<struct>struct <name>__sanitizer_wordexp_t</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>we_wordc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>we_wordv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>we_offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>we_wordp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>we_wordn</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>void</name></type> <name>__sanitizer_FILE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_HAS_STRUCT_FILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>struct_shminfo_sz</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>struct_shm_info_sz</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shmctl_shm_stat</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shmctl_ipc_info</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shmctl_shm_info</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>shmctl_ipc_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_utmp_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_utmpx_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>map_fixed</name></decl>;</decl_stmt>


<struct>struct <name>__sanitizer_ifconf</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ifc_len</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ifcu_req</name></decl>;</decl_stmt>
}</block> <decl><name>ifc_ifcu</name></decl>;</union>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_NRBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_TYPEBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_SIZEBITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_DIRBITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IOC_NONE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_NONE</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_READ</name></cpp:macro> <cpp:value>4U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_WRITE</name></cpp:macro> <cpp:value>8U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_NRMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; IOC_NRBITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_TYPEMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; IOC_TYPEBITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_SIZEMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; IOC_SIZEBITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_DIRMASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; IOC_DIRBITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_NRSHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_TYPESHIFT</name></cpp:macro> <cpp:value>(IOC_NRSHIFT + IOC_NRBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_SIZESHIFT</name></cpp:macro> <cpp:value>(IOC_TYPESHIFT + IOC_TYPEBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_DIRSHIFT</name></cpp:macro> <cpp:value>(IOC_SIZESHIFT + IOC_SIZEBITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_DIR</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; IOC_DIRSHIFT) &amp; IOC_DIRMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_TYPE</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; IOC_TYPESHIFT) &amp; IOC_TYPEMASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_NR</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; IOC_NRSHIFT) &amp; IOC_NRMASK)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_SIZE</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((((nr) &gt;&gt; 29) &amp; 0x7) &amp; (4U | 2U)) == 0) ? 0 : (((nr) &gt;&gt; 16) &amp; 0x3fff))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOC_SIZE</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nr) &gt;&gt; IOC_SIZESHIFT) &amp; IOC_SIZEMASK)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_ifreq_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_termios_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_winsize_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_sioc_sg_req_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>struct_sioc_vif_req_sz</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>IOCTL_NOT_PRESENT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIOASYNC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIOCLEX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIOGETOWN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIONBIO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIONCLEX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_FIOSETOWN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCADDMULTI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCATMARK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCDELMULTI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFBRDADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFCONF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFDSTADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFFLAGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFMETRIC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFMTU</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGIFNETMASK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCGPGRP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFBRDADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFDSTADDR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFFLAGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFMETRIC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFMTU</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSIFNETMASK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_SIOCSPGRP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCEXCL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCGETD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCGPGRP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCGWINSZ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCMBIC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCMBIS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCMGET</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCMSET</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCNOTTY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCNXCL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCOUTQ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCPKT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCSCTTY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCSETD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCSPGRP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCSTI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_TIOCSWINSZ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_MTIOCGET</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>IOCTL_MTIOCTOP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>si_SEGV_MAPERR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>si_SEGV_ACCERR</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TYPE_SIZE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILER_CHECK(sizeof(__sanitizer_##TYPE) == sizeof(TYPE))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SIZE_AND_OFFSET</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>MEMBER</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILER_CHECK(sizeof(((__sanitizer_##CLASS *) NULL)-&gt;MEMBER) == sizeof(((CLASS *) NULL)-&gt;MEMBER)); COMPILER_CHECK(offsetof(__sanitizer_##CLASS, MEMBER) == offsetof(CLASS, MEMBER))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STRUCT_SIZE_AND_OFFSET</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>MEMBER</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILER_CHECK(sizeof(((struct __sanitizer_##CLASS *) NULL)-&gt;MEMBER) == sizeof(((struct CLASS *) NULL)-&gt;MEMBER)); COMPILER_CHECK(offsetof(struct __sanitizer_##CLASS, MEMBER) == offsetof(struct CLASS, MEMBER))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
