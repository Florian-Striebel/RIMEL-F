<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingPlatformDarwin.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>__llvm_profile_data</name>
<name>DataStart</name> <asm>__asm("section$start$__DATA$" INSTR_PROF_DATA_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>__llvm_profile_data</name>
<name>DataEnd</name> <asm>__asm("section$end$__DATA$" INSTR_PROF_DATA_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>char</name>
<name>NamesStart</name> <asm>__asm("section$start$__DATA$" INSTR_PROF_NAME_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>char</name> <name>NamesEnd</name> <asm>__asm("section$end$__DATA$" INSTR_PROF_NAME_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>uint64_t</name>
<name>CountersStart</name> <asm>__asm("section$start$__DATA$" INSTR_PROF_CNTS_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>uint64_t</name>
<name>CountersEnd</name> <asm>__asm("section$end$__DATA$" INSTR_PROF_CNTS_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>uint32_t</name>
<name>OrderFileStart</name> <asm>__asm("section$start$__DATA$" INSTR_PROF_ORDERFILE_SECT_NAME);</asm>

<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>ValueProfNode</name>
<name>VNodesStart</name> <asm>__asm("section$start$__DATA$" INSTR_PROF_VNODES_SECT_NAME);</asm>
<name>COMPILER_RT_VISIBILITY</name>
<specifier>extern</specifier> <name>ValueProfNode</name>
<name>VNodesEnd</name> <asm>__asm("section$end$__DATA$" INSTR_PROF_VNODES_SECT_NAME);</asm>

<name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_begin_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>DataStart</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_end_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>DataEnd</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_begin_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>NamesStart</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_end_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>NamesEnd</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>CountersStart</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_end_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>CountersEnd</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint32_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_orderfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>OrderFileStart</name></expr>;</return> </block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_begin_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>VNodesStart</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_end_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>VNodesEnd</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name> <init>= <expr><operator>&amp;</operator><name>VNodesStart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>EndVNode</name> <init>= <expr><operator>&amp;</operator><name>VNodesEnd</name></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
