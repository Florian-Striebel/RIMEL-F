<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/scudo_allocator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_ALLOCATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__scudo</name> <block>{<block_content>

<enum>enum <name>AllocType</name> : <type><name>u8</name></type> <block>{
<decl><name>FromMalloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FromNew</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FromNewArray</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FromMemalign</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>ChunkState</name> : <type><name>u8</name></type> <block>{
<decl><name>ChunkAvailable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ChunkAllocated</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ChunkQuarantine</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>






<typedef>typedef <type><name>u64</name></type> <name>PackedHeader</name>;</typedef>
<struct>struct <name>UnpackedHeader</name> <block>{
<decl_stmt><decl><type><name>u64</name></type> <name>Checksum</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>ClassId</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>SizeOrUnusedBytes</name> <range>: <expr><literal type="number">20</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name>State</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>AllocType</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>Offset</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>



}</block>;</struct>

<typedef>typedef <type><name>atomic_uint64_t</name></type> <name>AtomicPackedHeader</name>;</typedef>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UnpackedHeader</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PackedHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MinAlignmentLog</name> <init>= <expr><call><name>FIRST_32_SECOND_64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxAlignmentLog</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MinAlignment</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MinAlignmentLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxAlignment</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MaxAlignmentLog</name></expr></init></decl>;</decl_stmt>



<function><type><name>constexpr</name> <name>uptr</name></type> <name>RoundUpTo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Size</name> <operator>+</operator> <name>Boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>Boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>namespace</name></type> <name>Chunk</name> <block>{<block_content>
<function><type><name>constexpr</name> <name>uptr</name></type> <name>getHeaderSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackedHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CAN_USE_ALLOCATOR64</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocatorSpace</name> <init>= <expr><operator>~</operator><literal type="number">0ULL</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>AP64</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><name>AllocatorSpace</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceSize</name> <init>= <expr><name>AllocatorSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>__scudo</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>NoOpMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>=
<expr><name>SizeClassAllocator64FlagMasks</name><operator>::</operator><name>kRandomShuffleChunks</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>AP64</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryT</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>AP32</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSpaceSize</name> <init>= <expr><name>SANITIZER_MMAP_RANGE_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>__scudo</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSizeLog</name> <init>= <expr><name>RegionSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>NoOpMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>=
<expr><name>SizeClassAllocator32FlagMasks</name><operator>::</operator><name>kRandomShuffleChunks</name> <operator>|</operator>
<name>SizeClassAllocator32FlagMasks</name><operator>::</operator><name>kUseSeparateSizeClassForBatch</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>AP32</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_allocator_secondary.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>LargeMmapAllocator</name></type> <name>SecondaryT</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_allocator_combined.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>CombinedAllocator</name></type> <name>BackendT</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>CombinedAllocator</name><operator>::</operator><name>AllocatorCache</name> <name>AllocatorCacheT</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>void</name></type> <name>initScudo</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoAllocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>scudoDeallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoCalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>NMemB</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoValloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoPvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>scudoPosixMemalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>MemPtr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>scudoAlignedAlloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>scudoMallocUsableSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
