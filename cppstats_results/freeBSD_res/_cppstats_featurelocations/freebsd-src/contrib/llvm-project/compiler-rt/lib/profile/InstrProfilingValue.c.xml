<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingValue.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingUtil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_PROF_DATA</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_COMMON_API_IMPL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_PROF_MEMOP_API</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hasStaticCounters</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>OutOfNodesWarnings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hasNonDefaultValsPerSite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_MAX_VP_WARNS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_DEFAULT_NUM_VAL_PER_SITE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VNODE_POOL_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function_decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name>
<name><name>lprofValueProfNodes</name><index>[<expr><name>INSTR_PROF_VNODE_POOL_SIZE</name></expr>]</index></name></type> <name>COMPILER_RT_SECTION</name><parameter_list>(
<parameter><decl><type><name>COMPILER_RT_SEG</name></type> <name>INSTR_PROF_VNODES_SECT_NAME</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>uint32_t</name></type> <name>VPMaxNumValsPerSite</name> <init>=
<expr><name>INSTR_PROF_DEFAULT_NUM_VAL_PER_SITE</name></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>lprofSetupValueProfiler</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Str</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Str</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LLVM_VP_MAX_NUM_VALS_PER_SITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Str</name> <operator>&amp;&amp;</operator> <name><name>Str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>VPMaxNumValsPerSite</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasNonDefaultValsPerSite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>VPMaxNumValsPerSite</name> <operator>&gt;</operator> <name>INSTR_PROF_MAX_NUM_VAL_PER_SITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VPMaxNumValsPerSite</name> <operator>=</operator> <name>INSTR_PROF_MAX_NUM_VAL_PER_SITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>lprofSetMaxValsPerSite</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>MaxVals</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>VPMaxNumValsPerSite</name> <operator>=</operator> <name>MaxVals</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hasNonDefaultValsPerSite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type>
<name>__llvm_profile_set_num_value_sites</name><parameter_list>(<parameter><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ValueKind</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>NumValueSites</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>ValueKind</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>NumValueSites</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>COMPILER_RT_VISIBILITY</name> <specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type>
<name>__llvm_profile_iterate_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Data</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name> <modifier>*</modifier></type>
<name>__llvm_get_function_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>Data</name><operator>-&gt;</operator><name>FunctionPointer</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>allocateValueProfileCounters</name><parameter_list>(<parameter><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>NumVSites</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>VKI</name></decl>;</decl_stmt>



<expr_stmt><expr><name>hasStaticCounters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNonDefaultValsPerSite</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VPMaxNumValsPerSite</name> <operator>=</operator> <name>INSTR_PROF_MAX_NUM_VAL_PER_SITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>VKI</name> <operator>=</operator> <name>IPVK_First</name></expr>;</init> <condition><expr><name>VKI</name> <operator>&lt;=</operator> <name>IPVK_Last</name></expr>;</condition> <incr><expr><operator>++</operator><name>VKI</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>NumVSites</name> <operator>+=</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>VKI</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NumVSites</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"NumVSites can't be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>Mem</name> <init>=
<expr><operator>(</operator><name>ValueProfNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>NumVSites</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ValueProfNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mem</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COMPILER_RT_BOOL_CMPXCHG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Data</name><operator>-&gt;</operator><name>Values</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Mem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ValueProfNode</name> <modifier>*</modifier></type><name>allocateOneNode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>Node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasStaticCounters</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ValueProfNode</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ValueProfNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>CurrentVNode</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>EndVNode</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>OutOfNodesWarnings</name><operator>++</operator> <operator>&lt;</operator> <name>INSTR_PROF_MAX_VP_WARNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PROF_WARN</name><argument_list>(<argument><expr><literal type="string">"Unable to track new values: %s. "</literal>
<literal type="string">" Consider using option -mllvm -vp-counters-per-site=&lt;n&gt; to "</literal>
<literal type="string">"allocate more"</literal>
<literal type="string">" value profile counters at compile time. \n"</literal></expr></argument>,
<argument><expr><literal type="string">"Running out of static counters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Node</name> <operator>=</operator> <call><name>COMPILER_RT_PTR_FETCH_ADD</name><argument_list>(<argument><expr><name>ValueProfNode</name></expr></argument>, <argument><expr><name>CurrentVNode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>Node</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>EndVNode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>COMPILER_RT_ALWAYS_INLINE</name> <name>void</name></type>
<name>instrumentTargetValueImpl</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TargetValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>CounterIndex</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>CountValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type><name>PData</name> <init>= <expr><operator>(</operator><name>__llvm_profile_data</name> <operator>*</operator><operator>)</operator><name>Data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PData</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CountValue</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>PData</name><operator>-&gt;</operator><name>Values</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>allocateValueProfileCounters</name><argument_list>(<argument><expr><name>PData</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>ValueCounters</name> <init>= <expr><operator>(</operator><name>ValueProfNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>PData</name><operator>-&gt;</operator><name>Values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>PrevVNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>MinCountVNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>CurVNode</name> <init>= <expr><name><name>ValueCounters</name><index>[<expr><name>CounterIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>MinCount</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>VDataCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>CurVNode</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>TargetValue</name> <operator>==</operator> <name><name>CurVNode</name><operator>-&gt;</operator><name>Value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>+=</operator> <name>CountValue</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>&lt;</operator> <name>MinCount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MinCount</name> <operator>=</operator> <name><name>CurVNode</name><operator>-&gt;</operator><name>Count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>MinCountVNode</name> <operator>=</operator> <name>CurVNode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>PrevVNode</name> <operator>=</operator> <name>CurVNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CurVNode</name> <operator>=</operator> <name><name>CurVNode</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>VDataCount</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>VDataCount</name> <operator>&gt;=</operator> <name>VPMaxNumValsPerSite</name></expr>)</condition> <block>{<block_content>




























<if_stmt><if>if <condition>(<expr><name><name>MinCountVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>&lt;=</operator> <name>CountValue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CurVNode</name> <operator>=</operator> <name>MinCountVNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Value</name></name> <operator>=</operator> <name>TargetValue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>=</operator> <name>CountValue</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>MinCountVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>-=</operator> <name>CountValue</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>CurVNode</name> <operator>=</operator> <call><name>allocateOneNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CurVNode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Value</name></name> <operator>=</operator> <name>TargetValue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CurVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>+=</operator> <name>CountValue</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ValueCounters</name><index>[<expr><name>CounterIndex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Success</name> <operator>=</operator>
<call><name>COMPILER_RT_BOOL_CMPXCHG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ValueCounters</name><index>[<expr><name>CounterIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CurVNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>PrevVNode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>PrevVNode</name><operator>-&gt;</operator><name>Next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Success</name> <operator>=</operator> <call><name>COMPILER_RT_BOOL_CMPXCHG</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>PrevVNode</name><operator>-&gt;</operator><name>Next</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CurVNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Success</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasStaticCounters</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>CurVNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type>
<name>__llvm_profile_instrument_target</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TargetValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>CounterIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>instrumentTargetValueImpl</name><argument_list>(<argument><expr><name>TargetValue</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>CounterIndex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type>
<name>__llvm_profile_instrument_target_value</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TargetValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>CounterIndex</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>CountValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>instrumentTargetValueImpl</name><argument_list>(<argument><expr><name>TargetValue</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>CounterIndex</name></expr></argument>, <argument><expr><name>CountValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type>
<name>__llvm_profile_instrument_memop</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TargetValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>CounterIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>RepValue</name> <init>= <expr><call><name>InstrProfGetRangeRepValue</name><argument_list>(<argument><expr><name>TargetValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__llvm_profile_instrument_target</name><argument_list>(<argument><expr><name>RepValue</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>CounterIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<typedef>typedef <type><struct>struct <name>ValueProfRuntimeRecord</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier><modifier>*</modifier></type><name><name>NodesKind</name><index>[<expr><name>IPVK_Last</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>SiteCountArray</name></decl>;</decl_stmt>
}</block></struct></type> <name>ValueProfRuntimeRecord</name>;</typedef>



<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getNumValueSitesRT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ValueProfRuntimeRecord</name> <operator>*</operator><operator>)</operator><name>R</name><operator>)</operator><operator>-&gt;</operator><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>VK</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getNumValueDataRT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>S</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>I</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ValueProfRuntimeRecord</name> <modifier>*</modifier></type><name>Record</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ValueProfRuntimeRecord</name> <operator>*</operator><operator>)</operator><name>R</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Record</name><operator>-&gt;</operator><name>SiteCountArray</name><index>[<expr><name>VK</name></expr>]</index></name> <operator>==</operator> <name>INSTR_PROF_NULLPTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name><name>Record</name><operator>-&gt;</operator><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>VK</name></expr>]</index></name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>S</name> <operator>+=</operator> <name><name>Record</name><operator>-&gt;</operator><name>SiteCountArray</name><index>[<expr><name>VK</name></expr>]</index><index>[<expr><name>I</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>S</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getNumValueDataForSiteRT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ValueProfRuntimeRecord</name> <modifier>*</modifier></type><name>Record</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ValueProfRuntimeRecord</name> <operator>*</operator><operator>)</operator><name>R</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>Record</name><operator>-&gt;</operator><name>SiteCountArray</name><index>[<expr><name>VK</name></expr>]</index><index>[<expr><name>S</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ValueProfRuntimeRecord</name></type> <name>RTRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ValueProfRecordClosure</name></type> <name>RTRecordClosure</name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name>RTRecord</name></expr>, <expr><name>INSTR_PROF_NULLPTR</name></expr>,
<expr><name>getNumValueSitesRT</name></expr>, <expr><name>getNumValueDataRT</name></expr>, <expr><name>getNumValueDataForSiteRT</name></expr>,
<expr><name>INSTR_PROF_NULLPTR</name></expr>,
<expr><name>INSTR_PROF_NULLPTR</name></expr>,
<expr><name>INSTR_PROF_NULLPTR</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>initializeValueProfRuntimeRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>SiteCountArray</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name></decl>, <decl><type ref="prev"/><name>J</name></decl>, <decl><type ref="prev"/><name>S</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>NumValueKinds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>Nodes</name> <init>= <expr><operator>(</operator><name>ValueProfNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>Data</name><operator>-&gt;</operator><name>Values</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>RTRecord</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RTRecord</name><operator>.</operator><name>SiteCountArray</name></name> <operator>=</operator> <name>SiteCountArray</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;=</operator> <name>IPVK_Last</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>N</name> <init>= <expr><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>N</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>NumValueKinds</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RTRecord</name><operator>.</operator><name>NodesKind</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>Nodes</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>Nodes</name><index>[<expr><name>S</name></expr>]</index></name></expr> </then><else>: <expr><name>INSTR_PROF_NULLPTR</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>J</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>J</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>J</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>C</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>Site</name> <init>=
<expr><ternary><condition><expr><name>Nodes</name></expr> ?</condition><then> <expr><name><name>RTRecord</name><operator>.</operator><name>NodesKind</name><index>[<expr><name>I</name></expr>]</index><index>[<expr><name>J</name></expr>]</index></name></expr> </then><else>: <expr><name>INSTR_PROF_NULLPTR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>Site</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>C</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Site</name> <operator>=</operator> <name><name>Site</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>C</name> <operator>&gt;</operator> <name>UCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name>UCHAR_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>RTRecord</name><operator>.</operator><name>SiteCountArray</name><index>[<expr><name>I</name></expr>]</index><index>[<expr><name>J</name></expr>]</index></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>S</name> <operator>+=</operator> <name>N</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NumValueKinds</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ValueProfNode</name> <modifier>*</modifier></type><name>getNextNValueData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Site</name></decl></parameter>,
<parameter><decl><type><name>InstrProfValueData</name> <modifier>*</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>StartNode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>VNode</name> <init>= <expr><ternary><condition><expr><name>StartNode</name></expr> ?</condition><then> <expr><name>StartNode</name></expr> </then><else>: <expr><name><name>RTRecord</name><operator>.</operator><name>NodesKind</name><index>[<expr><name>VK</name></expr>]</index><index>[<expr><name>Site</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>Dst</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Value</name> <operator>=</operator> <name><name>VNode</name><operator>-&gt;</operator><name>Value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Dst</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Count</name> <operator>=</operator> <name><name>VNode</name><operator>-&gt;</operator><name>Count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>VNode</name> <operator>=</operator> <name><name>VNode</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>VNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getValueProfDataSizeWrapper</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getValueProfDataSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RTRecordClosure</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>getNumValueDataForSiteWrapper</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getNumValueDataForSiteRT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RTRecord</name></expr></argument>, <argument><expr><name>VK</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VPDataReaderType</name></type> <name>TheVPDataReader</name> <init>= <expr><block>{
<expr><name>initializeValueProfRuntimeRecord</name></expr>, <expr><name>getValueProfRecordHeaderSize</name></expr>,
<expr><name>getFirstValueProfRecord</name></expr>, <expr><name>getNumValueDataForSiteWrapper</name></expr>,
<expr><name>getValueProfDataSizeWrapper</name></expr>, <expr><name>getNextNValueData</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>VPDataReaderType</name> <modifier>*</modifier></type><name>lprofGetVPDataReader</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>TheVPDataReader</name></expr>;</return>
</block_content>}</block></function>
</unit>
