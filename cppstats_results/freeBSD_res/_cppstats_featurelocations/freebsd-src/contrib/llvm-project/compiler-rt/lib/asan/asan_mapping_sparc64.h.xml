<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_mapping_sparc64.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_MAPPING_SPARC64_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_MAPPING_SPARC64_H</name></cpp:macro></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMA_BITS</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH_BITS</name></cpp:macro> <cpp:value>(64 - VMA_BITS)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((mem) &lt;&lt; HIGH_BITS) &gt;&gt; (HIGH_BITS + (SHADOW_SCALE))) + (SHADOW_OFFSET))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemBeg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemEnd</name></cpp:macro> <cpp:value>(SHADOW_OFFSET - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowBeg</name></cpp:macro> <cpp:value>SHADOW_OFFSET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowEnd</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kLowMemEnd)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighMemBeg</name></cpp:macro> <cpp:value>(-(1ULL &lt;&lt; (VMA_BITS - 1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowBeg</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kHighMemBeg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowEnd</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kHighMemEnd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMidShadowBeg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMidShadowEnd</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseShadowStart</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseMaxShadowStart</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapBeg</name></cpp:macro> <cpp:value>(kLowShadowEnd + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapEnd</name></cpp:macro> <cpp:value>(kHighShadowBeg - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap2Beg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap2End</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap3Beg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap3End</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>kLowMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kLowShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kLowShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMidMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMidShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInShadowGap</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kShadowGapBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
