<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_thread_list.h">












































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_placement_new.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>RingBufferSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>desired_bytes</name> <init>= <expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>stack_history_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><operator>++</operator><name>shift</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><literal type="number">4096</literal> <operator>*</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>desired_bytes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"stack history size too large: %d\n"</literal></expr></argument>, <argument><expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>stack_history_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ThreadStats</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>n_live_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>total_stack_size</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>HwasanThreadList</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>HwasanThreadList</name><argument_list>(<argument>uptr storage</argument>, <argument>uptr size</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>free_space_</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>free_space_end_</name><argument_list>(<argument>storage + size</argument>)</argument_list></macro> <expr><block>{





<expr><name>ring_buffer_size_</name> <operator>=</operator> <call><name>RingBufferSize</name><argument_list>()</argument_list></call></expr>;
<expr><name>thread_alloc_size_</name> <operator>=</operator>
<call><name>RoundUpTo</name><argument_list>(<argument><expr><name>ring_buffer_size_</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Thread</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ring_buffer_size_</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>Thread</name> <operator>*</operator><macro><name>CreateCurrentThread</name><argument_list>(<argument>const Thread::InitState *state = nullptr</argument>)</argument_list></macro> <block>{
<expr><name>Thread</name> <operator>*</operator><name>t</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><block>{
<expr><name>SpinMutexLock</name> <call><name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_list_mutex_</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>free_list_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>free_list_</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>free_list_</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
if (t</block></if></if_stmt>) <block>{
<expr><name>uptr</name> <name>start</name> <operator>=</operator> <operator>(</operator><name>uptr</name><operator>)</operator><name>t</name> <operator>-</operator> <name>ring_buffer_size_</name></expr>;
<expr><call><name>internal_memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ring_buffer_size_</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
}</block></block></expr> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>AllocThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>live_list_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>live_list_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
t-&gt;Init((uptr</block></block></else></if_stmt>)<name>t</name> <operator>-</operator> <name>ring_buffer_size_</name><operator>,</operator> <name>ring_buffer_size_</name><operator>,</operator> <name>state</name>)</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddThreadStats</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>DontNeedThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>uptr</name><operator>)</operator><name>t</name> <operator>-</operator> <name>ring_buffer_size_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ReleaseMemoryPagesToOS</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>thread_alloc_size_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveThreadFromLiveList</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>live_list_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>Thread</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>t2</name> <range>: <expr><name>live_list_</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name><name>live_list_</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>live_list_</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"thread not found in live list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseThread</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>RemoveThreadStats</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DontNeedThread</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RemoveThreadFromLiveList</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_list_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>free_list_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Thread</name> <modifier>*</modifier></type><name>GetThreadByBufferAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Thread</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>RoundDownTo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ring_buffer_size_</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<name>ring_buffer_size_</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>MemoryUsedPerThread</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Thread</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ring_buffer_size_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>sz</name> <init>= <expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>heap_history_size</name></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>HeapAllocationsRingBuffer</name><operator>::</operator><call><name>SizeInBytes</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CB</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>VisitAllLiveThreads</name><parameter_list>(<parameter><decl><type><name>CB</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>live_list_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name> <range>: <expr><name>live_list_</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AddThreadStats</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stats_</name><operator>.</operator><name>n_live_threads</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats_</name><operator>.</operator><name>total_stack_size</name></name> <operator>+=</operator> <call><name><name>t</name><operator>-&gt;</operator><name>stack_size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveThreadStats</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stats_</name><operator>.</operator><name>n_live_threads</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats_</name><operator>.</operator><name>total_stack_size</name></name> <operator>-=</operator> <call><name><name>t</name><operator>-&gt;</operator><name>stack_size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ThreadStats</name></type> <name>GetThreadStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>stats_</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>GetRingBufferSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ring_buffer_size_</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function><type><name>Thread</name> <modifier>*</modifier></type><name>AllocThread</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_space_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>align</name> <init>= <expr><name>ring_buffer_size_</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>free_space_</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>Thread</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>free_space_</name> <operator>+</operator> <name>ring_buffer_size_</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>free_space_</name> <operator>+=</operator> <name>thread_alloc_size_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>free_space_</name> <operator>&lt;=</operator> <name>free_space_end_</name> <operator>&amp;&amp;</operator> <literal type="string">"out of thread memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>SpinMutex</name></type> <name>free_space_mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>free_space_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>free_space_end_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ring_buffer_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>thread_alloc_size_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpinMutex</name></type> <name>free_list_mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>Thread</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>free_list_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutex</name></type> <name>live_list_mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>Thread</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>live_list_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadStats</name></type> <name>stats_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutex</name></type> <name>stats_mutex_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>InitThreadList</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HwasanThreadList</name> <modifier>&amp;</modifier></type><name>hwasanThreadList</name><parameter_list>()</parameter_list>;</function_decl>

}
</unit>
