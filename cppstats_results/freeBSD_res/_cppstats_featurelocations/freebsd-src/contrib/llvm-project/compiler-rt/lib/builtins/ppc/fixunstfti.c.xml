<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/fixunstfti.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../int_math.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIAS</name></cpp:macro> <cpp:value>1023</cpp:value></cpp:define>


<function><type><name>__uint128_t</name></type> <name>__fixunstfti</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>crt_isnan</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0x7FF8000000000000ll</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">64</literal> <operator>|</operator>
<operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0x0000000000000000ll</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>__uint128_t</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>hiResult</name></decl>, <decl><type ref="prev"/><name>loResult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hiExponent</name></decl>, <decl><type ref="prev"/><name>loExponent</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>


<union>union <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>ull</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>ldUnion</name></decl>;</union>



<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ld</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hiExponent</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFFFFFFFFFFll</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>-</operator> <name>BIAS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loExponent</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFFFFFFFFFFll</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>-</operator> <name>BIAS</name></expr>;</expr_stmt>



















<if_stmt><if>if <condition>(<expr><name>hiExponent</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hiResult</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hiExponent</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>hiExponent</name> <operator>-</operator> <literal type="number">54</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x800FFFFFFFFFFFFFll</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x4350000000000000ll</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hiResult</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hiResult</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0xFFFFFFFFFFFFFFFFll</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">64</literal> <operator>|</operator>
<operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0xFFFFFFFFFFFFFFFFll</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0x0000000000000000ll</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">64</literal> <operator>|</operator>
<operator>(</operator><name>__uint128_t</name><operator>)</operator><literal type="number">0x0000000000000001ll</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>loExponent</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loResult</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>loExponent</name> <operator>-</operator> <literal type="number">54</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x800FFFFFFFFFFFFFll</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x4350000000000000ll</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>loResult</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loResult</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name><name>ldUnion</name><operator>.</operator><name>ld</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><name>hiResult</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ldUnion</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__int128_t</name><operator>)</operator><name>loResult</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>loResult</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>loResult</name> <operator>+</operator> <name>hiResult</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
