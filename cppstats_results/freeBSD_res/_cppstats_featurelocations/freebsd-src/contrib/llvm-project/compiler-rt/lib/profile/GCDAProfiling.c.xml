<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/GCDAProfiling.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__Fuchsia__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WindowsMMap.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingUtil.h"</cpp:file></cpp:include>



<enum>enum <block>{
<decl><name>GCOV_DATA_MAGIC</name> <init>= <expr><literal type="number">0x67636461</literal></expr></init></decl>,

<decl><name>GCOV_TAG_FUNCTION</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>,
<decl><name>GCOV_TAG_COUNTER_ARCS</name> <init>= <expr><literal type="number">0x01a10000</literal></expr></init></decl>,

<decl><name>GCOV_TAG_OBJECT_SUMMARY</name> <init>= <expr><literal type="number">0xa1000000</literal></expr></init></decl>,
<decl><name>GCOV_TAG_PROGRAM_SUMMARY</name> <init>= <expr><literal type="number">0xa3000000</literal></expr></init></decl>,
}</block>;</enum>








<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>output_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_BUFFER_SIZE</name></cpp:macro> <cpp:value>(128 * 1024)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>write_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>cur_buffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>cur_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>new_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gcov_version</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>mmap_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn_ptr</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>dynamic_object_id</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>dynamic_object_id</name></type> <name>current_id</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENT_ID</name></cpp:macro> <cpp:value>(&amp;current_id)</cpp:value></cpp:define>

<struct>struct <name>fn_node</name> <block>{
<decl_stmt><decl><type><name>dynamic_object_id</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fn_ptr</name></type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fn_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name> <modifier>*</modifier></type><name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name><name>struct</name> <name>fn_list</name></name></type> <name>writeout_fn_list</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>fn_list</name></name></type> <name>reset_fn_list</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fn_list_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fn_list</name></name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>fn_ptr</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name><modifier>*</modifier></type> <name>new_node</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fn_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>CURRENT_ID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fn_list_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fn_list</name></name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name><modifier>*</modifier></type> <name>curr</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>CURRENT_ID</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_write_buffer</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>cur_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>cur_buffer_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>WRITE_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <name>WRITE_BUFFER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_buffer_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>resize_write_buffer</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>write_buffer</name><index>[<expr><name>cur_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_32bit_value</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>write_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_64bit_value</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>lo</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>read_32bit_value</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>write_buffer</name><index>[<expr><name>cur_pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>read_64bit_value</name><parameter_list>()</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>lo</name> <init>= <expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name> <init>= <expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>lo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mangle_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_strip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>lprofGetPathPrefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix_strip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>orig_filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_filename</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>prefix_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>orig_filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lprofApplyPathPrefix</name><argument_list>(<argument><expr><name>new_filename</name></expr></argument>, <argument><expr><name>orig_filename</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>,
<argument><expr><name>prefix_strip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_filename</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_file</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_size</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mmap_fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mmap_fd</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mmap_fd</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mmap_handle</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>mmap_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>, <argument><expr><call><name>DWORD_HI</name><argument_list>(<argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DWORD_LO</name><argument_list>(<argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mmap_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot create file mapping: %lu\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>mmap_handle</name></expr></argument>, <argument><expr><name>FILE_MAP_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot map: %lu\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>mmap_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_FILE</name> <operator>|</operator> <name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write_buffer</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errnum</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot map: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unmap_file</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FlushViewOfFile</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot flush mapped view: %lu\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot unmap mapped view: %lu\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>mmap_handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot close file mapping handle: %lu\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mmap_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errnum</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot munmap: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcda_start_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_filename</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>checksum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><literal type="string">"r+b"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>mangle_filename</name><argument_list>(<argument><expr><name>orig_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"w+b"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>__llvm_profile_recursive_mkdir</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"w+b"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>errnum</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot open: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>lprofLockFd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_file</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>new_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>map_file</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>new_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resize_write_buffer</name><argument_list>(<argument><expr><name>WRITE_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WRITE_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c3</name> <init>= <expr><name>version</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>version</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>version</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>gcov_version</name> <operator>=</operator> <ternary><condition><expr><name>c3</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr> ?</condition><then> <expr><operator>(</operator><name>c3</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c1</name> <operator>-</operator> <literal type="char">'0'</literal></expr>
</then><else>: <expr><operator>(</operator><name>c3</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c1</name> <operator>-</operator> <literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>GCOV_DATA_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GCDAPROFILING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: [%s]\n"</literal></expr></argument>, <argument><expr><name>orig_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcda_emit_function</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ident</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>func_checksum</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cfg_checksum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_extra_checksum</name> <init>= <expr><name>gcov_version</name> <operator>&gt;=</operator> <literal type="number">47</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_extra_checksum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GCDAPROFILING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: function id=0x%08x\n"</literal></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>GCOV_TAG_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>func_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_extra_checksum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>cfg_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcda_emit_arcs</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>num_counters</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>old_ctrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>save_cur_pos</name> <init>= <expr><name>cur_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>GCOV_TAG_COUNTER_ARCS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot merge previous GCDA file: "</literal>
<literal type="string">"corrupt arc tag (0x%08x)\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>val</name> <operator>/</operator> <literal type="number">2</literal> <operator>!=</operator> <name>num_counters</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"profiling: %s: cannot merge previous GCDA file: "</literal>
<literal type="string">"mismatched number of counters (%d)\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_ctrs</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_counters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>old_ctrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read_64bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <name>save_cur_pos</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>GCOV_TAG_COUNTER_ARCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>num_counters</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_counters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>counters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>old_ctrs</name></expr> ?</condition><then> <expr><name><name>old_ctrs</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_64bit_value</name><argument_list>(<argument><expr><name><name>counters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_ctrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GCDAPROFILING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: %u arcs\n"</literal></expr></argument>, <argument><expr><name>num_counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_counters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: %llu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>counters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcda_summary_info</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>runs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>run_counted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>save_cur_pos</name> <init>= <expr><name>cur_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gcov_tag</name> <init>=
<expr><ternary><condition><expr><name>gcov_version</name> <operator>&gt;=</operator> <literal type="number">90</literal></expr> ?</condition><then> <expr><name>GCOV_TAG_OBJECT_SUMMARY</name></expr> </then><else>: <expr><name>GCOV_TAG_PROGRAM_SUMMARY</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>gcov_tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"profiling: %s: cannot merge previous run count: "</literal>
<literal type="string">"corrupt object tag (0x%08x)\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_runs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gcov_version</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_runs</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_runs</name> <operator>=</operator> <call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>gcov_version</name> <operator>&lt;</operator> <literal type="number">90</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>val</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_32bit_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>runs</name> <operator>=</operator> <ternary><condition><expr><name>run_counted</name></expr> ?</condition><then> <expr><name>prev_runs</name></expr> </then><else>: <expr><name>prev_runs</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <name>save_cur_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gcov_version</name> <operator>&gt;=</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>GCOV_TAG_OBJECT_SUMMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>GCOV_TAG_PROGRAM_SUMMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_32bit_value</name><argument_list>(<argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>run_counted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GCDAPROFILING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: %u runs\n"</literal></expr></argument>, <argument><expr><name>runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcda_end_file</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_bytes</name><argument_list>(<argument><expr><literal type="string">"\0\0\0\0\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>write_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>unmap_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lprofUnlockFd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>write_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GCDAPROFILING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"llvmgcda: -----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_register_writeout_function</name><parameter_list>(<parameter><decl><type><name>fn_ptr</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fn_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writeout_fn_list</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_writeout_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name><name>writeout_fn_list</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>CURRENT_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>curr</name><operator>-&gt;</operator><name>fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wprio-ctor-dtor"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>__attribute__</name><argument_list>(<argument>(destructor(<literal type="number">100</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>llvm_writeout_and_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_writeout_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writeout_fn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_register_reset_function</name><parameter_list>(<parameter><decl><type><name>fn_ptr</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fn_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reset_fn_list</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_delete_reset_function_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fn_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reset_fn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_reset_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fn_node</name></name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name><name>reset_fn_list</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>CURRENT_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>curr</name><operator>-&gt;</operator><name>fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>pid_t</name></type> <name>__gcov_fork</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>parent_pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>child_pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child_pid</name> <operator>!=</operator> <name>parent_pid</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>llvm_reset_counters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>llvm_gcov_init</name><parameter_list>(<parameter><decl><type><name>fn_ptr</name></type> <name>wfn</name></decl></parameter>, <parameter><decl><type><name>fn_ptr</name></type> <name>rfn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>atexit_ran</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wfn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llvm_register_writeout_function</name><argument_list>(<argument><expr><name>wfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rfn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llvm_register_reset_function</name><argument_list>(<argument><expr><name>rfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atexit_ran</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>atexit_ran</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>llvm_delete_reset_function_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>llvm_writeout_and_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__gcov_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name><name>struct</name> <name>fn_node</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name><name>writeout_fn_list</name><operator>.</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__gcov_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name><name>struct</name> <name>fn_node</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name><name>reset_fn_list</name><operator>.</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
