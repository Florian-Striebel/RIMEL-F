<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_THREAD_REGISTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_THREAD_REGISTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<enum>enum <name>ThreadStatus</name> <block>{
<decl><name>ThreadStatusInvalid</name></decl>,
<decl><name>ThreadStatusCreated</name></decl>,
<decl><name>ThreadStatusRunning</name></decl>,
<decl><name>ThreadStatusFinished</name></decl>,
<decl><name>ThreadStatusDead</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ThreadType</name> <block>{<block_content>
<expr_stmt><expr><name>Regular</name></expr><operator>,</operator>
<expr><name>Worker</name></expr><operator>,</operator>
<expr><name>Fiber</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ThreadContextBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ThreadContextBase</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>unique_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>reuse_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tid_t</name></type> <name>os_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>user_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>detached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadType</name></type> <name>thread_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>parent_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name>thread_destroyed</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetDead</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetJoined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetFinished</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetStarted</name><parameter_list>(<parameter><decl><type><name>tid_t</name></type> <name>_os_id</name></decl></parameter>, <parameter><decl><type><name>ThreadType</name></type> <name>_thread_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetCreated</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>_user_id</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>_unique_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>_detached</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>_parent_tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetDestroyed</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetDestroyed</name><parameter_list>()</parameter_list>;</function_decl>




<function><type><name>virtual</name> <name>void</name></type> <name>OnDead</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnJoined</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnFinished</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnStarted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnCreated</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnReset</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>OnDetached</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>ThreadContextBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <function_decl><type><name>ThreadContextBase</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ThreadContextFactory</name>)<parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>ThreadRegistry</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ThreadRegistry</name><argument_list>(<argument>ThreadContextFactory factory</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>ThreadRegistry</name><argument_list>(<argument>ThreadContextFactory factory</argument>, <argument>u32 max_threads</argument>,
<argument>u32 thread_quarantine_size</argument>, <argument>u32 max_reuse</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>GetNumberOfThreads</name><parameter_list>(<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>total</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>running</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>alive</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>GetMaxAliveThreads</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> ACQUIRE<parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>mtx_</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>void</name> <macro><name>CheckLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mtx_</name><operator>.</operator><name>CheckLocked</name></name><argument_list>()</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>Unlock</name><argument_list>()</argument_list></macro> <macro><name>RELEASE</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mtx_</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>


<name>ThreadContextBase</name> <operator>*</operator><macro><name>GetThreadLocked</name><argument_list>(<argument>u32 tid</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>threads_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <name><name>threads_</name><index>[<expr><name>tid</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>u32</name></type> <name>CreateThread</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>user_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>parent_tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ThreadCallback</name>)<parameter_list>(<parameter><decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>void</name></type> <name>RunCallbackForEachThreadLocked</name><parameter_list>(<parameter><decl><type><name>ThreadCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>FindThreadCallback</name>)<parameter_list>(<parameter><decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>u32</name></type> <name>FindThread</name><parameter_list>(<parameter><decl><type><name>FindThreadCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>FindThreadContextLocked</name><parameter_list>(<parameter><decl><type><name>FindThreadCallback</name></type> <name>cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>FindThreadContextByOsIDLocked</name><parameter_list>(<parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetThreadName</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetThreadNameByUserId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>user_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DetachThread</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>JoinThread</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ThreadStatus</name></type> <name>FinishThread</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>StartThread</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>, <parameter><decl><type><name>ThreadType</name></type> <name>thread_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetThreadUserId</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>user_id</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>ThreadContextFactory</name></type> <name>context_factory_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>max_threads_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>thread_quarantine_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>max_reuse_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockingMutex</name></type> <name>mtx_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name>total_threads_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>alive_threads_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>max_alive_threads_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>running_threads_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>ThreadContextBase</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>threads_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>ThreadContextBase</name></expr></argument>&gt;</argument_list></name></type> <name>dead_threads_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>ThreadContextBase</name></expr></argument>&gt;</argument_list></name></type> <name>invalid_threads_</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>QuarantinePush</name><parameter_list>(<parameter><decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ThreadContextBase</name> <modifier>*</modifier></type><name>QuarantinePop</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>GenericScopedLock</name><argument_list type="generic">&lt;<argument><expr><name>ThreadRegistry</name></expr></argument>&gt;</argument_list></name></type> <name>ThreadRegistryLock</name>;</typedef>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
