<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_internal.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ALLOCATOR_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<typedef>typedef <type><name>CompactSizeClassMap</name></type> <name>InternalSizeClassMap</name>;</typedef>

<struct>struct <name>AP32</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSpaceSize</name> <init>= <expr><name>SANITIZER_MMAP_RANGE_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>InternalSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSizeLog</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>NoOpMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>AP32</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryInternalAllocator</name>;</typedef>

<typedef>typedef <type><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name>PrimaryInternalAllocator</name></expr></argument>,
<argument><expr><name>LargeMmapAllocatorPtrArrayStatic</name></expr></argument>&gt;</argument_list></name></type>
<name>InternalAllocator</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>InternalAllocator</name><operator>::</operator><name>AllocatorCache</name> <name>InternalAllocatorCache</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>InternalAlloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>InternalAllocatorCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>alignment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>InternalRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>InternalAllocatorCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>InternalReallocArray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>InternalAllocatorCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>InternalCalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>InternalAllocatorCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InternalFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>InternalAllocatorCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>InternalAllocator</name> <modifier>*</modifier></type><name>internal_allocator</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
