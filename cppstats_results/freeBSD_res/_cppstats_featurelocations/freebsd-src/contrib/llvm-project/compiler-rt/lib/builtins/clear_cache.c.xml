<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/clear_cache.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSCacheControl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function_decl><type><name>uint32_t</name></type> <name>FlushInstructionCache</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>hProcess</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lpBaseAddress</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>dwSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uintptr_t</name></type> <name>GetCurrentProcess</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/sysarch.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/sysarch.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/sysarch.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cachectl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type> <name>__clear_cache</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<expr_stmt><expr><call><name>FlushInstructionCache</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>arm_sync_icache_args</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sysarch</name><argument_list>(<argument><expr><name>ARM_SYNC_ICACHE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ARM_NR_cacheflush</name></cpp:macro> <cpp:value>0x0f0002</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name> <name>start_reg</name> <asm>__asm("r0") = (int)(intptr_t)start;</asm>
<specifier>const</specifier> <specifier>register</specifier> <name>int</name> <name>end_reg</name> <asm>__asm("r1") = (int)(intptr_t)end;</asm>
<specifier>const</specifier> <specifier>register</specifier> <name>int</name> <name>flags</name> <asm>__asm("r2") = 0;</asm>
<specifier>const</specifier> <specifier>register</specifier> <name>int</name></type> <name>syscall_nr</name> <asm>__asm("r7") = __ARM_NR_cacheflush;</asm>
<asm>__asm __volatile("svc 0x0"</asm>
<range>: <expr><literal type="string">"=r"</literal><operator>(</operator><name>start_reg</name><operator>)</operator>
<operator>:</operator> <literal type="string">"r"</literal><operator>(</operator><name>syscall_nr</name><operator>)</operator></expr></range></decl>, "r"<argument_list>(<argument><expr><name>start_reg</name></expr></argument>)</argument_list>, "r"<argument_list>(<argument><expr><name>end_reg</name></expr></argument>)</argument_list>, "r"<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list>);</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start_reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Cache flush syscall failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compilerrt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>start_int</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>end_int</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syscall</name><argument_list>(<argument><expr><name>__NR_cacheflush</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>end_int</name> <operator>-</operator> <name>start_int</name><operator>)</operator></expr></argument>, <argument><expr><name>BCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>cacheflush</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr></argument>, <argument><expr><name>BCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>xstart</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>xend</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>ctr_el0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctr_el0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<asm>__asm __volatile("mrs %0, ctr_el0" : "=r"(ctr_el0));</asm>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>addr</name></decl>;</decl_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ctr_el0</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dcache_line_size</name> <init>= <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>ctr_el0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name>xstart</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>dcache_line_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name>xend</name></expr>;</condition>
<incr><expr><name>addr</name> <operator>+=</operator> <name>dcache_line_size</name></expr></incr>)</control><block type="pseudo"><block_content/></block></for>
<asm>__asm __volatile("dc cvau, %0" ::"r"(addr));</asm>
</block_content>}</block></if></if_stmt>
<asm>__asm __volatile("dsb ish");</asm>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ctr_el0</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>icache_line_size</name> <init>= <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>ctr_el0</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name>xstart</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>icache_line_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name>xend</name></expr>;</condition>
<incr><expr><name>addr</name> <operator>+=</operator> <name>icache_line_size</name></expr></incr>)</control><block type="pseudo"><block_content/></block></for>
<asm>__asm __volatile("ic ivau, %0" ::"r"(addr));</asm>
<asm>__asm __volatile("dsb ish");</asm>
</block_content>}</block></if></if_stmt>
<asm>__asm __volatile("isb sy");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>line_size</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>line_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>start_line</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>end_line</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>line_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uintptr_t</name></type> <name>line</name> <init>= <expr><name>start_line</name></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>end_line</name></expr>;</condition> <incr><expr><name>line</name> <operator>+=</operator> <name>line_size</name></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>volatile</specifier>("dcbf 0, %0" : : "r"(line));</asm></block_content></block></for>
<asm>__asm__ <specifier>volatile</specifier>("sync");</asm>

<for>for <control>(<init><decl><type><name>uintptr_t</name></type> <name>line</name> <init>= <expr><name>start_line</name></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>end_line</name></expr>;</condition> <incr><expr><name>line</name> <operator>+=</operator> <name>line_size</name></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>volatile</specifier>("icbi 0, %0" : : "r"(line));</asm></block_content></block></for>
<asm>__asm__ <specifier>volatile</specifier>("isync");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dword_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>dword_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>start_dword</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>end_dword</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>dword_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uintptr_t</name></type> <name>dword</name> <init>= <expr><name>start_dword</name></expr></init></decl>;</init> <condition><expr><name>dword</name> <operator>&lt;</operator> <name>end_dword</name></expr>;</condition> <incr><expr><name>dword</name> <operator>+=</operator> <name>dword_size</name></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>volatile</specifier>("flush %0" : : "r"(dword));</asm></block_content></block></for>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>start_reg</name> <asm>__asm("a0") = start;</asm>
<specifier>const</specifier> <specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>end_reg</name> <asm>__asm("a1") = end;</asm>

<specifier>const</specifier> <specifier>register</specifier> <name>long</name> <name>flags</name> <asm>__asm("a2") = 0;</asm>
<specifier>const</specifier> <specifier>register</specifier> <name>long</name></type> <name>syscall_nr</name> <asm>__asm("a7") = __NR_riscv_flush_icache;</asm>
<asm>__asm __volatile("ecall"</asm>
<range>: <expr><literal type="string">"=r"</literal><operator>(</operator><name>start_reg</name><operator>)</operator>
<operator>:</operator> <literal type="string">"r"</literal><operator>(</operator><name>start_reg</name><operator>)</operator></expr></range></decl>, "r"<argument_list>(<argument><expr><name>end_reg</name></expr></argument>)</argument_list>, "r"<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list>, "r"<argument_list>(<argument><expr><name>syscall_nr</name></expr></argument>)</argument_list>);</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start_reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Cache flush syscall failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>riscv_sync_icache_args</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sysarch</name><argument_list>(<argument><expr><name>RISCV_SYNC_ICACHE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>

<expr_stmt><expr><call><name>sys_icache_invalidate</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ve__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__ <specifier>volatile</specifier>("fencec 2");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>compilerrt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
