<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/go/test.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>__tsan_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_fini</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_map_shadow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_go_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>chthr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_go_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_proc_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pproc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_proc_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_proc_wire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_proc_unwire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_func_enter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_func_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_malloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_acquire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_release</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_release_acquire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__tsan_release_merge</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>current_proc</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>symbolize_cb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>current_proc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>ctx</name> <operator>=</operator> <name>current_proc</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>






<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>go_heap</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0xC011110000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf0</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>foobar</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>barfoo</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thr0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>proc0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__tsan_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thr0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc0</name></expr></argument>, <argument><expr><name>symbolize_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_proc</name> <operator>=</operator> <name>proc0</name></expr>;</expr_stmt>


<expr_stmt><expr><name>buf0</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>go_heap</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_FIXED</name> <operator>|</operator> <name>MAP_ANON</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf0</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate Go-like heap at %p; errno %d\n"</literal></expr></argument>,
<argument><expr><name>go_heap</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf0</name> <operator>+</operator> <operator>(</operator><literal type="number">64</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">64</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__tsan_map_shadow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_malloc</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_enter</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator>main <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_malloc</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_release</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_release_acquire</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_release_merge</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thr1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__tsan_go_start</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thr1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thr2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__tsan_go_start</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thr2</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_exit</name><argument_list>(<argument><expr><name>thr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_enter</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>foobar</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_enter</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>foobar</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_write</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_acquire</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_exit</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_exit</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_go_end</name><argument_list>(<argument><expr><name>thr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>proc1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__tsan_proc_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_proc</name> <operator>=</operator> <name>proc1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_enter</name><argument_list>(<argument><expr><name>thr2</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>foobar</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_read</name><argument_list>(<argument><expr><name>thr2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>barfoo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_func_exit</name><argument_list>(<argument><expr><name>thr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_go_end</name><argument_list>(<argument><expr><name>thr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_proc_destroy</name><argument_list>(<argument><expr><name>proc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_proc</name> <operator>=</operator> <name>proc0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__tsan_fini</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
