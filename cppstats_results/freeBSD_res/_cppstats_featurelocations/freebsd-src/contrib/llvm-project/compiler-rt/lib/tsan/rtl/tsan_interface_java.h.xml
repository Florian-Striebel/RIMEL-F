<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interface_java.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_INTERFACE_JAVA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_INTERFACE_JAVA_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERFACE_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>jptr</name>;</typedef>


<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_init</name><argument_list>(<argument><expr><name>jptr</name> <name>heap_begin</name></expr></argument>, <argument><expr><name>jptr</name> <name>heap_size</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>



<expr_stmt><expr><name>int</name> <macro><name>__tsan_java_fini</name><argument_list>()</argument_list></macro> <name>INTERFACE_ATTRIBUTE</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_alloc</name><argument_list>(<argument><expr><name>jptr</name> <name>ptr</name></expr></argument>, <argument><expr><name>jptr</name> <name>size</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_free</name><argument_list>(<argument><expr><name>jptr</name> <name>ptr</name></expr></argument>, <argument><expr><name>jptr</name> <name>size</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_move</name><argument_list>(<argument><expr><name>jptr</name> <name>src</name></expr></argument>, <argument><expr><name>jptr</name> <name>dst</name></expr></argument>, <argument><expr><name>jptr</name> <name>size</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>




<expr_stmt><expr><name>void</name> <macro><name>__tsan_java_finalize</name><argument_list>()</argument_list></macro> <name>INTERFACE_ATTRIBUTE</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>jptr</name></type> <name>__tsan_java_find</name><argument_list>(<argument><expr><name>jptr</name> <operator>*</operator><name>from_ptr</name></expr></argument>, <argument><expr><name>jptr</name> <name>to</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_mutex_lock</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_mutex_unlock</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_mutex_read_lock</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_mutex_read_unlock</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_mutex_lock_rec</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>, <argument><expr><name>int</name> <name>rec</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>__tsan_java_mutex_unlock_rec</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_acquire</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_release</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>__tsan_java_release_store</name><argument_list>(<argument><expr><name>jptr</name> <name>addr</name></expr></argument>)</argument_list> <name>INTERFACE_ATTRIBUTE</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE_ATTRIBUTE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
