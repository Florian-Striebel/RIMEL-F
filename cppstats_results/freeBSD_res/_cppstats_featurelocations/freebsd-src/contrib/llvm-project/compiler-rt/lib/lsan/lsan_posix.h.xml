<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/lsan/lsan_posix.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LSAN_POSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSAN_POSIX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_POSIX</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"lsan_posix.h is used only on POSIX-like systems (SANITIZER_POSIX)"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<struct_decl>struct <name>DTLS</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>ThreadContext</name></type> <name>final</name> <range>: <expr><name>public</name> <name>ThreadContextLsanBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ThreadContext</name><argument_list>(<argument>int tid</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <macro><name>OnStarted</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>uptr</name> <macro><name>tls_begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>tls_begin_</name></expr>;</return> }</block>
<name>uptr</name> <macro><name>tls_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>tls_end_</name></expr>;</return> }</block>
<name>DTLS</name> <operator>*</operator><macro><name>dtls</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>dtls_</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>uptr</name> <name>tls_begin_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>tls_end_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>DTLS</name> <operator>*</operator><name>dtls_</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ThreadStart</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>,
<parameter><decl><type><name>ThreadType</name></type> <name>thread_type</name> <init>= <expr><name>ThreadType</name><operator>::</operator><name>Regular</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
