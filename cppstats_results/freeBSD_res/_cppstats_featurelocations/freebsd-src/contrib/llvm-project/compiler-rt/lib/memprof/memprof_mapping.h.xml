<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_mapping.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_MAPPING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MAPPING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowScale</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_SCALE</name></cpp:macro> <cpp:value>kDefaultShadowScale</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__memprof_shadow_memory_dynamic_address</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_GRANULARITY</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; SHADOW_SCALE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_ALIGNMENT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighMemEnd</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_ENTRY_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_GRANULARITY</name></cpp:macro> <cpp:value>64ULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_MASK</name></cpp:macro> <cpp:value>~(MEM_GRANULARITY - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((mem) &amp; SHADOW_MASK) &gt;&gt; SHADOW_SCALE) + (SHADOW_OFFSET))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemBeg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemEnd</name></cpp:macro> <cpp:value>(SHADOW_OFFSET ? SHADOW_OFFSET - 1 : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowBeg</name></cpp:macro> <cpp:value>SHADOW_OFFSET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowEnd</name></cpp:macro> <cpp:value>(MEM_TO_SHADOW(kLowMemEnd) + SHADOW_ENTRY_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighMemBeg</name></cpp:macro> <cpp:value>(MEM_TO_SHADOW(kHighMemEnd) + 1 + SHADOW_ENTRY_SIZE - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowBeg</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kHighMemBeg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowEnd</name></cpp:macro> <cpp:value>(MEM_TO_SHADOW(kHighMemEnd) + SHADOW_ENTRY_SIZE - 1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseShadowStart</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseMaxShadowStart</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapBeg</name></cpp:macro> <cpp:value>(kLowShadowEnd ? kLowShadowEnd + 1 : kZeroBaseShadowStart)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapEnd</name></cpp:macro> <cpp:value>(kHighShadowBeg - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadowSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>size</name> <operator>&gt;&gt;</operator> <name>SHADOW_SCALE</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>a</name> <operator>&lt;=</operator> <name>kLowMemEnd</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kLowShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kLowShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInShadowGap</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>SHADOW_OFFSET</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kShadowGapBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>AddrIsInLowMem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInHighMem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>protect_shadow_gap</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>AddrIsInShadowGap</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>AddrIsInMem</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>MEM_TO_SHADOW</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>AddrIsInLowShadow</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInHighShadow</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>AddrIsAlignedByGranularity</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><name>SHADOW_GRANULARITY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>RecordAccess</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>SHADOW_ENTRY_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u64</name> <modifier>*</modifier></type><name>shadow_address</name> <init>= <expr><operator>(</operator><name>u64</name> <operator>*</operator><operator>)</operator><call><name>MEM_TO_SHADOW</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shadow_address</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
