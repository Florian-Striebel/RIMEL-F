<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/primary64.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_PRIMARY64_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_PRIMARY64_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytemap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"local_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memtag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"release.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>





















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SizeClassAllocator64</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Config</name><operator>::</operator><name>PrimaryCompactPtrT</name> <name>CompactPtrT</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>CompactPtrScale</name> <init>= <expr><name>Config</name><operator>::</operator><name>PrimaryCompactPtrScale</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Config</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name></type> <name>ThisT</name>;</typedef>
<typedef>typedef <type><name><name>SizeClassAllocatorLocalCache</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name></type> <name>CacheT</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>CacheT</name><operator>::</operator><name>TransferBatch</name> <name>TransferBatch</name></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getSizeByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ClassId</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransferBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>CompactPtrScale</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>SizeClassMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>canAllocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>Size</name> <operator>&lt;=</operator> <name>SizeClassMap</name><operator>::</operator><name>MaxSize</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>ReleaseToOsInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>isAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>ThisT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>PrimaryBase</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PrimaryBase</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>map</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>PrimarySize</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MAP_NOACCESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>Seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u64</name></type> <name>Time</name> <init>= <expr><call><name>getMonotonicTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getRandom</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Seed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Seed</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Time</name> <operator>^</operator> <operator>(</operator><name>PrimaryBase</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PageSize</name> <init>= <expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>RegionBeg</name></name> <operator>=</operator> <call><name>getRegionBaseByClassId</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name>Config</name><operator>::</operator><name>PrimaryEnableRandomOffset</name></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><call><name>getRandomModN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Seed</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>PageSize</name><operator>)</operator></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>RandState</name></name> <operator>=</operator> <call><name>getRandomU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>LastReleaseAtNs</name></name> <operator>=</operator> <name>Time</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setOption</name><argument_list>(<argument><expr><name>Option</name><operator>::</operator><name>ReleaseInterval</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>sptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ReleaseToOsInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>Region</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PrimaryBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PrimarySize</name></expr></argument>, <argument><expr><name>UNMAP_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PrimaryBase</name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TransferBatch</name> <modifier>*</modifier></type><name>popBatch</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>NumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>populateFreeList</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>Region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name> <operator>+=</operator> <call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>B</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pushBatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name> <operator>+=</operator> <call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ClassId</name> <operator>!=</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseToOSMaybe</name><argument_list>(<argument><expr><name>Region</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>sptr</name></type> <name>I</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>sptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NumClasses</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>I</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>iterateOverBlocks</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>Callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockSize</name> <init>= <expr><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>From</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>RegionBeg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>To</name> <init>= <expr><name>From</name> <operator>+</operator> <name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>Block</name> <init>= <expr><name>From</name></expr></init></decl>;</init> <condition><expr><name>Block</name> <operator>&lt;</operator> <name>To</name></expr>;</condition> <incr><expr><name>Block</name> <operator>+=</operator> <name>BlockSize</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Callback</name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><name>ScopedString</name> <modifier>*</modifier></type><name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uptr</name></type> <name>TotalMapped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>PoppedBlocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>PushedBlocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TotalMapped</name> <operator>+=</operator> <name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>PoppedBlocks</name> <operator>+=</operator> <name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>PushedBlocks</name> <operator>+=</operator> <name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>Str</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Stats: SizeClassAllocator64: %zuM mapped (%zuM rss) in %zu "</literal>
<literal type="string">"allocations; remains %zu\n"</literal></expr></argument>,
<argument><expr><name>TotalMapped</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PoppedBlocks</name></expr></argument>,
<argument><expr><name>PoppedBlocks</name> <operator>-</operator> <name>PushedBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getStats</name><argument_list>(<argument><expr><name>Str</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>ReleaseInterval</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>s32</name></type> <name>Interval</name> <init>= <expr><call><name>Max</name><argument_list>(
<argument><expr><call><name>Min</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>s32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Config</name><operator>::</operator><name>PrimaryMaxReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Config</name><operator>::</operator><name>PrimaryMinReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReleaseToOsIntervalMs</name></expr></argument>, <argument><expr><name>Interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>releaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalReleasedBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>TotalReleasedBytes</name> <operator>+=</operator> <call><name>releaseToOSMaybe</name><argument_list>(<argument><expr><name>Region</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>TotalReleasedBytes</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getRegionInfoArrayAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RegionInfoArray</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getRegionInfoArraySize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>RegionInfoArray</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>uptr</name></type> <name>getCompactPtrBaseByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>CompactPtrT</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>CompactPtrScale</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>RegionBeg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CompactPtrT</name></type> <name>compactPtr</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><name>LargestClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>compactPtrInternal</name><argument_list>(<argument><expr><call><name>getCompactPtrBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decompactPtr</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>CompactPtrT</name></type> <name>CompactPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><name>LargestClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>decompactPtrInternal</name><argument_list>(<argument><expr><call><name>getCompactPtrBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CompactPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BlockInfo</name></type> <name>findNearestBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RegionInfoData</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RegionInfo</name> <modifier>*</modifier></type><name>RegionInfoArray</name> <init>=
<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RegionInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RegionInfoData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ClassId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MinDistance</name> <init>= <expr><operator>-</operator><literal type="number">1UL</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Begin</name> <init>= <expr><name><name>RegionInfoArray</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>RegionBeg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>End</name> <init>= <expr><name>Begin</name> <operator>+</operator> <name><name>RegionInfoArray</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>AllocatedUser</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Begin</name> <operator>&gt;</operator> <name>End</name> <operator>||</operator> <name>End</name> <operator>-</operator> <name>Begin</name> <operator>&lt;</operator> <name>SizeClassMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RegionDistance</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Begin</name> <operator>&lt;=</operator> <name>Ptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Ptr</name> <operator>&lt;</operator> <name>End</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RegionDistance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>RegionDistance</name> <operator>=</operator> <name>Ptr</name> <operator>-</operator> <name>End</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>RegionDistance</name> <operator>=</operator> <name>Begin</name> <operator>-</operator> <name>Ptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RegionDistance</name> <operator>&lt;</operator> <name>MinDistance</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MinDistance</name> <operator>=</operator> <name>RegionDistance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ClassId</name> <operator>=</operator> <name>I</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>BlockInfo</name></type> <name>B</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>MinDistance</name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>RegionBegin</name></name> <operator>=</operator> <name><name>RegionInfoArray</name><index>[<expr><name>ClassId</name></expr>]</index></name><operator>.</operator><name>RegionBeg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>RegionEnd</name></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>RegionBegin</name></name> <operator>+</operator> <name><name>RegionInfoArray</name><index>[<expr><name>ClassId</name></expr>]</index></name><operator>.</operator><name>AllocatedUser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>BlockSize</name></name> <operator>=</operator> <name>SizeClassMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>BlockBegin</name></name> <operator>=</operator>
<name><name>B</name><operator>.</operator><name>RegionBegin</name></name> <operator>+</operator> <call><name>uptr</name><argument_list>(<argument><expr><call><name>sptr</name><argument_list>(<argument><expr><name>Ptr</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>RegionBegin</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>sptr</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>BlockSize</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<call><name>sptr</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>BlockSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>B</name><operator>.</operator><name>BlockBegin</name></name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>RegionBegin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>BlockBegin</name></name> <operator>+=</operator> <name><name>B</name><operator>.</operator><name>BlockSize</name></name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>B</name><operator>.</operator><name>RegionEnd</name></name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>BlockBegin</name></name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>BlockSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>B</name><operator>.</operator><name>BlockBegin</name></name> <operator>-=</operator> <name><name>B</name><operator>.</operator><name>BlockSize</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>B</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AtomicOptions</name></type> <name>Options</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>RegionSize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>PrimaryRegionSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>NumClasses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimarySize</name> <init>= <expr><name>RegionSize</name> <operator>*</operator> <name>NumClasses</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MapSizeIncrement</name> <init>= <expr><name>Config</name><operator>::</operator><name>PrimaryMapSizeIncrement</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumBatches</name> <init>= <expr><ternary><condition><expr><name>SCUDO_ANDROID</name></expr> ?</condition><then> <expr><literal type="number">4U</literal></expr> </then><else>: <expr><literal type="number">8U</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<struct>struct <name>RegionStats</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>PoppedBlocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>PushedBlocks</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ReleaseToOsInfo</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>PushedBlocksAtLastRelease</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RangesReleased</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>LastReleasedBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>LastReleaseAtNs</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>UnpaddedRegionInfo</name> <block>{
<decl_stmt><decl><type><name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SinglyLinkedList</name><argument_list type="generic">&lt;<argument><expr><name>TransferBatch</name></expr></argument>&gt;</argument_list></name></type> <name>FreeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RegionBeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RegionStats</name></type> <name>Stats</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>RandState</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MappedUser</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>AllocatedUser</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MapPlatformData</name></type> <name>Data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReleaseToOsInfo</name></type> <name>ReleaseInfo</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Exhausted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>RegionInfo</name></name></type> <range>: <expr><name>UnpaddedRegionInfo</name> <block>{
<expr><name>char</name> <name><name>Padding</name><index>[<expr><name>SCUDO_CACHE_LINE_SIZE</name> <operator>-</operator>
<operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>UnpaddedRegionInfo</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>SCUDO_CACHE_LINE_SIZE</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <block>{}</block></expr>;
}</block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RegionInfo</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>SCUDO_CACHE_LINE_SIZE</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>PrimaryBase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MapPlatformData</name></type> <name>Data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_s32</name></type> <name>ReleaseToOsIntervalMs</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>SCUDO_CACHE_LINE_SIZE</argument>)</argument_list></macro> <decl_stmt><decl><type><name>RegionInfo</name></type> <name><name>RegionInfoArray</name><index>[<expr><name>NumClasses</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>RegionInfo</name> <modifier>*</modifier></type><name>getRegionInfo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>NumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>RegionInfoArray</name><index>[<expr><name>ClassId</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>uptr</name></type> <name>getRegionBaseByClassId</name><argument_list>(<argument><expr><name>uptr</name> <name>ClassId</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>PrimaryBase</name> <operator>+</operator> <operator>(</operator><name>ClassId</name> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>PrimaryRegionSizeLog</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>CompactPtrT</name></type> <name>compactPtrInternal</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompactPtrT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>Ptr</name> <operator>-</operator> <name>Base</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>CompactPtrScale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>decompactPtrInternal</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>CompactPtrT</name></type> <name>CompactPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Base</name> <operator>+</operator> <operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CompactPtr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>CompactPtrScale</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>TransferBatch</name> <modifier>*</modifier></type><name>populateFreeList</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>,
<parameter><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Size</name> <init>= <expr><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><name>TransferBatch</name><operator>::</operator><call><name>getMaxCached</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>RegionBeg</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>RegionBeg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MappedUser</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>TotalUserBytes</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>+</operator> <name>MaxCount</name> <operator>*</operator> <name>Size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>TotalUserBytes</name> <operator>&gt;</operator> <name>MappedUser</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MapSize</name> <init>=
<expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>TotalUserBytes</name> <operator>-</operator> <name>MappedUser</name></expr></argument>, <argument><expr><name>MapSizeIncrement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>RegionBase</name> <init>= <expr><name>RegionBeg</name> <operator>-</operator> <call><name>getRegionBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>RegionBase</name> <operator>+</operator> <name>MappedUser</name> <operator>+</operator> <name>MapSize</name> <operator>&gt;</operator> <name>RegionSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Region</name><operator>-&gt;</operator><name>Exhausted</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>Exhausted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ScopedString</name></type> <name>Str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getStats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>append</name></name><argument_list>(
<argument><expr><literal type="string">"Scudo OOM: The process has exhausted %zuM for size class %zu.\n"</literal></expr></argument>,
<argument><expr><name>RegionSize</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>MappedUser</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>map</name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RegionBeg</name> <operator>+</operator> <name>MappedUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MapSize</name></expr></argument>,
<argument><expr><literal type="string">"scudo:primary"</literal></expr></argument>,
<argument><expr><name>MAP_ALLOWNOMEM</name> <operator>|</operator> <name>MAP_RESIZABLE</name> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MAP_MEMTAG</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Region</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name> <operator>+=</operator> <name>MapSize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>getStats</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>StatMapped</name></expr></argument>, <argument><expr><name>MapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>NumberOfBlocks</name> <init>= <expr><call><name>Min</name><argument_list>(
<argument><expr><name>MaxNumBatches</name> <operator>*</operator> <name>MaxCount</name></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name> <operator>-</operator> <name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name><operator>)</operator> <operator>/</operator> <name>Size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>NumberOfBlocks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>constexpr</name> <name>u32</name></type> <name>ShuffleArraySize</name> <init>=
<expr><name>MaxNumBatches</name> <operator>*</operator> <name>TransferBatch</name><operator>::</operator><name>MaxNumCached</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name><name>ShuffleArray</name><index>[<expr><name>ShuffleArraySize</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>NumberOfBlocks</name></expr></argument>, <argument><expr><name>ShuffleArraySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CompactPtrBase</name> <init>= <expr><call><name>getCompactPtrBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>P</name> <init>= <expr><name>RegionBeg</name> <operator>+</operator> <name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumberOfBlocks</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr><operator>,</operator> <expr><name>P</name> <operator>+=</operator> <name>Size</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ShuffleArray</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <call><name>compactPtrInternal</name><argument_list>(<argument><expr><name>CompactPtrBase</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>ClassId</name> <operator>!=</operator> <name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shuffle</name><argument_list>(<argument><expr><name>ShuffleArray</name></expr></argument>, <argument><expr><name>NumberOfBlocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Region</name><operator>-&gt;</operator><name>RandState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumberOfBlocks</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name> <init>=
<expr><call><name><name>C</name><operator>-&gt;</operator><name>createBatch</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>decompactPtrInternal</name><argument_list>(
<argument><expr><name>CompactPtrBase</name></expr></argument>, <argument><expr><name><name>ShuffleArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>N</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>MaxCount</name></expr></argument>, <argument><expr><name>NumberOfBlocks</name> <operator>-</operator> <name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>setFromArray</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ShuffleArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>+=</operator> <name>N</name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocatedUser</name> <init>= <expr><name>Size</name> <operator>*</operator> <name>NumberOfBlocks</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>getStats</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>AllocatedUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>+=</operator> <name>AllocatedUser</name></expr>;</expr_stmt>

<return>return <expr><name>B</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><name>ScopedString</name> <modifier>*</modifier></type><name>Str</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Rss</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name> <init>= <expr><call><name>getRegionInfo</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>InUse</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name> <operator>-</operator> <name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>TotalChunks</name> <init>= <expr><name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>/</operator> <call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"%s %02zu (%6zu): mapped: %6zuK popped: %7zu pushed: %7zu "</literal>
<literal type="string">"inuse: %6zu total: %6zu rss: %6zuK releases: %6zu last "</literal>
<literal type="string">"released: %6zuK region: 0x%zx (0x%zx)\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>Region</name><operator>-&gt;</operator><name>Exhausted</name></name></expr> ?</condition><then> <expr><literal type="string">"F"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>,
<argument><expr><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>MappedUser</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name></expr></argument>, <argument><expr><name>InUse</name></expr></argument>,
<argument><expr><name>TotalChunks</name></expr></argument>, <argument><expr><name>Rss</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>RangesReleased</name></name></expr></argument>,
<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>LastReleasedBytes</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>RegionBeg</name></name></expr></argument>,
<argument><expr><call><name>getRegionBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>uptr</name></type> <name>releaseToOSMaybe</name><parameter_list>(<parameter><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>Region</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Force</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockSize</name> <init>= <expr><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PageSize</name> <init>= <expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BytesInFreeList</name> <init>=
<expr><name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>-</operator>
<operator>(</operator><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PoppedBlocks</name></name> <operator>-</operator> <name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name><operator>)</operator> <operator>*</operator> <name>BlockSize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BytesInFreeList</name> <operator>&lt;</operator> <name>PageSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BytesPushed</name> <init>= <expr><operator>(</operator><name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name> <operator>-</operator>
<name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>PushedBlocksAtLastRelease</name></name><operator>)</operator> <operator>*</operator>
<name>BlockSize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BytesPushed</name> <operator>&lt;</operator> <name>PageSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>BlockSize</name> <operator>&lt;</operator> <name>PageSize</name> <operator>/</operator> <literal type="number">16U</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Force</name> <operator>&amp;&amp;</operator> <name>BytesPushed</name> <operator>&lt;</operator> <name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>/</operator> <literal type="number">16U</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>BytesInFreeList</name> <operator>*</operator> <literal type="number">100U</literal><operator>)</operator> <operator>/</operator> <name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name> <operator>&lt;</operator>
<operator>(</operator><literal type="number">100U</literal> <operator>-</operator> <literal type="number">1U</literal> <operator>-</operator> <name>BlockSize</name> <operator>/</operator> <literal type="number">16U</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Force</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>s32</name></type> <name>IntervalMs</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>IntervalMs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>LastReleaseAtNs</name></name> <operator>+</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u64</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>IntervalMs</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal> <operator>&gt;</operator>
<call><name>getMonotonicTime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ReleaseRecorder</name></type> <name>Recorder</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>RegionBeg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Region</name><operator>-&gt;</operator><name>Data</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CompactPtrBase</name> <init>= <expr><call><name>getCompactPtrBaseByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>DecompactPtr</name> <init>= <expr><index>[<expr><name>CompactPtrBase</name></expr>]</index><operator>(</operator><name>CompactPtrT</name> <name>CompactPtr</name><operator>)</operator> <block>{
<return>return <expr><call><name>decompactPtrInternal</name><argument_list>(<argument><expr><name>CompactPtrBase</name></expr></argument>, <argument><expr><name>CompactPtr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>SkipRegion</name> <init>= <expr><index>[]</index><operator>(</operator><name>UNUSED</name> <name>uptr</name> <name>RegionIndex</name><operator>)</operator> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>releaseFreeMemoryToOS</name><argument_list>(<argument><expr><name><name>Region</name><operator>-&gt;</operator><name>FreeList</name></name></expr></argument>, <argument><expr><name><name>Region</name><operator>-&gt;</operator><name>AllocatedUser</name></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>,
<argument><expr><name>BlockSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Recorder</name></expr></argument>, <argument><expr><name>DecompactPtr</name></expr></argument>, <argument><expr><name>SkipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Recorder</name><operator>.</operator><name>getReleasedRangesCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>PushedBlocksAtLastRelease</name></name> <operator>=</operator>
<name><name>Region</name><operator>-&gt;</operator><name>Stats</name><operator>.</operator><name>PushedBlocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>RangesReleased</name></name> <operator>+=</operator> <call><name><name>Recorder</name><operator>.</operator><name>getReleasedRangesCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>LastReleasedBytes</name></name> <operator>=</operator> <call><name><name>Recorder</name><operator>.</operator><name>getReleasedBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>Region</name><operator>-&gt;</operator><name>ReleaseInfo</name><operator>.</operator><name>LastReleaseAtNs</name></name> <operator>=</operator> <call><name>getMonotonicTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Recorder</name><operator>.</operator><name>getReleasedBytes</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
