<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/gcc_qdiv.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DD.h"</cpp:file></cpp:include>

<function><type><name>long</name> <name>double</name></type> <name>__gcc_qdiv</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>infinityHi</name> <init>= <expr><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x7ff00000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>dst</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>a</name></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>src</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>b</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>double</name></type> <name>x</name> <init>= <expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></init></decl>, <decl><type ref="prev"/><name>x1</name> <init>= <expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>src</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name><name>src</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>yHi</name></decl>, <decl><type ref="prev"/><name>yLo</name></decl>, <decl><type ref="prev"/><name>qHi</name></decl>, <decl><type ref="prev"/><name>qLo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>yq</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>x</name> <operator>/</operator> <name>y</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>dst</name><operator>.</operator><name>ld</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>doublebits</name></type> <name>qBits</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>q</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>qBits</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <name>infinityHi</name><operator>)</operator> <operator>==</operator> <name>infinityHi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>dst</name><operator>.</operator><name>ld</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yHi</name> <operator>=</operator> <call><name>high26bits</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qHi</name> <operator>=</operator> <call><name>high26bits</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yLo</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>yHi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qLo</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>qHi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>LOWORDER</name><argument_list>(<argument><expr><name>yq</name></expr></argument>, <argument><expr><name>yHi</name></expr></argument>, <argument><expr><name>yLo</name></expr></argument>, <argument><expr><name>qHi</name></expr></argument>, <argument><expr><name>qLo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>yq</name><operator>)</operator> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <name>x1</name><operator>)</operator> <operator>-</operator> <name>y1</name> <operator>*</operator> <name>q</name><operator>)</operator> <operator>/</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name><name>dst</name><operator>.</operator><name>ld</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
