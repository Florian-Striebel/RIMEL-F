<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SYMBOLIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SYMBOLIZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_vector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>AddressInfo</name> <block>{


<decl_stmt><decl><type><name>uptr</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>module_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleArch</name></type> <name>module_arch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kUnknown</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>function_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AddressInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FillModuleInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod_name</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>mod_offset</name></decl></parameter>, <parameter><decl><type><name>ModuleArch</name></type> <name>arch</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<struct>struct <name>SymbolizedStack</name> <block>{
<decl_stmt><decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddressInfo</name></type> <name>info</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>SymbolizedStack</name> <modifier>*</modifier></type><name>New</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ClearAll</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SymbolizedStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>DataInfo</name> <block>{


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>module_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleArch</name></type> <name>module_arch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DataInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>LocalInfo</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>function_name</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decl_file</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>decl_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_frame_offset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_size</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_tag_offset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sptr</name></type> <name>frame_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tag_offset</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>FrameInfo</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>module_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleArch</name></type> <name>module_arch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>LocalInfo</name></expr></argument>&gt;</argument_list></name></type> <name>locals</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolizerTool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>Symbolizer</name></type> <name>final</name> <block>{<block_content>
<label><name>public</name>:</label>


<function_decl><type><specifier>static</specifier> <name>Symbolizer</name> <modifier>*</modifier></type><name>GetOrInit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LateInitialize</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>SymbolizePC</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SymbolizeData</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>DataInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SymbolizeFrame</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>FrameInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>GetModuleNameAndOffsetForPC</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_name</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>module_address</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetModuleNameForPc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_name</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>unused</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetModuleNameAndOffsetForPC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>module_name</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Demangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>StartSymbolizationHook</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>EndSymbolizationHook</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>AddHooks</name><parameter_list>(<parameter><decl><type><name>StartSymbolizationHook</name></type> <name>start_hook</name></decl></parameter>,
<parameter><decl><type><name>EndSymbolizationHook</name></type> <name>end_hook</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RefreshModules</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>LoadedModule</name> <modifier>*</modifier></type><name>FindModuleForAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>InvalidateModuleList</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>





<decl_stmt><decl><type><name>class</name></type> <name>ModuleNameOwner</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>ModuleNameOwner</name><argument_list>(<argument><expr><name>BlockingMutex</name> <operator>*</operator><name>synchronized_by</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>last_match_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>mu_</name><argument_list>(<argument>synchronized_by</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>storage_</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>kInitialCapacity</name></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetOwnedCopy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kInitialCapacity</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>storage_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_match_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockingMutex</name> <modifier>*</modifier></type><name>mu_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <expr_stmt><expr><name>module_names_</name></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>Symbolizer</name> <modifier>*</modifier></type><name>PlatformInit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>FindModuleNameAndOffsetForAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_name</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>module_offset</name></decl></parameter>,
<parameter><decl><type><name>ModuleArch</name> <modifier>*</modifier></type><name>module_arch</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>ListOfModules</name></type> <name>modules_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ListOfModules</name></type> <name>fallback_modules_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>modules_fresh_</name></decl>;</decl_stmt>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PlatformDemangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Symbolizer</name> <modifier>*</modifier></type><name>symbolizer_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>StaticSpinMutex</name></type> <name>init_mu_</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>BlockingMutex</name></type> <name>mu_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>SymbolizerTool</name></expr></argument>&gt;</argument_list></name></type> <name>tools_</name></decl>;</decl_stmt>

<function_decl><type><name>explicit</name></type> <name>Symbolizer</name><parameter_list>(<parameter><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>SymbolizerTool</name></expr></argument>&gt;</argument_list></name></type> <name>tools</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>LowLevelAllocator</name></type> <name>symbolizer_allocator_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StartSymbolizationHook</name></type> <name>start_hook_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EndSymbolizationHook</name></type> <name>end_hook_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolizerScope</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>SymbolizerScope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbolizer</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>SymbolizerScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Symbolizer</name> <modifier>*</modifier></type><name>sym_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>void</name></type> <name>LateInitializeTools</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>InitializeDbgHelpIfNeeded</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
