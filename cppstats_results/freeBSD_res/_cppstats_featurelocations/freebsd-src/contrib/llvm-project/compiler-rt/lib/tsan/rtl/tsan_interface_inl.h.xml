<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interface_inl.h">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_rtl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_ptrauth.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLERPC</name></cpp:macro> <cpp:value>((uptr)__builtin_return_address(0))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__tsan</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>__tsan_read1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read4</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write4</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read1_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read2_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read4_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read8_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write1_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write2_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write4_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write8_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_vptr_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vptr_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vptr_p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vptr_p</name> <operator>!=</operator> <name>new_val</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>is_vptr_access</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MemoryWrite</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>vptr_p</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>is_vptr_access</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_vptr_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vptr_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vptr_p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>is_vptr_access</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MemoryRead</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>vptr_p</name></expr></argument>, <argument><expr><name>kSizeLog8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>is_vptr_access</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_func_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>FuncEntry</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_func_exit</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>FuncExit</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_ignore_thread_begin</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ThreadIgnoreBegin</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_ignore_thread_end</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ThreadIgnoreEnd</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read_range</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccessRange</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write_range</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccessRange</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CALLERPC</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_read_range_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccessRange</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__tsan_write_range_pc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccessRange</name><argument_list>(<argument><expr><call><name>cur_thread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRIP_PAC_PC</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
