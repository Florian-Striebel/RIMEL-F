<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/options.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_OPTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_OPTIONS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>options</name> <block>{<block_content>

















<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>Backtrace_t</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>TraceBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>Options</name> <block>{
<decl_stmt><decl><type><name>Backtrace_t</name></type> <name>Backtrace</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_OPTION</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>DefaultValue</name></type></parameter>, <parameter><type><name>Description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name = DefaultValue;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/options.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GWP_ASAN_OPTION</name></cpp:undef>

<function><type><name>void</name></type> <name>setDefaults</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_OPTION</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>DefaultValue</name></type></parameter>, <parameter><type><name>Description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Name = DefaultValue;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/options.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GWP_ASAN_OPTION</name></cpp:undef>

<expr_stmt><expr><name>Backtrace</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
