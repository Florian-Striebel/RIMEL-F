<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_hash.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_HASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MurMur2HashBuilder</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>m</name> <init>= <expr><literal type="number">0x5bd1e995</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>seed</name> <init>= <expr><literal type="number">0x9747b28c</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>r</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>h</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name>explicit</name></type> <name>MurMur2HashBuilder</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>seed</name> <operator>^</operator> <name>init</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>u32</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>x</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
