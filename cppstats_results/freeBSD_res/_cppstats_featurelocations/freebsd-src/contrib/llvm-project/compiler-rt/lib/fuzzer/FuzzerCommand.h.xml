<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerCommand.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_COMMAND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_COMMAND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerIO.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>Command</name></type> <name>final</name> <block>{<block_content>
<label><name>public</name>:</label>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ignoreRemainingArgs</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"-ignore_remaining_args=1"</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>Command</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>CombinedOutAndErr</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>

<name>explicit</name> <call><name>Command</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ArgsToAdd</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Args</name><argument_list>(<argument><expr><name>ArgsToAdd</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CombinedOutAndErr</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <call><name>Command</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Args</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Args</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CombinedOutAndErr</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>CombinedOutAndErr</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>OutputFile</name><argument_list>(<argument>Other.OutputFile</argument>)</argument_list></macro> <expr><block>{}</block>

<name>Command</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>Args</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Args</name></name></expr>;
<expr><name>CombinedOutAndErr</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>CombinedOutAndErr</name></name></expr>;
<expr><name>OutputFile</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>OutputFile</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Command</name><argument_list>()</argument_list></macro> <block>{}</block>



<name>bool</name> <macro><name>hasArgument</name><argument_list>(<argument>const std::string &amp;Arg</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>i</name> <operator>=</operator> <call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Args</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>addArgument</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Arg</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Args</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>addArguments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ArgsToAdd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Args</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ArgsToAdd</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ArgsToAdd</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>void</name></type> <name>removeArgument</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Arg</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Args</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>hasFlag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Flag</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>Arg</name><argument_list>(<argument><expr><literal type="string">"-"</literal> <operator>+</operator> <name>Flag</name> <operator>+</operator> <literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>IsMatch</name> <init>= <expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>Arg</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><name>Other</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>any_of</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsMatch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getFlagValue</name><argument_list>(<argument>const std::string &amp;Flag</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <call><name>Arg</name><argument_list>(<argument><expr><literal type="string">"-"</literal> <operator>+</operator> <name>Flag</name> <operator>+</operator> <literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>IsMatch</name> <operator>=</operator> <index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>Arg</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><name>Other</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr>;
<expr><name>auto</name> <name>i</name> <operator>=</operator> <call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr>;
<expr><name>auto</name> <name>j</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>find_if</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>IsMatch</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>result</name></expr>;
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>j</name><operator>-&gt;</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>Arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return result</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addFlag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Flag</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>addArgument</name><argument_list>(<argument><expr><literal type="string">"-"</literal> <operator>+</operator> <name>Flag</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>removeFlag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Flag</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>Arg</name><argument_list>(<argument><expr><literal type="string">"-"</literal> <operator>+</operator> <name>Flag</name> <operator>+</operator> <literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>IsMatch</name> <init>= <expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>Arg</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><name>Other</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Arg</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name>endMutableArgs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Args</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>remove_if</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>IsMatch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasOutputFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>OutputFile</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getOutputFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>OutputFile</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setOutputFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>FileName</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>OutputFile</name> <operator>=</operator> <name>FileName</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOutAndErrCombined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CombinedOutAndErr</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>combineOutAndErr</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>combine</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CombinedOutAndErr</name> <operator>=</operator> <name>combine</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name>stringstream</name> <name>SS</name></expr>;
<for>for <control>(<init><decl><type><name>auto</name></type> <name>arg</name> <range>: <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>SS</name> <operator>&lt;&lt;</operator> <name>arg</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasOutputFile</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SS</name> <operator>&lt;&lt;</operator> <literal type="string">"&gt;"</literal> <operator>&lt;&lt;</operator> <call><name>getOutputFile</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isOutAndErrCombined</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SS</name> <operator>&lt;&lt;</operator> <literal type="string">"2&gt;&amp;1 "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>result</name> <operator>=</operator> <call><name><name>SS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Command</name><argument_list>(<argument><expr><name>Command</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Command</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>Command</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <macro><name>endMutableArgs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Args</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ignoreRemainingArgs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <macro><name>endMutableArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>Args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Args</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ignoreRemainingArgs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>CombinedOutAndErr</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OutputFile</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
