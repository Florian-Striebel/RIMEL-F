<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_STACKDEPOTBASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STACKDEPOTBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_persistent_allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Node</name></expr></argument>, <argument><expr><name>int</name> <name>kReservedBits</name></expr></argument>, <argument><expr><name>int</name> <name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>StackDepotBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Node</name><operator>::</operator><name>args_type</name> <name>args_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Node</name><operator>::</operator><name>handle_type</name> <name>handle_type</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>handle_type</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><name>args_type</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>inserted</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>args_type</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>StackDepotStats</name> <modifier>*</modifier></type><name>GetStats</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>stats</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>LockAll</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnlockAll</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintAll</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>find</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>args_type</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>lock</name><parameter_list>(<parameter><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kTabSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kTabSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kPartBits</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kPartShift</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>kPartBits</name> <operator>-</operator> <name>kReservedBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kPartCount</name> <init>=
<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kPartBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kPartSize</name> <init>= <expr><name>kTabSize</name> <operator>/</operator> <name>kPartCount</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxId</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kPartShift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name><name>tab</name><index>[<expr><name>kTabSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name><name>seq</name><index>[<expr><name>kPartCount</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StackDepotStats</name></type> <name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StackDepotReverseMap</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Node</name></expr></argument>, <argument><expr><name>int</name> <name>kReservedBits</name></expr></argument>, <argument><expr><name>int</name> <name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>
<name>Node</name> <operator>*</operator><name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>find</name><argument_list>(<argument>Node *s</argument>,
<argument>args_type args</argument>,
<argument>u32 hash</argument>)</argument_list></macro> <block>{

<for>for <control>(<init>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>-&gt;</operator><name>eq</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
<expr_stmt/>}</block_content>
}
return nullptr</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>

template &lt;class Node</block><operator>,</operator> <decl_stmt><decl><type><name>int</name></type> <name>kReservedBits</name></decl>, <decl><type ref="prev"/><name>int</name> <name>kTabSizeLog</name>&gt;
<name>Node</name> <modifier>*</modifier><name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>lock</name><argument_list>(
<argument><expr><name>atomic_uintptr_t</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>cmp</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><name>cmp</name> <operator>|</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>proc_yield</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt/>}</block_content>
}

template &lt;class Node</block><operator>,</operator> <decl_stmt><decl><type><name>int</name></type> <name>kReservedBits</name></decl>, <decl><type ref="prev"/><name>int</name> <name>kTabSizeLog</name>&gt;
<name>void</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>unlock</name><argument_list>(
<argument><expr><name>atomic_uintptr_t</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>s</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

template &lt;class Node</block></decl>, <decl><type ref="prev"/><name>int</name> <name>kReservedBits</name></decl>, <decl><type ref="prev"/><name>int</name> <name>kTabSizeLog</name>&gt;
<name>typename</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>handle_type</name>
<name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>Put</name><argument_list>(<argument><expr><name>args_type</name> <name>args</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>inserted</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inserted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>inserted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Node</name><operator>::</operator><call><name>is_valid</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>handle_type</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>h</name> <init>= <expr><name>Node</name><operator>::</operator><call><name>hash</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>h</name> <operator>%</operator> <name>kTabSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>v</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>memory_order_consume</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>get_handle</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>lock</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>!=</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>node</name><operator>-&gt;</operator><name>get_handle</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}
uptr part = (h % kTabSize</block></if></if_stmt>)</block_content> / kPartSize</block><empty_stmt>;</empty_stmt></if></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>id</name> <init>= <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seq</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>n_uniq_ids</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>kMaxId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>|=</operator> <name>part</name> <operator>&lt;&lt;</operator> <name>kPartShift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>id</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>kReservedBits</name><operator>)</operator></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>memsz</name> <init>= <expr><name>Node</name><operator>::</operator><call><name>storage_size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>PersistentAlloc</name><argument_list>(<argument><expr><name>memsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>allocated</name></name> <operator>+=</operator> <name>memsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>store</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inserted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>inserted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>get_handle</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

template &lt;class Node</block></decl>, <decl><type ref="prev"/><name>int</name> <name>kReservedBits</name></decl>, <decl><type ref="prev"/><name>int</name> <name>kTabSizeLog</name>&gt;
<name>typename</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>args_type</name>
<name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>::<name>Get</name><argument_list>(<argument><expr><name>u32</name> <name>id</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>args_type</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
CHECK_EQ(id &amp; (((u32</block></if></if_stmt>)</block_content>-1</block></decl>) &gt;&gt; kReservedBits</decl_stmt></for>)</block_content></block></decl>, <decl><type ref="prev"/><name>id</name></decl>);</decl_stmt></for>

<name>uptr</name> <name>part</name> <operator>=</operator> <name>id</name> <operator>&gt;&gt;</operator> <name>kPartShift</name></block></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>kPartSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><name>part</name> <operator>*</operator> <name>kPartSize</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kTabSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>v</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>memory_order_consume</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><call><name>args_type</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Node</name></expr></argument>, <argument><expr><name>int</name> <name>kReservedBits</name></expr></argument>, <argument><expr><name>int</name> <name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>LockAll</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kTabSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Node</name></expr><operator>,</operator> <expr><name>int</name> <name>kReservedBits</name></expr><operator>,</operator> <expr><name>int</name> <name>kTabSizeLog</name><operator>&gt;</operator>
<name>void</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>UnlockAll</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kTabSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>s</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>s</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1UL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Node</name></expr><operator>,</operator> <expr><name>int</name> <name>kReservedBits</name></expr><operator>,</operator> <expr><name>int</name> <name>kTabSizeLog</name><operator>&gt;</operator>
<name>void</name> <name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>kReservedBits</name></expr></argument>, <argument><expr><name>kTabSizeLog</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>PrintAll</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kTabSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>v</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1UL</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Stack for id %u:\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>load</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for></block_content></block></for>}</block>
<call><name>unlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
