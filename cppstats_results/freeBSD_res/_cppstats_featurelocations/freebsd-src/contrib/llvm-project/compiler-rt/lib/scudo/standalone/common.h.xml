<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/common.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_COMMON_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_COMMON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fuchsia.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trusty.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Dest</name></expr></argument>, <argument><expr><name>class</name> <name>Source</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>Dest</name></type> <name>bit_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Source</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dest</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Source</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Dest</name></type> <name>D</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>constexpr</name> <name>uptr</name></type> <name>roundUpTo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>X</name> <operator>+</operator> <name>Boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>Boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>constexpr</name> <name>uptr</name></type> <name>roundDownTo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>X</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>Boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>isAligned</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>X</name> <operator>&amp;</operator> <operator>(</operator><name>Alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>constexpr</name> <name>T</name></type> <name>Min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>constexpr</name> <name>T</name></type> <name>Max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>Swap</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name></type> <name>Tmp</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name>Tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isPowerOfTwo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>X</name> <operator>&amp;</operator> <operator>(</operator><name>X</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>getMostSignificantSetBitIndex</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SCUDO_WORDSIZE</name> <operator>-</operator> <literal type="number">1U</literal> <operator>-</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>__builtin_clzl</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>roundUpToPowerOfTwo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isPowerOfTwo</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Size</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Up</name> <init>= <expr><call><name>getMostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>Up</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Up</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>Up</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>getLeastSignificantSetBitIndex</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>__builtin_ctzl</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>getLog2</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>isPowerOfTwo</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getLeastSignificantSetBitIndex</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>getRandomU32</name><parameter_list>(<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>State</name></decl></parameter>)</parameter_list> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>State</name> <operator>^=</operator> <operator>*</operator><name>State</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>State</name> <operator>^=</operator> <operator>*</operator><name>State</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>State</name> <operator>^=</operator> <operator>*</operator><name>State</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>State</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>getRandomModN</name><parameter_list>(<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getRandomU32</name><argument_list>(<argument><expr><name>State</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>N</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>void</name></type> <name>shuffle</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>RandState</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>State</name> <init>= <expr><operator>*</operator><name>RandState</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>I</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Swap</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><call><name>getRandomModN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>State</name></expr></argument>, <argument><expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>RandState</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>void</name></type> <name>yieldProcessor</name><parameter_list>(<parameter><decl><type><name>u8</name></type> <name>Count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<for>for <control>(<init><decl><type><name>u8</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Count</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("pause");</asm></block_content></block></for>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<for>for <control>(<init><decl><type><name>u8</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Count</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("yield");</asm></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>PageSizeCached</name></decl>;</decl_stmt>
<function_decl><type><name>uptr</name></type> <name>getPageSizeSlow</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>getPageSizeCached</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>SCUDO_ANDROID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4096U</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>PageSizeCached</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PageSizeCached</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getPageSizeSlow</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>u32</name></type> <name>getNumberOfCPUs</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>u64</name></type> <name>getMonotonicTime</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>u32</name></type> <name>getThreadID</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>MaxRandomLength</name> <init>= <expr><literal type="number">256U</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>getRandom</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Blocking</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ALLOWNOMEM</name></cpp:macro> <cpp:value>(1U &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_NOACCESS</name></cpp:macro> <cpp:value>(1U &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_RESIZABLE</name></cpp:macro> <cpp:value>(1U &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_MEMTAG</name></cpp:macro> <cpp:value>(1U &lt;&lt; 3)</cpp:value></cpp:define>









<function_decl><type><name>void</name> <modifier>*</modifier></type><name>map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>MapPlatformData</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMAP_ALL</name></cpp:macro> <cpp:value>(1U &lt;&lt; 0)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>unmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>MapPlatformData</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setMemoryPermission</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Flags</name></decl></parameter>,
<parameter><decl><type><name>MapPlatformData</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>releasePagesToOS</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>BaseAddress</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>MapPlatformData</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name> <name>NORETURN</name></type> <name>dieOnMapUnmapError</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>SizeIfOOM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>setAbortMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Message</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>BlockInfo</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>BlockBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>BlockSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RegionBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RegionEnd</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Option</name> <range>: <expr><name>u8</name> <block>{
<expr><name>ReleaseInterval</name></expr>,
<expr><name>MemtagTuning</name></expr>,
<expr><name>ThreadDisableMemInit</name></expr>,

<expr><name>MaxCacheEntriesCount</name></expr>,
<expr><name>MaxCacheEntrySize</name></expr>,
<expr><name>MaxTSDsCount</name></expr>,
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name> <name>char</name></type> <name>PatternFillByte</name> <init>= <expr><literal type="number">0xAB</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>FillContentsMode</name> <block>{
<decl><name>NoFill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ZeroFill</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PatternOrZeroFill</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
