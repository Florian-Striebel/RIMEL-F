<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMerge.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_MERGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_MERGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;istream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<struct>struct <name>MergeFileInfo</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>Features</name></decl>, <decl><type ref="prev"/><name>Cov</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Merger</name> <block>{
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>MergeFileInfo</name></expr></argument>&gt;</argument_list></name></type> <name>Files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NumFilesInFirstCorpus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>FirstNotProcessedFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>LastFailure</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Parse</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>istream</name> <operator>&amp;</operator><name>IS</name></expr></argument>, <argument><expr><name>bool</name> <name>ParseCoverage</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Parse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Str</name></expr></argument>, <argument><expr><name>bool</name> <name>ParseCoverage</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>ParseOrExit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>istream</name> <operator>&amp;</operator><name>IS</name></expr></argument>, <argument><expr><name>bool</name> <name>ParseCoverage</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>size_t</name></type> <name>Merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>InitialFeatures</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>NewFeatures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>InitialCov</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>NewCov</name></decl></parameter>,
<parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>NewFiles</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>size_t</name> <macro><name>ApproximateMemoryConsumption</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <macro><name>AllFeatures</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>void</name></type> <name>CrashResistantMerge</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>OldCorpus</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>NewCorpus</name></expr></argument>,
<argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>NewFiles</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>InitialFeatures</name></expr></argument>,
<argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>NewFeatures</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>InitialCov</name></expr></argument>,
<argument><expr><name><name>Set</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>NewCov</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>CFPath</name></expr></argument>,
<argument><expr><name>bool</name> <name>Verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
