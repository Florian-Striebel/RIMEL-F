<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_fdr_log_writer.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_LIB_XRAY_XRAY_FDR_LOG_WRITER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_LIB_XRAY_XRAY_FDR_LOG_WRITER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_buffer_queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_fdr_log_records.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>Index</name><operator>&gt;</operator> struct <name>SerializerImpl</name> <block>{
<expr><name>template</name> <operator>&lt;</operator><name>class</name> <name>Tuple</name></expr>,
<expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name><name>Index</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>void</name> <macro><name>serializeTo</name><argument_list>(<argument>char *Buffer</argument>,
<argument>Tuple &amp;&amp;T</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>P</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Index</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>constexpr</name> <name>auto</name> <name>Size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Index</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;
<expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>SerializerImpl</name><argument_list type="generic">&lt;<argument><expr><name>Index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serializeTo</name><argument_list>(<argument><expr><name>Buffer</name> <operator>+</operator> <name>Size</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Tuple</name></expr></argument>,
<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>Index</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>remove_reference</name><argument_list type="generic">&lt;
<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>serializeTo</name><argument_list>(<argument>char *</argument>, <argument>Tuple &amp;&amp;</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>Serializer</name> <init>= <expr><name><name>SerializerImpl</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Tuple</name></expr><operator>,</operator> <expr><name>size_t</name> <name>Index</name><operator>&gt;</operator> struct <name>AggregateSizesImpl</name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>value</name> <operator>=</operator>
sizeof<operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>Index</name></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator> <operator>+</operator>
<name><name>AggregateSizesImpl</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>, <argument><expr><name>Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Tuple</name><operator>&gt;</operator> struct <name><name>AggregateSizesImpl</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>value</name> <operator>=</operator>
sizeof<operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Tuple</name><operator>&gt;</operator> struct <name>AggregateSizes</name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>size_t</name> <name>value</name> <operator>=</operator>
<name><name>AggregateSizesImpl</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name> <name>Kind</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>DataTypes</name></expr></argument>&gt;</argument_list></name>
<name>MetadataRecord</name></type> <name>createMetadataRecord</name><argument_list>(<argument><expr><name>DataTypes</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Ds</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name><name>AggregateSizes</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>DataTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&lt;=</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Metadata payload longer than metadata buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MetadataRecord</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>RecordKind</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Serializer</name><operator>::</operator><call><name>serializeTo</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>Data</name></name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>DataTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ds</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FDRLogWriter</name> <block>{<block_content>
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <operator>&amp;</operator><name>Buffer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NextRecord</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>writeRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>FDRLogWriter</name><argument_list>(<argument><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>P</name></expr></argument>)</argument_list>
<range>: <expr><call><name>Buffer</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>NextRecord</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>explicit</name></type> <name>FDRLogWriter</name><argument_list>(<argument><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <operator>&amp;</operator><name>B</name></expr></argument>)</argument_list>
<range>: <macro><name>FDRLogWriter</name><argument_list>(<argument>B</argument>, <argument>static_cast&lt;char *&gt;(B.Data)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name> <name>Kind</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Data</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <macro><name>writeMetadata</name><argument_list>(<argument>Data &amp;&amp;... Ds</argument>)</argument_list></macro> <block>{



<expr><call><name>writeRecord</name><argument_list>(<argument><expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Data</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ds</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>N</name></expr></argument>&gt;</argument_list></name> <name>size_t</name></type> <name>writeMetadataRecords</name><argument_list>(<argument><expr><call><name>MetadataRecord</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Recs</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>constexpr</name> <specifier>auto</specifier></type> <name>Size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>N</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Recs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>FunctionRecordKind</name> <range>: <expr><name>uint8_t</name> <block>{
<expr><name>Enter</name> <operator>=</operator> <literal type="number">0x00</literal></expr>,
<expr><name>Exit</name> <operator>=</operator> <literal type="number">0x01</literal></expr>,
<expr><name>TailExit</name> <operator>=</operator> <literal type="number">0x02</literal></expr>,
<expr><name>EnterArg</name> <operator>=</operator> <literal type="number">0x03</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>writeFunction</name><parameter_list>(<parameter><decl><type><name>FunctionRecordKind</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>Delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FunctionRecord</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>RecordKind</name></name> <operator>=</operator> <call><name>uint8_t</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>FuncId</name></name> <operator>=</operator> <name>FuncId</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>TSCDelta</name></name> <operator>=</operator> <name>Delta</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writeRecord</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>writeFunctionWithArg</name><parameter_list>(<parameter><decl><type><name>FunctionRecordKind</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>Delta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Arg</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>FunctionRecord</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>RecordKind</name></name> <operator>=</operator> <call><name>uint8_t</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>FuncId</name></name> <operator>=</operator> <name>FuncId</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>TSCDelta</name></name> <operator>=</operator> <name>Delta</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MetadataRecord</name></type> <name>A</name> <init>=
<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>CallArgument</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>internal_memcpy</name><argument_list>(
<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>internal_memcpy</name><argument_list>(
<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>writeCustomEvent</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>Delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Event</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>EventSize</name></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>MetadataRecord</name></type> <name>R</name> <init>=
<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>CustomEventMarker</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>EventSize</name></expr></argument>, <argument><expr><name>Delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>internal_memcpy</name><argument_list>(
<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><name>Event</name></expr></argument>, <argument><expr><name>EventSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<name>EventSize</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>EventSize</name></expr></argument>,
<argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>writeTypedEvent</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>Delta</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>EventType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Event</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>EventSize</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>MetadataRecord</name></type> <name>R</name> <init>=
<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>TypedEventMarker</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>EventSize</name></expr></argument>, <argument><expr><name>Delta</name></expr></argument>, <argument><expr><name>EventType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>internal_memcpy</name><argument_list>(
<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>NextRecord</name></expr></argument>, <argument><expr><name>Event</name></expr></argument>, <argument><expr><name>EventSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<name>EventSize</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><name>EventSize</name></expr></argument>, <argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>char</name> <operator>*</operator><macro><name>getNextRecord</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NextRecord</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>resetRecord</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NextRecord</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>undoWrites</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>NextRecord</name> <operator>-</operator> <name>B</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NextRecord</name> <operator>-=</operator> <name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><name><name>Buffer</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>memory_order_acq_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
