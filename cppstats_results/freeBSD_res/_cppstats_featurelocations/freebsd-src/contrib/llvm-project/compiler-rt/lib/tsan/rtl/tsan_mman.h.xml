<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_mman.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MMAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_MMAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kDefaultAlignment</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>InitializeAllocator</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeAllocatorLate</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReplaceSystemMalloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AllocatorProcStart</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AllocatorProcFinish</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AllocatorPrintStats</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_alloc_internal</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>align</name> <init>= <expr><name>kDefaultAlignment</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signal</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>user_free</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signal</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_alloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_calloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_realloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_reallocarray</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_memalign</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>user_posix_memalign</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>align</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_valloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>user_pvalloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>user_alloc_usable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>invoke_malloc_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>invoke_free_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>MBlockType</name> <block>{
<decl><name>MBlockScopedBuf</name></decl>,
<decl><name>MBlockString</name></decl>,
<decl><name>MBlockStackTrace</name></decl>,
<decl><name>MBlockShadowStack</name></decl>,
<decl><name>MBlockSync</name></decl>,
<decl><name>MBlockClock</name></decl>,
<decl><name>MBlockThreadContex</name></decl>,
<decl><name>MBlockDeadInfo</name></decl>,
<decl><name>MBlockRacyStacks</name></decl>,
<decl><name>MBlockRacyAddresses</name></decl>,
<decl><name>MBlockAtExit</name></decl>,
<decl><name>MBlockFlag</name></decl>,
<decl><name>MBlockReport</name></decl>,
<decl><name>MBlockReportMop</name></decl>,
<decl><name>MBlockReportThread</name></decl>,
<decl><name>MBlockReportMutex</name></decl>,
<decl><name>MBlockReportLoc</name></decl>,
<decl><name>MBlockReportStack</name></decl>,
<decl><name>MBlockSuppression</name></decl>,
<decl><name>MBlockExpectRace</name></decl>,
<decl><name>MBlockSignal</name></decl>,
<decl><name>MBlockJmpBuf</name></decl>,


<decl><name>MBlockTypeCount</name></decl>
}</block>;</enum>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>internal_alloc</name><parameter_list>(<parameter><decl><type><name>MBlockType</name></type> <name>typ</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>internal_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DestroyAndFree</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
