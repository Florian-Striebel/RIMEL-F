<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/ubsan/ubsan_value.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UBSAN_VALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBSAN_VALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_INT128__</name></expr></cpp:if>
<macro><name>__extension__</name></macro> <typedef>typedef <type><name>__int128</name></type> <name>s128</name>;</typedef>
<macro><name>__extension__</name></macro> <typedef>typedef <type><name>unsigned</name> <name>__int128</name></type> <name>u128</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_INT128_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_INT128_T</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__ubsan</name> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INT128_T</name></expr></cpp:if>
<typedef>typedef <type><name>s128</name></type> <name>SIntMax</name>;</typedef>
<typedef>typedef <type><name>u128</name></type> <name>UIntMax</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>s64</name></type> <name>SIntMax</name>;</typedef>
<typedef>typedef <type><name>u64</name></type> <name>UIntMax</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>long</name> <name>double</name></type> <name>FloatMax</name>;</typedef>



<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>Line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>Column</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Filename</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>Line</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>Column</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<macro><name>SourceLocation</name><argument_list>(<argument>const char *Filename</argument>, <argument>unsigned Line</argument>, <argument>unsigned Column</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Filename</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Line</name><argument_list>(<argument><expr><name>Line</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Column</name><argument_list>(<argument>Column</argument>)</argument_list></macro> <expr><block>{}</block>


<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Filename</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>SourceLocation</name></type> <name>acquire</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>OldColumn</name> <init>= <expr><name>__sanitizer</name><operator>::</operator><call><name>atomic_exchange</name><argument_list>(
<argument><expr><operator>(</operator><name>__sanitizer</name><operator>::</operator><name>atomic_uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>Column</name></expr></argument>, <argument><expr><operator>~</operator><call><name>u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__sanitizer</name><operator>::</operator><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SourceLocation</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>, <argument><expr><name>Line</name></expr></argument>, <argument><expr><name>OldColumn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>isDisabled</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>Column</name> <operator>==</operator> <operator>~</operator><call><name>u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Filename</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Line</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Column</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>TypeDescriptor</name> <block>{<block_content>


<decl_stmt><decl><type><name>u16</name></type> <name>TypeKind</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>u16</name></type> <name>TypeInfo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name></type> <name><name>TypeName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{




<decl><name>TK_Integer</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>,



<decl><name>TK_Float</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>TK_Unknown</name> <init>= <expr><literal type="number">0xffff</literal></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TypeName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TypeKind</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isIntegerTy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TK_Integer</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSignedIntegerTy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isIntegerTy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>TypeInfo</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUnsignedIntegerTy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isIntegerTy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>TypeInfo</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getIntegerBitWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isIntegerTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>TypeInfo</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isFloatTy</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TK_Float</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getFloatBitWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isFloatTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TypeInfo</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<typedef>typedef <type><name>uptr</name></type> <name>ValueHandle</name>;</typedef>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getObjCClassName</name><parameter_list>(<parameter><decl><type><name>ValueHandle</name></type> <name>Pointer</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>class</name></type> <name>Value</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ValueHandle</name></type> <name>Val</name></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isInlineInt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isIntegerTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>unsigned</name> <name>InlineBits</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ValueHandle</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr>;
<expr><specifier>const</specifier> <name>unsigned</name> <name>Bits</name> <operator>=</operator> <call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntegerBitWidth</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>Bits</name> <operator>&lt;=</operator> <name>InlineBits</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isInlineFloat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isFloatTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>unsigned</name> <name>InlineBits</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ValueHandle</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr>;
<expr><specifier>const</specifier> <name>unsigned</name> <name>Bits</name> <operator>=</operator> <call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFloatBitWidth</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>Bits</name> <operator>&lt;=</operator> <name>InlineBits</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>
<macro><name>Value</name><argument_list>(<argument>const TypeDescriptor &amp;Type</argument>, <argument>ValueHandle Val</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Type</name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Val</name><argument_list>(<argument>Val</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>TypeDescriptor</name> <operator>&amp;</operator><macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Type</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>SIntMax</name> <macro><name>getSIntValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>UIntMax</name> <macro><name>getUIntValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>UIntMax</name> <macro><name>getPositiveIntValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isMinusOne</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSignedIntegerTy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getSIntValue</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNegative</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSignedIntegerTy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getSIntValue</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>FloatMax</name> <macro><name>getFloatValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
