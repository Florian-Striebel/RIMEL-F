<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_internal.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>address_sanitizer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SANITIZE_ADDRESS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The AddressSanitizer run-time should not be"</cpp:literal></cpp:error>
<expr_stmt><expr><literal type="string">" instrumented by AddressSanitizer"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_HAS_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_LOW_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_IOS</name> <operator>||</operator> <name>SANITIZER_ANDROID</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_LOW_MEMORY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_LOW_MEMORY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_DYNAMIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_DYNAMIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_DYNAMIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<name>namespace</name> <name>__asan</name> <block>{

<expr><name>class</name> <name>AsanThread</name></expr>;
<expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>StackTrace</name></expr>;

<expr><name>void</name> <call><name>AsanInitFromRtl</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>InitializePlatformExceptionHandlers</name><argument_list>()</argument_list></call></expr>;


<expr><name>bool</name> <macro><name>IsSystemHeapAddress</name><argument_list>(<argument>uptr addr</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <call><name>PrintAddressSpaceLayout</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <name>NORETURN</name> <call><name>ShowStatsAndAbort</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>InitializeShadowMemory</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>ReplaceSystemMalloc</name><argument_list>()</argument_list></call></expr>;


<expr><name>uptr</name> <call><name>FindDynamicShadowStart</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <operator>*</operator><call><name>AsanDoesNotSupportStaticLinkage</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>AsanCheckDynamicRTPrereqs</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>AsanCheckIncompatibleRT</name><argument_list>()</argument_list></call></expr>;



<expr><name>bool</name> <call><name>PlatformUnpoisonStacks</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <macro><name>UnpoisonStack</name><argument_list>(<argument>uptr bottom</argument>, <argument>uptr top</argument>, <argument>const char *type</argument>)</argument_list></macro></expr>;


<expr><name>AsanThread</name> <operator>*</operator><call><name>CreateMainThread</name><argument_list>()</argument_list></call></expr>;





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>globals_op_fptr</name>)<parameter_list>(<parameter><decl><type><name>__asan_global</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uptr</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<name>void</name> <macro><name>AsanApplyToGlobals</name><argument_list>(<argument>globals_op_fptr op</argument>, <argument>const void *needle</argument>)</argument_list></macro></block></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>AsanOnDeadlySignal</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>siginfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReadContextStack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>ssize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>StopInitOrderChecking</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AsanTSDInit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>AsanTSDGet</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AsanTSDSet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PlatformTSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AppendToErrorMessageBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>AsanDlSymNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>HandleDlopenInit</name><parameter_list>()</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_MALLOC_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_malloc_hook) __sanitizer_malloc_hook(ptr, size); RunMallocHooks(ptr, size); } while (false)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_FREE_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_free_hook) __sanitizer_free_hook(ptr); RunFreeHooks(ptr); } while (false)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_ON_ERROR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (&amp;__asan_on_error) __asan_on_error()</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>asan_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>asan_init_is_running</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>death_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanHeapLeftRedzoneMagic</name> <init>= <expr><literal type="number">0xfa</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanHeapFreeMagic</name> <init>= <expr><literal type="number">0xfd</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanStackLeftRedzoneMagic</name> <init>= <expr><literal type="number">0xf1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanStackMidRedzoneMagic</name> <init>= <expr><literal type="number">0xf2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanStackRightRedzoneMagic</name> <init>= <expr><literal type="number">0xf3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanStackAfterReturnMagic</name> <init>= <expr><literal type="number">0xf5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanInitializationOrderMagic</name> <init>= <expr><literal type="number">0xf6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanUserPoisonedMemoryMagic</name> <init>= <expr><literal type="number">0xf7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanContiguousContainerOOBMagic</name> <init>= <expr><literal type="number">0xfc</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanStackUseAfterScopeMagic</name> <init>= <expr><literal type="number">0xf8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanGlobalRedzoneMagic</name> <init>= <expr><literal type="number">0xf9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanInternalHeapMagic</name> <init>= <expr><literal type="number">0xfe</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanArrayCookieMagic</name> <init>= <expr><literal type="number">0xac</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanIntraObjectRedzone</name> <init>= <expr><literal type="number">0xbb</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanAllocaLeftMagic</name> <init>= <expr><literal type="number">0xca</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kAsanAllocaRightMagic</name> <init>= <expr><literal type="number">0xcb</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kCurrentStackFrameMagic</name> <init>= <expr><literal type="number">0x41B58AB3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRetiredStackFrameMagic</name> <init>= <expr><literal type="number">0x45E0360E</literal></expr></init></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
