<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_bytemap.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>u64</name> <name>kSize</name></expr></argument>, <argument><expr><name>typename</name> <name>AddressSpaceViewTy</name> <operator>=</operator> <name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FlatByteMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>map_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><name><name>map_</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>u8</name></type> <name>operator</name>[] <parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>map_</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>u8</name></type> <name><name>map_</name><index>[<expr><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>u64</name> <name>kSize1</name></expr></argument>, <argument><expr><name>u64</name> <name>kSize2</name></expr></argument>,
<argument><expr><name>typename</name> <name>AddressSpaceViewTy</name> <operator>=</operator> <name>LocalAddressSpaceView</name></expr></argument>,
<argument><expr><name>class</name> <name>MapUnmapCallback</name> <operator>=</operator> <name>NoOpMapUnmapCallback</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TwoLevelByteMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>map1_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map1_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mu_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TestOnlyUnmap</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kSize1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>Get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnUnmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kSize2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnmapOrDie</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kSize2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize1</name> <operator>*</operator> <name>kSize2</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>size1</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize1</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>size2</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize2</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kSize1</name> <operator>*</operator> <name>kSize2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>map2</name> <init>= <expr><call><name>GetOrCreate</name><argument_list>(<argument><expr><name>idx</name> <operator>/</operator> <name>kSize2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><name><name>map2</name><index>[<expr><name>idx</name> <operator>%</operator> <name>kSize2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map2</name><index>[<expr><name>idx</name> <operator>%</operator> <name>kSize2</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>u8</name></type> <name><name>operator</name><index>[]</index></name> <argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kSize1</name> <operator>*</operator> <name>kSize2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>map2</name> <init>= <expr><call><name>Get</name><argument_list>(<argument><expr><name>idx</name> <operator>/</operator> <name>kSize2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>value_ptr</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map2</name><index>[<expr><name>idx</name> <operator>%</operator> <name>kSize2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><name>value_ptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>Get</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kSize1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map1_</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>u8</name> <modifier>*</modifier></type><name>GetOrCreate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>Get</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mu_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>Get</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>MmapOrDie</name><argument_list>(<argument><expr><name>kSize2</name></expr></argument>, <argument><expr><literal type="string">"TwoLevelByteMap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kSize2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map1_</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name><name>map1_</name><index>[<expr><name>kSize1</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>mu_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</unit>
