<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_atomic_clang_mips.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ATOMIC_CLANG_MIPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ATOMIC_CLANG_MIPS_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>





<function><type><specifier>static</specifier> <name>void</name></type> <name>__spin_lock</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><name>lock</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></while></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__spin_unlock</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>__sync_lock_release</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>




<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">32</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>lock</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</struct>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_add</name><argument_list>(<argument>volatile atomic_uint64_t *ptr</argument>,
<argument>atomic_uint64_t::Type val</argument>,
<argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator>
<operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>ptr</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <name>ret</name></expr>;

<expr><call><name>__spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>ret</name> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <specifier>volatile</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;
<expr><name><name>ptr</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>ret</name> <operator>+</operator> <name>val</name></expr>;
<expr><call><name>__spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name>ret</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_sub</name><argument_list>(<argument>volatile atomic_uint64_t *ptr</argument>,
<argument>atomic_uint64_t::Type val</argument>,
<argument>memory_order mo</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><name>val</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>atomic_uint64_t</name> <operator>*</operator><name>ptr</name></expr></argument>,
<argument><expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <operator>*</operator><name>cmp</name></expr></argument>,
<argument><expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <name>xchg</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator>
<operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>ptr</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <name>Type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>Type</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Type</name> <specifier>volatile</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>xchg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>__spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <macro><name>atomic_load</name><argument_list>(<argument>const volatile atomic_uint64_t *ptr</argument>,
<argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator>
<operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>ptr</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <name>zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>volatile</specifier> <name>atomic_uint64_t</name> <operator>*</operator><name>Newptr</name> <operator>=</operator>
<call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>volatile</specifier> <name>atomic_uint64_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><name>Newptr</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>atomic_store</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>atomic_uint64_t</name> <operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>atomic_uint64_t</name><operator>::</operator><name>Type</name> <name>v</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator>
<operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>ptr</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
