<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingPort.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROFILE_INSTRPROFILING_PORT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_INSTRPROFILING_PORT_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIGNAS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_VISIBILITY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_WEAK</name></cpp:macro> <cpp:value>__declspec(selectany)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALLOCA</name></cpp:macro> <cpp:value>_alloca</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_FTRUNCATE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_chsize(_fileno(f),l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALWAYS_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_CLEANUP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_USED</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__GNUC__</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_FTRUNCATE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_chsize(fileno(f), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_VISIBILITY</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_WEAK</name></cpp:macro> <cpp:value>__attribute__((selectany))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_FTRUNCATE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ftruncate(fileno(f), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_VISIBILITY</name></cpp:macro> <cpp:value>__attribute__((visibility("hidden")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_WEAK</name></cpp:macro> <cpp:value>__attribute__((weak))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIGNAS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALLOCA</name></cpp:macro> <cpp:value>__builtin_alloca</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALWAYS_INLINE</name></cpp:macro> <cpp:value>inline __attribute((always_inline))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_CLEANUP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((cleanup(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_USED</name></cpp:macro> <cpp:value>__attribute__((used))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_SEG</name></cpp:macro> <cpp:value>"__DATA,"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_SEG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_SECTION</name><parameter_list>(<parameter><type><name>Sect</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(allocate(Sect))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_SECTION</name><parameter_list>(<parameter><type><name>Sect</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((section(Sect)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_MAX_HOSTLEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ORBIS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_GETHOSTNAME</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(Name), (void)(Len), (-1))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_GETHOSTNAME</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lprofGetHostName(Name, Len)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILER_RT_HAS_ATOMICS</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_BOOL_CMPXCHG</name><parameter_list>(<parameter><type><name>Ptr</name></type></parameter>, <parameter><type><name>OldV</name></type></parameter>, <parameter><type><name>NewV</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(InterlockedCompareExchange64((LONGLONG volatile *)Ptr, (LONGLONG)NewV, (LONGLONG)OldV) == (LONGLONG)OldV)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_PTR_FETCH_ADD</name><parameter_list>(<parameter><type><name>DomType</name></type></parameter>, <parameter><type><name>PtrVar</name></type></parameter>, <parameter><type><name>PtrIncr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DomType *)InterlockedExchangeAdd64((LONGLONG volatile *)&amp;PtrVar, (LONGLONG)sizeof(DomType) * PtrIncr)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_BOOL_CMPXCHG</name><parameter_list>(<parameter><type><name>Ptr</name></type></parameter>, <parameter><type><name>OldV</name></type></parameter>, <parameter><type><name>NewV</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(InterlockedCompareExchange((LONG volatile *)Ptr, (LONG)NewV, (LONG)OldV) == (LONG)OldV)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_PTR_FETCH_ADD</name><parameter_list>(<parameter><type><name>DomType</name></type></parameter>, <parameter><type><name>PtrVar</name></type></parameter>, <parameter><type><name>PtrIncr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DomType *)InterlockedExchangeAdd((LONG volatile *)&amp;PtrVar, (LONG)sizeof(DomType) * PtrIncr)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_BOOL_CMPXCHG</name><parameter_list>(<parameter><type><name>Ptr</name></type></parameter>, <parameter><type><name>OldV</name></type></parameter>, <parameter><type><name>NewV</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_bool_compare_and_swap(Ptr, OldV, NewV)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_PTR_FETCH_ADD</name><parameter_list>(<parameter><type><name>DomType</name></type></parameter>, <parameter><type><name>PtrVar</name></type></parameter>, <parameter><type><name>PtrIncr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DomType *)__sync_fetch_and_add((long *)&amp;PtrVar, sizeof(DomType) * PtrIncr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingUtil.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_BOOL_CMPXCHG</name><parameter_list>(<parameter><type><name>Ptr</name></type></parameter>, <parameter><type><name>OldV</name></type></parameter>, <parameter><type><name>NewV</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lprofBoolCmpXchg((void **)Ptr, OldV, NewV)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_PTR_FETCH_ADD</name><parameter_list>(<parameter><type><name>DomType</name></type></parameter>, <parameter><type><name>PtrVar</name></type></parameter>, <parameter><type><name>PtrIncr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DomType *)lprofPtrFetchAdd((void **)&amp;PtrVar, sizeof(DomType) * PtrIncr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEPARATOR</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEPARATOR_2</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEPARATOR</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DIR_SEPARATOR_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIR_SEPARATOR</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) == DIR_SEPARATOR)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIR_SEPARATOR</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>getpagesize</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>S</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetNativeSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>S</name><operator>.</operator><name>dwPageSize</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_ERR</name><parameter_list>(<parameter><type><name>Format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "LLVM Profile Error: " Format, __VA_ARGS__);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_WARN</name><parameter_list>(<parameter><type><name>Format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "LLVM Profile Warning: " Format, __VA_ARGS__);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NOTE</name><parameter_list>(<parameter><type><name>Format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "LLVM Profile Note: " Format, __VA_ARGS__);</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
