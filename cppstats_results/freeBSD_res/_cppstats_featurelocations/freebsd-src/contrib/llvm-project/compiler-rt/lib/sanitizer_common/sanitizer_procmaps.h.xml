<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_procmaps.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_PROCMAPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_PROCMAPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_MAC</name> <operator>||</operator> <name>SANITIZER_SOLARIS</name> <operator>||</operator> <name>SANITIZER_FUCHSIA</name></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_fuchsia.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_linux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kProtectionRead</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kProtectionWrite</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kProtectionExecute</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kProtectionShared</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<struct_decl>struct <name>MemoryMappedSegmentData</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryMappedSegment</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>MemoryMappedSegment</name><argument_list>(<argument>char *buff = nullptr</argument>, <argument>uptr size = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>filename</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>filename_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>data_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><macro><name>MemoryMappedSegment</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>IsReadable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>protection</name> <operator>&amp;</operator> <name>kProtectionRead</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsWritable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>protection</name> <operator>&amp;</operator> <name>kProtectionWrite</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsExecutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>protection</name> <operator>&amp;</operator> <name>kProtectionExecute</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsShared</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>protection</name> <operator>&amp;</operator> <name>kProtectionShared</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>AddAddressRanges</name><parameter_list>(<parameter><decl><type><name>LoadedModule</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uptr</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>filename_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>protection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleArch</name></type> <name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name><name>uuid</name><index>[<expr><name>kModuleUUIDSize</name></expr>]</index></name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MemoryMappingLayout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MemoryMappedSegmentData</name> <modifier>*</modifier></type><name>data_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryMappingLayout</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>MemoryMappingLayout</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>cache_enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>MemoryMappingLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>Next</name><parameter_list>(<parameter><decl><type><name>MemoryMappedSegment</name> <modifier>*</modifier></type><name>segment</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>Error</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CacheMemoryMappings</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>DumpListOfModules</name><parameter_list>(<parameter><decl><type><name><name>InternalMmapVectorNoCtor</name><argument_list type="generic">&lt;<argument><expr><name>LoadedModule</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>modules</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>LoadFromCache</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>MemoryMappingLayoutData</name></type> <name>data_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>bool</name></type> <name>GetCodeRangeForFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsDecimal</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>ParseDecimal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsHex</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>ParseHex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
