<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_atomic_clang.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ATOMIC_CLANG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ATOMIC_CLANG_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic_clang_x86.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic_clang_other.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>













<function><type><specifier>inline</specifier> <name>void</name></type> <name>atomic_signal_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>atomic_thread_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_add</name><argument_list>(<argument>volatile T *a</argument>,
<argument>typename T::Type v</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_sub</name><argument_list>(<argument>volatile T *a</argument>,
<argument>typename T::Type v</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>-</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_exchange</name><argument_list>(<argument>volatile T *a</argument>,
<argument>typename T::Type v</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>&amp;</operator> <operator>(</operator><name>memory_order_release</name> <operator>|</operator> <name>memory_order_acq_rel</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>v</name> <operator>=</operator> <call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_seq_cst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <operator>*</operator><name>cmp</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>xchg</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>Type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>Type</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>cmpv</name></expr></argument>, <argument><expr><name>xchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>a</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <operator>*</operator><name>cmp</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>xchg</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>xchg</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

}




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MIPS_SIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ABIO32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic_clang_mips.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ATOMIC_ORDER</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
