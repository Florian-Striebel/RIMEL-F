<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/int_types.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INT_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_TYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_endianness.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>si_int</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>si_int</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>int32_t</name></type> <name>si_int</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>su_int</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINT_MAX</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clzsi</name></cpp:macro> <cpp:value>__builtin_clz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctzsi</name></cpp:macro> <cpp:value>__builtin_ctz</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ULONG_MAX</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clzsi</name></cpp:macro> <cpp:value>__builtin_clzl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctzsi</name></cpp:macro> <cpp:value>__builtin_ctzl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> could not determine appropriate clzsi macro for this system</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int64_t</name></type> <name>di_int</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>du_int</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>di_int</name></type> <name>all</name></decl>;</decl_stmt>
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>su_int</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>si_int</name></type> <name>high</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>si_int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>su_int</name></type> <name>low</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>s</name></decl>;</struct>
}</block></union></type> <name>dwords</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>du_int</name></type> <name>all</name></decl>;</decl_stmt>
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>su_int</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>su_int</name></type> <name>high</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>su_int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>su_int</name></type> <name>low</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>s</name></decl>;</struct>
}</block></union></type> <name>udwords</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__wasm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRT_HAS_128BIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CRT_HAS_128BIT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name> <name>ti_int</name></type> <name>__attribute__</name>((<name>mode</name>(<name>TI</name>)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>tu_int</name></type> <name>__attribute__</name>((<name>mode</name>(<name>TI</name>)));</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>ti_int</name></type> <name>all</name></decl>;</decl_stmt>
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>du_int</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>di_int</name></type> <name>high</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>di_int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>low</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>s</name></decl>;</struct>
}</block></union></type> <name>twords</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>tu_int</name></type> <name>all</name></decl>;</decl_stmt>
<struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>du_int</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>high</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>du_int</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>low</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>s</name></decl>;</struct>
}</block></union></type> <name>utwords</name>;</typedef>

<function><type><specifier>static</specifier> <name>__inline</name> <name>ti_int</name></type> <name>make_ti</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>di_int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>twords</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>tu_int</name></type> <name>make_tu</name><parameter_list>(<parameter><decl><type><name>du_int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>utwords</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name><name>r</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRT_HAS_FLOATING_POINT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRT_HAS_FLOATING_POINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRT_HAS_FLOATING_POINT</name></expr></cpp:if>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>su_int</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
}</block></union></type> <name>float_bits</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>udwords</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
}</block></union></type> <name>double_bits</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>udwords</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>high</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>udwords</name></type> <name>high</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>low</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>uqwords</name>;</typedef>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_80_BIT_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__m68k__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_80_BIT_LONG_DOUBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_80_BIT_LONG_DOUBLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRT_HAS_FLOATING_POINT</name></expr></cpp:if>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>uqwords</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f</name></decl>;</decl_stmt>
}</block></union></type> <name>long_double_bits</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<typedef>typedef <type><name>float</name> <specifier>_Complex</specifier></type> <name>Fcomplex</name>;</typedef>
<typedef>typedef <type><name>double</name> <specifier>_Complex</specifier></type> <name>Dcomplex</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>Lcomplex</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__real__(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_IMAGINARY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__imag__(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>real</name></decl>, <name>imaginary</name>;</decl_stmt>
}</block></struct></type> <name>Fcomplex</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>real</name></decl>, <name>imaginary</name>;</decl_stmt>
}</block></struct></type> <name>Dcomplex</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>real</name></decl>, <name>imaginary</name>;</decl_stmt>
}</block></struct></type> <name>Lcomplex</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).real</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_IMAGINARY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).imaginary</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
