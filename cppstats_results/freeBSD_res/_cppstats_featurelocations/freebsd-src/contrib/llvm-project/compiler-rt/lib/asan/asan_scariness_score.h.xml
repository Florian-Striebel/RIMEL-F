<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_scariness_score.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_SCARINESS_SCORE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_SCARINESS_SCORE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>
<struct>struct <name>ScarinessScoreBase</name> <block>{
<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>Scare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>add_to_score</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>descr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_strlcat</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>internal_strlcat</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>add_to_score</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>int</name> <macro><name>GetScore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>score</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>descr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&amp;&amp;</operator> <call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>print_scariness</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"SCARINESS: %d (%s)\n"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintSimple</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScarinessScoreBase</name></type> <name>SSB</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>SSB</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>SSB</name><operator>.</operator><name>Scare</name></name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>SSB</name><operator>.</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>descr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>ScarinessScore</name></name></type> <range>: <expr><name>ScarinessScoreBase</name> <block>{
<macro><name>ScarinessScore</name><argument_list>()</argument_list></macro> <expr><block>{
<expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
