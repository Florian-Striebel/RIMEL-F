<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/scudo_platform.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_PLATFORM_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_PLATFORM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The Scudo hardened allocator is not supported on this platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_EXCLUSIVE_SUPPORTED</name></cpp:macro> <cpp:value>(!SANITIZER_ANDROID &amp;&amp; !SANITIZER_FUCHSIA)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_TSD_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name> <operator>||</operator> <name>SANITIZER_FUCHSIA</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_EXCLUSIVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_ANDROID</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_EXCLUSIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"No default TSD model defined for this platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_TSD_EXCLUSIVE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SCUDO_TSD_EXCLUSIVE_SUPPORTED</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The exclusive TSD model is not supported on this platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_SHARED_TSD_POOL_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_SHARED_TSD_POOL_SIZE</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_SHARED_TSD_POOL_SIZE</name></cpp:macro> <cpp:value>32U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_CAN_USE_PUBLIC_INTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CAN_USE_PUBLIC_INTERFACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_CAN_USE_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CAN_USE_HOOKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CAN_USE_HOOKS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__scudo</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CAN_USE_ALLOCATOR64</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SANITIZER_ANDROID</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocatorSize</name> <init>= <expr><literal type="number">0x4000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocatorSize</name> <init>= <expr><literal type="number">0x10000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>RegionSizeLog</name> <init>= <expr><ternary><condition><expr><name>SANITIZER_ANDROID</name></expr> ?</condition><then> <expr><literal type="number">19</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_SIZE_CLASS_MAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_SIZE_CLASS_MAP</name></cpp:macro> <cpp:value>Dense</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_CLASS_MAP_TYPE</name></cpp:macro> <cpp:value>SIZE_CLASS_MAP_TYPE_(SCUDO_SIZE_CLASS_MAP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_CLASS_MAP_TYPE_</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIZE_CLASS_MAP_TYPE__(T)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_CLASS_MAP_TYPE__</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T##SizeClassMap</cpp:value></cpp:define>

<typedef>typedef <type><name>SIZE_CLASS_MAP_TYPE</name></type> <name>SizeClassMap</name>;</typedef>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
