<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SUPPRESSIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SUPPRESSIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>Suppression</name> <block>{
<macro><name>Suppression</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>templ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name>hit_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>weight</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>SuppressionContext</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>SuppressionContext</name><argument_list>(<argument>const char *supprression_types[]</argument>,
<argument>int suppression_types_num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>ParseFromFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>Suppression</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>SuppressionCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasSuppressionType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Suppression</name> <modifier>*</modifier></type><name>SuppressionAt</name><argument_list>(<argument><expr><name>uptr</name> <name>i</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>GetMatched</name><parameter_list>(<parameter><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>Suppression</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>matched</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxSuppressionTypes</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>suppression_types_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>suppression_types_num_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>Suppression</name></expr></argument>&gt;</argument_list></name></type> <name>suppressions_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>has_suppression_type_</name><index>[<expr><name>kMaxSuppressionTypes</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>can_parse_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
