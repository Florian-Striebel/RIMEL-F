<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/adt.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_ADT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_ADT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>

<expr_stmt><expr><name>constexpr</name> <name>std</name><operator>::</operator><name>size_t</name> <name>dynamic_extent</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>Extent</name> <operator>=</operator> <name>dynamic_extent</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>span</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>T</name></type> <name>element_type</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>value_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>size_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>T</name> <modifier>*</modifier></type><name>pointer</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>const_pointer</name>;</typedef>
<typedef>typedef <type><name>T</name> <modifier>&amp;</modifier></type><name>reference</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>const_reference</name>;</typedef>

<typedef>typedef <type><name>pointer</name></type> <name>iterator</name>;</typedef>

<expr_stmt><expr><specifier>static</specifier> <name>constexpr</name> <name>std</name><operator>::</operator><name>size_t</name> <name>extent</name> <operator>=</operator> <name>Extent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>constexpr</name> <macro><name>span</name><argument_list>()</argument_list></macro> <name>noexcept</name> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>constexpr</name></type> <name>span</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator><name>first</name></expr></argument>, <argument><expr><name>size_type</name> <name>count</name></expr></argument>)</argument_list> <name>noexcept</name>
<range>: <expr><call><name>Data</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>Size</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name></type> <name>span</name><argument_list>(<argument><expr><call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>arr</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list> <name>noexcept</name> <range>: <expr><call><name>Data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>Size</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><name>constexpr</name> <name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name> <operator>+</operator> <name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>pointer</name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>reference</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_type</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name><name>Data</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>constexpr</name> <name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_type</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>string_view</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>char</name></type> <name>value_type</name>;</typedef>
<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>pointer</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>const_pointer</name>;</typedef>
<typedef>typedef <type><name>char</name> <modifier>&amp;</modifier></type><name>reference</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>char</name> <modifier>&amp;</modifier></type><name>const_reference</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>size_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>difference_type</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><name>const_pointer</name></type> <name>const_iterator</name>;</typedef>
<typedef>typedef <type><name>const_iterator</name></type> <name>iterator</name>;</typedef>

<expr_stmt><expr><name>constexpr</name> <macro><name>string_view</name><argument_list>()</argument_list></macro> <name>noexcept</name> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>constexpr</name></macro> <macro><name>string_view</name><argument_list>(<argument>const char *S</argument>, <argument>size_type Count</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Data</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Size</name><argument_list>(<argument>Count</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>string_view</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Size</name><argument_list>(<argument>strlen(S)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>constexpr</name> <name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name> <operator>+</operator> <name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>const_pointer</name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>constexpr</name> <name>const_reference</name></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>Data</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>constexpr</name> <name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>string_view</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>string_view</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name><name>LHS</name><operator>.</operator><name>Size</name></name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>LHS</name><operator>.</operator><name>Data</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name><name>LHS</name><operator>.</operator><name>Size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>LHS</name><operator>.</operator><name>Data</name><index>[<expr><name>I</name></expr>]</index></name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Data</name><index>[<expr><name>I</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>string_view</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>string_view</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_type</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>to_string</name><argument_list>(<argument>string_view SV</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>SV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>SV</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
