<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_interface_internal.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_INTERFACE_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERFACE_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_init_version.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>u32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>uptr</name></expr>;</expr_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>


<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_init</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_preinit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_version_mismatch_check_v1</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>void</name></type> <name>__memprof_record_access</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>void</name></type> <name>__memprof_record_access_range</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_print_accumulated_stats</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__memprof_default_options</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<specifier>extern</specifier> <name>uptr</name></type> <name>__memprof_shadow_memory_dynamic_address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>SANITIZER_WEAK_ATTRIBUTE</name> <specifier>extern</specifier> <name>char</name></type>
<name><name>__memprof_profile_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>int</name></type> <name>__memprof_profile_dump</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_load</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__memprof_store</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>void</name> <modifier>*</modifier></type><name>__memprof_memcpy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>void</name> <modifier>*</modifier></type><name>__memprof_memset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>void</name> <modifier>*</modifier></type><name>__memprof_memmove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
