<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_stack_trace.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_STACK_TRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_STACK_TRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>VarSizeStackTrace</name></name></type> <range>: <expr><name>public</name> <name>StackTrace</name> <block>{
<expr><name>uptr</name> <operator>*</operator><name>trace_buffer</name></expr>;

<expr><call><name>VarSizeStackTrace</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>VarSizeStackTrace</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>Init</name><argument_list>(<argument>const uptr *pcs</argument>, <argument>uptr cnt</argument>, <argument>uptr extra_top_pc = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;



<expr><name>void</name> <call><name>ReverseOrder</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>ResizeBuffer</name><argument_list>(<argument>uptr new_size</argument>)</argument_list></macro></expr>;

<expr><call><name>VarSizeStackTrace</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarSizeStackTrace</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>VarSizeStackTrace</name> <operator>&amp;</operator><operator>)</operator></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
