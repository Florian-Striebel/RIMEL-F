<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/scudo_allocator_secondary.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_SECONDARY_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_ALLOCATOR_SECONDARY_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file must be included inside scudo_allocator.h."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





























<decl_stmt><decl><type><name>namespace</name></type> <name>LargeChunk</name> <block>{<block_content>
<struct>struct <name>Header</name> <block>{
<decl_stmt><decl><type><name>ReservedAddressRange</name></type> <name>StoredRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommittedSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Size</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>constexpr</name> <name>uptr</name></type> <name>getHeaderSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Header</name> <modifier>*</modifier></type><name>getHeader</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name> <operator>-</operator> <call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Header</name> <modifier>*</modifier></type><name>getHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getHeader</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LargeMmapAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>Stats</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>UserSize</name> <init>= <expr><name>Size</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>ReservedSize</name> <init>= <expr><name>Size</name> <operator>+</operator> <name>LargeChunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>Alignment</name> <operator>&gt;</operator> <name>MinAlignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ReservedSize</name> <operator>+=</operator> <name>Alignment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PageSize</name> <init>= <expr><call><name>GetPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ReservedSize</name> <operator>=</operator> <call><name>RoundUpTo</name><argument_list>(<argument><expr><name>ReservedSize</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ReservedSize</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>PageSize</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ReservedAddressRange</name></type> <name>AddressRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ReservedBeg</name> <init>= <expr><call><name><name>AddressRange</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>ReservedSize</name></expr></argument>, <argument><expr><name>SecondaryAllocatorName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>ReservedBeg</name> <operator>==</operator> <operator>~</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>ReservedBeg</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ReservedEnd</name> <init>= <expr><name>ReservedBeg</name> <operator>+</operator> <name>ReservedSize</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uptr</name></type> <name>CommittedBeg</name> <init>= <expr><name>ReservedBeg</name> <operator>+</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>UserBeg</name> <init>= <expr><name>CommittedBeg</name> <operator>+</operator> <name>HeadersSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>UserEnd</name> <init>= <expr><name>UserBeg</name> <operator>+</operator> <name>UserSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommittedEnd</name> <init>= <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>UserEnd</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>Alignment</name> <operator>&gt;</operator> <name>MinAlignment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAligned</name><argument_list>(<argument><expr><name>UserBeg</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>UserBeg</name> <operator>=</operator> <call><name>RoundUpTo</name><argument_list>(<argument><expr><name>UserBeg</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CommittedBeg</name> <operator>=</operator> <call><name>RoundDownTo</name><argument_list>(<argument><expr><name>UserBeg</name> <operator>-</operator> <name>HeadersSize</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NewReservedBeg</name> <init>= <expr><name>CommittedBeg</name> <operator>-</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>NewReservedBeg</name></expr></argument>, <argument><expr><name>ReservedBeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SANITIZER_WINDOWS</name> <operator>&amp;&amp;</operator> <name>NewReservedBeg</name> <operator>!=</operator> <name>ReservedBeg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>AddressRange</name><operator>.</operator><name>Unmap</name></name><argument_list>(<argument><expr><name>ReservedBeg</name></expr></argument>, <argument><expr><name>NewReservedBeg</name> <operator>-</operator> <name>ReservedBeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ReservedBeg</name> <operator>=</operator> <name>NewReservedBeg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>UserEnd</name> <operator>=</operator> <name>UserBeg</name> <operator>+</operator> <name>UserSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CommittedEnd</name> <operator>=</operator> <call><name>RoundUpTo</name><argument_list>(<argument><expr><name>UserEnd</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NewReservedEnd</name> <init>= <expr><name>CommittedEnd</name> <operator>+</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>NewReservedEnd</name></expr></argument>, <argument><expr><name>ReservedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SANITIZER_WINDOWS</name> <operator>&amp;&amp;</operator> <name>NewReservedEnd</name> <operator>!=</operator> <name>ReservedEnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>AddressRange</name><operator>.</operator><name>Unmap</name></name><argument_list>(<argument><expr><name>NewReservedEnd</name></expr></argument>, <argument><expr><name>ReservedEnd</name> <operator>-</operator> <name>NewReservedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ReservedEnd</name> <operator>=</operator> <name>NewReservedEnd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>UserEnd</name></expr></argument>, <argument><expr><name>CommittedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CommittedSize</name> <init>= <expr><name>CommittedEnd</name> <operator>-</operator> <name>CommittedBeg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>CommittedBeg</name></expr></argument>, <argument><expr><call><name><name>AddressRange</name><operator>.</operator><name>Map</name></name><argument_list>(<argument><expr><name>CommittedBeg</name></expr></argument>, <argument><expr><name>CommittedSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Ptr</name> <init>= <expr><name>UserBeg</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LargeChunk</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name> <operator>=</operator> <name>LargeChunk</name><operator>::</operator><call><name>getHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>StoredRange</name></name> <operator>=</operator> <name>AddressRange</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>CommittedEnd</name> <operator>-</operator> <name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>CommittedSize</name></name> <operator>=</operator> <name>CommittedSize</name></expr>;</expr_stmt>




<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>StatsMutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatAllocated</name></expr></argument>, <argument><expr><name>CommittedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name>CommittedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>AllocatedBytes</name> <operator>+=</operator> <name>CommittedSize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LargestSize</name> <operator>&lt;</operator> <name>CommittedSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LargestSize</name> <operator>=</operator> <name>CommittedSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>NumberOfAllocs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>Stats</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>LargeChunk</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name> <operator>=</operator> <name>LargeChunk</name><operator>::</operator><call><name>getHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ReservedAddressRange</name></type> <name>AddressRange</name> <init>= <expr><name><name>H</name><operator>-&gt;</operator><name>StoredRange</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Size</name> <init>= <expr><name><name>H</name><operator>-&gt;</operator><name>CommittedSize</name></name></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>StatsMutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>-&gt;</operator><name>Sub</name></name><argument_list>(<argument><expr><name>AllocatorStatAllocated</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>-&gt;</operator><name>Sub</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FreedBytes</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumberOfFrees</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name><name>AddressRange</name><operator>.</operator><name>Unmap</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>AddressRange</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>AddressRange</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>GetActuallyAllocatedSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>LargeChunk</name><operator>::</operator><call><name>getHeader</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Stats: LargeMmapAllocator: allocated %zd times (%zd K), "</literal>
<literal type="string">"freed %zd times (%zd K), remains %zd (%zd K) max %zd M\n"</literal></expr></argument>,
<argument><expr><name>NumberOfAllocs</name></expr></argument>, <argument><expr><name>AllocatedBytes</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>NumberOfFrees</name></expr></argument>,
<argument><expr><name>FreedBytes</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>NumberOfAllocs</name> <operator>-</operator> <name>NumberOfFrees</name></expr></argument>,
<argument><expr><operator>(</operator><name>AllocatedBytes</name> <operator>-</operator> <name>FreedBytes</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>LargestSize</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uptr</name></type> <name>HeadersSize</name> <init>=
<expr><name>LargeChunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>StatsMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfAllocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfFrees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>AllocatedBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>FreedBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>LargestSize</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
