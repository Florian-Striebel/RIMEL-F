<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_utils.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_UTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zircon/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LogWriter</name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<macro><name>LogWriter</name><argument_list>(<argument>zx_handle_t Vmo</argument>)</argument_list></macro> : <macro><name>Vmo</name><argument_list>(<argument>Vmo</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>explicit</name></macro> <macro><name>LogWriter</name><argument_list>(<argument>int Fd</argument>)</argument_list></macro> : <macro><name>Fd</name><argument_list>(<argument>Fd</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>~</operator><call><name>LogWriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>WriteAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>LogWriter</name> <modifier>*</modifier></type><name>Open</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>LogWriter</name> <modifier>*</modifier></type><name>LogWriter</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<decl_stmt><decl><type><name>zx_handle_t</name></type> <name>Vmo</name> <init>= <expr><name>ZX_HANDLE_INVALID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>Fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>constexpr</name> <name>size_t</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>constexpr</name> <name>size_t</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>a</name> <operator>*</operator> <name>b</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>constexpr</name> <name>size_t</name></type> <name>nearest_boundary</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>multiple</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>multiple</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>number</name> <operator>/</operator> <name>multiple</name><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>number</name> <operator>%</operator> <name>multiple</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>constexpr</name> <name>size_t</name></type> <name>next_pow2_helper</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>acc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>acc</name><operator>)</operator> <operator>&gt;=</operator> <name>num</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>acc</name><operator>)</operator></expr> </then><else>: <expr><call><name>next_pow2_helper</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>acc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>constexpr</name> <name>size_t</name></type> <name>next_pow2</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>next_pow2_helper</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>constexpr</name> <name>T</name> <modifier>&amp;</modifier></type><name>max</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>constexpr</name> <name>T</name> <modifier>&amp;</modifier></type><name>min</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;=</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>constexpr</name> <name>ptrdiff_t</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
