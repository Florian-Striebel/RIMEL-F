<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_TYPE_TRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_TYPE_TRAITS_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>true_type</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>false_type</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>










<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>is_same</name> <range>: <expr><name>public</name> <name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>public</name> <name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>










<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>B</name></expr><operator>,</operator> <expr><name>class</name> <name>T</name></expr><operator>,</operator> <expr><name>class</name> <name>F</name><operator>&gt;</operator>
struct <name>conditional</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>T</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name></expr><operator>,</operator> <expr><name>class</name> <name>F</name><operator>&gt;</operator>
struct <name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>F</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>F</name></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
