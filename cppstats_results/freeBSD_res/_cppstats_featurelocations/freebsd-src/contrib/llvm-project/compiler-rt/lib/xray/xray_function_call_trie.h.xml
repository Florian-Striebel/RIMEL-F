<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_function_call_trie.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_FUNCTION_CALL_TRIE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_FUNCTION_CALL_TRIE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_buffer_queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_profiling_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_segmented_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>


































































<decl_stmt><decl><type><name>class</name></type> <name>FunctionCallTrie</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct_decl>struct <name>Node</name>;</struct_decl>



<struct>struct <name>NodeIdPair</name> <block>{
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>NodePtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>FId</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>NodeIdPairArray</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>NodeIdPair</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>NodeIdPairAllocatorType</name> <init>= <expr><name>NodeIdPairArray</name><operator>::</operator><name>AllocatorType</name></expr></init></decl>;</decl_stmt>






<struct>struct <name>Node</name> <block>{
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeIdPairArray</name></type> <name>Callees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CallCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CumulativeLocalTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>FId</name></decl>;</decl_stmt>


}</block>;</struct>

<label><name>private</name>:</label>
<struct>struct <name>ShadowStackEntry</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>EntryTSC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>NodePtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>EntryCPU</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>NodeArray</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>RootArray</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>Node</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ShadowStackArray</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>ShadowStackEntry</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>


<struct>struct <name>Allocators</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>NodeAllocatorType</name> <init>= <expr><name>NodeArray</name><operator>::</operator><name>AllocatorType</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>RootAllocatorType</name> <init>= <expr><name>RootArray</name><operator>::</operator><name>AllocatorType</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ShadowStackAllocatorType</name> <init>= <expr><name>ShadowStackArray</name><operator>::</operator><name>AllocatorType</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>NodeAllocatorType</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><call><name>alignof</name><argument_list>(<argument><expr><name>NodeAllocatorType</name></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name>
<name>NodeAllocatorStorage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>RootAllocatorType</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><call><name>alignof</name><argument_list>(<argument><expr><name>RootAllocatorType</name></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name>
<name>RootAllocatorStorage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ShadowStackAllocatorType</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><call><name>alignof</name><argument_list>(<argument><expr><name>ShadowStackAllocatorType</name></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name>
<name>ShadowStackAllocatorStorage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>NodeIdPairAllocatorType</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><call><name>alignof</name><argument_list>(<argument><expr><name>NodeIdPairAllocatorType</name></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name>
<name>NodeIdPairAllocatorStorage</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>NodeAllocatorType</name> <modifier>*</modifier></type><name>NodeAllocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RootAllocatorType</name> <modifier>*</modifier></type><name>RootAllocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShadowStackAllocatorType</name> <modifier>*</modifier></type><name>ShadowStackAllocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeIdPairAllocatorType</name> <modifier>*</modifier></type><name>NodeIdPairAllocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Allocators</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Allocators</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Allocators</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Allocators</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Allocators</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>Buffers</name> <block>{
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <name>NodeBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <name>RootsBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <name>ShadowStackBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <name>NodeIdPairBuffer</name></expr>;</expr_stmt>
}</block>;</struct>

<function><type><name>explicit</name></type> <name>Allocators</name><parameter_list>(<parameter><decl><type><name>Buffers</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;NodeAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>NodeAllocatorType</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>NodeBuffer</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>NodeBuffer</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;RootAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>RootAllocatorType</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>RootsBuffer</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>RootsBuffer</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RootAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RootAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RootAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;ShadowStackAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ShadowStackAllocatorType</name><argument_list>(
<argument><expr><name><name>B</name><operator>.</operator><name>ShadowStackBuffer</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>ShadowStackBuffer</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ShadowStackAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ShadowStackAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>ShadowStackAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;NodeIdPairAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>NodeIdPairAllocatorType</name><argument_list>(
<argument><expr><name><name>B</name><operator>.</operator><name>NodeIdPairBuffer</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>NodeIdPairBuffer</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeIdPairAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeIdPairAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>NodeIdPairAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>explicit</name></type> <name>Allocators</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Max</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;NodeAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>NodeAllocatorType</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;RootAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>RootAllocatorType</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RootAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RootAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RootAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;ShadowStackAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ShadowStackAllocatorType</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ShadowStackAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ShadowStackAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>ShadowStackAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>new</name> <argument_list>(<argument>&amp;NodeIdPairAllocatorStorage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>NodeIdPairAllocatorType</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeIdPairAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeIdPairAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>NodeIdPairAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>Allocators</name><argument_list>(<argument>Allocators &amp;&amp;O</argument>)</argument_list></macro> <macro><name>XRAY_NEVER_INSTRUMENT</name></macro> <block>{<block_content>


<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeAllocatorStorage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>O</name><operator>.</operator><name>NodeAllocatorStorage</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeAllocatorType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RootAllocatorStorage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>O</name><operator>.</operator><name>RootAllocatorStorage</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RootAllocatorType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ShadowStackAllocatorStorage</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>O</name><operator>.</operator><name>ShadowStackAllocatorStorage</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShadowStackAllocatorType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeIdPairAllocatorStorage</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocatorStorage</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeIdPairAllocatorType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>NodeAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RootAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RootAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RootAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ShadowStackAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ShadowStackAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>ShadowStackAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeIdPairAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeIdPairAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>NodeIdPairAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>O</name><operator>.</operator><name>NodeAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>RootAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>ShadowStackAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>Allocators</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>Allocators</name> <operator>&amp;&amp;</operator><name>O</name><operator>)</operator> <name>XRAY_NEVER_INSTRUMENT</name> <block>{


<if_stmt><if>if <condition>(<expr><name>NodeAllocator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NodeAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>NodeAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></init></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>O</name><operator>.</operator><name>NodeAllocator</name></name></expr>)</condition> <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;NodeAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>NodeAllocatorType</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>NodeAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>NodeAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>NodeAllocator</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RootAllocator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>RootAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>RootAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>O</name><operator>.</operator><name>RootAllocator</name></name></expr>)</condition> <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;RootAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>RootAllocatorType</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>RootAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RootAllocator</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RootAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RootAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>RootAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>RootAllocator</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ShadowStackAllocator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ShadowStackAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>ShadowStackAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>O</name><operator>.</operator><name>ShadowStackAllocator</name></name></expr>)</condition> <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;ShadowStackAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>ShadowStackAllocatorType</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>ShadowStackAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ShadowStackAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ShadowStackAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>ShadowStackAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>ShadowStackAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ShadowStackAllocator</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NodeIdPairAllocator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NodeIdPairAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>NodeIdPairAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr>)</condition> <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>&amp;NodeIdPairAllocatorStorage</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>NodeIdPairAllocatorType</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NodeIdPairAllocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeIdPairAllocatorType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>NodeIdPairAllocatorStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>NodeIdPairAllocator</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<decl><name/>~<name>Allocators</name><argument_list>()</argument_list> <name>XRAY_NEVER_INSTRUMENT</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NodeAllocator</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NodeAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>NodeAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>RootAllocator</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>RootAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>RootAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ShadowStackAllocator</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ShadowStackAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>ShadowStackAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NodeIdPairAllocator</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NodeIdPairAllocator</name><operator>-&gt;</operator><name/></name>~<call><name>NodeIdPairAllocatorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl>
<decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>Allocators</name></type> <name>InitAllocators</name><parameter_list>()</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<return>return <expr><call><name>InitAllocatorsCustom</name><argument_list>(<argument><expr><call><name>profilingFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>per_thread_allocator_max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Allocators</name></type> <name>InitAllocatorsCustom</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Max</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<decl_stmt><decl><type><name>Allocators</name></type> <name>A</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>A</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Allocators</name></type>
<name>InitAllocatorsFromBuffers</name><argument_list>(<argument><expr><name>Allocators</name><operator>::</operator><name>Buffers</name> <operator>&amp;</operator><name>Bufs</name></expr></argument>)</argument_list> <name>XRAY_NEVER_INSTRUMENT</name> <block>{<block_content>
<function_decl><type><name>Allocators</name></type> <name>A</name><parameter_list>(<parameter><decl><type><name>Bufs</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><name>A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>NodeArray</name></type> <name>Nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RootArray</name></type> <name>Roots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShadowStackArray</name></type> <name>ShadowStack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NodeIdPairAllocatorType</name> <modifier>*</modifier></type><name>NodeIdPairAllocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>OverflowedFunctions</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>FunctionCallTrie</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Allocators</name> <operator>&amp;</operator><name>A</name></expr></argument>)</argument_list> <name>XRAY_NEVER_INSTRUMENT</name>
<range>: <expr><call><name>Nodes</name><argument_list>(<argument><expr><operator>*</operator><name><name>A</name><operator>.</operator><name>NodeAllocator</name></name></expr></argument>)</argument_list></call></expr></range></decl>,
<decl><type ref="prev"/><name>Roots</name><argument_list>(<argument><expr><operator>*</operator><name><name>A</name><operator>.</operator><name>RootAllocator</name></name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>ShadowStack</name><argument_list>(<argument><expr><operator>*</operator><name><name>A</name><operator>.</operator><name>ShadowStackAllocator</name></name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>NodeIdPairAllocator</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>OverflowedFunctions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><call><name>FunctionCallTrie</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FunctionCallTrie</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionCallTrie</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FunctionCallTrie</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FunctionCallTrie</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<macro><name>FunctionCallTrie</name><argument_list>(<argument>FunctionCallTrie &amp;&amp;O</argument>)</argument_list></macro> <label><name>XRAY_NEVER_INSTRUMENT</name>
:</label> <expr_stmt><expr><call><name>Nodes</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Roots</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Roots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ShadowStack</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>ShadowStack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NodeIdPairAllocator</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>OverflowedFunctions</name><argument_list>(<argument>O.OverflowedFunctions</argument>)</argument_list></macro> <expr><block>{}</block>

<name>FunctionCallTrie</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>FunctionCallTrie</name> <operator>&amp;&amp;</operator><name>O</name><operator>)</operator> <name>XRAY_NEVER_INSTRUMENT</name> <block>{
<expr><name>Nodes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>Roots</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Roots</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>ShadowStack</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>ShadowStack</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>NodeIdPairAllocator</name> <operator>=</operator> <name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr>;
<expr><name>OverflowedFunctions</name> <operator>=</operator> <name><name>O</name><operator>.</operator><name>OverflowedFunctions</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>FunctionCallTrie</name><argument_list>()</argument_list></macro> <name>XRAY_NEVER_INSTRUMENT</name> <block>{}</block>

<name>void</name> <macro><name>enterFunction</name><argument_list>(<argument>const int32_t FId</argument>, <argument>uint64_t TSC</argument>,
<argument>uint16_t CPU</argument>)</argument_list></macro> <name>XRAY_NEVER_INSTRUMENT</name> <block>{
<expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>FId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;



<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>OverflowedFunctions</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>OverflowedFunctions</name></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/>}</block_content>



if (UNLIKELY(ShadowStack.empty(</block></if></if_stmt>))</block></expr></expr_stmt>)</block_content> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>NewRoot</name> <operator>=</operator> <call><name><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name>NodeIdPairAllocator</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><name>FId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewRoot</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Roots</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>NewRoot</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Nodes</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ShadowStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>NewRoot</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Nodes</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Roots</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>OverflowedFunctions</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block>


DCHECK(!ShadowStack.empty(</block></decl>)</decl_stmt>)<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>TopNode</name> <init>= <expr><call><name><name>ShadowStack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>NodePtr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>TopNode</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>auto</name><operator>*</operator> <name>Callee</name> <operator>=</operator> <call><name><name>TopNode</name><operator>-&gt;</operator><name>Callees</name><operator>.</operator><name>find_element</name></name><argument_list>(
<argument><expr><index>[<expr><name>FId</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>NodeIdPair</name> <operator>&amp;</operator><name>NR</name><operator>)</operator> <block>{ <return>return <expr><name><name>NR</name><operator>.</operator><name>FId</name></name> <operator>==</operator> <name>FId</name></expr>;</return> }</block></expr></argument></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>Callee</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name><name>Callee</name><operator>-&gt;</operator><name>NodePtr</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ShadowStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name><name>Callee</name><operator>-&gt;</operator><name>NodePtr</name></name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>OverflowedFunctions</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>auto</name><operator>*</operator> <name>NewNode</name> <operator>=</operator> <call><name><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name>TopNode</name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name>NodeIdPairAllocator</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><name>FId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewNode</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>NewNode</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>TopNode</name><operator>-&gt;</operator><name>Callees</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>NewNode</name></expr></argument>, <argument><expr><name>FId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ShadowStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>NewNode</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>OverflowedFunctions</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
}

void <macro><name>exitFunction</name><argument_list>(<argument>int32_t FId</argument>, <argument>uint64_t TSC</argument>,
<argument>uint16_t CPU</argument>)</argument_list></macro> <macro><name>XRAY_NEVER_INSTRUMENT</name></macro> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>OverflowedFunctions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>OverflowedFunctions</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>CumulativeTreeTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name><name>ShadowStack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Top</name> <init>= <expr><call><name><name>ShadowStack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>TopNode</name> <init>= <expr><name><name>Top</name><operator>.</operator><name>NodePtr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>TopNode</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<decl_stmt><decl><type><name>uint64_t</name></type> <name>LocalTime</name> <init>=
<expr><ternary><condition><expr><name><name>Top</name><operator>.</operator><name>EntryTSC</name></name> <operator>&gt;</operator> <name>TSC</name></expr>
?</condition><then> <expr><operator>(</operator><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>Top</name><operator>.</operator><name>EntryTSC</name></name><operator>)</operator> <operator>+</operator> <name>TSC</name></expr>
</then><else>: <expr><name>TSC</name> <operator>-</operator> <name><name>Top</name><operator>.</operator><name>EntryTSC</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>TopNode</name><operator>-&gt;</operator><name>CallCount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TopNode</name><operator>-&gt;</operator><name>CumulativeLocalTime</name></name> <operator>+=</operator> <name>LocalTime</name> <operator>-</operator> <name>CumulativeTreeTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CumulativeTreeTime</name> <operator>+=</operator> <name>LocalTime</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ShadowStack</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>TopNode</name><operator>-&gt;</operator><name>FId</name></name> <operator>==</operator> <name>FId</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>

<expr_stmt><expr><specifier>const</specifier> <name>RootArray</name> <operator>&amp;</operator><macro><name>getRoots</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>XRAY_NEVER_INSTRUMENT</name> <block>{ <return>return <expr><name>Roots</name></expr>;</return> }</block></expr></expr_stmt>














<decl_stmt><decl><type><name>void</name></type> <name>deepCopyInto</name><argument_list>(<argument><expr><name>FunctionCallTrie</name> <operator>&amp;</operator><name>O</name></expr></argument>)</argument_list> const <name>XRAY_NEVER_INSTRUMENT</name> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name><name>O</name><operator>.</operator><name>getRoots</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<struct>struct <name>NodeAndParent</name> <block>{
<expr_stmt><expr><name>FunctionCallTrie</name><operator>::</operator><name>Node</name> <operator>*</operator><name>Node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FunctionCallTrie</name><operator>::</operator><name>Node</name> <operator>*</operator><name>NewNode</name></expr>;</expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>Stack</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>NodeAndParent</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>typename</name> <name>Stack</name><operator>::</operator><name>AllocatorType</name> <call><name>StackAllocator</name><argument_list>(
<argument><expr><call><name>profilingFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>stack_allocator_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>Stack</name></type> <name>DFSStack</name><parameter_list>(<parameter><decl><type><name>StackAllocator</name></type></decl></parameter>)</parameter_list>;</function_decl>

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>Root</name> <range>: <expr><call><name>getRoots</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>NewRoot</name> <init>= <expr><call><name><name>O</name><operator>.</operator><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Root</name><operator>-&gt;</operator><name>CallCount</name></name></expr></argument>,
<argument><expr><name><name>Root</name><operator>-&gt;</operator><name>CumulativeLocalTime</name></name></expr></argument>, <argument><expr><name><name>Root</name><operator>-&gt;</operator><name>FId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewRoot</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>O</name><operator>.</operator><name>Roots</name><operator>.</operator><name>Append</name></name><argument_list>(<argument><expr><name>NewRoot</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name><name>DFSStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>Root</name></expr></argument>, <argument><expr><name>NewRoot</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>DFSStack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NodeAndParent</name></type> <name>NP</name> <init>= <expr><call><name><name>DFSStack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>NP</name><operator>.</operator><name>Node</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>NP</name><operator>.</operator><name>NewNode</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>DFSStack</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>Callee</name> <range>: <expr><name><name>NP</name><operator>.</operator><name>Node</name><operator>-&gt;</operator><name>Callees</name></name></expr></range></decl></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>NewNode</name> <init>= <expr><call><name><name>O</name><operator>.</operator><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name><name>NP</name><operator>.</operator><name>NewNode</name></name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>Callee</name><operator>.</operator><name>NodePtr</name><operator>-&gt;</operator><name>CallCount</name></name></expr></argument>, <argument><expr><name><name>Callee</name><operator>.</operator><name>NodePtr</name><operator>-&gt;</operator><name>CumulativeLocalTime</name></name></expr></argument>,
<argument><expr><name><name>Callee</name><operator>.</operator><name>FId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewNode</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>NP</name><operator>.</operator><name>NewNode</name><operator>-&gt;</operator><name>Callees</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>NewNode</name></expr></argument>, <argument><expr><name><name>Callee</name><operator>.</operator><name>FId</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>DFSStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name><name>Callee</name><operator>.</operator><name>NodePtr</name></name></expr></argument>, <argument><expr><name>NewNode</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>void</name></type> <name>mergeInto</name><argument_list>(<argument><expr><name>FunctionCallTrie</name> <operator>&amp;</operator><name>O</name></expr></argument>)</argument_list> const <name>XRAY_NEVER_INSTRUMENT</name> <block>{<block_content>
<struct>struct <name>NodeAndTarget</name> <block>{
<expr_stmt><expr><name>FunctionCallTrie</name><operator>::</operator><name>Node</name> <operator>*</operator><name>OrigNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FunctionCallTrie</name><operator>::</operator><name>Node</name> <operator>*</operator><name>TargetNode</name></expr>;</expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>using</name></type> <name>Stack</name> <init>= <expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>NodeAndTarget</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>typename</name> <name>Stack</name><operator>::</operator><name>AllocatorType</name> <call><name>StackAllocator</name><argument_list>(
<argument><expr><call><name>profilingFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>stack_allocator_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>Stack</name></type> <name>DFSStack</name><parameter_list>(<parameter><decl><type><name>StackAllocator</name></type></decl></parameter>)</parameter_list>;</function_decl>

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>Root</name> <range>: <expr><call><name>getRoots</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>TargetRoot</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>R</name> <init>= <expr><call><name><name>O</name><operator>.</operator><name>Roots</name><operator>.</operator><name>find_element</name></name><argument_list>(
<argument><expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>Node</name> <operator>*</operator><name>Node</name><operator>)</operator> <block>{ <return>return <expr><name><name>Node</name><operator>-&gt;</operator><name>FId</name></name> <operator>==</operator> <name><name>Root</name><operator>-&gt;</operator><name>FId</name></name></expr>;</return> }</block></expr></argument></argument_list></call></expr></init></decl></decl_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>
<if_stmt><if>if <condition>(<expr><name>R</name> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>TargetRoot</name> <operator>=</operator> <call><name><name>O</name><operator>.</operator><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>,
<argument><expr><name><name>Root</name><operator>-&gt;</operator><name>FId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>TargetRoot</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>Roots</name><operator>.</operator><name>Append</name></name><argument_list>(<argument><expr><name>TargetRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>TargetRoot</name> <operator>=</operator> <operator>*</operator><name>R</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>DFSStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>Root</name></expr></argument>, <argument><expr><name>TargetRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>DFSStack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NodeAndTarget</name></type> <name>NT</name> <init>= <expr><call><name><name>DFSStack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>NT</name><operator>.</operator><name>OrigNode</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>NT</name><operator>.</operator><name>TargetNode</name></name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>DFSStack</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>NT</name><operator>.</operator><name>TargetNode</name><operator>-&gt;</operator><name>CallCount</name></name> <operator>+=</operator> <name><name>NT</name><operator>.</operator><name>OrigNode</name><operator>-&gt;</operator><name>CallCount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NT</name><operator>.</operator><name>TargetNode</name><operator>-&gt;</operator><name>CumulativeLocalTime</name></name> <operator>+=</operator> <name><name>NT</name><operator>.</operator><name>OrigNode</name><operator>-&gt;</operator><name>CumulativeLocalTime</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>Callee</name> <range>: <expr><name><name>NT</name><operator>.</operator><name>OrigNode</name><operator>-&gt;</operator><name>Callees</name></name></expr></range></decl></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>TargetCallee</name> <init>= <expr><call><name><name>NT</name><operator>.</operator><name>TargetNode</name><operator>-&gt;</operator><name>Callees</name><operator>.</operator><name>find_element</name></name><argument_list>(
<argument><expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>FunctionCallTrie</name><operator>::</operator><name>NodeIdPair</name> <operator>&amp;</operator><name>C</name><operator>)</operator> <block>{
<return>return <expr><name><name>C</name><operator>.</operator><name>FId</name></name> <operator>==</operator> <name><name>Callee</name><operator>.</operator><name>FId</name></name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></init></decl></decl_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>
<if_stmt><if>if <condition>(<expr><name>TargetCallee</name> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>NewTargetNode</name> <init>= <expr><call><name><name>O</name><operator>.</operator><name>Nodes</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(
<argument><expr><name><name>NT</name><operator>.</operator><name>TargetNode</name></name></expr></argument>, <argument><expr><call><name>NodeIdPairArray</name><argument_list>(<argument><expr><operator>*</operator><name><name>O</name><operator>.</operator><name>NodeIdPairAllocator</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>, <argument><expr><literal type="number">0u</literal></expr></argument>,
<argument><expr><name><name>Callee</name><operator>.</operator><name>FId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewTargetNode</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>TargetCallee</name> <operator>=</operator>
<call><name><name>NT</name><operator>.</operator><name>TargetNode</name><operator>-&gt;</operator><name>Callees</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name>NewTargetNode</name></expr></argument>, <argument><expr><name><name>Callee</name><operator>.</operator><name>FId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>DFSStack</name><operator>.</operator><name>AppendEmplace</name></name><argument_list>(<argument><expr><name><name>Callee</name><operator>.</operator><name>NodePtr</name></name></expr></argument>, <argument><expr><name><name>TargetCallee</name><operator>-&gt;</operator><name>NodePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>
}
}
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
