<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_stats.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_STATS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_STATS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>




<struct>struct <name>MemprofStats</name> <block>{


<decl_stmt><decl><type><name>uptr</name></type> <name>mallocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>malloced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>malloced_overhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>frees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>freed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>real_frees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>really_freed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>reallocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>realloced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mmaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mmaped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>munmaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>munmaped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>malloc_large</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>malloced_by_size</name><index>[<expr><name>kNumberOfSizeClasses</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>explicit</name></type> <name>MemprofStats</name><parameter_list>(<parameter><decl><type><name>LinkerInitialized</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<expr_stmt><expr><call><name>MemprofStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Print</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MergeFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemprofStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>



<function_decl><type><name>MemprofStats</name> <modifier>&amp;</modifier></type><name>GetCurrentThreadStats</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>FlushToDeadThreadStats</name><parameter_list>(<parameter><decl><type><name>MemprofStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
