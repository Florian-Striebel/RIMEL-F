<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/dd/dd_rtl.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DD_RTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DD_RTL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_deadlock_detector_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_addrhashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dsan</name> <block>{<block_content>

<typedef>typedef <type><name>DDFlags</name></type> <name>Flags</name>;</typedef>

<struct>struct <name>Mutex</name> <block>{
<decl_stmt><decl><type><name>DDMutex</name></type> <name>dd</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Thread</name> <block>{
<decl_stmt><decl><type><name>DDPhysicalThread</name> <modifier>*</modifier></type><name>dd_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDLogicalThread</name> <modifier>*</modifier></type><name>dd_lt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ignore_interceptors</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>Callback</name></name></type> <name>final</name> <range>: <expr><name>public</name> <name>DDCallback</name> <block>{
<expr><name>Thread</name> <operator>*</operator><name>thr</name></expr>;

<expr><call><name>Callback</name><argument_list>(<argument><expr><name>Thread</name> <operator>*</operator><name>thr</name></expr></argument>)</argument_list></call></expr>;
<expr><name>u32</name> <macro><name>Unwind</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>Mutex</name></expr></argument>, <argument><expr><literal type="number">31051</literal></expr></argument>&gt;</argument_list></name></type> <name>MutexHashMap</name>;</typedef>

<struct>struct <name>Context</name> <block>{
<decl_stmt><decl><type><name>DDetector</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockingMutex</name></type> <name>report_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutexHashMap</name></type> <name>mutex_map</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>inline</specifier> <name>Flags</name><modifier>*</modifier></type> <name>flags</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>Flags</name></type> <name>flags</name></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeInterceptors</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ThreadInit</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadDestroy</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MutexBeforeLock</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>writelock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexAfterLock</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>writelock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>trylock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexBeforeUnlock</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>writelock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexDestroy</name><parameter_list>(<parameter><decl><type><name>Thread</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
