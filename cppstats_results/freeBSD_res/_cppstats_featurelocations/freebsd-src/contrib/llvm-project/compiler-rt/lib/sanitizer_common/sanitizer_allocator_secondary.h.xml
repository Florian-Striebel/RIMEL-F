<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>class</name></type> <name>LargeMmapAllocatorPtrArrayStatic</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>Init</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>p_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>EnsureSpace</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>kMaxNumChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxNumChunks</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>p_</name><index>[<expr><name>kMaxNumChunks</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>LargeMmapAllocatorPtrArrayDynamic</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><call><name><name>address_range_</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>kMaxNumChunks</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SecondaryAllocatorName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>EnsureSpace</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>kMaxNumChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name>n_reserved_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>n_reserved_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>address_range_</name><operator>.</operator><name>MapOrDie</name></name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>address_range_</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<name>n_reserved_</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>kChunksBlockCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_reserved_</name> <operator>+=</operator> <name>kChunksBlockCount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxNumChunks</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kChunksBlockCount</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReservedAddressRange</name></type> <name>address_range_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_reserved_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
<typedef>typedef <type><name>LargeMmapAllocatorPtrArrayStatic</name></type> <name>DefaultLargeMmapAllocatorPtrArray</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>LargeMmapAllocatorPtrArrayDynamic</name></type> <name>DefaultLargeMmapAllocatorPtrArray</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>MapUnmapCallback</name> <operator>=</operator> <name>NoOpMapUnmapCallback</name></expr></argument>,
<argument><expr><name>class</name> <name>PtrArrayT</name> <operator>=</operator> <name>DefaultLargeMmapAllocatorPtrArray</name></expr></argument>,
<argument><expr><name>class</name> <name>AddressSpaceViewTy</name> <operator>=</operator> <name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>LargeMmapAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>InitLinkerInitialized</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>page_size_</name> <operator>=</operator> <call><name>GetPageSizeCached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunks_</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ptr_array_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLinkerInitialized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsPowerOfTwo</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>map_size</name> <init>= <expr><call><name>RoundUpMapSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&gt;</operator> <name>page_size_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_size</name> <operator>+=</operator> <name>alignment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>map_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Report</name><argument_list>(<argument><expr><literal type="string">"WARNING: %s: LargeMmapAllocator allocation overflow: "</literal>
<literal type="string">"0x%zx bytes with 0x%zx alignment requested\n"</literal></expr></argument>,
<argument><expr><name>SanitizerToolName</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>map_beg</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>MmapOrDieOnFatalError</name><argument_list>(<argument><expr><name>map_size</name></expr></argument>, <argument><expr><name>SecondaryAllocatorName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map_beg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>map_beg</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><name>map_beg</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>map_end</name> <init>= <expr><name>map_beg</name> <operator>+</operator> <name>map_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>map_beg</name> <operator>+</operator> <name>page_size_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>alignment</name> <operator>-</operator> <operator>(</operator><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>map_beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>map_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>GetHeader</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name> <operator>=</operator> <name>map_beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>map_size</name></name> <operator>=</operator> <name>map_size</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size_log</name> <init>= <expr><call><name>MostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>size_log</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>by_size_log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ptr_array_</name><operator>.</operator><name>EnsureSpace</name></name><argument_list>(<argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><name>n_chunks_</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>chunk_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunks_</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chunks_sorted_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>n_allocs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>currently_allocated</name></name> <operator>+=</operator> <name>map_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>max_allocated</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>max_allocated</name></name></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>currently_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>by_size_log</name><index>[<expr><name>size_log</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatAllocated</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>GetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>chunk_idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>chunks_</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunks_</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>chunks_</name><index>[<expr><operator>--</operator><name>n_chunks_</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunks_</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>chunk_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chunks_sorted_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>n_frees</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>currently_allocated</name></name> <operator>-=</operator> <name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Sub</name></name><argument_list>(<argument><expr><name>AllocatorStatAllocated</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Sub</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnUnmap</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnmapOrDie</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>TotalMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>chunks_</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>chunk_idx</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>RoundUpMapSize</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PointerIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetBlockBegin</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>GetActuallyAllocatedSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><call><name>GetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>GetMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"%s: bad pointer %p\n"</literal></expr></argument>, <argument><expr><name>SanitizerToolName</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>GetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>nearest_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name>chunks_</name></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>ch</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>ch</name> <operator>&lt;</operator> <name>p</name> <operator>-</operator> <name>nearest_chunk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nearest_chunk</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nearest_chunk</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Header</name> <modifier>*</modifier></type><name>h</name> <init>=
<expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nearest_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier></type><name>h_ptr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nearest_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>nearest_chunk</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>nearest_chunk</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>nearest_chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>map_size</name></name> <operator>&lt;=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>GetUser</name><argument_list>(<argument><expr><name>h_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EnsureSortedChunks</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chunks_sorted_</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>LoadWritable</name><argument_list>(<argument><expr><name>chunks_</name></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Sort</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>AddressSpaceView</name><operator>::</operator><call><name>LoadWritable</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>chunk_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>chunks_sorted_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBeginFastLocked</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>mutex_</name><operator>.</operator><name>CheckLocked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n</name> <init>= <expr><name>n_chunks_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EnsureSortedChunks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name>chunks_</name></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>min_mmap_</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>max_mmap_</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>map_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>min_mmap_</name> <operator>||</operator> <name>p</name> <operator>&gt;=</operator> <name>max_mmap_</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>beg</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>beg</name> <operator>+</operator> <name>end</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>mid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>beg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>beg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier></type><name>h_ptr</name> <init>= <expr><name><name>chunks</name><index>[<expr><name>beg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>map_size</name></name> <operator>&lt;=</operator> <name>p</name> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>map_beg</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>GetUser</name><argument_list>(<argument><expr><name>h_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Stats: LargeMmapAllocator: allocated %zd times, "</literal>
<literal type="string">"remains %zd (%zd K) max %zd M; by size logs: "</literal></expr></argument>,
<argument><expr><name><name>stats</name><operator>.</operator><name>n_allocs</name></name></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>n_allocs</name></name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>n_frees</name></name></expr></argument>,
<argument><expr><name><name>stats</name><operator>.</operator><name>currently_allocated</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>max_allocated</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>by_size_log</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>c</name> <init>= <expr><name><name>stats</name><operator>.</operator><name>by_size_log</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"%zd:%zd; "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForceLock</name><parameter_list>()</parameter_list> ACQUIRE<parameter_list>(<parameter><decl><type><name>mutex_</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>mutex_</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceUnlock</name><parameter_list>()</parameter_list> RELEASE<parameter_list>(<parameter><decl><type><name>mutex_</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>mutex_</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>



<function><type><name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><name>ForEachChunkCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EnsureSortedChunks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Header</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>chunks</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name>chunks_</name></expr></argument>, <argument><expr><name>n_chunks_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Header</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetUser</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>chunk_idx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<label><name>private</name>:</label>
<struct>struct <name>Header</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>map_beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>map_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunk_idx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>Header</name> <modifier>*</modifier></type><name>GetHeader</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>page_size_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>Header</name> <modifier>*</modifier></type><name>GetHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetHeader</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetUser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>page_size_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>RoundUpMapSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>page_size_</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>page_size_</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>uptr</name></type> <name>page_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Header</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtrArrayT</name></type> <name>ptr_array_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_chunks_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>chunks_sorted_</name></decl>;</decl_stmt>
<struct>struct <name>Stats</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>n_allocs</name></decl>, <decl><type ref="prev"/><name>n_frees</name></decl>, <decl><type ref="prev"/><name>currently_allocated</name></decl>, <decl><type ref="prev"/><name>max_allocated</name></decl>, <decl><type ref="prev"/><name><name>by_size_log</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>stats</name></decl>;</struct>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>mutex_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</unit>
