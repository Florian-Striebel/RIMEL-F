<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_freebsd.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_FREEBSD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_FREEBSD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FREEBSD</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;osreldate.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> <operator>&lt;=</operator> <literal type="number">902001</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;link.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucontext.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__xuint64_t</name>;</typedef>

<typedef>typedef <type><name>__int32_t</name></type> <name>__xregister_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__xmcontext</name> <block>{
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_onstack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_gs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_edi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_esi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_ebp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_isp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_ebx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_edx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_ecx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_eax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_trapno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_eip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_eflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_esp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mc_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mc_fpformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mc_ownedfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name><name>mc_fpstate</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></type> <name>__aligned</name>(16</decl>);</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_fsbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_gsbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_xfpustate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xregister_t</name></type> <name>mc_xfpustate_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mc_spare2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>xmcontext_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__xucontext</name> <block>{
<decl_stmt><decl><type><name>sigset_t</name></type> <name>uc_sigmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmcontext_t</name></type> <name>uc_mcontext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>__ucontext</name></name> <modifier>*</modifier></type><name>uc_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stack_t</name></type> <name>uc_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uc_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>__spare__</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>xucontext_t</name>;</typedef>

<struct>struct <name>xkinfo_vmentry</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>kve_structsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xuint64_t</name></type> <name>kve_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xuint64_t</name></type> <name>kve_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xuint64_t</name></type> <name>kve_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xuint64_t</name></type> <name>kve_vn_fileid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>kve_vn_fsid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_resident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_private_resident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_protection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_ref_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_shadow_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kve_vn_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__xuint64_t</name></type> <name>kve_vn_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>kve_vn_rdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint16_t</name></type> <name>kve_vn_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint16_t</name></type> <name>kve_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>_kve_ispare</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>kve_path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_paddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_filesz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_memsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__uint32_t</name></type> <name>p_align</name></decl>;</decl_stmt>
}</block></struct></type> <name>XElf32_Phdr</name>;</typedef>

<struct>struct <name>xdl_phdr_info</name> <block>{
<decl_stmt><decl><type><name>Elf_Addr</name></type> <name>dlpi_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlpi_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>XElf32_Phdr</name> <modifier>*</modifier></type><name>dlpi_phdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Half</name></type> <name>dlpi_phnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>dlpi_adds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>dlpi_subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlpi_tls_modid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dlpi_tls_data</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>__xdl_iterate_hdr_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xdl_phdr_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>xdl_iterate_phdr_t</name><parameter_list>(<parameter><decl><type><name>__xdl_iterate_hdr_callback</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdl_iterate_phdr</name><parameter_list>(<parameter><type><name>callback</name></type></parameter>, <parameter><type><name>param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((xdl_iterate_phdr_t *)dl_iterate_phdr)((callback), (param)))</cpp:value></cpp:define>


</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
