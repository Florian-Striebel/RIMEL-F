<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/scudo_allocator_combined.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_COMBINED_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_ALLOCATOR_COMBINED_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file must be included inside scudo_allocator.h."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>CombinedAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name>PrimaryT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SecondaryAllocator</name> <init>= <expr><name>SecondaryT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AllocatorCache</name> <init>= <expr><name>typename</name> <name>PrimaryAllocator</name><operator>::</operator><name>AllocatorCache</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>ReleaseToOSIntervalMs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>ReleaseToOSIntervalMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>allocatePrimary</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Cache</name><operator>-&gt;</operator><name>Allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Primary</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>allocateSecondary</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Secondary</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>deallocatePrimary</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Cache</name><operator>-&gt;</operator><name>Deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Primary</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>deallocateSecondary</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>Deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Cache</name><operator>-&gt;</operator><name>Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Cache</name><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Primary</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>getStats</name><argument_list>(<argument><expr><name>AllocatorStatCounters</name> <name>StatType</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>StatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>printStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>PrintStats</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>PrintStats</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>PrimaryAllocator</name></type> <name>Primary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecondaryAllocator</name></type> <name>Secondary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatorGlobalStats</name></type> <name>Stats</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
