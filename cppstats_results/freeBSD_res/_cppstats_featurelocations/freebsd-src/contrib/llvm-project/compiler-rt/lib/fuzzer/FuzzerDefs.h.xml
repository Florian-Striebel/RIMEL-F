<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDefs.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>Min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>Max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>Random</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MutationDispatcher</name></decl>;</decl_stmt>
<struct_decl>struct <name>FuzzingOptions</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>InputCorpus</name></decl>;</decl_stmt>
<struct_decl>struct <name>InputInfo</name>;</struct_decl>
<struct_decl>struct <name>ExternalFunctions</name>;</struct_decl>


<decl_stmt><decl><type><specifier>extern</specifier> <name>ExternalFunctions</name> <modifier>*</modifier></type><name>EF</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>fuzzer_allocator</name><range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>fuzzer_allocator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>U</name></expr></argument>&gt;</argument_list></name>
<macro><name>fuzzer_allocator</name><argument_list>(<argument>const fuzzer_allocator&lt;U&gt;&amp;</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Other</name></expr></argument>&gt;</argument_list></name>
struct <name>rebind</name> <block>{ <typedef>typedef <type><name><name>fuzzer_allocator</name><argument_list type="generic">&lt;<argument><expr><name>Other</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef> }</block></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>Vector</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>fuzzer_allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>Set</name> <init>= <expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>fuzzer_allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>Unit</name>;</typedef>
<typedef>typedef <type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Unit</name></expr></argument>&gt;</argument_list></name></type> <name>UnitVector</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>UserCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>FuzzerDriver</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>UserCallback</name></type> <name>Callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ExtraCountersBegin</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ExtraCountersEnd</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ClearExtraCounters</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>RunningUserCallback</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
