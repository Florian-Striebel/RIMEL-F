<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/macho_platform.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_MACHO_PLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_MACHO_PLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor_address.h"</cpp:file></cpp:include>


<function_decl><type><name>ORC_RT_INTERFACE</name> <name>int</name></type> <name>__orc_rt_macho_cxa_atexit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dso_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ORC_RT_INTERFACE</name> <name>void</name></type> <name>__orc_rt_macho_cxa_finalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dso_handle</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ORC_RT_INTERFACE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__orc_rt_macho_jit_dlerror</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>ORC_RT_INTERFACE</name> <name>void</name> <modifier>*</modifier></type><name>__orc_rt_macho_jit_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ORC_RT_INTERFACE</name> <name>int</name></type> <name>__orc_rt_macho_jit_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dso_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ORC_RT_INTERFACE</name> <name>void</name> <modifier>*</modifier></type><name>__orc_rt_macho_jit_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dso_handle</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>macho</name> <block>{<block_content>

<struct>struct <name>MachOPerObjectSectionsToRegister</name> <block>{
<decl_stmt><decl><type><name>ExecutorAddressRange</name></type> <name>EHFrameSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExecutorAddressRange</name></type> <name>ThreadDataSection</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>MachOJITDylibInitializers</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SectionList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ExecutorAddressRange</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MachOJITDylibInitializers</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>MachOJITDylibInitializers</name><argument_list>(<argument>std::string Name</argument>,
<argument>ExecutorAddress MachOHeaderAddress</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>MachOHeaderAddress</name><argument_list>(<argument>std::move(MachOHeaderAddress)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ExecutorAddress</name></type> <name>MachOHeaderAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExecutorAddress</name></type> <name>ObjCImageInfoAddress</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>SectionList</name></expr></argument>&gt;</argument_list></name> <name>InitSections</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>MachOJITDylibDeinitializers</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>MachOJITDylibInitializerSequence</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MachOJITDylibInitializers</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>MachOJITDylibDeinitializerSequence</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MachOJITDylibDeinitializers</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<enum>enum <name>dlopen_mode</name> : <type><name>int</name></type> <block>{
<decl><name>ORC_RT_RTLD_LAZY</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>ORC_RT_RTLD_NOW</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>ORC_RT_RTLD_LOCAL</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>ORC_RT_RTLD_GLOBAL</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSMachOPerObjectSectionsToRegister</name> <init>=
<expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddressRange</name></expr></argument>, <argument><expr><name>SPSExecutorAddressRange</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSMachOPerObjectSectionsToRegister</name></expr></argument>,
<argument><expr><name>macho</name><operator>::</operator><name>MachOPerObjectSectionsToRegister</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>MachOPerObjectSectionsToRegister</name> <operator>&amp;</operator><name>MOPOSR</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOPerObjectSectionsToRegister</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>size</name><argument_list>(
<argument><expr><name><name>MOPOSR</name><operator>.</operator><name>EHFrameSection</name></name></expr></argument>, <argument><expr><name><name>MOPOSR</name><operator>.</operator><name>ThreadDataSection</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>MachOPerObjectSectionsToRegister</name> <operator>&amp;</operator><name>MOPOSR</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOPerObjectSectionsToRegister</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>serialize</name><argument_list>(
<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>MOPOSR</name><operator>.</operator><name>EHFrameSection</name></name></expr></argument>, <argument><expr><name><name>MOPOSR</name><operator>.</operator><name>ThreadDataSection</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>,
<argument><expr><name>macho</name><operator>::</operator><name>MachOPerObjectSectionsToRegister</name> <operator>&amp;</operator><name>MOPOSR</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOPerObjectSectionsToRegister</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>deserialize</name><argument_list>(
<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>MOPOSR</name><operator>.</operator><name>EHFrameSection</name></name></expr></argument>, <argument><expr><name><name>MOPOSR</name><operator>.</operator><name>ThreadDataSection</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSNamedExecutorAddressRangeSequenceMap</name> <init>=
<expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>, <argument><expr><name>SPSExecutorAddressRangeSequence</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSMachOJITDylibInitializers</name> <init>=
<expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>,
<argument><expr><name>SPSNamedExecutorAddressRangeSequenceMap</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSMachOJITDylibInitializerSequence</name> <init>=
<expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name>SPSMachOJITDylibInitializers</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSMachOJITDylibInitializers</name></expr></argument>,
<argument><expr><name>macho</name><operator>::</operator><name>MachOJITDylibInitializers</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>MachOJITDylibInitializers</name> <operator>&amp;</operator><name>MOJDIs</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOJITDylibInitializers</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>size</name><argument_list>(
<argument><expr><name><name>MOJDIs</name><operator>.</operator><name>Name</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>MachOHeaderAddress</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>ObjCImageInfoAddress</name></name></expr></argument>,
<argument><expr><name><name>MOJDIs</name><operator>.</operator><name>InitSections</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>macho</name><operator>::</operator><name>MachOJITDylibInitializers</name> <operator>&amp;</operator><name>MOJDIs</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOJITDylibInitializers</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>serialize</name><argument_list>(
<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>Name</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>MachOHeaderAddress</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>ObjCImageInfoAddress</name></name></expr></argument>,
<argument><expr><name><name>MOJDIs</name><operator>.</operator><name>InitSections</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>,
<argument><expr><name>macho</name><operator>::</operator><name>MachOJITDylibInitializers</name> <operator>&amp;</operator><name>MOJDIs</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>SPSMachOJITDylibInitializers</name><operator>::</operator><name>AsArgList</name><operator>::</operator><call><name>deserialize</name><argument_list>(
<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>Name</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>MachOHeaderAddress</name></name></expr></argument>, <argument><expr><name><name>MOJDIs</name><operator>.</operator><name>ObjCImageInfoAddress</name></name></expr></argument>,
<argument><expr><name><name>MOJDIs</name><operator>.</operator><name>InitSections</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
