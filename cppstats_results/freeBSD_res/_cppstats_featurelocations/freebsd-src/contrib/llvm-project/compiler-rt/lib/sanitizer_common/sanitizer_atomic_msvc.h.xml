<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_atomic_msvc.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ATOMIC_MSVC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ATOMIC_MSVC_H</name></cpp:macro></cpp:define>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>_ReadWriteBarrier</name><parameter_list>()</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_ReadWriteBarrier</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>_mm_mfence</name><parameter_list>()</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_mm_mfence</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>_mm_pause</name><parameter_list>()</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_mm_pause</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>char</name></type> <name>_InterlockedExchange8</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedExchange8</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>short</name></type> <name>_InterlockedExchange16</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedExchange16</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>long</name></type> <name>_InterlockedExchange</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedExchange</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedExchangeAdd</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>char</name></type> <name>_InterlockedCompareExchange8</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Destination</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>Exchange</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>Comparand</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedCompareExchange8</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>short</name></type> <name>_InterlockedCompareExchange16</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Destination</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>Exchange</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>Comparand</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedCompareExchange16</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>long</name> <name>long</name></type> <name>_InterlockedCompareExchange64</name><parameter_list>(
<parameter><decl><type><name>long</name> <name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Destination</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>Comparand</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedCompareExchange64</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name> <modifier>*</modifier></type><name>_InterlockedCompareExchangePointer</name><parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type><name>Destination</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Exchange</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Comparand</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedCompareExchangePointer</name><name>)</name></cpp:pragma>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>long</name> <name>__cdecl</name></type> <name>_InterlockedCompareExchange</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>Exchange</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>Comparand</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedCompareExchange</name><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>long</name> <name>long</name></type> <name>_InterlockedExchangeAdd64</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>long</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_InterlockedExchangeAdd64</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>atomic_signal_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_ReadWriteBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>atomic_thread_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_mm_mfence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>proc_yield</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_mm_pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_load</name><argument_list>(
<argument>const volatile T *a</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator> <operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_consume</name>
<operator>|</operator> <name>memory_order_acquire</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>v</name></expr>;

<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><call><name>atomic_signal_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_signal_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return v</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>atomic_store</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>v</name></expr></argument>, <argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator> <operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name>
<operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>atomic_signal_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_signal_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_seq_cst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>atomic_fetch_add</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>u32</name><operator>)</operator><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>atomic_fetch_add</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>atomic_fetch_sub</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>u32</name><operator>)</operator><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>atomic_fetch_sub</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u8</name></type> <name>atomic_exchange</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u8</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>u8</name><operator>)</operator><call><name>_InterlockedExchange8</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u16</name></type> <name>atomic_exchange</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u16</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>u16</name><operator>)</operator><call><name>_InterlockedExchange16</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>short</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>atomic_exchange</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>u32</name><operator>)</operator><call><name>_InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>,
<parameter><decl><type><name>u8</name></type> <name>xchgv</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u8</name></type> <name>prev</name> <init>= <expr><operator>(</operator><name>u8</name><operator>)</operator><call><name>_InterlockedCompareExchange8</name><argument_list>(
<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>xchgv</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>cmpv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>u8</name></type> <name>prev</name></decl>;</decl_stmt>
<asm>__asm {
<asm>mov al, cmpv</asm>
<asm>mov ecx, a</asm>
<asm>mov dl, xchgv</asm>
<asm>lock cmpxchg [ecx], dl</asm>
<asm>mov prev, al</asm>
}</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uintptr_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>xchg</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>prev</name> <init>= <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>_InterlockedCompareExchangePointer</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>xchg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>cmpv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u16</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>,
<parameter><decl><type><name>u16</name></type> <name>xchg</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u16</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>prev</name> <init>= <expr><operator>(</operator><name>u16</name><operator>)</operator><call><name>_InterlockedCompareExchange16</name><argument_list>(
<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>short</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><name>xchg</name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><name>cmpv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>xchg</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><operator>(</operator><name>u32</name><operator>)</operator><call><name>_InterlockedCompareExchange</name><argument_list>(
<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>xchg</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>cmpv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>,
<parameter><decl><type><name>u64</name></type> <name>xchg</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>mo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>cmpv</name> <init>= <expr><operator>*</operator><name>cmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>prev</name> <init>= <expr><operator>(</operator><name>u64</name><operator>)</operator><call><name>_InterlockedCompareExchange64</name><argument_list>(
<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>long</name> <name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>xchg</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>cmpv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>cmpv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cmp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>a</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <operator>*</operator><name>cmp</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>xchg</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>mo</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>xchg</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
