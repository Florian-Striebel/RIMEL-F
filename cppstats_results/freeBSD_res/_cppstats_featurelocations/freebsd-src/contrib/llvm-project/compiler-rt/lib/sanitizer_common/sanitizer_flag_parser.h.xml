<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_FLAG_REGISTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_FLAG_REGISTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FlagHandlerBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>virtual</name> <name>bool</name></type> <name>Parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>



<function><type><name>virtual</name> <name>bool</name></type> <name>Format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>FlagHandlerBase</name><argument_list>()</argument_list></macro> <block>{}</block>

<specifier>inline</specifier> <name>bool</name> <macro><name>FormatString</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>, <argument>const char *str_to_use</argument>)</argument_list></macro> <block>{
<expr><name>uptr</name> <name>num_symbols_should_write</name> <operator>=</operator>
<call><name>internal_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str_to_use</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_symbols_should_write</name> <operator>&lt;</operator> <name>size</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>FlagHandler</name></type> <name>final</name> <range>: <expr><name>public</name> <name>FlagHandlerBase</name> <block>{
<expr><name>T</name> <operator>*</operator><name>t_</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>FlagHandler</name><argument_list>(<argument><expr><name>T</name> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>t_</name><argument_list>(<argument>t</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <name>final</name></expr>;
<expr><name>bool</name> <macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <name>final</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>ParseBool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>ParseBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>t_</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Invalid value for bool option: '%s'\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>FormatString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>*</operator><name>t_</name> <operator>?</operator> <literal type="string">"true"</literal> <operator>:</operator> <literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>HandleSignalMode</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<expr><name>bool</name> <name>b</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name>ParseBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t_</name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>kHandleSignalYes</name></expr> </then><else>: <expr><name>kHandleSignalNo</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>internal_strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"exclusive"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t_</name> <operator>=</operator> <name>kHandleSignalExclusive</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Invalid value for signal handler option: '%s'\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>HandleSignalMode</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<expr><name>uptr</name> <name>num_symbols_should_write</name> <operator>=</operator> <call><name>internal_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t_</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_symbols_should_write</name> <operator>&lt;</operator> <name>size</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<expr><operator>*</operator><name>t_</name> <operator>=</operator> <name>value</name></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>FormatString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>*</operator><name>t_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value_end</name></expr>;
<expr><operator>*</operator><name>t_</name> <operator>=</operator> <call><name>internal_simple_strtoll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <name>ok</name> <operator>=</operator> <operator>*</operator><name>value_end</name> <operator>==</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Invalid value for int option: '%s'\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<expr><name>uptr</name> <name>num_symbols_should_write</name> <operator>=</operator> <call><name>internal_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t_</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_symbols_should_write</name> <operator>&lt;</operator> <name>size</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value_end</name></expr>;
<expr><operator>*</operator><name>t_</name> <operator>=</operator> <call><name>internal_simple_strtoll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <name>ok</name> <operator>=</operator> <operator>*</operator><name>value_end</name> <operator>==</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Invalid value for uptr option: '%s'\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<expr><name>uptr</name> <name>num_symbols_should_write</name> <operator>=</operator> <call><name>internal_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t_</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_symbols_should_write</name> <operator>&lt;</operator> <name>size</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>s64</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Parse</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value_end</name></expr>;
<expr><operator>*</operator><name>t_</name> <operator>=</operator> <call><name>internal_simple_strtoll</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <name>ok</name> <operator>=</operator> <operator>*</operator><name>value_end</name> <operator>==</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Invalid value for s64 option: '%s'\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
<specifier>inline</specifier> <name>bool</name> <name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>s64</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>Format</name><argument_list>(<argument>char *buffer</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{
<expr><name>uptr</name> <name>num_symbols_should_write</name> <operator>=</operator> <call><name>internal_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t_</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>num_symbols_should_write</name> <operator>&lt;</operator> <name>size</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FlagParser</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxFlags</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Flag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FlagHandlerBase</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>flags_</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n_flags_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>pos_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FlagParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>RegisterHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>FlagHandlerBase</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ParseString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ParseStringFromEnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ParseFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_missing</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintFlagDescriptions</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>LowLevelAllocator</name></type> <name>Alloc</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>fatal_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>is_space</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>skip_whitespace</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parse_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_option_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parse_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_option_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>run_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ll_strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>RegisterFlag</name><parameter_list>(<parameter><decl><type><name>FlagParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>fh</name> <init>= <macro><name>new</name> <argument_list>(<argument>FlagParser::Alloc</argument>)</argument_list></macro> <expr><call><name><name>FlagHandler</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>parser</name><operator>-&gt;</operator><name>RegisterHandler</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ReportUnrecognizedFlags</name><parameter_list>()</parameter_list>;</function_decl>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
