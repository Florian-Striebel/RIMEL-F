<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/atomic_flag_test_and_set_explicit.c">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_include</name><parameter_list>(<parameter><type><name>inc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>stdatomic</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atomic_flag_test_and_set_explicit</name></cpp:undef>
<function><type><name>_Bool</name></type> <name>atomic_flag_test_and_set_explicit</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
<parameter><decl><type><name>memory_order</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__c11_atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>object</name><operator>)</operator><operator>-&gt;</operator><name>_Value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
