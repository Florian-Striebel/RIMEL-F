<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/crt/crtbegin.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<macro><name>__attribute__</name><argument_list>(<argument>(visibility(<literal type="string">"hidden"</literal>))</argument>)</argument_list></macro> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>__dso_handle</name> <init>= <expr><operator>&amp;</operator><name>__dso_handle</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EH_USE_FRAME_REGISTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extension__</name> <specifier>static</specifier> <name>void</name> <modifier>*</modifier><name><name>__EH_FRAME_LIST__</name><index>[]</index></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>section</name><argument_list>(<argument><expr><literal type="string">".eh_frame"</literal></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__register_frame_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(weak</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>__deregister_frame_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(weak</function_decl>))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>fp</name> <name><name>__CTOR_LIST__</name><index>[]</index></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>section</name><argument_list>(<argument><expr><literal type="string">".ctors"</literal></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{<expr><operator>(</operator><name>fp</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>fp</name></type> <name><name>__CTOR_LIST_END__</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__cxa_finalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(weak</function_decl>))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>used</name><operator>)</operator></expr></argument>)</argument_list> <name>__do_init</name><argument_list>()</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>_Bool</name></type> <name>__initialized</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_expect</name><argument_list>(<argument><expr><name>__initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EH_USE_FRAME_REGISTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct><specifier>static</specifier> struct <block>{ <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>__object</name></decl>;</struct>
<if_stmt><if>if <condition>(<expr><name>__register_frame_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__register_frame_info</name><argument_list>(<argument><expr><name>__EH_FRAME_LIST__</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><name>__CTOR_LIST_END__</name> <operator>-</operator> <name>__CTOR_LIST__</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>__CTOR_LIST__</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(section(<literal type="string">".init_array"</literal>),
used)</argument>)</argument_list></macro> <function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>__do_init</name></expr></init>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .init,\"ax\",@progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_init\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .init,\"ax\",%progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_init\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .init,\"ax\",%progbits\n\t"
"bl " __USER_LABEL_PREFIX__ "__do_init\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .init,\"ax\",@progbits\n\t"
"bl " __USER_LABEL_PREFIX__ "__do_init\n\t"
"nop\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .init,\"ax\",@progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_init\n\t"
".popsection");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"crtbegin without .init_fini array unimplemented for this architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>fp</name> <name><name>__DTOR_LIST__</name><index>[]</index></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>section</name><argument_list>(<argument><expr><literal type="string">".dtors"</literal></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <init>= <expr><block>{<expr><operator>(</operator><name>fp</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>fp</name></type> <name><name>__DTOR_LIST_END__</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>used</name><operator>)</operator></expr></argument>)</argument_list> <name>__do_fini</name><argument_list>()</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>_Bool</name></type> <name>__finalized</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_expect</name><argument_list>(<argument><expr><name>__finalized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__finalized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>__cxa_finalize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__cxa_finalize</name><argument_list>(<argument><expr><name>__dso_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><name>__DTOR_LIST_END__</name> <operator>-</operator> <name>__DTOR_LIST__</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>__DTOR_LIST__</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EH_USE_FRAME_REGISTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>__deregister_frame_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__deregister_frame_info</name><argument_list>(<argument><expr><name>__EH_FRAME_LIST__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_INITFINI_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(section(<literal type="string">".fini_array"</literal>),
used)</argument>)</argument_list></macro> <function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__fini</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>__do_fini</name></expr></init>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .fini,\"ax\",@progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_fini\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .fini,\"ax\",%progbits\n\t"
"bl " __USER_LABEL_PREFIX__ "__do_fini\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .fini,\"ax\",@progbits\n\t"
"bl " __USER_LABEL_PREFIX__ "__do_fini\n\t"
"nop\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .fini,\"ax\",@progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_fini\n\t"
".popsection");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__(".pushsection .fini,\"ax\",@progbits\n\t"
"call " __USER_LABEL_PREFIX__ "__do_fini\n\t"
".popsection");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"crtbegin without .init_fini array unimplemented for this architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
