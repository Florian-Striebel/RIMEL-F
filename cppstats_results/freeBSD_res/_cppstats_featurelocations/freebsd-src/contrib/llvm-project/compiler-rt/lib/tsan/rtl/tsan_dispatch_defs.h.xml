<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_dispatch_defs.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_DISPATCH_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_DISPATCH_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>dispatch_object_s</name> <block>{}</block></struct></type> *<name>dispatch_object_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_DECL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct name##_s : public dispatch_object_s {} *name##_t</cpp:value></cpp:define>


<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_semaphore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DISPATCH_DECL</name><argument_list>(<argument><expr><name>dispatch_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dispatch_function_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>^</modifier><name>dispatch_block_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>^</modifier><name>dispatch_io_handler_t</name>)<parameter_list>(<parameter><decl><type><name>bool</name></type> <name>done</name></decl></parameter>, <parameter><decl><type><name>dispatch_data_t</name></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>long</name></type> <name>dispatch_once_t</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>u64</name> <name>dispatch_time_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>int</name></type> <name>dispatch_fd_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>dispatch_io_type_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>dispatch_io_close_flags_t</name>;</typedef>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>dispatch_get_context</name><parameter_list>(<parameter><decl><type><name>dispatch_object_t</name></type> <name>object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dispatch_retain</name><parameter_list>(<parameter><decl><type><name>dispatch_object_t</name></type> <name>object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dispatch_release</name><parameter_list>(<parameter><decl><type><name>dispatch_object_t</name></type> <name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dispatch_block_t</name></type> <name>_dispatch_data_destructor_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dispatch_block_t</name></type> <name>_dispatch_data_destructor_munmap</name></decl>;</decl_stmt>
</block_content>}</block></extern>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_DATA_DESTRUCTOR_DEFAULT</name></cpp:macro> <cpp:value>nullptr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_DATA_DESTRUCTOR_FREE</name></cpp:macro> <cpp:value>_dispatch_data_destructor_free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_DATA_DESTRUCTOR_MUNMAP</name></cpp:macro> <cpp:value>_dispatch_data_destructor_munmap</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>noescape</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_NOESCAPE</name></cpp:macro> <cpp:value>__attribute__((__noescape__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH_NOESCAPE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_IMPORT</name></cpp:macro> <cpp:value>extern "C" __attribute((weak_import))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_IMPORT</name></cpp:macro> <cpp:value>extern "C" __attribute((weak))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>size_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uintptr_t</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>s64</name> <name>off_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>u16</name> <name>mode_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>long</name></type> <name>long_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
