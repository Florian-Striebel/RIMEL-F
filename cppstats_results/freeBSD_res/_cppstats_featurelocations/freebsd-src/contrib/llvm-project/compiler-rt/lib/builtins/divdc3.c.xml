<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/divdc3.c">











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_PRECISION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fp_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_math.h"</cpp:file></cpp:include>



<function><type><name>COMPILER_RT_ABI</name> <name>Dcomplex</name></type> <name>__divdc3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__ilogbw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__logbw</name> <init>= <expr><call><name>__compiler_rt_logb</name><argument_list>(<argument><expr><call><name>__compiler_rt_fmax</name><argument_list>(<argument><expr><call><name>crt_fabs</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>crt_fabs</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>crt_isfinite</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__ilogbw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>__logbw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>__compiler_rt_scalbn</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>__compiler_rt_scalbn</name><argument_list>(<argument><expr><name>__d</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__denom</name> <init>= <expr><name>__c</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__d</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dcomplex</name></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>COMPLEX_REAL</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator>
<call><name>__compiler_rt_scalbn</name><argument_list>(<argument><expr><operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_IMAGINARY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator>
<call><name>__compiler_rt_scalbn</name><argument_list>(<argument><expr><operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>crt_isnan</name><argument_list>(<argument><expr><call><name>COMPLEX_REAL</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>crt_isnan</name><argument_list>(<argument><expr><call><name>COMPLEX_IMAGINARY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>__denom</name> <operator>==</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>crt_isnan</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>crt_isnan</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>COMPLEX_REAL</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><name>CRT_INFINITY</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_IMAGINARY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><name>CRT_INFINITY</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__b</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>crt_isinf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>crt_isfinite</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>crt_isfinite</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_REAL</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>CRT_INFINITY</name> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_IMAGINARY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>CRT_INFINITY</name> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__logbw</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <call><name>crt_isfinite</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>crt_isfinite</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>crt_copysign</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_REAL</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.0</literal> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPLEX_IMAGINARY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.0</literal> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
</unit>
