<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerValueBitMap.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_VALUE_BIT_MAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_VALUE_BIT_MAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerPlatform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>


<struct>struct <name>ValueBitMap</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kMapSizeInBits</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kMapPrimeMod</name> <init>= <expr><literal type="number">65371</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kBitsInWord</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kMapSizeInWords</name> <init>= <expr><name>kMapSizeInBits</name> <operator>/</operator> <name>kBitsInWord</name></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>


<function><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>Map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>



<function><type><name>ATTRIBUTE_NO_SANITIZE_ALL</name>
<specifier>inline</specifier> <name>bool</name></type> <name>AddValue</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>Idx</name> <init>= <expr><name>Value</name> <operator>%</operator> <name>kMapSizeInBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>WordIdx</name> <init>= <expr><name>Idx</name> <operator>/</operator> <name>kBitsInWord</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>BitIdx</name> <init>= <expr><name>Idx</name> <operator>%</operator> <name>kBitsInWord</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>Old</name> <init>= <expr><name><name>Map</name><index>[<expr><name>WordIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>New</name> <init>= <expr><name>Old</name> <operator>|</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>BitIdx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Map</name><index>[<expr><name>WordIdx</name></expr>]</index></name> <operator>=</operator> <name>New</name></expr>;</expr_stmt>
<return>return <expr><name>New</name> <operator>!=</operator> <name>Old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ATTRIBUTE_NO_SANITIZE_ALL</name>
<specifier>inline</specifier> <name>bool</name></type> <name>AddValueModPrime</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>AddValue</name><argument_list>(<argument><expr><name>Value</name> <operator>%</operator> <name>kMapPrimeMod</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <name>kMapSizeInBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>WordIdx</name> <init>= <expr><name>Idx</name> <operator>/</operator> <name>kBitsInWord</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>BitIdx</name> <init>= <expr><name>Idx</name> <operator>%</operator> <name>kBitsInWord</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>Map</name><index>[<expr><name>WordIdx</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>BitIdx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>size_t</name> <macro><name>SizeInBits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kMapSizeInBits</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Callback</name></expr></argument>&gt;</argument_list></name>
<name>ATTRIBUTE_NO_SANITIZE_ALL</name>
<name>void</name></type> <name>ForEach</name><argument_list>(<argument><expr><name>Callback</name> <name>CB</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kMapSizeInWords</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<decl><type><name>uintptr_t</name></type> <name>M</name> <init>= <expr><name><name>Map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>M</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CB</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<macro><name>ATTRIBUTE_ALIGNED</name><argument_list>(<argument><literal type="number">512</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>Map</name><index>[<expr><name>kMapSizeInWords</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
