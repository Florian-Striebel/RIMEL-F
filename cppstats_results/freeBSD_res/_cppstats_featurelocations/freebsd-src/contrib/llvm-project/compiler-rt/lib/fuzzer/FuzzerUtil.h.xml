<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerBuiltins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerBuiltinsMsvc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerCommand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<function_decl><type><name>void</name></type> <name>PrintHexArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrintAfter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintHexArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrintAfter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintASCII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrintAfter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintASCII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrintAfter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>ToASCII</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsASCII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsASCII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>Base64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Unit</name> <operator>&amp;</operator><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>PrintPC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SymbolizedFMT</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FallbackFMT</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>PC</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DescribePC</name><argument_list>(<argument>const char *SymbolizedFMT</argument>, <argument>uintptr_t PC</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>PrintStackTrace</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintMemoryProfile</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>NumberOfCpuCores</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>SetSignalHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FuzzingOptions</name><modifier>&amp;</modifier></type> <name>Options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SleepSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>GetPid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetPeakRSSMb</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ExecuteCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Command</name> <modifier>&amp;</modifier></type><name>Cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>ExecuteCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Command</name> <operator>&amp;</operator><name>Cmd</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>CmdOutput</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>OpenProcessPipe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>CloseProcessPipe</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>SearchMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>haystacklen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needlelen</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>CloneArgsWithoutX</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>X1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>X2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>CloneArgsWithoutX</name><argument_list>(<argument>const Vector&lt;std::string&gt; &amp;Args</argument>,
<argument>const char *X</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CloneArgsWithoutX</name><argument_list>(<argument><expr><name>Args</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>SplitBefore</name><argument_list>(<argument>std::string X</argument>,
<argument>std::string S</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>Pos</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Pos</name> <operator>==</operator> <name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>S</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>DiscardOutput</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Fd</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>DisassembleCmd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>FileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>SearchRegexCmd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint64_t</name></type> <name>SimpleFastHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Initial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>Log</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <call><name>Clzll</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>PageSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">4096</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>RoundUpByPage</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>X</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Mask</name> <init>= <expr><call><name>PageSize</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><name>X</name> <operator>+</operator> <name>Mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>Mask</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>RoundDownByPage</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>X</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Mask</name> <init>= <expr><call><name>PageSize</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <name>X</name> <operator>&amp;</operator> <operator>~</operator><name>Mask</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>HostToLE</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>X</name></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>HostToLE</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Bswap</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
