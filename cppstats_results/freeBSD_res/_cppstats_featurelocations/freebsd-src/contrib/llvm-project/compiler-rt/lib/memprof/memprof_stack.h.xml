<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_stack.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_STACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_STACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kDefaultMallocContextSize</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetMallocContextSize</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>u32</name></type> <name>GetMallocContextSize</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE</name><parameter_list>(<parameter><type><name>max_size</name></type></parameter>, <parameter><type><name>fast</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BufferedStackTrace stack; if (max_size &lt;= 2) { stack.size = max_size; if (max_size &gt; 0) { stack.top_frame_bp = GET_CURRENT_FRAME(); stack.trace_buffer[0] = StackTrace::GetCurrentPc(); if (max_size &gt; 1) stack.trace_buffer[1] = GET_CALLER_PC(); } } else { stack.Unwind(StackTrace::GetCurrentPc(), GET_CURRENT_FRAME(), nullptr, fast, max_size); }</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_FATAL_HERE</name></cpp:macro> <cpp:value>GET_STACK_TRACE(kStackTraceMax, common_flags()-&gt;fast_unwind_on_fatal)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_THREAD</name></cpp:macro> <cpp:value>GET_STACK_TRACE(kStackTraceMax, true)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_MALLOC</name></cpp:macro> <cpp:value>GET_STACK_TRACE(GetMallocContextSize(), common_flags()-&gt;fast_unwind_on_malloc)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_FREE</name></cpp:macro> <cpp:value>GET_STACK_TRACE_MALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_CURRENT_STACK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ GET_STACK_TRACE_FATAL_HERE; stack.Print(); }</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
