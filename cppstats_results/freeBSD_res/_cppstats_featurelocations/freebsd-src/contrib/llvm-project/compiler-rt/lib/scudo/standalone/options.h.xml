<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/options.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_OPTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_OPTIONS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memtag.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OptionBit</name> <block>{<block_content>
<expr_stmt><expr><name>MayReturnNull</name></expr><operator>,</operator>
<expr><name>FillContents0of2</name></expr><operator>,</operator>
<expr><name>FillContents1of2</name></expr><operator>,</operator>
<expr><name>DeallocTypeMismatch</name></expr><operator>,</operator>
<expr><name>DeleteSizeMismatch</name></expr><operator>,</operator>
<expr><name>TrackAllocationStacks</name></expr><operator>,</operator>
<expr><name>UseOddEvenTags</name></expr><operator>,</operator>
<expr><name>UseMemoryTagging</name></expr><operator>,</operator>
<expr><name>AddLargeAllocationSlack</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>Options</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>Val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>get</name><argument_list>(<argument><expr><name>OptionBit</name> <name>Opt</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Val</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>FillContentsMode</name> <macro><name>getFillContentsMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>FillContentsMode</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>(</operator><name>Val</name> <operator>&gt;&gt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>FillContents0of2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>useMemoryTagging</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseMemoryTagging</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>AtomicOptions</name> <block>{
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>Val</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Options</name> <macro><name>load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Options</name><block>{<macro><name>atomic_load_relaxed</name><argument_list>(<argument>&amp;Val</argument>)</argument_list></macro>}</block></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>OptionBit</name></type> <name>Opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_and</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Val</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>OptionBit</name></type> <name>Opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_or</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Val</name></expr></argument>, <argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setFillContentsMode</name><parameter_list>(<parameter><decl><type><name>FillContentsMode</name></type> <name>FillContents</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>Opts</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Val</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>NewOpts</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>NewOpts</name> <operator>=</operator> <name>Opts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NewOpts</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">3U</literal> <operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>FillContents0of2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>NewOpts</name> <operator>|=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FillContents</name></expr></argument>)</argument_list></call>
<operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>FillContents0of2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>NewOpts</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
