<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/extensible_rtti.h">

























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_EXTENSIBLE_RTTI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_EXTENSIBLE_RTTI_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ThisT</name></expr></argument>, <argument><expr><name>typename</name> <name>ParentT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>RTTIExtends</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>RTTIRoot</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>RTTIRoot</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>classID</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>ID</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>dynamicClassID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isA</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><specifier>const</specifier> <name>ClassID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>ClassID</name> <operator>==</operator> <call><name>classID</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>QueryT</name></expr></argument>&gt;</argument_list></name> <name>bool</name> <macro><name>isA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isA</name><argument_list>(<argument><expr><name>QueryT</name><operator>::</operator><call><name>classID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RTTIRoot</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>R</name><operator>-&gt;</operator><name>isA</name></name><operator>&lt;</operator><name>RTTIRoot</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>ID</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ThisT</name></expr></argument>, <argument><expr><name>typename</name> <name>ParentT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>RTTIExtends</name> <range>: <expr><name>public</name> <name>ParentT</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>using</name> <name>ParentT</name><operator>::</operator><name>isA</name></expr>;
<expr><name>using</name> <name>ParentT</name><operator>::</operator><name>ParentT</name></expr>;

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>classID</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>ThisT</name><operator>::</operator><name>ID</name></expr>;</return> }</block>

<specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>dynamicClassID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>&amp;</operator><name>ThisT</name><operator>::</operator><name>ID</name></expr>;</return> }</block>

<name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *const ClassID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ClassID</name> <operator>==</operator> <call><name>classID</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ParentT</name><operator>::</operator><call><name>isA</name><argument_list>(<argument><expr><name>ClassID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const RTTIRoot *R</argument>)</argument_list></macro> <block>{ <return>return <expr><name><name>R</name><operator>-&gt;</operator><name>isA</name></name><operator>&lt;</operator><name>ThisT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ThisT</name></expr></argument>, <argument><expr><name>typename</name> <name>ParentT</name></expr></argument>&gt;</argument_list></name>
<name>char</name> <name><name>RTTIExtends</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>, <argument><expr><name>ParentT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ID</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>To</name></expr></argument>, <argument><expr><name>typename</name> <name>From</name></expr></argument>&gt;</argument_list></name> <name>bool</name> <macro><name>isa</name><argument_list>(<argument>const From &amp;Value</argument>)</argument_list></macro> <block>{
<return>return <expr><name>To</name><operator>::</operator><call><name>classof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

}</expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
