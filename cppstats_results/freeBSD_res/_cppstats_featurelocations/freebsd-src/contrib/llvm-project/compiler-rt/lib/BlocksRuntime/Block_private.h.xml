<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/BlocksRuntime/Block_private.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BLOCK_PRIVATE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BLOCK_PRIVATE_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BLOCK_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_EXPORT</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_EXPORT</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>char</name></type> <name>bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>(bool)1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>(bool)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <block>{
<decl><name>BLOCK_REFCOUNT_MASK</name> <init>= <expr><operator>(</operator><literal type="number">0xffff</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_NEEDS_FREE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_COPY_DISPOSE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_CTOR</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_IS_GC</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_IS_GLOBAL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_DESCRIPTOR</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>



<struct>struct <name>Block_descriptor</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>reserved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dispose</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<struct>struct <name>Block_layout</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reserved</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>invoke</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>Block_descriptor</name></name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>

}</block>;</struct>


<struct>struct <name>Block_byref</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Block_byref</name></name> <modifier>*</modifier></type><name>forwarding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>byref_keep</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Block_byref</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Block_byref</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>byref_destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Block_byref</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>


<struct>struct <name>Block_byref_header</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Block_byref</name></name> <modifier>*</modifier></type><name>forwarding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>




<enum>enum <block>{

<decl><name>BLOCK_FIELD_IS_OBJECT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>BLOCK_FIELD_IS_BLOCK</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>BLOCK_FIELD_IS_BYREF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>BLOCK_FIELD_IS_WEAK</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>BLOCK_BYREF_CALLER</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>
}</block>;</enum>


<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name></type> <name>_Block_object_assign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>destAddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name></type> <name>_Block_object_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>BLOCK_EXPORT</name> <name>unsigned</name> <name>long</name> <name>int</name></type> <name>Block_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block_basic</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteStackBlock</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteMallocBlock</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteAutoBlock</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteFinalizingBlock</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteGlobalBlock</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type> <name><name>_NSConcreteWeakBlockVariable</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>



<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name></type> <name>_Block_use_GC</name><parameter_list>( <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>alloc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isOne</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isObject</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>setHasRefcount</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gc_assign_strong</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gc_assign_weak</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gc_memmove</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name></type> <name>_Block_use_GC5</name><parameter_list>( <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>alloc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isOne</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isObject</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>setHasRefcount</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gc_assign_strong</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gc_assign_weak</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name></type> <name>_Block_use_RR</name><parameter_list>( <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>retain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>BLOCK_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>_Block_copy_collectable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>aBlock</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>BLOCK_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_Block_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>Block_basic</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Block_size</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Block_invoke</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Block_copy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Block_dispose</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
