<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_descriptions.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_DESCRIPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_DESCRIPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_report_decorator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<function_decl><type><name>void</name></type> <name>DescribeThread</name><parameter_list>(<parameter><decl><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>DescribeThread</name><parameter_list>(<parameter><decl><type><name>AsanThread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DescribeThread</name><argument_list>(<argument><expr><call><name><name>t</name><operator>-&gt;</operator><name>context</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>AsanThreadIdAndName</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>AsanThreadIdAndName</name><parameter_list>(<parameter><decl><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>explicit</name></type> <name>AsanThreadIdAndName</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>c_str</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Decorator</name> <range>: <expr><name>public</name> <name>__sanitizer</name><operator>::</operator><name>SanitizerCommonDecorator</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Decorator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>SanitizerCommonDecorator</name><argument_list>()</argument_list></macro> <block>{}</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Access</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>Blue</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Location</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>Green</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Allocation</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>Magenta</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>ShadowByte</name><argument_list>(<argument>u8 byte</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>byte</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kAsanHeapLeftRedzoneMagic</name></expr>:</case>
<case>case <expr><name>kAsanArrayCookieMagic</name></expr>:</case>
<return>return <expr><call><name>Red</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanHeapFreeMagic</name></expr>:</case>
<return>return <expr><call><name>Magenta</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanStackLeftRedzoneMagic</name></expr>:</case>
<case>case <expr><name>kAsanStackMidRedzoneMagic</name></expr>:</case>
<case>case <expr><name>kAsanStackRightRedzoneMagic</name></expr>:</case>
<return>return <expr><call><name>Red</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanStackAfterReturnMagic</name></expr>:</case>
<return>return <expr><call><name>Magenta</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanInitializationOrderMagic</name></expr>:</case>
<return>return <expr><call><name>Cyan</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanUserPoisonedMemoryMagic</name></expr>:</case>
<case>case <expr><name>kAsanContiguousContainerOOBMagic</name></expr>:</case>
<case>case <expr><name>kAsanAllocaLeftMagic</name></expr>:</case>
<case>case <expr><name>kAsanAllocaRightMagic</name></expr>:</case>
<return>return <expr><call><name>Blue</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanStackUseAfterScopeMagic</name></expr>:</case>
<return>return <expr><call><name>Magenta</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanGlobalRedzoneMagic</name></expr>:</case>
<return>return <expr><call><name>Red</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanInternalHeapMagic</name></expr>:</case>
<return>return <expr><call><name>Yellow</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAsanIntraObjectRedzone</name></expr>:</case>
<return>return <expr><call><name>Yellow</name><argument_list>()</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>Default</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>

enum <expr><name>ShadowKind</name> <operator>:</operator> <name>u8</name> <block>{
<expr><name>kShadowKindLow</name></expr>,
<expr><name>kShadowKindGap</name></expr>,
<expr><name>kShadowKindHigh</name></expr>,
}</block></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>ShadowNames</name><index>[]</index></name> <operator>=</operator> <block>{<expr><literal type="string">"low shadow"</literal></expr>, <expr><literal type="string">"shadow gap"</literal></expr>,
<expr><literal type="string">"high shadow"</literal></expr>}</block></expr>;

struct <expr><name>ShadowAddressDescription</name> <block>{
<expr><name>uptr</name> <name>addr</name></expr>;
<expr><name>ShadowKind</name> <name>kind</name></expr>;
<expr><name>u8</name> <name>shadow_byte</name></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>bool</name> <macro><name>GetShadowAddressInformation</name><argument_list>(<argument>uptr addr</argument>, <argument>ShadowAddressDescription *descr</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>DescribeAddressIfShadow</name><argument_list>(<argument>uptr addr</argument>)</argument_list></macro></expr>;

enum <expr><name>AccessType</name> <block>{
<expr><name>kAccessTypeLeft</name></expr>,
<expr><name>kAccessTypeRight</name></expr>,
<expr><name>kAccessTypeInside</name></expr>,
<expr><name>kAccessTypeUnknown</name></expr>,
}</block></expr>;

struct <expr><name>ChunkAccess</name> <block>{
<expr><name>uptr</name> <name>bad_addr</name></expr>;
<expr><name>sptr</name> <name>offset</name></expr>;
<expr><name>uptr</name> <name>chunk_begin</name></expr>;
<expr><name>uptr</name> <name>chunk_size</name></expr>;
<expr><name>u32</name> <name>user_requested_alignment</name> <operator>:</operator> <literal type="number">12</literal></expr>;
<expr><name>u32</name> <name>access_type</name> <operator>:</operator> <literal type="number">2</literal></expr>;
<expr><name>u32</name> <name>alloc_type</name> <operator>:</operator> <literal type="number">2</literal></expr>;
}</block></expr>;

struct <expr><name>HeapAddressDescription</name> <block>{
<expr><name>uptr</name> <name>addr</name></expr>;
<expr><name>uptr</name> <name>alloc_tid</name></expr>;
<expr><name>uptr</name> <name>free_tid</name></expr>;
<expr><name>u32</name> <name>alloc_stack_id</name></expr>;
<expr><name>u32</name> <name>free_stack_id</name></expr>;
<expr><name>ChunkAccess</name> <name>chunk_access</name></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>bool</name> <macro><name>GetHeapAddressInformation</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size</argument>,
<argument>HeapAddressDescription *descr</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>DescribeAddressIfHeap</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size = <literal type="number">1</literal></argument>)</argument_list></macro></expr>;

struct <expr><name>StackAddressDescription</name> <block>{
<expr><name>uptr</name> <name>addr</name></expr>;
<expr><name>uptr</name> <name>tid</name></expr>;
<expr><name>uptr</name> <name>offset</name></expr>;
<expr><name>uptr</name> <name>frame_pc</name></expr>;
<expr><name>uptr</name> <name>access_size</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>frame_descr</name></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>bool</name> <macro><name>GetStackAddressInformation</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size</argument>,
<argument>StackAddressDescription *descr</argument>)</argument_list></macro></expr>;

struct <expr><name>WildAddressDescription</name> <block>{
<expr><name>uptr</name> <name>addr</name></expr>;
<expr><name>uptr</name> <name>access_size</name></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

struct <expr><name>GlobalAddressDescription</name> <block>{
<expr><name>uptr</name> <name>addr</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>kMaxGlobals</name> <operator>=</operator> <literal type="number">4</literal></expr>;
<expr><name>__asan_global</name> <name><name>globals</name><index>[<expr><name>kMaxGlobals</name></expr>]</index></name></expr>;
<expr><name>u32</name> <name><name>reg_sites</name><index>[<expr><name>kMaxGlobals</name></expr>]</index></name></expr>;
<expr><name>uptr</name> <name>access_size</name></expr>;
<expr><name>u8</name> <name>size</name></expr>;

<expr><name>void</name> <macro><name>Print</name><argument_list>(<argument>const char *bug_type = <literal type="string">""</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>bool</name> <macro><name>PointsInsideTheSameVariable</name><argument_list>(<argument>const GlobalAddressDescription &amp;other</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>bool</name> <macro><name>GetGlobalAddressInformation</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size</argument>,
<argument>GlobalAddressDescription *descr</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>DescribeAddressIfGlobal</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size</argument>, <argument>const char *bug_type</argument>)</argument_list></macro></expr>;









<expr><name>void</name> <macro><name>PrintAddressDescription</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size = <literal type="number">1</literal></argument>,
<argument>const char *bug_type = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;

enum <expr><name>AddressKind</name> <block>{
<expr><name>kAddressKindWild</name></expr>,
<expr><name>kAddressKindShadow</name></expr>,
<expr><name>kAddressKindHeap</name></expr>,
<expr><name>kAddressKindStack</name></expr>,
<expr><name>kAddressKindGlobal</name></expr>,
}</block></expr>;

<expr><name>class</name> <name>AddressDescription</name> <block>{
struct <expr><name>AddressDescriptionData</name> <block>{
<expr><name>AddressKind</name> <name>kind</name></expr>;
<expr>union <block>{
<expr><name>ShadowAddressDescription</name> <name>shadow</name></expr>;
<expr><name>HeapAddressDescription</name> <name>heap</name></expr>;
<expr><name>StackAddressDescription</name> <name>stack</name></expr>;
<expr><name>GlobalAddressDescription</name> <name>global</name></expr>;
<expr><name>WildAddressDescription</name> <name>wild</name></expr>;
}</block></expr>;
}</block></expr>;

<expr><name>AddressDescriptionData</name> <name>data</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>AddressDescription</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;


<expr><name>explicit</name> <macro><name>AddressDescription</name><argument_list>(<argument>uptr addr</argument>, <argument>bool shouldLockThreadRegistry = true</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>AddressDescription</name><argument_list>(<argument>addr</argument>, <argument><literal type="number">1</literal></argument>, <argument>shouldLockThreadRegistry</argument>)</argument_list></macro> <block>{}</block>
<macro><name>AddressDescription</name><argument_list>(<argument>uptr addr</argument>, <argument>uptr access_size</argument>,
<argument>bool shouldLockThreadRegistry = true</argument>)</argument_list></macro></expr>;

<expr><name>uptr</name> <macro><name>Address</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name><name>data</name><operator>.</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kAddressKindWild</name></expr>:</case>
<return>return <expr><name><name>data</name><operator>.</operator><name>wild</name><operator>.</operator><name>addr</name></name></expr>;</return>
<case>case <expr><name>kAddressKindShadow</name></expr>:</case>
<return>return <expr><name><name>data</name><operator>.</operator><name>shadow</name><operator>.</operator><name>addr</name></name></expr>;</return>
<case>case <expr><name>kAddressKindHeap</name></expr>:</case>
<return>return <expr><name><name>data</name><operator>.</operator><name>heap</name><operator>.</operator><name>addr</name></name></expr>;</return>
<case>case <expr><name>kAddressKindStack</name></expr>:</case>
<return>return <expr><name><name>data</name><operator>.</operator><name>stack</name><operator>.</operator><name>addr</name></name></expr>;</return>
<case>case <expr><name>kAddressKindGlobal</name></expr>:</case>
<return>return <expr><name><name>data</name><operator>.</operator><name>global</name><operator>.</operator><name>addr</name></name></expr>;</return>
<expr_stmt/>}</block_content>
UNREACHABLE("AddressInformation kind is invalid"</block></switch>)</block></expr>;
}</block>
<name>void</name> <macro><name>Print</name><argument_list>(<argument>const char *bug_descr = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name><name>data</name><operator>.</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kAddressKindWild</name></expr>:</case>
<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>wild</name><operator>.</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><name>kAddressKindShadow</name></expr>:</case>
<return>return <expr><call><name><name>data</name><operator>.</operator><name>shadow</name><operator>.</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAddressKindHeap</name></expr>:</case>
<return>return <expr><call><name><name>data</name><operator>.</operator><name>heap</name><operator>.</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAddressKindStack</name></expr>:</case>
<return>return <expr><call><name><name>data</name><operator>.</operator><name>stack</name><operator>.</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>kAddressKindGlobal</name></expr>:</case>

<return>return <expr><call><name><name>data</name><operator>.</operator><name>global</name><operator>.</operator><name>Print</name></name><argument_list>(<argument><expr><name>bug_descr</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
UNREACHABLE("AddressInformation kind is invalid"</block></switch>)</block></expr>;
}</block>

<name>void</name> <macro><name>StoreTo</name><argument_list>(<argument>AddressDescriptionData *dst</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>data</name></expr>; }</block>

<specifier>const</specifier> <name>ShadowAddressDescription</name> <operator>*</operator><macro><name>AsShadow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>data</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>kAddressKindShadow</name> <operator>?</operator> <operator>&amp;</operator><name><name>data</name><operator>.</operator><name>shadow</name></name> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block>
<specifier>const</specifier> <name>HeapAddressDescription</name> <operator>*</operator><macro><name>AsHeap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>kAddressKindHeap</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>heap</name></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
}</block>
<specifier>const</specifier> <name>StackAddressDescription</name> <operator>*</operator><macro><name>AsStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>kAddressKindStack</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>stack</name></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
}</block>
<specifier>const</specifier> <name>GlobalAddressDescription</name> <operator>*</operator><macro><name>AsGlobal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>kAddressKindGlobal</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>global</name></name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
