<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/fp_trunc.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FP_TRUNC_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FP_TRUNC_HEADER</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SRC_SINGLE</name></expr></cpp:if>
<typedef>typedef <type><name>float</name></type> <name>src_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>src_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_REP_C</name></cpp:macro> <cpp:value>UINT32_C</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>srcSigBits</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SRC_DOUBLE</name></expr></cpp:elif>
<typedef>typedef <type><name>double</name></type> <name>src_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>src_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_REP_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>srcSigBits</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SRC_QUAD</name></expr></cpp:elif>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>src_t</name>;</typedef>
<typedef>typedef <type><name>__uint128_t</name></type> <name>src_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_REP_C</name></cpp:macro> <cpp:value>(__uint128_t)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>srcSigBits</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Source should be double precision or quad precision!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>DST_DOUBLE</name></expr></cpp:if>
<typedef>typedef <type><name>double</name></type> <name>dst_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>dst_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_REP_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dstSigBits</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>DST_SINGLE</name></expr></cpp:elif>
<typedef>typedef <type><name>float</name></type> <name>dst_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>dst_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_REP_C</name></cpp:macro> <cpp:value>UINT32_C</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dstSigBits</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>DST_HALF</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_HAS_FLOAT16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>_Float16</name></type> <name>dst_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>uint16_t</name></type> <name>dst_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>uint16_t</name></type> <name>dst_rep_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_REP_C</name></cpp:macro> <cpp:value>UINT16_C</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dstSigBits</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Destination should be single precision or double precision!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>__inline</name> <name>src_rep_t</name></type> <name>srcToRep</name><parameter_list>(<parameter><decl><type><name>src_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name>src_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>src_rep_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>rep</name> <init>= <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>rep</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>dst_t</name></type> <name>dstFromRep</name><parameter_list>(<parameter><decl><type><name>dst_rep_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name>dst_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dst_rep_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>rep</name> <init>= <expr><block>{<expr><operator>.</operator><name>i</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>rep</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
