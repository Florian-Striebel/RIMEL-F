<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_internal.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>address_sanitizer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SANITIZE_ADDRESS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The MemProfiler run-time should not be instrumented by MemProfiler"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_HAS_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_HAS_EXCEPTIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_DYNAMIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_DYNAMIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_DYNAMIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemprofThread</name></decl>;</decl_stmt>
<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>StackTrace</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>MemprofInitFromRtl</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>PrintAddressSpaceLayout</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>InitializeShadowMemory</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ReplaceSystemMalloc</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>FindDynamicShadowStart</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>MemprofDoesNotSupportStaticLinkage</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>MemprofThread</name> <modifier>*</modifier></type><name>CreateMainThread</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReadContextStack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>ssize</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>TSDInit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>TSDGet</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>TSDSet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PlatformTSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>MemprofDlSymNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MALLOC_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_malloc_hook) __sanitizer_malloc_hook(ptr, size); RunMallocHooks(ptr, size); } while (false)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_FREE_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_free_hook) __sanitizer_free_hook(ptr); RunFreeHooks(ptr); } while (false)</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>memprof_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>memprof_timestamp_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>memprof_init_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>memprof_init_is_running</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>death_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name></type> <name>memprof_init_timestamp_s</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
