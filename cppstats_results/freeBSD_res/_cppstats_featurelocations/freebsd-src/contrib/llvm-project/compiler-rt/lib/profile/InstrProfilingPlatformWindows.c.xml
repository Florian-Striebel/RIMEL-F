<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingPlatformWindows.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/MERGE:.lprfc=.data"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/MERGE:.lprfd=.data"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/MERGE:.lprfv=.data"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/MERGE:.lprfnd=.data"</cpp:literal><name>)</name></cpp:pragma>





<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfn$A"</cpp:literal><name>,</name> <name>read</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfn$Z"</cpp:literal><name>,</name> <name>read</name><name>)</name></cpp:pragma>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfd$A"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfd$Z"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfc$A"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfc$Z"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lorderfile$A"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfnd$A"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>section</name><name>(</name><cpp:literal>".lprfnd$Z"</cpp:literal><name>,</name> <name>read</name><name>,</name> <name>write</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>__llvm_profile_data</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfd$A"</literal></expr></argument>)</argument_list> <name>DataStart</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__llvm_profile_data</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfd$Z"</literal></expr></argument>)</argument_list> <name>DataEnd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfn$A"</literal></expr></argument>)</argument_list> <name>NamesStart</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfn$Z"</literal></expr></argument>)</argument_list> <name>NamesEnd</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfc$A"</literal></expr></argument>)</argument_list> <name>CountersStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfc$Z"</literal></expr></argument>)</argument_list> <name>CountersEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lorderfile$A"</literal></expr></argument>)</argument_list> <name>OrderFileStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ValueProfNode</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfnd$A"</literal></expr></argument>)</argument_list> <name>VNodesStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name></type> <name>COMPILER_RT_SECTION</name><argument_list>(<argument><expr><literal type="string">".lprfnd$Z"</literal></expr></argument>)</argument_list> <name>VNodesEnd</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_begin_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>DataStart</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_end_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>DataEnd</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_begin_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>NamesStart</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_end_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>NamesEnd</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>CountersStart</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_end_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>CountersEnd</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uint32_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_orderfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>OrderFileStart</name></expr>;</return> </block_content>}</block></function>

<function><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_begin_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>VNodesStart</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_end_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>VNodesEnd</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name> <init>= <expr><operator>&amp;</operator><name>VNodesStart</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>EndVNode</name> <init>= <expr><operator>&amp;</operator><name>VNodesEnd</name></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
