<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_win_weak_interception.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_WIN_WEAK_INTERCEPTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WIN_WEAK_INTERCEPTION_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<function_decl><type><name>int</name></type> <name>interceptWhenPossible</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>dll_function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_function</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_WEAK</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>interceptWhenPossible((uptr) Name, #Name);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_SANITIZER_WEAK_FUNCTION</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int intercept_##Name() { return __sanitizer::interceptWhenPossible((__sanitizer::uptr) Name, #Name);} __pragma(section(".WEAK$M", long, read)) __declspec(allocate(".WEAK$M")) int (*__weak_intercept_##Name)() = intercept_##Name;</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
