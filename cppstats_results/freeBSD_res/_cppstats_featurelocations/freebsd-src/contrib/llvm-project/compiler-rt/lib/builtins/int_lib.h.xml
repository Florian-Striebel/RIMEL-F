<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/int_lib.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INT_LIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LIB_H</name></cpp:macro></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_EABI__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_ARMHF_TARGET</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ABI</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ABI</name></cpp:macro> <cpp:value>__attribute__((__pcs__("aapcs")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ABI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AEABI_RTABI</name></cpp:macro> <cpp:value>__attribute__((__pcs__("aapcs")))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALWAYS_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOINLINE</name></cpp:macro> <cpp:value>__declspec(noinline)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro> <cpp:value>__declspec(noreturn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALWAYS_INLINE</name></cpp:macro> <cpp:value>__attribute__((always_inline))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOINLINE</name></cpp:macro> <cpp:value>__attribute__((noinline))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro> <cpp:value>__attribute__((noreturn))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STR(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XSTR(__USER_LABEL_PREFIX__) #name</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__wasm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIAS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>aliasname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILER_RT_ABI __typeof(name) aliasname __attribute__((__alias__(#name)));</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VISIBILITY_HIDDEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIAS_VISIBILITY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__(".private_extern " SYMBOL_NAME(name));</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIAS_VISIBILITY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIAS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>aliasname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__(".globl " SYMBOL_NAME(aliasname)); COMPILER_RT_ALIAS_VISIBILITY(aliasname) __asm__(SYMBOL_NAME(aliasname) " = " SYMBOL_NAME(name)); COMPILER_RT_ABI __typeof(name) aliasname;</cpp:value></cpp:define>




<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_ALIAS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>aliasname</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Unsupported target</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_KERNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_STANDALONE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name>sys</name><operator>/</operator><name><name>limits</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/limits.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_types.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_util.h"</cpp:file></cpp:include>

<function_decl><type><name>COMPILER_RT_ABI</name> <name>int</name></type> <name>__paritysi2</name><parameter_list>(<parameter><decl><type><name>si_int</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>int</name></type> <name>__paritydi2</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>COMPILER_RT_ABI</name> <name>di_int</name></type> <name>__divdi3</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>di_int</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>si_int</name></type> <name>__divsi3</name><parameter_list>(<parameter><decl><type><name>si_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>si_int</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>su_int</name></type> <name>__udivsi3</name><parameter_list>(<parameter><decl><type><name>su_int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>su_int</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>COMPILER_RT_ABI</name> <name>su_int</name></type> <name>__udivmodsi4</name><parameter_list>(<parameter><decl><type><name>su_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>su_int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>su_int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>du_int</name></type> <name>__udivmoddi4</name><parameter_list>(<parameter><decl><type><name>du_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>du_int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>int</name></type> <name>__clzti2</name><parameter_list>(<parameter><decl><type><name>ti_int</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>tu_int</name></type> <name>__udivmodti4</name><parameter_list>(<parameter><decl><type><name>tu_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>tu_int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>tu_int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name> <name>__inline</name></type> <name>__builtin_ctz</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>trailing_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_BitScanForward</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trailing_zero</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>trailing_zero</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>__inline</name></type> <name>__builtin_clz</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>leading_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leading_zero</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">31</literal> <operator>-</operator> <name>leading_zero</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name> <name>__inline</name></type> <name>__builtin_clzll</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>leading_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_BitScanReverse64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leading_zero</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">63</literal> <operator>-</operator> <name>leading_zero</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">64</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name> <name>__inline</name></type> <name>__builtin_clzll</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>msh</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lsh</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>msh</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__builtin_clz</name><argument_list>(<argument><expr><name>msh</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">32</literal> <operator>+</operator> <call><name>__builtin_clz</name><argument_list>(<argument><expr><name>lsh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_clzl</name></cpp:macro> <cpp:value>__builtin_clzll</cpp:value></cpp:define>

<function><type><name>bool</name> <name>__inline</name></type> <name>__builtin_sadd_overflow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
