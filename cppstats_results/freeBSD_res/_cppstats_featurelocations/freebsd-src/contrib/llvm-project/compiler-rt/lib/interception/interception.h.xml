<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/interception/interception.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERCEPTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_FREEBSD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_MAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_NETBSD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_FUCHSIA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_SOLARIS</name></expr></cpp:if>


<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Interception doesn't work on this operating system."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>uptr</name> <name>SIZE_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>sptr</name> <name>SSIZE_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>sptr</name> <name>PTRDIFF_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>s64</name> <name>INTMAX_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>u64</name> <name>UINTMAX_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>OFF_T</name> <name>OFF_T</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>OFF64_T</name> <name>OFF64_T</name></expr>;</expr_stmt></typedef>

























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>


<struct>struct <name>interpose_substitution</name> <block>{
<expr_stmt><expr><specifier>const</specifier> <name>__sanitizer</name><operator>::</operator><name>uptr</name> <name>replacement</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>__sanitizer</name><operator>::</operator><name>uptr</name> <name>original</name></expr>;</expr_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOSER</name><parameter_list>(<parameter><type><name>func_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((used)) const interpose_substitution substitution_##func_name[] __attribute__((section("__DATA, __interpose"))) = { { reinterpret_cast&lt;const uptr&gt;(WRAP(func_name)), reinterpret_cast&lt;const uptr&gt;(func_name) } }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOSER_2</name><parameter_list>(<parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>wrapper_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((used)) const interpose_substitution substitution_##func_name[] __attribute__((section("__DATA, __interpose"))) = { { reinterpret_cast&lt;const uptr&gt;(wrapper_name), reinterpret_cast&lt;const uptr&gt;(func_name) } }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wrap_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"wrap_"#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asan_wrap_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"__asan_wrap_"#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type func(__VA_ARGS__);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WRAPPER_WINAPI</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" __declspec(dllimport) ret_type __stdcall func(__VA_ARGS__);</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__interceptor_ ##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"__interceptor_" #x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type func(__VA_ARGS__) __attribute__((alias("__interceptor_" #func), visibility("default")));</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>SANITIZER_FUCHSIA</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__interceptor_ ##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"__interceptor_" #x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type func(__VA_ARGS__) __attribute__((weak, alias("__interceptor_" #func), visibility("default")));</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zircon/sanitizer.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__unsanitized_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REAL</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>SANITIZER_MAC</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TO_REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>real_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__interception::PTR_TO_REAL(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REAL</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ret_type (*FUNC_TYPE(func))(__VA_ARGS__); namespace __interception { extern FUNC_TYPE(func) PTR_TO_REAL(func); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_REAL</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL(dst) = REAL(src)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REAL</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type func(__VA_ARGS__);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_REAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REAL_AND_INTERCEPTOR</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECLARE_REAL(ret_type, func, __VA_ARGS__) extern "C" ret_type WRAP(func)(__VA_ARGS__);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_EXTERN_INTERCEPTOR_AND_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type WRAP(func)(__VA_ARGS__); extern "C" ret_type func(__VA_ARGS__);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REAL_AND_INTERCEPTOR</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_EXTERN_INTERCEPTOR_AND_WRAPPER</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_MAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REAL</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ret_type (*FUNC_TYPE(func))(__VA_ARGS__); namespace __interception { FUNC_TYPE(func) PTR_TO_REAL(func); }</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REAL</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C"[[ gnu::alias(#func), gnu::visibility("hidden") ]] ret_type __interceptor_##func(__VA_ARGS__); extern "C" INTERCEPTOR_ATTRIBUTE ret_type func(__VA_ARGS__)</cpp:value></cpp:define>




<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>SANITIZER_MAC</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEFINE_REAL(ret_type, func, __VA_ARGS__) DECLARE_WRAPPER(ret_type, func, __VA_ARGS__) extern "C" INTERCEPTOR_ATTRIBUTE ret_type WRAP(func)(__VA_ARGS__)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_WITH_SUFFIX</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPTOR(ret_type, func, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_ZZZ</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" ret_type func(__VA_ARGS__) suffix; extern "C" ret_type WRAP(func)(__VA_ARGS__); INTERPOSER(func); extern "C" INTERCEPTOR_ATTRIBUTE ret_type WRAP(func)(__VA_ARGS__)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPTOR_ZZZ(, ret_type, func, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_WITH_SUFFIX</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPTOR_ZZZ(__DARWIN_ALIAS_C(func), ret_type, func, __VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERRIDE_FUNCTION</name><parameter_list>(<parameter><type><name>overridee</name></type></parameter>, <parameter><type><name>overrider</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERPOSER_2(overridee, WRAP(overrider))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTOR_WINAPI</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ret_type (__stdcall *FUNC_TYPE(func))(__VA_ARGS__); namespace __interception { FUNC_TYPE(func) PTR_TO_REAL(func); } extern "C" INTERCEPTOR_ATTRIBUTE ret_type __stdcall WRAP(func)(__VA_ARGS__)</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><name>namespace</name></type> <name>__interception</name> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uptr</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uptr</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDED_FROM_INTERCEPTION_LIB</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_SOLARIS</name></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interception_linux.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_LINUX_OR_FREEBSD(func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD(func, symver)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interception_mac.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_MAC(func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_VER_MAC(func, symver)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interception_win.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_WIN(func)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_VER_WIN(func, symver)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INCLUDED_FROM_INTERCEPTION_LIB</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
