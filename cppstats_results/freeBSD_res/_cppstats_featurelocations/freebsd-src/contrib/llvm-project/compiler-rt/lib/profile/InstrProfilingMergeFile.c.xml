<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingMergeFile.c">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__Fuchsia__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingUtil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_PROF_DATA</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>



<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>lprofMergeValueProfData</name><parameter_list>(<parameter><decl><type><name>ValueProfData</name> <modifier>*</modifier></type><name>SrcValueProfData</name></decl></parameter>,
<parameter><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DstData</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>V</name></decl>, <decl><type ref="prev"/><name>DstIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InstrProfValueData</name> <modifier>*</modifier></type><name>VData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfRecord</name> <modifier>*</modifier></type><name>VR</name> <init>= <expr><call><name>getFirstValueProfRecord</name><argument_list>(<argument><expr><name>SrcValueProfData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name><name>SrcValueProfData</name><operator>-&gt;</operator><name>NumValueKinds</name></name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>VData</name> <operator>=</operator> <call><name>getValueProfRecordValueData</name><argument_list>(<argument><expr><name>VR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SrcIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>S</name> <operator>&lt;</operator> <name><name>VR</name><operator>-&gt;</operator><name>NumValueSites</name></name></expr>;</condition> <incr><expr><name>S</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>NV</name> <init>= <expr><name><name>VR</name><operator>-&gt;</operator><name>SiteCountArray</name><index>[<expr><name>S</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>V</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>V</name> <operator>&lt;</operator> <name>NV</name></expr>;</condition> <incr><expr><name>V</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>__llvm_profile_instrument_target_value</name><argument_list>(<argument><expr><name><name>VData</name><index>[<expr><name>SrcIndex</name></expr>]</index></name><operator>.</operator><name>Value</name></expr></argument>, <argument><expr><name>DstData</name></expr></argument>,
<argument><expr><name>DstIndex</name></expr></argument>, <argument><expr><name><name>VData</name><index>[<expr><name>SrcIndex</name></expr>]</index></name><operator>.</operator><name>Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>SrcIndex</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>++</operator><name>DstIndex</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>VR</name> <operator>=</operator> <call><name>getValueProfRecordNext</name><argument_list>(<argument><expr><name>VR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
