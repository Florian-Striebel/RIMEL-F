<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/simple_packed_serialization.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_SIMPLE_PACKED_SERIALIZATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_SIMPLE_PACKED_SERIALIZATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianness.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stl_extras.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>SPSOutputBuffer</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>SPSOutputBuffer</name><argument_list>(<argument>char *Buffer</argument>, <argument>size_t Remaining</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Buffer</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Remaining</name><argument_list>(<argument>Remaining</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <macro><name>write</name><argument_list>(<argument>const char *Data</argument>, <argument>size_t Size</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&gt;</operator> <name>Remaining</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<call><name>memcpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>Buffer</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Remaining</name> <operator>-=</operator> <name>Size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Remaining</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SPSInputBuffer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SPSInputBuffer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>SPSInputBuffer</name><argument_list>(<argument>const char *Buffer</argument>, <argument>size_t Remaining</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Buffer</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Remaining</name><argument_list>(<argument>Remaining</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <macro><name>read</name><argument_list>(<argument>char *Data</argument>, <argument>size_t Size</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&gt;</operator> <name>Remaining</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<call><name>memcpy</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>Buffer</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Remaining</name> <operator>-=</operator> <name>Size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Buffer</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&gt;</operator> <name>Remaining</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Buffer</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Remaining</name> <operator>-=</operator> <name>Size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Remaining</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
};



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>ConcreteT</name></expr></argument>, <argument><expr><name>typename</name> <name>_</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>SPSSerializationTraits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SPSArgList</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>SPSArgList</name><argument_list type="generic">&lt;&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>IB</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ArgT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgT</name> <modifier>&amp;</modifier></type><name>Arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArgTs</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>ArgT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ArgT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArgT</name> <modifier>&amp;</modifier></type><name>Arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ArgTs</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>ArgT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ArgT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>IB</name></decl></parameter>, <parameter><decl><type><name>ArgT</name> <modifier>&amp;</modifier></type><name>Arg</name></decl></parameter>, <parameter><decl><type><name>ArgTs</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>ArgT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;
<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>SPSTagT</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPSTagT</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPSTagT</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPSTagT</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SPSTagT</name></type> <name>Tmp</name> <init>= <expr><name>Value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>IsBigEndianHost</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swapByteOrder</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>OB</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>IB</name></decl></parameter>, <parameter><decl><type><name>SPSTagT</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SPSTagT</name></type> <name>Tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>IB</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsBigEndianHost</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swapByteOrder</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Value</name> <operator>=</operator> <name>Tmp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SPSEmpty</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SPSExecutorAddress</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SPSTuple</name> <block>{<block_content>
<label><name>public</name>:</label>

<typedef>typedef <type><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>AsArgList</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SPSSequence</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>SPSString</name> <init>= <expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT1</name></expr></argument>, <argument><expr><name>typename</name> <name>SPSTagT2</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>SPSMap</name> <init>= <expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT1</name></expr></argument>, <argument><expr><name>SPSTagT2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSEmpty</name></expr></argument>, <argument><expr><name>SPSEmpty</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPSEmpty</name> <modifier>&amp;</modifier></type><name>EP</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPSEmpty</name> <modifier>&amp;</modifier></type><name>BE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>IB</name></decl></parameter>, <parameter><decl><type><name>SPSEmpty</name> <modifier>&amp;</modifier></type><name>BE</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>ConcreteSequenceT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TrivialSPSSequenceSerialization</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>











<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>ConcreteSequenceT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TrivialSPSSequenceDeserialization</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>TrivialSPSSequenceSerialization</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>TrivialSPSSequenceDeserialization</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>element_type</name> <init>= <expr><name>char</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>reserve</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>Size</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>append</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>char</name> <name>C</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TrivialSPSSequenceSerialization</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TrivialSPSSequenceDeserialization</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>element_type</name> <init>= <expr><name>typename</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>reserve</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>Size</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>append</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>T</name> <name>E</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSKeyTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>SPSValueTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TrivialSPSSequenceSerialization</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSKeyTagT</name></expr></argument>, <argument><expr><name>SPSValueTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSKeyTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>SPSValueTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>TrivialSPSSequenceDeserialization</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSKeyTagT</name></expr></argument>, <argument><expr><name>SPSValueTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>available</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>element_type</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>reserve</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>Size</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>append</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>element_type</name> <name>E</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>M</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSElementTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>SequenceT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>SequenceT</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name><name>TrivialSPSSequenceSerialization</name><argument_list type="generic">&lt;
<argument><expr><name>SPSElementTagT</name></expr></argument>, <argument><expr><name>SequenceT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>available</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SequenceT</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>E</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>Size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SequenceT</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>E</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>IB</name></decl></parameter>, <parameter><decl><type><name>SequenceT</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>TBSD</name> <init>= <expr><name><name>TrivialSPSSequenceDeserialization</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>, <argument><expr><name>SequenceT</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>TBSD</name><operator>::</operator><call><name>reserve</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>Size</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>TBSD</name><operator>::</operator><name>element_type</name> <name>E</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSElementTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>TBSD</name><operator>::</operator><call><name>append</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT1</name></expr></argument>, <argument><expr><name>typename</name> <name>SPSTagT2</name></expr></argument>, <argument><expr><name>typename</name> <name>T1</name></expr></argument>, <argument><expr><name>typename</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT1</name></expr></argument>, <argument><expr><name>SPSTagT2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>P</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>P</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>P</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>P</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>, <argument><expr><name>__orc_rt</name><operator>::</operator><name>string_view</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__orc_rt</name><operator>::</operator><name>string_view</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>__orc_rt</name><operator>::</operator><name>string_view</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>OB</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>, <argument><expr><name>__orc_rt</name><operator>::</operator><name>string_view</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <call><name><name>IB</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>IB</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>S</name> <operator>=</operator> <block>{<expr><name>Data</name></expr>, <expr><name>Size</name></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SPSError</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SPSExpected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>










<struct>struct <name>SPSSerializableError</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>HasError</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ErrMsg</name></expr>;</expr_stmt>
}</block>;</struct>






<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>SPSSerializableExpected</name> <block>{
<expr><name>bool</name> <name>HasValue</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>T</name> <name>Value</name><block>{}</block></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ErrMsg</name></expr>;
}</block></expr>;</expr_stmt>

<function><type><specifier>inline</specifier> <name>SPSSerializableError</name></type> <name>toSPSSerializable</name><parameter_list>(<parameter><decl><type><name>Error</name></type> <name>Err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{<expr><name>true</name></expr>, <macro><name>toString</name><argument_list>(<argument>std::move(Err)</argument>)</argument_list></macro>}</block></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><block>{<expr><name>false</name></expr>, <expr><block>{}</block></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Error</name></type> <name>fromSPSSerializable</name><parameter_list>(<parameter><decl><type><name>SPSSerializableError</name></type> <name>BSE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>toSPSSerializable</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{<expr><name>true</name></expr>, <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><block>{}</block></expr>}</block></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><block>{<expr><name>false</name></expr>, <expr><block>{}</block></expr>, <macro><name>toString</name><argument_list>(<argument>E.takeError()</argument>)</argument_list></macro>}</block></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>fromSPSSerializable</name><parameter_list>(<parameter><decl><type><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>BSE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSError</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><name>SPSSerializableError</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>SPSSerializableError</name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>SPSSerializableError</name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>SPSSerializableError</name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>BSE</name><operator>.</operator><name>HasError</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSExpected</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>Size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><name>SPSInputBuffer</name> <operator>&amp;</operator><name>IB</name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>BSE</name><operator>.</operator><name>HasValue</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSExpected</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><name>SPSSerializableError</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>SPSSerializableError</name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot serialize expected from a success value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><argument_list>(<argument><expr><name>SPSOutputBuffer</name> <operator>&amp;</operator><name>OB</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>detail</name><operator>::</operator><name>SPSSerializableError</name> <operator>&amp;</operator><name>BSE</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>BSE</name><operator>.</operator><name>HasError</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot serialize expected from a success value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSString</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name><name>BSE</name><operator>.</operator><name>ErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSExpected</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>OB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
