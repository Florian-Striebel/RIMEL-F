<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/dfsan/dfsan_platform.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_PLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_PLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>__sanitizer</name><operator>::</operator><name>uptr</name></expr>;</expr_stmt>




<struct>struct <name>MappingDesc</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name></decl>;</decl_stmt>
<enum>enum <name>Type</name> <block>{ <decl><name>INVALID</name></decl>, <decl><name>APP</name></decl>, <decl><name>SHADOW</name></decl>, <decl><name>ORIGIN</name></decl> }</block> <decl><name>type</name></decl>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>






<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><literal type="number">0x110000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x110000000000ULL</literal></expr>, <expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><literal type="number">0x500000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x500000000000ULL</literal></expr>, <expr><literal type="number">0x510000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x510000000000ULL</literal></expr>, <expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><literal type="number">0x610000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x610000000000ULL</literal></expr>, <expr><literal type="number">0x700000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x700000000000ULL</literal></expr>, <expr><literal type="number">0x800000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-3"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) ^ 0x500000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) + 0x100000000000ULL)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported platform"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kMemoryLayoutSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>kMemoryLayout</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kMemoryLayout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SHADOW_TO_ORIGIN(MEM_TO_SHADOW((mem))))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(optimize(<literal type="string">"unroll-loops"</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type>
<name>addr_is_type</name><argument_list>(<argument><expr><name>uptr</name> <name>addr</name></expr></argument>, <argument><expr><name>MappingDesc</name><operator>::</operator><name>Type</name> <name>mapping_type</name></expr></argument>)</argument_list> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unroll</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kMemoryLayoutSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>mapping_type</name> <operator>&amp;&amp;</operator>
<name>addr</name> <operator>&gt;=</operator> <name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_APP</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::APP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::SHADOW)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::ORIGIN)</cpp:value></cpp:define>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
