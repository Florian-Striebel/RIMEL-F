<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/os_version_check.c">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dispatch/dispatch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>GlobalMajor</name></decl>, <decl><type ref="prev"/><name>GlobalMinor</name></decl>, <decl><type ref="prev"/><name>GlobalSubminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dispatch_once_t</name></type> <name>DispatchOnceCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dispatch_once_t</name></type> <name>CompatibilityDispatchOnceCounter</name></decl>;</decl_stmt>


<typedef>typedef <type><name>uint32_t</name></type> <name>dyld_platform_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>dyld_platform_t</name></type> <name>platform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
}</block></struct></type> <name>dyld_build_version_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>AvailabilityVersionCheckFuncTy</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>dyld_build_version_t</name></type> <name><name>versions</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AvailabilityVersionCheckFuncTy</name></type> <name>AvailabilityVersionCheck</name></decl>;</decl_stmt>




<typedef>typedef <type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>CFDataRef</name>, <modifier>*</modifier><name>CFAllocatorRef</name>, <modifier>*</modifier><name>CFPropertyListRef</name>,
<modifier>*</modifier><name>CFStringRef</name>, <modifier>*</modifier><name>CFDictionaryRef</name>, <modifier>*</modifier><name>CFTypeRef</name>, <modifier>*</modifier><name>CFErrorRef</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__LLP64__</name></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>CFTypeID</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>CFOptionFlags</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>CFIndex</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>CFTypeID</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>CFOptionFlags</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name></type> <name>CFIndex</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>UInt8</name>;</typedef>
<typedef>typedef <type><name>_Bool</name></type> <name>Boolean</name>;</typedef>
<typedef>typedef <type><name>CFIndex</name></type> <name>CFPropertyListFormat</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>CFStringEncoding</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF_STRING_ENCODING_ASCII</name></cpp:macro> <cpp:value>0x0600</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF_STRING_ENCODING_UTF8</name></cpp:macro> <cpp:value>0x08000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CF_PROPERTY_LIST_IMMUTABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>CFDataRef</name></type> (<modifier>*</modifier><name>CFDataCreateWithBytesNoCopyFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>UInt8</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>CFIndex</name></type></decl></parameter>,
<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CFPropertyListRef</name></type> (<modifier>*</modifier><name>CFPropertyListCreateWithDataFuncTy</name>)<parameter_list>(
<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>, <parameter><decl><type><name>CFDataRef</name></type></decl></parameter>, <parameter><decl><type><name>CFOptionFlags</name></type></decl></parameter>, <parameter><decl><type><name>CFPropertyListFormat</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>CFErrorRef</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CFPropertyListRef</name></type> (<modifier>*</modifier><name>CFPropertyListCreateFromXMLDataFuncTy</name>)<parameter_list>(
<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>, <parameter><decl><type><name>CFDataRef</name></type></decl></parameter>, <parameter><decl><type><name>CFOptionFlags</name></type></decl></parameter>, <parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CFStringRef</name></type> (<modifier>*</modifier><name>CFStringCreateWithCStringNoCopyFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>CFStringEncoding</name></type></decl></parameter>,
<parameter><decl><type><name>CFAllocatorRef</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>CFDictionaryGetValueFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFDictionaryRef</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CFTypeID</name></type> (<modifier>*</modifier><name>CFGetTypeIDFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFTypeRef</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CFTypeID</name></type> (<modifier>*</modifier><name>CFStringGetTypeIDFuncTy</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Boolean</name></type> (<modifier>*</modifier><name>CFStringGetCStringFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFStringRef</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>CFIndex</name></type></decl></parameter>,
<parameter><decl><type><name>CFStringEncoding</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CFReleaseFuncTy</name>)<parameter_list>(<parameter><decl><type><name>CFTypeRef</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_initializeAvailabilityCheck</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>LoadPlist</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>AvailabilityVersionCheck</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LoadPlist</name></expr>)</condition> <block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>AvailabilityVersionCheck</name> <operator>=</operator> <operator>(</operator><name>AvailabilityVersionCheckFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(
<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"_availability_version_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>AvailabilityVersionCheck</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LoadPlist</name></expr>)</condition> <block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>NullAllocator</name> <init>= <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"kCFAllocatorNull"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NullAllocator</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CFAllocatorRef</name></type> <name>AllocatorNull</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>CFAllocatorRef</name> <operator>*</operator><operator>)</operator><name>NullAllocator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDataCreateWithBytesNoCopyFuncTy</name></type> <name>CFDataCreateWithBytesNoCopyFunc</name> <init>=
<expr><operator>(</operator><name>CFDataCreateWithBytesNoCopyFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>,
<argument><expr><literal type="string">"CFDataCreateWithBytesNoCopy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFDataCreateWithBytesNoCopyFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFPropertyListCreateWithDataFuncTy</name></type> <name>CFPropertyListCreateWithDataFunc</name> <init>=
<expr><operator>(</operator><name>CFPropertyListCreateWithDataFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>,
<argument><expr><literal type="string">"CFPropertyListCreateWithData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
<decl_stmt><decl><type><name>CFPropertyListCreateFromXMLDataFuncTy</name></type> <name>CFPropertyListCreateFromXMLDataFunc</name> <init>=
<expr><operator>(</operator><name>CFPropertyListCreateFromXMLDataFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(
<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFPropertyListCreateFromXMLData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFPropertyListCreateWithDataFunc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>CFPropertyListCreateFromXMLDataFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFStringCreateWithCStringNoCopyFuncTy</name></type> <name>CFStringCreateWithCStringNoCopyFunc</name> <init>=
<expr><operator>(</operator><name>CFStringCreateWithCStringNoCopyFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(
<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFStringCreateWithCStringNoCopy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFStringCreateWithCStringNoCopyFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFDictionaryGetValueFuncTy</name></type> <name>CFDictionaryGetValueFunc</name> <init>=
<expr><operator>(</operator><name>CFDictionaryGetValueFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFDictionaryGetValue"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFDictionaryGetValueFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFGetTypeIDFuncTy</name></type> <name>CFGetTypeIDFunc</name> <init>=
<expr><operator>(</operator><name>CFGetTypeIDFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFGetTypeID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFGetTypeIDFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFStringGetTypeIDFuncTy</name></type> <name>CFStringGetTypeIDFunc</name> <init>=
<expr><operator>(</operator><name>CFStringGetTypeIDFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFStringGetTypeID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFStringGetTypeIDFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFStringGetCStringFuncTy</name></type> <name>CFStringGetCStringFunc</name> <init>=
<expr><operator>(</operator><name>CFStringGetCStringFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFStringGetCString"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFStringGetCStringFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFReleaseFuncTy</name></type> <name>CFReleaseFunc</name> <init>=
<expr><operator>(</operator><name>CFReleaseFuncTy</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"CFRelease"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFReleaseFunc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>PListPath</name> <init>= <expr><literal type="string">"/System/Library/CoreServices/SystemVersion.plist"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_SIMULATOR</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>PListPathPrefix</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"IPHONE_SIMULATOR_ROOT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PListPathPrefix</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>FullPath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>PListPathPrefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PListPath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>FullPath</name></expr></argument>, <argument><expr><name>PListPathPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>FullPath</name></expr></argument>, <argument><expr><name>PListPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PListPath</name> <operator>=</operator> <name>FullPath</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>PropertyList</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>PListPath</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PropertyList</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>PListRef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDataRef</name></type> <name>FileContentsRef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt8</name> <modifier>*</modifier></type><name>PListBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>PropertyList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>PListFileSize</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>PropertyList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>PListFileSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>PropertyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PListBuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>PListFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PListBuf</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>NumRead</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>PListBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>PListFileSize</name></expr></argument>, <argument><expr><name>PropertyList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NumRead</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>PListFileSize</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>FileContentsRef</name> <operator>=</operator> <call>(<modifier>*</modifier><name>CFDataCreateWithBytesNoCopyFunc</name>)<argument_list>(
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PListBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>CFIndex</name><operator>)</operator><name>NumRead</name></expr></argument>, <argument><expr><name>AllocatorNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>FileContentsRef</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CFPropertyListCreateWithDataFunc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>PListRef</name> <operator>=</operator> <call>(<modifier>*</modifier><name>CFPropertyListCreateWithDataFunc</name>)<argument_list>(
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FileContentsRef</name></expr></argument>, <argument><expr><name>CF_PROPERTY_LIST_IMMUTABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>PListRef</name> <operator>=</operator> <call>(<modifier>*</modifier><name>CFPropertyListCreateFromXMLDataFunc</name>)<argument_list>(
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FileContentsRef</name></expr></argument>, <argument><expr><name>CF_PROPERTY_LIST_IMMUTABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PListRef</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>ProductVersion</name> <init>= <expr><call>(<modifier>*</modifier><name>CFStringCreateWithCStringNoCopyFunc</name>)<argument_list>(
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ProductVersion"</literal></expr></argument>, <argument><expr><name>CF_STRING_ENCODING_ASCII</name></expr></argument>, <argument><expr><name>AllocatorNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ProductVersion</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>OpaqueValue</name> <init>= <expr><call>(<modifier>*</modifier><name>CFDictionaryGetValueFunc</name>)<argument_list>(<argument><expr><name>PListRef</name></expr></argument>, <argument><expr><name>ProductVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>CFReleaseFunc</name>)<argument_list>(<argument><expr><name>ProductVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>OpaqueValue</name> <operator>||</operator>
<call>(<modifier>*</modifier><name>CFGetTypeIDFunc</name>)<argument_list>(<argument><expr><name>OpaqueValue</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call>(<modifier>*</modifier><name>CFStringGetTypeIDFunc</name>)<argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>VersionStr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name>CFStringGetCStringFunc</name>)<argument_list>(<argument><expr><operator>(</operator><name>CFStringRef</name><operator>)</operator><name>OpaqueValue</name></expr></argument>, <argument><expr><name>VersionStr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VersionStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CF_STRING_ENCODING_UTF8</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>Fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>VersionStr</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GlobalMajor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GlobalMinor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GlobalSubminor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>PListRef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>CFReleaseFunc</name>)<argument_list>(<argument><expr><name>PListRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>FileContentsRef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>CFReleaseFunc</name>)<argument_list>(<argument><expr><name>FileContentsRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>PListBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>PropertyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>compatibilityInitializeAvailabilityCheck</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Unused</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_initializeAvailabilityCheck</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initializeAvailabilityCheck</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Unused</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_initializeAvailabilityCheck</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int32_t</name></type> <name>__isOSVersionAtLeast</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>Major</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>Minor</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>Subminor</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>dispatch_once_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CompatibilityDispatchOnceCounter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>compatibilityInitializeAvailabilityCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Major</name> <operator>&lt;</operator> <name>GlobalMajor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Major</name> <operator>&gt;</operator> <name>GlobalMajor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Minor</name> <operator>&lt;</operator> <name>GlobalMinor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Minor</name> <operator>&gt;</operator> <name>GlobalMinor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Subminor</name> <operator>&lt;=</operator> <name>GlobalSubminor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ConstructVersion</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Major</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Minor</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>Subminor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>Major</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Minor</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Subminor</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>__isPlatformVersionAtLeast</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Platform</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Major</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>Minor</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Subminor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>dispatch_once_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DispatchOnceCounter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>initializeAvailabilityCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>AvailabilityVersionCheck</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>__isOSVersionAtLeast</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Subminor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>dyld_build_version_t</name></type> <name><name>Versions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>Platform</name></expr>, <macro><name>ConstructVersion</name><argument_list>(<argument>Major</argument>, <argument>Minor</argument>, <argument>Subminor</argument>)</argument_list></macro>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>AvailabilityVersionCheck</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Versions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__ANDROID__</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/system_properties.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SdkVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>IsPreRelease</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>readSystemProperties</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PROP_VALUE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__system_property_get</name><argument_list>(<argument><expr><literal type="string">"ro.build.version.sdk"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>SdkVersion</name> <operator>=</operator> <name>__ANDROID_API_FUTURE__</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>SdkVersion</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__system_property_get</name><argument_list>(<argument><expr><literal type="string">"ro.build.version.codename"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>IsPreRelease</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>IsPreRelease</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"REL"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>__isOSVersionAtLeast</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>Major</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>Minor</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>Subminor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name>Minor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name>Subminor</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once</name></expr></argument>, <argument><expr><name>readSystemProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>SdkVersion</name> <operator>&gt;=</operator> <name>Major</name> <operator>||</operator>
<operator>(</operator><name>IsPreRelease</name> <operator>&amp;&amp;</operator> <name>Major</name> <operator>==</operator> <name>__ANDROID_API_FUTURE__</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<typedef>typedef <type><name>int</name></type> <name>unused</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
