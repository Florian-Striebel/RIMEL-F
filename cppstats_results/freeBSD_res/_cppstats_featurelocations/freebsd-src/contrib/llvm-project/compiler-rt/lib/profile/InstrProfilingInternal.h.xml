<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingInternal.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROFILE_INSTRPROFILING_INTERNALH_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_INSTRPROFILING_INTERNALH_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>







<function_decl><type><name>uint64_t</name></type> <name>__llvm_profile_get_size_for_buffer_internal</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>__llvm_profile_write_buffer_internal</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>)</parameter_list>;</function_decl>











<typedef>typedef <type><struct>struct <name>ProfDataIOVec</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ElmSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NumElm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>UseZeroPadding</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProfDataIOVec</name>;</typedef>

<struct_decl>struct <name>ProfDataWriter</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>WriterCallback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ProfDataWriter</name></name> <modifier>*</modifier></type><name>This</name></decl></parameter>, <parameter><decl><type><name>ProfDataIOVec</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>NumIOVecs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>ProfDataWriter</name> <block>{
<decl_stmt><decl><type><name>WriterCallback</name></type> <name>Write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>WriterCtx</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProfDataWriter</name>;</typedef>




<typedef>typedef <type><struct>struct <name>ProfBufferIO</name> <block>{
<decl_stmt><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>FileWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>OwnFileWriter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>BufferStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>BufferSz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>CurOffset</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProfBufferIO</name>;</typedef>


<function_decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>lprofCreateBufferIOInternal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>File</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSz</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>lprofCreateBufferIO</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>FileWriter</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lprofDeleteBufferIO</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>lprofBufferIOWrite</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>lprofBufferIOFlush</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>uint32_t</name></type> <name>lprofBufferWriter</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>This</name></decl></parameter>, <parameter><decl><type><name>ProfDataIOVec</name> <modifier>*</modifier></type><name>IOVecs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>NumIOVecs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initBufferWriter</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>BufferWriter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>ValueProfData</name>;</struct_decl>
<struct_decl>struct <name>ValueProfRecord</name>;</struct_decl>
<struct_decl>struct <name>InstrProfValueData</name>;</struct_decl>
<struct_decl>struct <name>ValueProfNode</name>;</struct_decl>





<typedef>typedef <type><struct>struct <name>VPDataReaderType</name> <block>{
<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>InitRTRecord</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>SiteCountArray</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>GetValueProfRecordHeaderSize</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>NumSites</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ValueProfRecord</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>GetFirstValueProfRecord</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ValueProfData</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>GetNumValueDataForSite</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>VK</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Site</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>GetValueProfDataSize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name><name>struct</name> <name>ValueProfNode</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>GetValueData</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ValueKind</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Site</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>InstrProfValueData</name></name> <modifier>*</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ValueProfNode</name></name> <modifier>*</modifier></type><name>StartNode</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>VPDataReaderType</name>;</typedef>



<function_decl><type><name>int</name></type> <name>lprofWriteData</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>, <parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>SkipNameDataWrite</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lprofWriteDataImpl</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>,
<parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>SkipNameDataWrite</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>lprofMergeValueProfData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ValueProfData</name></name> <modifier>*</modifier></type><name>SrcValueProfData</name></decl></parameter>,
<parameter><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DstData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>lprofGetVPDataReader</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>lprofSetMaxValsPerSite</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>MaxVals</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lprofSetupValueProfiler</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>uint64_t</name></type> <name>lprofGetLoadModuleSignature</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>unsigned</name></type> <name>lprofProfileDumped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lprofSetProfileDumped</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>FreeHook</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>DynamicBufferIOBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>uint32_t</name></type> <name>VPBufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>uint32_t</name></type> <name>VPMaxNumValsPerSite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>ValueProfNode</name> <modifier>*</modifier></type><name>EndVNode</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>VPMergeHook</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ValueProfData</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__llvm_profile_data</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
