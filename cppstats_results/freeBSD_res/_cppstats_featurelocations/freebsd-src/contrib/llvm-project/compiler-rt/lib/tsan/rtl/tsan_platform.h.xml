<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_platform.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_PLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_PLATFORM_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Only 64-bit is supported"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_trace.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_48_BIT_ADDRESS_SPACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_IOSSIM</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_48_BIT_ADDRESS_SPACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_IOS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_48_BIT_ADDRESS_SPACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_48_BIT_ADDRESS_SPACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_48_BIT_ADDRESS_SPACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAS_48_BIT_ADDRESS_SPACE</name></expr></cpp:if>





























<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x340000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x600000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x620000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x7b0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x7c0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x008000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemBeg</name> <init>= <expr><literal type="number">0x550000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemEnd</name> <init>= <expr><literal type="number">0x568000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x7e8000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x800000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x780000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x040000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0xf000000000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_MID_APP_RANGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
















<struct>struct <name>Mapping40</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x4000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x5000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0xb000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0xb200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x2000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x4000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0xfe00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0xff00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x0100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x0200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemBeg</name> <init>= <expr><literal type="number">0xaa00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemEnd</name> <init>= <expr><literal type="number">0xab00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0xff80000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0xffffffffffull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0xf800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x0800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0xfffff00000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_MID_APP_RANGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>













<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x0100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x0200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x0200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x0300000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x0400000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x0c00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x0d00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x0e00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x0f00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x0fc0000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x0fc0000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x0fc0000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x0ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x0ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x7000000000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>





















<struct>struct <name>Mapping39</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x0000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x0100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x0800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x2000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x3100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x3400000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemBeg</name> <init>= <expr><literal type="number">0x5500000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemEnd</name> <init>= <expr><literal type="number">0x5600000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x6000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x6200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x7c00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x7d00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x7e00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x7fffffffffull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x7800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x0200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x7f00000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>
















<struct>struct <name>Mapping42</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x00000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x01000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x10000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x20000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x26000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x28000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemBeg</name> <init>= <expr><literal type="number">0x2aa00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemEnd</name> <init>= <expr><literal type="number">0x2ab00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x36200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x36400000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x3e000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x3f000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x3f000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x3ffffffffffull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x3c000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x04000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x37f00000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Mapping48</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x0000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x0000200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x0002000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x0004000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x0005000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x0006000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemBeg</name> <init>= <expr><literal type="number">0x0aaaa00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidAppMemEnd</name> <init>= <expr><literal type="number">0x0aaaf00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x0f06000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x0f06200000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x0ffff00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x0ffff00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x0ffff00000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x1000000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x0fff800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x0000800000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0xffff000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_MID_APP_RANGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>




















<struct>struct <name>Mapping44</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x0b0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x0d0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x0d0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x0f0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x000100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x0b0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x000000000100ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x000100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x0f0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x0f5000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x0f6000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x0f0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x002100000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x3c0000000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>















<struct>struct <name>Mapping46</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x220000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x3d0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x3e0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x3e8000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x3c0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x020000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x7800000000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>















<struct>struct <name>Mapping47</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x220000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0x7d0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0x7e0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0x7e8000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0x800000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0x7c0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x020000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0x7800000000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>














<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x900000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x980000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0xa00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0xb00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x800000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemBeg</name> <init>= <expr><literal type="number">0xbe0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHeapMemEnd</name> <init>= <expr><literal type="number">0xc00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLoAppMemEnd</name> <init>= <expr><literal type="number">0x0e0000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemBeg</name> <init>= <expr><literal type="number">0xc00000004000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kHiAppMemEnd</name> <init>= <expr><literal type="number">0xc00000004000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemMsk</name> <init>= <expr><literal type="number">0xb00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemXor</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kVdsoBeg</name> <init>= <expr><literal type="number">0xfffffffff000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_WINDOWS</name> <operator>&amp;&amp;</operator> <name>HAS_48_BIT_ADDRESS_SPACE</name></expr></cpp:elif>














<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x600000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x620000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x238000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <name>SANITIZER_WINDOWS</name></expr></cpp:elif>













<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x076000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x07d000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x056000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x076000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x010000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x050000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
















<struct>struct <name>Mapping46</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x240000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x340000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x360000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x380000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x238000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>














<struct>struct <name>Mapping47</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x600000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x620000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>














<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x600000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x620000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>













<struct>struct <name>Mapping47</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0x600000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0x620000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x200000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x300000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x00e000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RUNTIME_VMA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>










<struct>struct <name>Mapping</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowBeg</name> <init>= <expr><literal type="number">0x900000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaShadowEnd</name> <init>= <expr><literal type="number">0x980000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemBeg</name> <init>= <expr><literal type="number">0xa00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kTraceMemEnd</name> <init>= <expr><literal type="number">0xb00000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowBeg</name> <init>= <expr><literal type="number">0x400000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kShadowEnd</name> <init>= <expr><literal type="number">0x800000000000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemBeg</name> <init>= <expr><literal type="number">0x000000001000ull</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAppMemEnd</name> <init>= <expr><literal type="number">0x100000000000ull</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unknown platform"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_RUNTIME_VMA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>vmaSize</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <name>MappingType</name> <block>{
<decl><name>MAPPING_LO_APP_BEG</name></decl>,
<decl><name>MAPPING_LO_APP_END</name></decl>,
<decl><name>MAPPING_HI_APP_BEG</name></decl>,
<decl><name>MAPPING_HI_APP_END</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>MAPPING_MID_APP_BEG</name></decl>,
<decl><name>MAPPING_MID_APP_END</name></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>MAPPING_HEAP_BEG</name></decl>,
<decl><name>MAPPING_HEAP_END</name></decl>,
<decl><name>MAPPING_APP_BEG</name></decl>,
<decl><name>MAPPING_APP_END</name></decl>,
<decl><name>MAPPING_SHADOW_BEG</name></decl>,
<decl><name>MAPPING_SHADOW_END</name></decl>,
<decl><name>MAPPING_META_SHADOW_BEG</name></decl>,
<decl><name>MAPPING_META_SHADOW_END</name></decl>,
<decl><name>MAPPING_TRACE_BEG</name></decl>,
<decl><name>MAPPING_TRACE_END</name></decl>,
<decl><name>MAPPING_VDSO_BEG</name></decl>,
}</block>;</enum>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>, <argument><expr><name>int</name> <name>Type</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>MappingImpl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Type</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><name>MAPPING_LO_APP_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kLoAppMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_LO_APP_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kLoAppMemEnd</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MAPPING_MID_APP_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kMidAppMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_MID_APP_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kMidAppMemEnd</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>MAPPING_HI_APP_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kHiAppMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_HI_APP_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kHiAppMemEnd</name></expr>;</return>
<case>case <expr><name>MAPPING_HEAP_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kHeapMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_HEAP_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kHeapMemEnd</name></expr>;</return>
<case>case <expr><name>MAPPING_VDSO_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kVdsoBeg</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>MAPPING_APP_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kAppMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_APP_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kAppMemEnd</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>MAPPING_SHADOW_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kShadowBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_SHADOW_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kShadowEnd</name></expr>;</return>
<case>case <expr><name>MAPPING_META_SHADOW_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kMetaShadowBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_META_SHADOW_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kMetaShadowEnd</name></expr>;</return>
<case>case <expr><name>MAPPING_TRACE_BEG</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kTraceMemBeg</name></expr>;</return>
<case>case <expr><name>MAPPING_TRACE_END</name></expr>:</case> <return>return <expr><name>Mapping</name><operator>::</operator><name>kTraceMemEnd</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>int</name> <name>Type</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>MappingArchImpl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>MappingImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>LoAppMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_LO_APP_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>LoAppMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_LO_APP_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>MidAppMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_MID_APP_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>MidAppMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_MID_APP_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>HeapMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_HEAP_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>HeapMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_HEAP_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>HiAppMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_HI_APP_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>HiAppMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_HI_APP_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>VdsoBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_VDSO_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>AppMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_APP_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>AppMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_APP_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>bool</name></type> <name>GetUserRegion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>LoAppMemBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>LoAppMemEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>HiAppMemBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>HiAppMemEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>HeapMemBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>HeapMemEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>MidAppMemBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>MidAppMemEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>AppMemBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>AppMemEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>ShadowBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_SHADOW_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>ShadowEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_SHADOW_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>MetaShadowBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_META_SHADOW_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>MetaShadowEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_META_SHADOW_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>TraceMemBeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_TRACE_BEG</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>TraceMemEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>MappingArchImpl</name><argument_list type="generic">&lt;<argument><expr><name>MAPPING_TRACE_END</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>IsAppMemImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kHeapMemBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kHeapMemEnd</name><operator>)</operator> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kMidAppMemBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kMidAppMemEnd</name><operator>)</operator> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kLoAppMemBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kLoAppMemEnd</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kHiAppMemBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kHiAppMemEnd</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kAppMemBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kAppMemEnd</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>bool</name></type> <name>IsAppMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>IsAppMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>IsShadowMemImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kShadowBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;=</operator> <name>Mapping</name><operator>::</operator><name>kShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>bool</name></type> <name>IsShadowMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>IsShadowMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>IsMetaMemImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>mem</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kMetaShadowBeg</name> <operator>&amp;&amp;</operator> <name>mem</name> <operator>&lt;=</operator> <name>Mapping</name><operator>::</operator><name>kMetaShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>bool</name></type> <name>IsMetaMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>IsMetaMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>MemToShadowImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>IsAppMem</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>Mapping</name><operator>::</operator><name>kAppMemMsk</name> <operator>|</operator> <operator>(</operator><name>kShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>^</operator> <name>Mapping</name><operator>::</operator><name>kAppMemXor</name><operator>)</operator> <operator>*</operator> <name>kShadowCnt</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>kShadowCnt</name><operator>)</operator> <operator>|</operator> <name>Mapping</name><operator>::</operator><name>kShadowBeg</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>kShadowCnt</name><operator>)</operator> <operator>+</operator> <name>Mapping</name><operator>::</operator><name>kShadowBeg</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>MemToShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>MemToShadowImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>u32</name> <modifier>*</modifier></type><name>MemToMetaImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>IsAppMem</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>Mapping</name><operator>::</operator><name>kAppMemMsk</name> <operator>|</operator> <operator>(</operator><name>kMetaShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator>
<name>kMetaShadowCell</name> <operator>*</operator> <name>kMetaShadowSize</name><operator>)</operator> <operator>|</operator> <name>Mapping</name><operator>::</operator><name>kMetaShadowBeg</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kMetaShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> \
<name>kMetaShadowCell</name> <operator>*</operator> <name>kMetaShadowSize</name><operator>)</operator> <operator>|</operator> <name>Mapping</name><operator>::</operator><name>kMetaShadowBeg</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kMetaShadowCell</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> \
<name>kMetaShadowCell</name> <operator>*</operator> <name>kMetaShadowSize</name><operator>)</operator> <operator>+</operator> <name>Mapping</name><operator>::</operator><name>kMetaShadowBeg</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>u32</name> <modifier>*</modifier></type><name>MemToMeta</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>MemToMetaImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>ShadowToMemImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>IsShadowMem</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>





<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>s</name> <operator>/</operator> <name>kShadowCnt</name><operator>)</operator> <operator>^</operator> <name>Mapping</name><operator>::</operator><name>kAppMemXor</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kLoAppMemBeg</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kLoAppMemEnd</name> <operator>&amp;&amp;</operator>
<call><name>MemToShadow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MID_APP_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>/</operator> <name>kShadowCnt</name><operator>)</operator> <operator>^</operator> <name>Mapping</name><operator>::</operator><name>kAppMemXor</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>Mapping</name><operator>::</operator><name>kMidAppMemBeg</name> <operator>&amp;</operator> <name>Mapping</name><operator>::</operator><name>kAppMemMsk</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>Mapping</name><operator>::</operator><name>kMidAppMemBeg</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>Mapping</name><operator>::</operator><name>kMidAppMemEnd</name> <operator>&amp;&amp;</operator>
<call><name>MemToShadow</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><operator>(</operator><name>s</name> <operator>/</operator> <name>kShadowCnt</name><operator>)</operator> <operator>^</operator> <name>Mapping</name><operator>::</operator><name>kAppMemXor</name><operator>)</operator> <operator>|</operator> <name>Mapping</name><operator>::</operator><name>kAppMemMsk</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>s</name> <operator>&amp;</operator> <operator>~</operator><name>Mapping</name><operator>::</operator><name>kShadowBeg</name><operator>)</operator> <operator>/</operator> <name>kShadowCnt</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>s</name> <operator>-</operator> <name>Mapping</name><operator>::</operator><name>kShadowBeg</name><operator>)</operator> <operator>/</operator> <name>kShadowCnt</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>ShadowToMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>ShadowToMemImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kTotalTraceSize</name> <init>= <expr><operator>(</operator><name>kTraceSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Event</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Trace</name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>GetThreadTraceImpl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><name>Mapping</name><operator>::</operator><name>kTraceMemBeg</name> <operator>+</operator> <operator>(</operator><name>uptr</name><operator>)</operator><name>tid</name> <operator>*</operator> <name>kTotalTraceSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Mapping</name><operator>::</operator><name>kTraceMemEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>GetThreadTrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>GetThreadTraceImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Mapping</name></expr></argument>&gt;</argument_list></name>
<name>uptr</name></type> <name>GetThreadTraceHeaderImpl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><name>Mapping</name><operator>::</operator><name>kTraceMemBeg</name> <operator>+</operator> <operator>(</operator><name>uptr</name><operator>)</operator><name>tid</name> <operator>*</operator> <name>kTotalTraceSize</name>
<operator>+</operator> <name>kTraceSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Event</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Mapping</name><operator>::</operator><name>kTraceMemEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name>
<name>uptr</name></type> <name>GetThreadTraceHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping39</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping42</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping48</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping44</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping46</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<switch>switch <condition>(<expr><name>vmaSize</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping40</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping47</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name><name>GetThreadTraceHeaderImpl</name><argument_list type="generic">&lt;<argument><expr><name>Mapping</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>InitializePlatform</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializePlatformEarly</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CheckAndProtect</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeShadowMemoryPlatform</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FlushShadowMemory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>WriteMemoryProfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nthread</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nlive</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ExtractResolvFDs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ExtractRecvmsgFDs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>ExtractLongJmpSp</name><parameter_list>(<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ImitateTlsWrite</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>tls_addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>tls_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>call_pthread_cancel_with_cleanup</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DestroyThreadState</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PlatformCleanUpThreadState</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
