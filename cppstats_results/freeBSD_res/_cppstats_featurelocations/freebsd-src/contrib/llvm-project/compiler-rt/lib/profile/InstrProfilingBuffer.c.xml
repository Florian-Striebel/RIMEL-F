<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingBuffer.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingPort.h"</cpp:file></cpp:include>







<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ContinuouslySyncProfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>PageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_profile_is_continuous_mode_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ContinuouslySyncProfile</name> <operator>&amp;&amp;</operator> <name>PageSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>__llvm_profile_enable_continuous_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ContinuouslySyncProfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>__llvm_profile_set_page_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>PS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>PageSize</name> <operator>=</operator> <name>PS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name></type> <name>__llvm_profile_get_size_for_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name> <init>= <expr><call><name>__llvm_profile_begin_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name> <init>= <expr><call><name>__llvm_profile_end_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name> <init>= <expr><call><name>__llvm_profile_begin_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name> <init>= <expr><call><name>__llvm_profile_end_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name> <init>= <expr><call><name>__llvm_profile_begin_names</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name> <init>= <expr><call><name>__llvm_profile_end_names</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>__llvm_profile_get_size_for_buffer_internal</name><argument_list>(
<argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>, <argument><expr><name>CountersBegin</name></expr></argument>, <argument><expr><name>CountersEnd</name></expr></argument>, <argument><expr><name>NamesBegin</name></expr></argument>, <argument><expr><name>NamesEnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name></type> <name>__llvm_profile_get_data_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Begin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>BeginI</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>Begin</name></expr></init></decl>, <decl><type ref="prev"/><name>EndI</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>End</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>EndI</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_data</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>BeginI</name><operator>)</operator> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_data</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>calculateBytesNeededToPageAlign</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>Offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>OffsetModPage</name> <init>= <expr><name>Offset</name> <operator>%</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>OffsetModPage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PageSize</name> <operator>-</operator> <name>OffsetModPage</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>needsCounterPadding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__llvm_profile_is_continuous_mode_enabled</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>__llvm_profile_get_padding_sizes_for_counters</name><parameter_list>(
<parameter><decl><type><name>uint64_t</name></type> <name>DataSize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>CountersSize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>NamesSize</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesBeforeCounters</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesAfterCounters</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesAfterNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>needsCounterPadding</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesBeforeCounters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesAfterCounters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesAfterNames</name> <operator>=</operator> <call><name>__llvm_profile_get_num_padding_bytes</name><argument_list>(<argument><expr><name>NamesSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>DataSizeInBytes</name> <init>= <expr><name>DataSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CountersSizeInBytes</name> <init>= <expr><name>CountersSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesBeforeCounters</name> <operator>=</operator> <call><name>calculateBytesNeededToPageAlign</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>DataSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesAfterCounters</name> <operator>=</operator>
<call><name>calculateBytesNeededToPageAlign</name><argument_list>(<argument><expr><name>CountersSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>PaddingBytesAfterNames</name> <operator>=</operator> <call><name>calculateBytesNeededToPageAlign</name><argument_list>(<argument><expr><name>NamesSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name></type> <name>__llvm_profile_get_size_for_buffer_internal</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>NamesSize</name> <init>= <expr><operator>(</operator><name>NamesEnd</name> <operator>-</operator> <name>NamesBegin</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>DataSize</name> <init>= <expr><call><name>__llvm_profile_get_data_size</name><argument_list>(<argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CountersSize</name> <init>= <expr><name>CountersEnd</name> <operator>-</operator> <name>CountersBegin</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>PaddingBytesBeforeCounters</name></decl>, <decl><type ref="prev"/><name>PaddingBytesAfterCounters</name></decl>,
<decl><type ref="prev"/><name>PaddingBytesAfterNames</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__llvm_profile_get_padding_sizes_for_counters</name><argument_list>(
<argument><expr><name>DataSize</name></expr></argument>, <argument><expr><name>CountersSize</name></expr></argument>, <argument><expr><name>NamesSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PaddingBytesBeforeCounters</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>PaddingBytesAfterCounters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PaddingBytesAfterNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>__llvm_write_binary_ids</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><name>DataSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_data</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>PaddingBytesBeforeCounters</name> <operator>+</operator>
<operator>(</operator><name>CountersSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>PaddingBytesAfterCounters</name> <operator>+</operator>
<name>NamesSize</name> <operator>+</operator> <name>PaddingBytesAfterNames</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>initBufferWriter</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>BufferWriter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>BufferWriter</name><operator>-&gt;</operator><name>Write</name></name> <operator>=</operator> <name>lprofBufferWriter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferWriter</name><operator>-&gt;</operator><name>WriterCtx</name></name> <operator>=</operator> <name>Buffer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_profile_write_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProfDataWriter</name></type> <name>BufferWriter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initBufferWriter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lprofWriteData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_profile_write_buffer_internal</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProfDataWriter</name></type> <name>BufferWriter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initBufferWriter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lprofWriteDataImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>, <argument><expr><name>CountersBegin</name></expr></argument>,
<argument><expr><name>CountersEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NamesBegin</name></expr></argument>, <argument><expr><name>NamesEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
