<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_size_class_map.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








































































































<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>uptr</name> <name>kNumBits</name></expr></argument>, <argument><expr><name>uptr</name> <name>kMinSizeLog</name></expr></argument>, <argument><expr><name>uptr</name> <name>kMidSizeLog</name></expr></argument>, <argument><expr><name>uptr</name> <name>kMaxSizeLog</name></expr></argument>,
<argument><expr><name>uptr</name> <name>kMaxNumCachedHintT</name></expr></argument>, <argument><expr><name>uptr</name> <name>kMaxBytesCachedLog</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>SizeClassMap</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMinSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kMinSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kMidSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMidClass</name> <init>= <expr><name>kMidSize</name> <operator>/</operator> <name>kMinSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>S</name> <init>= <expr><name>kNumBits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>M</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxNumCachedHint</name> <init>= <expr><name>kMaxNumCachedHintT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>kMaxNumCachedHint</name> <operator>&amp;</operator> <operator>(</operator><name>kMaxNumCachedHint</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxSize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>kMaxSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumClasses</name> <init>=
<expr><name>kMidClass</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>kMaxSizeLog</name> <operator>-</operator> <name>kMidSizeLog</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kLargestClassID</name> <init>= <expr><name>kNumClasses</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kBatchClassID</name> <init>= <expr><name>kNumClasses</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><name>kNumClasses</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>kNumClasses</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumClassesRounded</name> <init>=
<expr><ternary><condition><expr><name>kNumClasses</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>kNumClasses</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>kNumClasses</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>Size</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>class_id</name> <operator>==</operator> <name>kBatchClassID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>kMaxNumCachedHint</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>class_id</name> <operator>&lt;=</operator> <name>kMidClass</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>kMinSize</name> <operator>*</operator> <name>class_id</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>class_id</name> <operator>-=</operator> <name>kMidClass</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>t</name> <init>= <expr><name>kMidSize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>class_id</name> <operator>&gt;&gt;</operator> <name>S</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>t</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>S</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>class_id</name> <operator>&amp;</operator> <name>M</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ClassID</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>kMaxSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>kMidSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <name>kMinSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>kMinSizeLog</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>l</name> <init>= <expr><call><name>MostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>hbits</name> <init>= <expr><operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name> <operator>-</operator> <name>S</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>M</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>lbits</name> <init>= <expr><name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name> <operator>-</operator> <name>S</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>l1</name> <init>= <expr><name>l</name> <operator>-</operator> <name>kMidSizeLog</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>kMidClass</name> <operator>+</operator> <operator>(</operator><name>l1</name> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>+</operator> <name>hbits</name> <operator>+</operator> <operator>(</operator><name>lbits</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>MaxCachedHint</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>kMaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kMaxBytesCachedLog</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <name>kMaxSizeLog</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>kMaxBytesCachedLog</name><operator>)</operator> <operator>/</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>kMaxBytesCachedLog</name><operator>)</operator> <operator>/</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name><name>Max</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>kMaxNumCachedHint</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Print</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>prev_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>total_cached</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>s</name> <init>= <expr><call><name>Size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>kMidSize</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&amp;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>d</name> <init>= <expr><name>s</name> <operator>-</operator> <name>prev_s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name>prev_s</name></expr> ?</condition><then> <expr><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>prev_s</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>l</name> <init>= <expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>MostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cached</name> <init>= <expr><call><name>MaxCachedHint</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>kBatchClassID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"c%02zd =&gt; s: %zd diff: +%zd %02zd%% l %zd "</literal>
<literal type="string">"cached: %zd %zd; id %zd\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>Size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>MaxCachedHint</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><call><name>ClassID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_cached</name> <operator>+=</operator> <name>cached</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_s</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Total cached: %zd\n"</literal></expr></argument>, <argument><expr><name>total_cached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Validate</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uptr</name></type> <name>s</name> <init>= <expr><call><name>Size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>kBatchClassID</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>ClassID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>kLargestClassID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>ClassID</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>ClassID</name><argument_list>(<argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><call><name>Size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Size</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>ClassID</name><argument_list>(<argument><expr><name>kMaxSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;=</operator> <name>kMaxSize</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>c</name> <init>= <expr><call><name>ClassID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><call><name>Size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><call><name>Size</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>SizeClassMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>DefaultSizeClassMap</name>;</typedef>
<typedef>typedef <type><name><name>SizeClassMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>&gt;</argument_list></name></type> <name>CompactSizeClassMap</name>;</typedef>
<typedef>typedef <type><name><name>SizeClassMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>&gt;</argument_list></name></type> <name>VeryCompactSizeClassMap</name>;</typedef>




<typedef>typedef <type><name><name>SizeClassMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>DenseSizeClassMap</name>;</typedef>


<typedef>typedef <type><name><name>SizeClassMap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>VeryDenseSizeClassMap</name>;</typedef>
</unit>
