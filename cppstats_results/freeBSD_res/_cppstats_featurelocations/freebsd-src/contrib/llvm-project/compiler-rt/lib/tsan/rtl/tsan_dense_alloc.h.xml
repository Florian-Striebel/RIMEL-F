<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_dense_alloc.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_DENSE_ALLOC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_DENSE_ALLOC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DenseSlabAllocCache</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSize</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>u32</name></type> <name>IndexT</name>;</typedef>
<decl_stmt><decl><type><name>uptr</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IndexT</name></type> <name><name>cache</name><index>[<expr><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>, <argument><expr><name>uptr</name></expr></argument>, <argument><expr><name>uptr</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name></type> <name>DenseSlabAlloc</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kL1Size</name></expr></argument>, <argument><expr><name>uptr</name> <name>kL2Size</name></expr></argument>, <argument><expr><name>u64</name> <name>kReserved</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DenseSlabAlloc</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>DenseSlabAllocCache</name></type> <name>Cache</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Cache</name><operator>::</operator><name>IndexT</name> <name>IndexT</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><name>kL1Size</name> <operator>&amp;</operator> <operator>(</operator><name>kL1Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"kL1Size must be a power-of-two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><name>kL2Size</name> <operator>&amp;</operator> <operator>(</operator><name>kL2Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"kL2Size must be a power-of-two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><name>kL1Size</name> <operator>*</operator> <name>kL2Size</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IndexT</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"kL1Size/kL2Size are too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>kL1Size</name> <operator>*</operator> <name>kL2Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>kReserved</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"reserved bits don't fit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IndexT</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"it doesn't make sense to use dense alloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>explicit</name></type> <name>DenseSlabAlloc</name><parameter_list>(<parameter><decl><type><name>LinkerInitialized</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>freelist_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fillpos_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name_</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>DenseSlabAlloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DenseSlabAlloc</name><argument_list>(<argument>LINKER_INITIALIZED</argument>, <argument>name</argument>)</argument_list></macro> <block>{


<expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>map_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>DenseSlabAlloc</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kL1Size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UnmapOrDie</name><argument_list>(<argument><expr><name><name>map_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>kL2Size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
}

IndexT Alloc(Cache *c</block></for>) <block>{
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Refill</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></block></expr></expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>cache</name><index>[<expr><operator>--</operator><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Free</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>IndexT</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>Cache</name><operator>::</operator><name>kSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>T</name> <modifier>*</modifier></type><name>Map</name><parameter_list>(<parameter><decl><type><name>IndexT</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>kL1Size</name> <operator>*</operator> <name>kL2Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>map_</name><index>[<expr><name>idx</name> <operator>/</operator> <name>kL2Size</name></expr>]</index><index>[<expr><name>idx</name> <operator>%</operator> <name>kL2Size</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FlushCache</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IndexT</name></type> <name>idx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cache</name><index>[<expr><operator>--</operator><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>IndexT</name><operator>*</operator><operator>)</operator><call><name>Map</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>freelist_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist_</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitCache</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name><name>map_</name><index>[<expr><name>kL1Size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutex</name></type> <name>mtx_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IndexT</name></type> <name>freelist_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>fillpos_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Refill</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>freelist_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fillpos_</name> <operator>==</operator> <name>kL1Size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"ThreadSanitizer: %s overflow (%zu*%zu). Dying.\n"</literal></expr></argument>,
<argument><expr><name>name_</name></expr></argument>, <argument><expr><name>kL1Size</name></expr></argument>, <argument><expr><name>kL2Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Die</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VPrintf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ThreadSanitizer: growing %s: %zu out of %zu*%zu\n"</literal></expr></argument>,
<argument><expr><name>name_</name></expr></argument>, <argument><expr><name>fillpos_</name></expr></argument>, <argument><expr><name>kL1Size</name></expr></argument>, <argument><expr><name>kL2Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>batch</name> <init>= <expr><operator>(</operator><name>T</name><operator>*</operator><operator>)</operator><call><name>MmapOrDie</name><argument_list>(<argument><expr><name>kL2Size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndexT</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name>fillpos_</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>IndexT</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kL2Size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<macro><name>new</name><argument_list>(<argument>batch + i</argument>)</argument_list></macro> <expr_stmt><expr><name>T</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>IndexT</name><operator>*</operator><operator>)</operator><operator>(</operator><name>batch</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>fillpos_</name> <operator>*</operator> <name>kL2Size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>IndexT</name><operator>*</operator><operator>)</operator><operator>(</operator><name>batch</name> <operator>+</operator> <name>kL2Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist_</name> <operator>=</operator> <name>fillpos_</name> <operator>*</operator> <name>kL2Size</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_</name><index>[<expr><name>fillpos_</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>batch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Cache</name><operator>::</operator><name>kSize</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>freelist_</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>IndexT</name></type> <name>idx</name> <init>= <expr><name>freelist_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist_</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>IndexT</name><operator>*</operator><operator>)</operator><call><name>Map</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Drain</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Cache</name><operator>::</operator><name>kSize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>IndexT</name></type> <name>idx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cache</name><index>[<expr><operator>--</operator><name><name>c</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>IndexT</name><operator>*</operator><operator>)</operator><call><name>Map</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>freelist_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist_</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
