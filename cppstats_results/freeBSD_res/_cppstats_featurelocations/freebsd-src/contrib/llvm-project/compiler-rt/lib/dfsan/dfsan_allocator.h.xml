<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/dfsan/dfsan_allocator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>

<struct>struct <name>DFsanThreadLocalMallocStorage</name> <block>{
<macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>uptr</name></type> <name><name>allocator_cache</name><index>[<expr><literal type="number">96</literal> <operator>*</operator> <operator>(</operator><literal type="number">512</literal> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>CommitBack</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<macro><name>DFsanThreadLocalMallocStorage</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
