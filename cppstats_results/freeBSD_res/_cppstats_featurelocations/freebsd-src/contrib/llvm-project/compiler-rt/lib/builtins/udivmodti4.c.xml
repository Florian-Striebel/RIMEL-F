<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/udivmodti4.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_HAS_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>UNUSED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>du_int</name></type> <name>udiv128by64to64default</name><parameter_list>(<parameter><decl><type><name>du_int</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>u0</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>du_int</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>n_udword_bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>du_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>du_int</name></type> <name>b</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>un1</name></decl>, <decl><type ref="prev"/><name>un0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>vn1</name></decl>, <decl><type ref="prev"/><name>vn0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>q1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>un64</name></decl>, <decl><type ref="prev"/><name>un21</name></decl>, <decl><type ref="prev"/><name>un10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>du_int</name></type> <name>rhat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>si_int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>un64</name> <operator>=</operator> <operator>(</operator><name>u1</name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>u0</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>un10</name> <operator>=</operator> <name>u0</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>un64</name> <operator>=</operator> <name>u1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>un10</name> <operator>=</operator> <name>u0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>vn1</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vn0</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>un1</name> <operator>=</operator> <name>un10</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>un0</name> <operator>=</operator> <name>un10</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>un64</name> <operator>/</operator> <name>vn1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rhat</name> <operator>=</operator> <name>un64</name> <operator>-</operator> <name>q1</name> <operator>*</operator> <name>vn1</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>q1</name> <operator>&gt;=</operator> <name>b</name> <operator>||</operator> <name>q1</name> <operator>*</operator> <name>vn0</name> <operator>&gt;</operator> <name>b</name> <operator>*</operator> <name>rhat</name> <operator>+</operator> <name>un1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>q1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rhat</name> <operator>=</operator> <name>rhat</name> <operator>+</operator> <name>vn1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rhat</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>un21</name> <operator>=</operator> <name>un64</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>un1</name> <operator>-</operator> <name>q1</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>


<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>un21</name> <operator>/</operator> <name>vn1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rhat</name> <operator>=</operator> <name>un21</name> <operator>-</operator> <name>q0</name> <operator>*</operator> <name>vn1</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>q0</name> <operator>&gt;=</operator> <name>b</name> <operator>||</operator> <name>q0</name> <operator>*</operator> <name>vn0</name> <operator>&gt;</operator> <name>b</name> <operator>*</operator> <name>rhat</name> <operator>+</operator> <name>un0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q0</name> <operator>=</operator> <name>q0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rhat</name> <operator>=</operator> <name>rhat</name> <operator>+</operator> <name>vn1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rhat</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>un21</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>un0</name> <operator>-</operator> <name>q0</name> <operator>*</operator> <name>v</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>q1</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>q0</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>du_int</name></type> <name>udiv128by64to64</name><parameter_list>(<parameter><decl><type><name>du_int</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>u0</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>du_int</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>du_int</name></type> <name>result</name></decl>;</decl_stmt>
<asm>__asm__("divq %[v]"
: "=a"(result), "=d"(*r)
: [ v ] "r"(v), "a"(u0), "d"(u1));</asm>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>udiv128by64to64default</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>u0</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>COMPILER_RT_ABI</name> <name>tu_int</name></type> <name>__udivmodti4</name><parameter_list>(<parameter><decl><type><name>tu_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>tu_int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>tu_int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>n_utword_bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tu_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>utwords</name></type> <name>dividend</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>utwords</name></type> <name>divisor</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>utwords</name></type> <name>quotient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>utwords</name></type> <name>remainder</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>&gt;</operator> <name><name>dividend</name><operator>.</operator><name>all</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>remainder</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;</operator> <name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <call><name>udiv128by64to64</name><argument_list>(<argument><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>,
<argument><expr><name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>remainder</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>/</operator> <name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>%</operator> <name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <call><name>udiv128by64to64</name><argument_list>(<argument><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>,
<argument><expr><name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>remainder</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>remainder</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>quotient</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>si_int</name></type> <name>shift</name> <init>=
<expr><call><name>__builtin_clzll</name><argument_list>(<argument><expr><name><name>divisor</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name><name>dividend</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>shift</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>ti_int</name></type> <name>s</name> <init>=
<expr><operator>(</operator><name>ti_int</name><operator>)</operator><operator>(</operator><name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>-</operator> <name><name>dividend</name><operator>.</operator><name>all</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_utword_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>quotient</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>|=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>all</name></name> <operator>-=</operator> <name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>&amp;</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>divisor</name><operator>.</operator><name>all</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>quotient</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
