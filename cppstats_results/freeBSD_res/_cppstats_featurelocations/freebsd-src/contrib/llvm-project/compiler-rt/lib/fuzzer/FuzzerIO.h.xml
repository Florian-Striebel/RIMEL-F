<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerIO.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_IO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_IO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>GetEpoch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Unit</name></type> <name>FileToVector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>, <argument><expr><name>size_t</name> <name>MaxSize</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>bool</name> <name>ExitOnError</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>FileToString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CopyFileToErr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>WriteToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>Data</name></expr></argument>, <argument><expr><name>size_t</name> <name>Size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>WriteToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>WriteToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Unit</name> <operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AppendToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>Data</name></expr></argument>, <argument><expr><name>size_t</name> <name>Size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>AppendToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Data</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ReadDirToVectorOfUnits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Path</name></decl></parameter>, <parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Unit</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>V</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>Epoch</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ExitOnError</name></decl></parameter>,
<parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>VPaths</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>DirPlusFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>DirPath</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>FileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>DirName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>FileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>TmpDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>TempPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Prefix</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsInterestingCoverageFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>FileName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>DupAndCloseStderr</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>CloseStdout</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VPrintf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Verbose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>RawPrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Str</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>IsFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>FileSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ListFilesInDirRecursive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator><name>Epoch</name></expr></argument>,
<argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>V</name></expr></argument>, <argument><expr><name>bool</name> <name>TopDir</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>MkDirRecursive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>RmDirRecursive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>IterateDirRecursive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>DirPreCallback</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>DirPostCallback</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>FileCallback</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<struct>struct <name>SizedFile</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>File</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>SizedFile</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>Size</name></name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>void</name></type> <name>GetSizedFilesFromDir</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Dir</name></expr></argument>, <argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>char</name></type> <name>GetSeparator</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsSeparator</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>Basename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>FILE</name><modifier>*</modifier></type> <name>OpenFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>CloseFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>DuplicateFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Fd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>RemoveFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>RenameFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>OldPath</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>NewPath</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>intptr_t</name></type> <name>GetHandleFromFd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>MkDir</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>RmDir</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><call><name>getDevNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
