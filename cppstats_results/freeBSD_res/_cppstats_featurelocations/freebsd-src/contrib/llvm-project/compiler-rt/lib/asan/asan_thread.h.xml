<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_thread.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_fake_stack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_thread_registry.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<struct_decl>struct <name>DTLS</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AsanThread</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>AsanThreadContext</name></type> <name>final</name> <range>: <expr><name>public</name> <name>ThreadContextBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>AsanThreadContext</name><argument_list>(<argument>int tid</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ThreadContextBase</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>announced</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>destructor_iterations</name><argument_list>(<argument><expr><call><name>GetPthreadDestructorIterations</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>stack_id</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>thread</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <name>announced</name></expr>;
<expr><name>u8</name> <name>destructor_iterations</name></expr>;
<expr><name>u32</name> <name>stack_id</name></expr>;
<expr><name>AsanThread</name> <operator>*</operator><name>thread</name></expr>;

<expr><name>void</name> <macro><name>OnCreated</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnFinished</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

struct <expr><name>CreateThreadContextArgs</name> <block>{
<expr><name>AsanThread</name> <operator>*</operator><name>thread</name></expr>;
<expr><name>StackTrace</name> <operator>*</operator><name>stack</name></expr>;
}</block></expr>;
}</block></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AsanThreadContext</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AsanThread</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>AsanThread</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>thread_callback_t</name></type> <name>start_routine</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>parent_tid</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<struct_decl>struct <name>InitOptions</name>;</struct_decl>
<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InitOptions</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>thread_return_t</name></type> <name>ThreadStart</name><parameter_list>(<parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>stack_top</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>stack_bottom</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>stack_size</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><name>uptr</name></type> <name>tls_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_begin_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>tls_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_end_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>DTLS</name> <modifier>*</modifier></type><name>dtls</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>dtls_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>u32</name></type> <name>tid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>context_</name><operator>-&gt;</operator><name>tid</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>context</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>context_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>set_context</name><parameter_list>(<parameter><decl><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>context_</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt> </block_content>}</block></function>

<struct>struct <name>StackFrameAccess</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>frame_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_descr</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>bool</name></type> <name>GetStackFrameAccessByAddr</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>StackFrameAccess</name> <modifier>*</modifier></type><name>access</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>GetStackVariableShadowStart</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddrIsInStack</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>DeleteFakeStack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fake_stack_</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>fake_stack_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fake_stack_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTLSFakeStack</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>StartSwitchFiber</name><parameter_list>(<parameter><decl><type><name>FakeStack</name> <modifier>*</modifier><modifier>*</modifier></type><name>fake_stack_save</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FinishSwitchFiber</name><parameter_list>(<parameter><decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>fake_stack_save</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>bottom_old</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>size_old</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>FakeStack</name> <modifier>*</modifier></type><name>get_fake_stack</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stack_switching_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>fake_stack_</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>fake_stack_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FakeStack</name> <modifier>*</modifier></type><name>get_or_create_fake_stack</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stack_switching_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>fake_stack_</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AsyncSignalSafeLazyInitFakeStack</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>fake_stack_</name></expr>;</return>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>isUnwinding</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>unwinding_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUnwinding</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>unwinding_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>AsanThreadLocalMallocStorage</name> <modifier>&amp;</modifier></type><name>malloc_storage</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>malloc_storage_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>AsanStats</name> <modifier>&amp;</modifier></type><name>stats</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>stats_</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>extra_spill_area</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>extra_spill_area_</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>get_arg</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>arg_</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>



<function_decl><type><name>void</name></type> <name>SetThreadStackAndTls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InitOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ClearShadowForThreadStackAndTLS</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>AsyncSignalSafeLazyInitFakeStack</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>StackBounds</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>top</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><name>StackBounds</name> <macro><name>GetStackBounds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>context_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>thread_callback_t</name></type> <name>start_routine_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>stack_top_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>stack_bottom_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>next_stack_top_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>next_stack_bottom_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uint8_t</name></type> <name>stack_switching_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>tls_begin_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tls_end_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DTLS</name> <modifier>*</modifier></type><name>dtls_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>fake_stack_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AsanThreadLocalMallocStorage</name></type> <name>malloc_storage_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AsanStats</name></type> <name>stats_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unwinding_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>extra_spill_area_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>ThreadRegistry</name> <modifier>&amp;</modifier></type><name>asanThreadRegistry</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>AsanThreadContext</name> <modifier>*</modifier></type><name>GetThreadContextByTidLocked</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>AsanThread</name> <modifier>*</modifier></type><name>GetCurrentThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetCurrentThread</name><parameter_list>(<parameter><decl><type><name>AsanThread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>u32</name></type> <name>GetCurrentTidOrInvalid</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>AsanThread</name> <modifier>*</modifier></type><name>FindThreadByStackAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>EnsureMainThreadIDIsCorrect</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
