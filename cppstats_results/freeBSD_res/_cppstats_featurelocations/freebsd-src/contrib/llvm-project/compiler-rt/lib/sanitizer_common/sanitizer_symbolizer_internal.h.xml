<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SYMBOLIZER_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SYMBOLIZER_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_symbolizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_vector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ExtractToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delims</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ExtractInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delims</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ExtractUptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delims</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ExtractTokenUpToDelimiter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DemangleSwiftAndCXX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>class</name></type> <name>SymbolizerTool</name> <block>{<block_content>
<label><name>public</name>:</label>



<decl_stmt><decl><type><name>SymbolizerTool</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SymbolizerTool</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>next</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{ }</block>







<name>virtual</name> <name>bool</name> <macro><name>SymbolizePC</name><argument_list>(<argument>uptr addr</argument>, <argument>SymbolizedStack *stack</argument>)</argument_list></macro> <block>{
<expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>;
}</block>



<name>virtual</name> <name>bool</name> <macro><name>SymbolizeData</name><argument_list>(<argument>uptr addr</argument>, <argument>DataInfo *info</argument>)</argument_list></macro> <block>{
<expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>virtual</name> <name>bool</name> <macro><name>SymbolizeFrame</name><argument_list>(<argument>uptr addr</argument>, <argument>FrameInfo *info</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Demangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>LateInitialize</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>SymbolizerTool</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SymbolizerProcess</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>SymbolizerProcess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_posix_spawn</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SendCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>SymbolizerProcess</name><argument_list>()</argument_list></macro> <block>{}</block>


<specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>kArgVMax</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>StartSymbolizerSubprocess</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ReadFromSymbolizer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>max_length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetEnvP</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>GetEnviron</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ReachedEndOfOutput</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><name>uptr</name> <name>length</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>GetArgV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path_to_binary</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><operator>&amp;</operator><name>argv</name><operator>)</operator><index>[<expr><name>kArgVMax</name></expr>]</index></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>bool</name></type> <name>Restart</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SendCommandImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>WriteToSymbolizer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_t</name></type> <name>input_fd_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_t</name></type> <name>output_fd_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kBufferSize</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer_</name><index>[<expr><name>kBufferSize</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxTimesRestarted</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kSymbolizerStartupTimeMillis</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>times_restarted_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>failed_to_start_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reported_invalid_path_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_posix_spawn_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LLVMSymbolizerProcess</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>LLVMSymbolizer</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SymbolizerTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>LLVMSymbolizer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>LowLevelAllocator</name> <operator>*</operator><name>allocator</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>SymbolizePC</name><argument_list>(<argument>uptr addr</argument>, <argument>SymbolizedStack *stack</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>SymbolizeData</name><argument_list>(<argument>uptr addr</argument>, <argument>DataInfo *info</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>SymbolizeFrame</name><argument_list>(<argument>uptr addr</argument>, <argument>FrameInfo *info</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>FormatAndSendCommand</name><argument_list>(<argument>const char *command_prefix</argument>,
<argument>const char *module_name</argument>, <argument>uptr module_offset</argument>,
<argument>ModuleArch arch</argument>)</argument_list></macro></expr>;

<expr><name>LLVMSymbolizerProcess</name> <operator>*</operator><name>symbolizer_process_</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kBufferSize</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;
<expr><name>char</name> <name><name>buffer_</name><index>[<expr><name>kBufferSize</name></expr>]</index></name></expr>;
}</block></expr></range></decl>;</decl_stmt>







<function_decl><type><name>void</name></type> <name>ParseSymbolizePCOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>ParseSymbolizeDataOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>DataInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
