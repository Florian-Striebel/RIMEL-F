<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_flags.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_FLAGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_FLAGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<enum>enum <name>HandleSignalMode</name> <block>{
<decl><name>kHandleSignalNo</name></decl>,
<decl><name>kHandleSignalYes</name></decl>,
<decl><name>kHandleSignalExclusive</name></decl>,
}</block>;</enum>

<struct>struct <name>CommonFlags</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_FLAG</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>DefaultValue</name></type></parameter>, <parameter><type><name>Description</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_flags.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMMON_FLAG</name></cpp:undef>

<function_decl><type><name>void</name></type> <name>SetDefaults</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CopyFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommonFlags</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<decl_stmt><decl><type><specifier>extern</specifier> <name>CommonFlags</name></type> <name>common_flags_dont_use</name></decl>;</decl_stmt>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>CommonFlags</name> <modifier>*</modifier></type><name>common_flags</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>common_flags_dont_use</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>SetCommonFlagsDefaults</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>common_flags_dont_use</name><operator>.</operator><name>SetDefaults</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>inline</specifier> <name>void</name></type> <name>OverrideCommonFlags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommonFlags</name> <modifier>&amp;</modifier></type><name>cf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>common_flags_dont_use</name><operator>.</operator><name>CopyFrom</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>SubstituteForFlagValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>out_size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>FlagParser</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>RegisterCommonFlags</name><parameter_list>(<parameter><decl><type><name>FlagParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><operator>&amp;</operator><name>common_flags_dont_use</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RegisterIncludeFlags</name><parameter_list>(<parameter><decl><type><name>FlagParser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>InitializeCommonFlags</name><parameter_list>(<parameter><decl><type><name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><operator>&amp;</operator><name>common_flags_dont_use</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>InitializePlatformCommonFlags</name><parameter_list>(<parameter><decl><type><name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
