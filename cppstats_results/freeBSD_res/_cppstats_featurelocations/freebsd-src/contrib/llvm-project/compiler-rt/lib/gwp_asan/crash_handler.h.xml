<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/crash_handler.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_INTERFACE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_INTERFACE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<decl_stmt><decl><type><name>bool</name></type> <name>__gwp_asan_error_is_mine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocatorState</name> <operator>*</operator><name>State</name></expr></argument>,
<argument><expr><name>uintptr_t</name> <name>ErrorPtr</name> <operator>=</operator> <literal type="number">0u</literal></expr></argument>)</argument_list></decl>;</decl_stmt>




<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>Error</name>
<macro><name>__gwp_asan_diagnose_error</name><argument_list>(<argument>const gwp_asan::AllocatorState *State</argument>,
<argument>const gwp_asan::AllocationMetadata *Metadata</argument>,
<argument>uintptr_t ErrorPtr</argument>)</argument_list></macro></expr>;</expr_stmt>





<decl_stmt><decl><type><name>uintptr_t</name></type>
<name>__gwp_asan_get_internal_crash_address</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocatorState</name> <operator>*</operator><name>State</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator>
<macro><name>__gwp_asan_get_metadata</name><argument_list>(<argument>const gwp_asan::AllocatorState *State</argument>,
<argument>const gwp_asan::AllocationMetadata *Metadata</argument>,
<argument>uintptr_t ErrorPtr</argument>)</argument_list></macro></expr>;</expr_stmt>










<decl_stmt><decl><type><name>uintptr_t</name></type> <name>__gwp_asan_get_allocation_address</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>__gwp_asan_get_allocation_size</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>__gwp_asan_get_allocation_thread_id</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>__gwp_asan_get_allocation_trace</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>, <argument><expr><name>uintptr_t</name> <operator>*</operator><name>Buffer</name></expr></argument>,
<argument><expr><name>size_t</name> <name>BufferLen</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>__gwp_asan_is_deallocated</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>__gwp_asan_get_deallocation_thread_id</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>size_t</name></type> <name>__gwp_asan_get_deallocation_trace</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>gwp_asan</name><operator>::</operator><name>AllocationMetadata</name> <operator>*</operator><name>AllocationMeta</name></expr></argument>, <argument><expr><name>uintptr_t</name> <operator>*</operator><name>Buffer</name></expr></argument>,
<argument><expr><name>size_t</name> <name>BufferLen</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
