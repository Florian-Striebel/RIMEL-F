<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_vector.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_VECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_VECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Vector</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Vector</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>begin_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>end_</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>last_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>Vector</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>begin_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InternalFree</name><argument_list>(<argument><expr><name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>begin_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InternalFree</name><argument_list>(<argument><expr><name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>begin_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>Size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>end_</name> <operator>-</operator> <name>begin_</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>T</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>end_</name> <operator>-</operator> <name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>begin_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>uptr</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>end_</name> <operator>-</operator> <name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>begin_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>T</name> <modifier>*</modifier></type><name>PushBack</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EnsureSize</name><argument_list>(<argument><expr><call><name>Size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>end_</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>T</name> <modifier>*</modifier></type><name>PushBack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>EnsureSize</name><argument_list>(<argument><expr><call><name>Size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>end_</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PopBack</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>end_</name></expr></argument>, <argument><expr><name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_</name> <operator>=</operator> <name>begin_</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>old_size</name> <init>= <expr><call><name>Size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>old_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_</name> <operator>=</operator> <name>begin_</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EnsureSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><name>old_size</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>begin_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>begin_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>begin_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>end_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>last_</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>EnsureSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <call><name>Size</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><name>uptr</name><operator>)</operator><operator>(</operator><name>last_</name> <operator>-</operator> <name>begin_</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_</name> <operator>=</operator> <name>begin_</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cap0</name> <init>= <expr><name>last_</name> <operator>-</operator> <name>begin_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cap</name> <init>= <expr><name>cap0</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cap</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cap</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>T</name><operator>*</operator><operator>)</operator><call><name>InternalAlloc</name><argument_list>(<argument><expr><name>cap</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cap0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>begin_</name></expr></argument>, <argument><expr><name>cap0</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InternalFree</name><argument_list>(<argument><expr><name>begin_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>begin_</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_</name> <operator>=</operator> <name>begin_</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>begin_</name> <operator>+</operator> <name>cap</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>Vector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Vector</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Vector</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
