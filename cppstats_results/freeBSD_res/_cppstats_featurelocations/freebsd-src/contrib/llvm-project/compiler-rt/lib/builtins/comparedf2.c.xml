<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/comparedf2.c">





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_PRECISION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fp_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fp_compare_impl.inc"</cpp:file></cpp:include>

<function><type><name>COMPILER_RT_ABI</name> <name>CMP_RESULT</name></type> <name>__ledf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__leXf2__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__ledf2</argument>, <argument>__cmpdf2</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__ledf2</argument>, <argument>__eqdf2</argument>)</argument_list></macro>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__ledf2</argument>, <argument>__ltdf2</argument>)</argument_list></macro>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__ledf2</argument>, <argument>__nedf2</argument>)</argument_list></macro>

<function><type><name>COMPILER_RT_ABI</name> <name>CMP_RESULT</name></type> <name>__gedf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__geXf2__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__gedf2</argument>, <argument>__gtdf2</argument>)</argument_list></macro>

<function><type><name>COMPILER_RT_ABI</name> <name>CMP_RESULT</name></type> <name>__unorddf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__unordXf2__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_ARMHF_TARGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AEABI_RTABI</name> <name>int</name></type> <name>__aeabi_dcmpun</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__unorddf2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__unorddf2</argument>, <argument>__aeabi_dcmpun</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><name>int</name></type> <name>__eqdf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ledf2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>__ltdf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ledf2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>__nedf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ledf2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>__gtdf2</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__gedf2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
