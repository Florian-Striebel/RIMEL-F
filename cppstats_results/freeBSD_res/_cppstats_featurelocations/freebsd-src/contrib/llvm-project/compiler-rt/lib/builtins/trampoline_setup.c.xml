<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/trampoline_setup.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__clear_cache</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ppc__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>COMPILER_RT_ABI</name> <name>void</name></type> <name>__trampoline_setup</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>trampOnStack</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trampSizeAllocated</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>realFunc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>localsPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>trampSizeAllocated</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compilerrt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7c0802a6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x4800000d</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>realFunc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>localsPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7d6802a6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x818b0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7c0803a6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7d8903a6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x816b0004</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trampOnStack</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x4e800420</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>__clear_cache</name><argument_list>(<argument><expr><name>trampOnStack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trampOnStack</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
