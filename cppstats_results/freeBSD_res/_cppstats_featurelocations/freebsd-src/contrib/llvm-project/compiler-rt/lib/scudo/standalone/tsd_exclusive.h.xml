<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/tsd_exclusive.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_TSD_EXCLUSIVE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_EXCLUSIVE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsd.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<struct>struct <name>ThreadState</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>DisableMemInit</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>NotInitialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>Initialized</name></decl>,
<decl><name>TornDown</name></decl>,
}</block> <decl><name>InitState</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</enum>
}</block>;</struct>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Allocator</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>teardownThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Allocator</name><operator>&gt;</operator> struct <name>TSDRegistryExT</name> <block>{
<expr><name>void</name> <macro><name>init</name><argument_list>(<argument>Allocator *Instance</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><name>Initialized</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Instance</name><operator>-&gt;</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PThreadKey</name></expr></argument>, <argument><expr><name><name>teardownThread</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>FallbackTSD</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;
<expr><name>Initialized</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>void</name> <macro><name>initOnceMaybe</name><argument_list>(<argument>Allocator *Instance</argument>)</argument_list></macro> <block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>Initialized</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<call><name>init</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></block></expr>;
}</block>

<name>void</name> <macro><name>unmapTestOnly</name><argument_list>(<argument>Allocator *Instance</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>PThreadKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>PThreadKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ThreadTSD</name><operator>.</operator><name>commitBack</name></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ThreadTSD</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
CHECK_EQ(pthread_key_delete(PThreadKey</block></if></if_stmt>)<operator>,</operator> <literal type="number">0</literal>)</block></expr>;</expr_stmt>
<expr_stmt><expr><name>PThreadKey</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>FallbackTSD</name><operator>.</operator><name>commitBack</name></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FallbackTSD</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>Initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>initThreadMaybe</name><parameter_list>(<parameter><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>MinimalInit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>InitState</name></name> <operator>!=</operator> <name>ThreadState</name><operator>::</operator><name>NotInitialized</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>initThread</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>, <argument><expr><name>MinimalInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>getTSDAndLock</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>UnlockRequired</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>InitState</name></name> <operator>==</operator> <name>ThreadState</name><operator>::</operator><name>Initialized</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Disabled</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>UnlockRequired</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>ThreadTSD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>FallbackTSD</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>UnlockRequired</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>FallbackTSD</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>FallbackTSD</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Disabled</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Disabled</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>FallbackTSD</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>UNUSED</name> <name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>ThreadDisableMemInit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>State</name><operator>.</operator><name>DisableMemInit</name></name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxTSDsCount</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getDisableMemInit</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>State</name><operator>.</operator><name>DisableMemInit</name></name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>



<function><type><name>NOINLINE</name> <name>void</name></type> <name>initThread</name><parameter_list>(<parameter><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>MinimalInit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initOnceMaybe</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>MinimalInit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(
<argument><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>PThreadKey</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ThreadTSD</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>State</name><operator>.</operator><name>InitState</name></name> <operator>=</operator> <name>ThreadState</name><operator>::</operator><name>Initialized</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Instance</name><operator>-&gt;</operator><name>callPostInitCallback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>PThreadKey</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u8</name></type> <name>Disabled</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></type> <name>FallbackTSD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>thread_local</name> <name>ThreadState</name></type> <name>State</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>thread_local</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></type> <name>ThreadTSD</name></decl>;</decl_stmt>

<function_decl><type><name>friend</name> <name>void</name></type> <name><name>teardownThread</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Allocator</name></expr></argument>&gt;</argument_list></name>
<name>thread_local</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <name><name>TSDRegistryExT</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ThreadTSD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Allocator</name></expr></argument>&gt;</argument_list></name>
<name>thread_local</name> <name>ThreadState</name> <name><name>TSDRegistryExT</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>State</name></expr>;</expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Allocator</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>teardownThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name><name>TSDRegistryExT</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></type> <name>TSDRegistryT</name>;</typedef>
<decl_stmt><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>TSDRegistryT</name><operator>::</operator><name><name>ThreadTSD</name><operator>.</operator><name>DestructorIterations</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>TSDRegistryT</name><operator>::</operator><name><name>ThreadTSD</name><operator>.</operator><name>DestructorIterations</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><call><name><name>Instance</name><operator>-&gt;</operator><name>getTSDRegistry</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>PThreadKey</name></expr></argument>,
<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>TSDRegistryT</name><operator>::</operator><call><name><name>ThreadTSD</name><operator>.</operator><name>commitBack</name></name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TSDRegistryT</name><operator>::</operator><name><name>State</name><operator>.</operator><name>InitState</name></name> <operator>=</operator> <name>ThreadState</name><operator>::</operator><name>TornDown</name></expr>;</expr_stmt>
</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
