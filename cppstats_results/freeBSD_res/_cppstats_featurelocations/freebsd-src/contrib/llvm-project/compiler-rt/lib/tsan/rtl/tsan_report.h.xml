<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_report.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_REPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_REPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_symbolizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_thread_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<enum>enum <name>ReportType</name> <block>{
<decl><name>ReportTypeRace</name></decl>,
<decl><name>ReportTypeVptrRace</name></decl>,
<decl><name>ReportTypeUseAfterFree</name></decl>,
<decl><name>ReportTypeVptrUseAfterFree</name></decl>,
<decl><name>ReportTypeExternalRace</name></decl>,
<decl><name>ReportTypeThreadLeak</name></decl>,
<decl><name>ReportTypeMutexDestroyLocked</name></decl>,
<decl><name>ReportTypeMutexDoubleLock</name></decl>,
<decl><name>ReportTypeMutexInvalidAccess</name></decl>,
<decl><name>ReportTypeMutexBadUnlock</name></decl>,
<decl><name>ReportTypeMutexBadReadLock</name></decl>,
<decl><name>ReportTypeMutexBadReadUnlock</name></decl>,
<decl><name>ReportTypeSignalUnsafe</name></decl>,
<decl><name>ReportTypeErrnoInSignal</name></decl>,
<decl><name>ReportTypeDeadlock</name></decl>
}</block>;</enum>

<struct>struct <name>ReportStack</name> <block>{
<decl_stmt><decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>suppressable</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>ReportStack</name> <modifier>*</modifier></type><name>New</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ReportStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>ReportMopMutex</name> <block>{
<decl_stmt><decl><type><name>u64</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>write</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ReportMop</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>atomic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>external_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportMopMutex</name></expr></argument>&gt;</argument_list></name></type> <name>mset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReportMop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<enum>enum <name>ReportLocationType</name> <block>{
<decl><name>ReportLocationGlobal</name></decl>,
<decl><name>ReportLocationHeap</name></decl>,
<decl><name>ReportLocationStack</name></decl>,
<decl><name>ReportLocationTLS</name></decl>,
<decl><name>ReportLocationFD</name></decl>
}</block>;</enum>

<struct>struct <name>ReportLocation</name> <block>{
<decl_stmt><decl><type><name>ReportLocationType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataInfo</name></type> <name>global</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>heap_chunk_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>heap_chunk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>external_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>suppressable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ReportLocation</name> <modifier>*</modifier></type><name>New</name><parameter_list>(<parameter><decl><type><name>ReportLocationType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<label><name>private</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ReportLocation</name><parameter_list>(<parameter><decl><type><name>ReportLocationType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>ReportThread</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tid_t</name></type> <name>os_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadType</name></type> <name>thread_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>parent_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ReportMutex</name> <block>{
<decl_stmt><decl><type><name>u64</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>destroyed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ReportDesc</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>ReportType</name></type> <name>typ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportStack</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>stacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportMop</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>mops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportLocation</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>locs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportMutex</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>mutexes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>ReportThread</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>unique_tids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>sleep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReportDesc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ReportDesc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ReportDesc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReportDesc</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ReportDesc</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>void</name></type> <name>PrintReport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReportDesc</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintStack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReportStack</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
