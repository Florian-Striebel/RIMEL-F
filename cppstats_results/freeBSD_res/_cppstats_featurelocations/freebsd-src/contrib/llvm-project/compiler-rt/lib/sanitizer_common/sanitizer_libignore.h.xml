<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_libignore.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_LIBIGNORE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_LIBIGNORE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LibIgnore</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>LibIgnore</name><parameter_list>(<parameter><decl><type><name>LinkerInitialized</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddIgnoredLibrary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_templ</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>IgnoreNoninstrumentedModules</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>track_instrumented_libs_</name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>OnLibraryLoaded</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>OnLibraryUnloaded</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>bool</name></type> <name>IsIgnored</name><argument_list>(<argument><expr><name>uptr</name> <name>pc</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>pc_in_ignored_lib</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsPcInstrumented</name><argument_list>(<argument><expr><name>uptr</name> <name>pc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<struct>struct <name>Lib</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>templ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>real_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loaded</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>LibCodeRange</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>IsInRange</name><argument_list>(<argument><expr><name>uptr</name> <name>pc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LibCodeRange</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><name>pc</name> <operator>&gt;=</operator> <name><name>range</name><operator>.</operator><name>begin</name></name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&lt;</operator> <name><name>range</name><operator>.</operator><name>end</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxIgnoredRanges</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxInstrumentedRanges</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxLibs</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>ignored_ranges_count_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LibCodeRange</name></type> <name><name>ignored_code_ranges_</name><index>[<expr><name>kMaxIgnoredRanges</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>instrumented_ranges_count_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LibCodeRange</name></type> <name><name>instrumented_code_ranges_</name><index>[<expr><name>kMaxInstrumentedRanges</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BlockingMutex</name></type> <name>mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>count_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Lib</name></type> <name><name>libs_</name><index>[<expr><name>kMaxLibs</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>track_instrumented_libs_</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LibIgnore</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LibIgnore</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>LibIgnore</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>LibIgnore</name><operator>::</operator><macro><name>IsIgnored</name><argument_list>(<argument>uptr pc</argument>, <argument>bool *pc_in_ignored_lib</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>uptr</name> <name>n</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ignored_ranges_count_</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsInRange</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>ignored_code_ranges_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pc_in_ignored_lib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
}
*pc_in_ignored_lib = false</block><empty_stmt>;</empty_stmt></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>track_instrumented_libs_</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsPcInstrumented</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content>

<namespace><specifier>inline</specifier> bool <name>LibIgnore</name>::<name>IsPcInstrumented</name>(<name>uptr</name> <name>pc</name></namespace></block></for>) <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>uptr</name> <name>n</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instrumented_ranges_count_</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsInRange</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>instrumented_code_ranges_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></for>
}</block>

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
