<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/guarded_pool_allocator.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_GUARDED_POOL_ALLOCATOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_GUARDED_POOL_ALLOCATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/definitions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/platform_specific/guarded_pool_allocator_posix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/platform_specific/guarded_pool_allocator_tls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>GuardedPoolAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kGwpAsanMetadataName</name> <init>= <expr><literal type="string">"GWP-ASan Metadata"</literal></expr></init></decl>;</decl_stmt>






<function><type><name>constexpr</name></type> <name>GuardedPoolAllocator</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<expr_stmt><expr><call><name>GuardedPoolAllocator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GuardedPoolAllocator</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GuardedPoolAllocator</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>GuardedPoolAllocator</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><operator>~</operator><call><name>GuardedPoolAllocator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>init</name><argument_list>(<argument><expr><specifier>const</specifier> <name>options</name><operator>::</operator><name>Options</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>uninitTestOnly</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>iterate_callback</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<function_decl><type><name>void</name></type> <name>iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>iterate_callback</name></type> <name>Cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>


<function><type><name>GWP_ASAN_ALWAYS_INLINE</name> <name>bool</name></type> <name>shouldSample</name><parameter_list>()</parameter_list> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>GWP_ASAN_UNLIKELY</name><argument_list>(<argument><expr><call><name>getThreadLocals</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>NextSampleCounter</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getThreadLocals</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>NextSampleCounter</name> <operator>=</operator>
<operator>(</operator><operator>(</operator><call><name>getRandomUnsigned32</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>AdjustedSampleRatePlusOne</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>
<name>ThreadLocalPackedVariables</name><operator>::</operator><name>NextSampleCounterMask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>GWP_ASAN_UNLIKELY</name><argument_list>(<argument><expr><operator>--</operator><call><name>getThreadLocals</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>NextSampleCounter</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>GWP_ASAN_ALWAYS_INLINE</name> <name>bool</name></type> <name>pointerIsMine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>State</name><operator>.</operator><name>pointerIsMine</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<function_decl><type><name>void</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Alignment</name> <init>= <expr><call><name>alignof</name><argument_list>(<argument><expr><name>max_align_t</name></expr></argument>)</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>getSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>const</specifier> <name>AllocationMetadata</name> <operator>*</operator><macro><name>getMetadataRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Metadata</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>AllocatorState</name> <operator>*</operator><macro><name>getAllocatorState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name>State</name></expr>;</return> }</block></expr></expr_stmt>


<label><name>protected</name>:</label>


<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>getRequiredBackingSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Alignment</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>PageSize</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>alignUp</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Alignment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>alignDown</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Alignment</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kGwpAsanAliveSlotName</name> <init>= <expr><literal type="string">"GWP-ASan Alive Slot"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kGwpAsanGuardPageName</name> <init>= <expr><literal type="string">"GWP-ASan Guard Page"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kGwpAsanFreeSlotsName</name> <init>= <expr><literal type="string">"GWP-ASan Metadata"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>kInvalidSlotID</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>map</name><argument_list>(<argument><expr><name>size_t</name> <name>Size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>unmap</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>Size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<function_decl><type><name>void</name> <modifier>*</modifier></type><name>reserveGuardedPool</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>allocateInGuardedPool</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>Size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>deallocateInGuardedPool</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><name>size_t</name> <name>Size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>unreserveGuardedPool</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>getPlatformPageSize</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>AllocationMetadata</name> <modifier>*</modifier></type><name>addrToMetadata</name><argument_list>(<argument><expr><name>uintptr_t</name> <name>Ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function_decl><type><name>size_t</name></type> <name>reserveSlot</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>freeSlot</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>SlotIndex</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>trapOnAddress</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Address</name></decl></parameter>, <parameter><decl><type><name>Error</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>GuardedPoolAllocator</name> <modifier>*</modifier></type><name>getSingleton</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>installAtFork</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>AllocatorState</name> <name>State</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Mutex</name></type> <name>PoolMutex</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Mutex</name></type> <name>BacktraceMutex</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>NumSampledAllocations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AllocationMetadata</name> <modifier>*</modifier></type><name>Metadata</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>FreeSlots</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>FreeSlotsLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>PerfectlyRightAlign</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>options</name><operator>::</operator><name>Backtrace_t</name> <name>Backtrace</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>







<decl_stmt><decl><type><name>uint32_t</name></type> <name>AdjustedSampleRatePlusOne</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PlatformSpecificMapData</name></type> <name>GuardedPagePoolPlatformData</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedRecursiveGuard</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ScopedRecursiveGuard</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>getThreadLocals</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>RecursiveGuard</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedRecursiveGuard</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>getThreadLocals</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>RecursiveGuard</name> <operator>=</operator> <name>false</name></expr>; }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>void</name></type> <name>initPRNG</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>uint32_t</name></type> <name>getRandomUnsigned32</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
