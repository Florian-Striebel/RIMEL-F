<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_GUARDED_POOL_ALLOCATOR_TLS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_GUARDED_POOL_ALLOCATOR_TLS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/definitions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>



<struct>struct <name>ThreadLocalPackedVariables</name> <block>{
<macro><name>constexpr</name></macro> <expr_stmt><expr><call><name>ThreadLocalPackedVariables</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>RandomState</name><argument_list>(<argument><expr><literal type="number">0xacd979ce</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NextSampleCounter</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>RecursiveGuard</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>




<name>uint32_t</name> <name>RandomState</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>NextSampleCounter</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>NextSampleCounterMask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>RecursiveGuard</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ThreadLocalPackedVariables</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"thread local data does not fit in a uint64_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_PLATFORM_TLS_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> GWP_ASAN_PLATFORM_TLS_HEADER</cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>
<function><type><specifier>inline</specifier> <name>ThreadLocalPackedVariables</name> <modifier>*</modifier></type><name>getThreadLocals</name><parameter_list>()</parameter_list> <block>{<block_content>
<macro><name>alignas</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><specifier>static</specifier> <name>GWP_ASAN_TLS_INITIAL_EXEC</name> <name>ThreadLocalPackedVariables</name></type> <name>Locals</name></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>Locals</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
