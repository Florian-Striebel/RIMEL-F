<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/allocator_config.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ALLOCATOR_CONFIG_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_ALLOCATOR_CONFIG_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"combined.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"primary32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"primary64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secondary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"size_class_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsd_exclusive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsd_shared.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>






































<struct>struct <name>DefaultConfig</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SizeClassMap</name> <init>= <expr><name>DefaultSizeClassMap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>MaySupportMemoryTagging</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_CAN_USE_PRIMARY64</name></expr></cpp:if>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>DefaultConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>uptr</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryCompactPtrScale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>PrimaryEnableRandomOffset</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryMapSizeIncrement</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>DefaultConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">19U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>uptr</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMinReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMaxReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>MapAllocatorCache</name><argument_list type="generic">&lt;<argument><expr><name>DefaultConfig</name></expr></argument>&gt;</argument_list></name></type> <name>SecondaryCache</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheEntriesArraySize</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheQuarantineSize</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheDefaultMaxEntriesCount</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SecondaryCacheDefaultMaxEntrySize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMinReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMaxReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>A</name></expr></argument>&gt;</argument_list></name> <name>using</name></type> <name>TSDRegistryT</name> <init>= <expr><name><name>TSDRegistryExT</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>AndroidConfig</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SizeClassMap</name> <init>= <expr><name>AndroidSizeClassMap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>MaySupportMemoryTagging</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_CAN_USE_PRIMARY64</name></expr></cpp:if>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>AndroidConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">28U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>u32</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryCompactPtrScale</name> <init>= <expr><name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>PrimaryEnableRandomOffset</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryMapSizeIncrement</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>AndroidConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">18U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>uptr</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMinReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMaxReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>MapAllocatorCache</name><argument_list type="generic">&lt;<argument><expr><name>AndroidConfig</name></expr></argument>&gt;</argument_list></name></type> <name>SecondaryCache</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheEntriesArraySize</name> <init>= <expr><literal type="number">256U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheQuarantineSize</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheDefaultMaxEntriesCount</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SecondaryCacheDefaultMaxEntrySize</name> <init>= <expr><literal type="number">2UL</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMinReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMaxReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>TSDRegistryT</name> <init>= <expr><name><name>TSDRegistrySharedT</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>AndroidSvelteConfig</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SizeClassMap</name> <init>= <expr><name>SvelteSizeClassMap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>MaySupportMemoryTagging</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_CAN_USE_PRIMARY64</name></expr></cpp:if>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>AndroidSvelteConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">27U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>u32</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryCompactPtrScale</name> <init>= <expr><name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>PrimaryEnableRandomOffset</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryMapSizeIncrement</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>AndroidSvelteConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">16U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>uptr</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMinReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMaxReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>MapAllocatorCache</name><argument_list type="generic">&lt;<argument><expr><name>AndroidSvelteConfig</name></expr></argument>&gt;</argument_list></name></type> <name>SecondaryCache</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheEntriesArraySize</name> <init>= <expr><literal type="number">16U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheQuarantineSize</name> <init>= <expr><literal type="number">32U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>SecondaryCacheDefaultMaxEntriesCount</name> <init>= <expr><literal type="number">4U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SecondaryCacheDefaultMaxEntrySize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMinReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>SecondaryCacheMaxReleaseToOsIntervalMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>TSDRegistryT</name> <init>= <expr><name><name>TSDRegistrySharedT</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_CAN_USE_PRIMARY64</name></expr></cpp:if>
<struct>struct <name>FuchsiaConfig</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SizeClassMap</name> <init>= <expr><name>FuchsiaSizeClassMap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>MaySupportMemoryTagging</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>FuchsiaConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">30U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>u32</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>PrimaryEnableRandomOffset</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryMapSizeIncrement</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryCompactPtrScale</name> <init>= <expr><name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMinReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMaxReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>MapAllocatorNoCache</name></type> <name>SecondaryCache</name>;</typedef>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>TSDRegistryT</name> <init>= <expr><name><name>TSDRegistrySharedT</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>TrustyConfig</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>SizeClassMap</name> <init>= <expr><name>TrustySizeClassMap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>MaySupportMemoryTagging</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>TrustyConfig</name></expr></argument>&gt;</argument_list></name></type> <name>Primary</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryRegionSizeLog</name> <init>= <expr><literal type="number">10U</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>u32</name></type> <name>PrimaryCompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>PrimaryEnableRandomOffset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryMapSizeIncrement</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>PrimaryCompactPtrScale</name> <init>= <expr><name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMinReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>s32</name></type> <name>PrimaryMaxReleaseToOsIntervalMs</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>MapAllocatorNoCache</name></type> <name>SecondaryCache</name>;</typedef>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>A</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>TSDRegistryT</name> <init>= <expr><name><name>TSDRegistrySharedT</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_ANDROID</name></expr></cpp:if>
<typedef>typedef <type><name>AndroidConfig</name></type> <name>Config</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SCUDO_FUCHSIA</name></expr></cpp:elif>
<typedef>typedef <type><name>FuchsiaConfig</name></type> <name>Config</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SCUDO_TRUSTY</name></expr></cpp:elif>
<typedef>typedef <type><name>TrustyConfig</name></type> <name>Config</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>DefaultConfig</name></type> <name>Config</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
