<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/memtag.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_MEMTAG_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_MEMTAG_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal_defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_LINUX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/auxv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/prctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__clang_major__</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_DISABLE_TBI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>archSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>archSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <name>constexpr</name> <name>uptr</name></type> <name>archMemoryTagGranuleSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">16</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>untagPointer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>Ptr</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint8_t</name></type> <name>extractTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>Ptr</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</return> </block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>archSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>archMemoryTagGranuleSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>untagPointer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint8_t</name></type> <name>extractTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__clang_major__</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_LINUX</name></expr></cpp:if>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWCAP2_MTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP2_MTE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>getauxval</name><argument_list>(<argument><expr><name>AT_HWCAP2</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>HWCAP2_MTE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemDetectsMemoryTagFaultsTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_SET_TAGGED_ADDR_CTRL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_SET_TAGGED_ADDR_CTRL</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_GET_TAGGED_ADDR_CTRL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_GET_TAGGED_ADDR_CTRL</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_TAGGED_ADDR_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_TAGGED_ADDR_ENABLE</name></cpp:macro> <cpp:value>(1UL &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_MTE_TCF_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_MTE_TCF_SHIFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_MTE_TAG_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_MTE_TAG_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_MTE_TCF_NONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_MTE_TCF_NONE</name></cpp:macro> <cpp:value>(0UL &lt;&lt; PR_MTE_TCF_SHIFT)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_MTE_TCF_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_MTE_TCF_SYNC</name></cpp:macro> <cpp:value>(1UL &lt;&lt; PR_MTE_TCF_SHIFT)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PR_MTE_TCF_MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_MTE_TCF_MASK</name></cpp:macro> <cpp:value>(3UL &lt;&lt; PR_MTE_TCF_SHIFT)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_GET_TAGGED_ADDR_CTRL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<name>PR_MTE_TCF_MASK</name><operator>)</operator> <operator>!=</operator> <name>PR_MTE_TCF_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>enableSystemMemoryTaggingTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_TAGGED_ADDR_CTRL</name></expr></argument>,
<argument><expr><name>PR_TAGGED_ADDR_ENABLE</name> <operator>|</operator> <name>PR_MTE_TCF_SYNC</name> <operator>|</operator> <operator>(</operator><literal type="number">0xfffe</literal> <operator>&lt;&lt;</operator> <name>PR_MTE_TAG_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemDetectsMemoryTagFaultsTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>enableSystemMemoryTaggingTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedDisableMemoryTagChecks</name> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>PrevTCO</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ScopedDisableMemoryTagChecks</name><argument_list>()</argument_list></macro> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(
R"(
.arch_extension memtag
mrs %0, tco
msr tco, #1
)"
: "=r"(PrevTCO));</asm>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>ScopedDisableMemoryTagChecks</name><argument_list>()</argument_list></macro> <block>{
<expr><name>__asm__</name> <specifier>__volatile__</specifier><operator>(</operator>
<name>R</name><literal type="string">"(
.arch_extension memtag
msr tco, %0
)"</literal>
<operator>:</operator>
<operator>:</operator> <literal type="string">"r"</literal><operator>(</operator><name>PrevTCO</name><operator>)</operator><operator>)</operator></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>selectRandomTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ExcludeMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ExcludeMask</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedPtr</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>(
R"(
.arch_extension memtag
irg %[TaggedPtr], %[Ptr], %[ExcludeMask]
)"
: [TaggedPtr] "=r"(TaggedPtr)
: [Ptr] "r"(Ptr), [ExcludeMask] "r"(ExcludeMask));</asm>
<return>return <expr><name>TaggedPtr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>addFixedTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Ptr</name> <operator>|</operator> <operator>(</operator><name>Tag</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>storeTags</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Begin</name> <operator>%</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>LineSize</name></decl>, <decl><type ref="prev"/><name>Next</name></decl>, <decl><type ref="prev"/><name>Tmp</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>(
R"(
.arch_extension memtag

// Compute the cache line size in bytes (DCZID_EL0 stores it as the log2
// of the number of 4-byte words) and bail out to the slow path if DCZID_EL0
// indicates that the DC instructions are unavailable.
DCZID .req %[Tmp]
mrs DCZID, dczid_el0
tbnz DCZID, #4, 3f
and DCZID, DCZID, #15
mov %[LineSize], #4
lsl %[LineSize], %[LineSize], DCZID
.unreq DCZID

// Our main loop doesn't handle the case where we don't need to perform any
// DC GZVA operations. If the size of our tagged region is less than
// twice the cache line size, bail out to the slow path since it's not
// guaranteed that we'll be able to do a DC GZVA.
Size .req %[Tmp]
sub Size, %[End], %[Cur]
cmp Size, %[LineSize], lsl #1
b.lt 3f
.unreq Size

LineMask .req %[Tmp]
sub LineMask, %[LineSize], #1

// STZG until the start of the next cache line.
orr %[Next], %[Cur], LineMask
1:
stzg %[Cur], [%[Cur]], #16
cmp %[Cur], %[Next]
b.lt 1b

// DC GZVA cache lines until we have no more full cache lines.
bic %[Next], %[End], LineMask
.unreq LineMask
2:
dc gzva, %[Cur]
add %[Cur], %[Cur], %[LineSize]
cmp %[Cur], %[Next]
b.lt 2b

// STZG until the end of the tagged region. This loop is also used to handle
// slow path cases.
3:
cmp %[Cur], %[End]
b.ge 4f
stzg %[Cur], [%[Cur]], #16
b 3b

4:
)"
: [Cur] "+&amp;r"(Begin), [LineSize] "=&amp;r"(LineSize), [Next] "=&amp;r"(Next),
[Tmp] "=&amp;r"(Tmp)
: [End] "r"(End)
: "memory");</asm>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Begin</name> <operator>%</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Begin</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>storeTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Ptr</name> <operator>%</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>(R"(
.arch_extension memtag
stg %0, [%0]
)"
:
: "r"(Ptr)
: "memory");</asm>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>loadTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Ptr</name> <operator>%</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedPtr</name> <init>= <expr><name>Ptr</name></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>(
R"(
.arch_extension memtag
ldg %0, [%0]
)"
: "+r"(TaggedPtr)
:
: "memory");</asm>
<return>return <expr><name>TaggedPtr</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>systemDetectsMemoryTagFaultsTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>enableSystemMemoryTaggingTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>ScopedDisableMemoryTagChecks</name> <block>{
<macro><name>ScopedDisableMemoryTagChecks</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>selectRandomTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ExcludeMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ExcludeMask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>addFixedTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Tag</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>storeTags</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Begin</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>End</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>storeTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>loadTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"memory tagging not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>setRandomTag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ExcludeMask</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>TaggedBegin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>TaggedEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>TaggedBegin</name> <operator>=</operator> <call><name>selectRandomTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ExcludeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>TaggedEnd</name> <operator>=</operator> <call><name>storeTags</name><argument_list>(<argument><expr><operator>*</operator><name>TaggedBegin</name></expr></argument>, <argument><expr><operator>*</operator><name>TaggedBegin</name> <operator>+</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>untagPointer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>loadTag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>loadTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>addFixedTag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>addFixedTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>allocatorSupportsMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>archSupportsMemoryTagging</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Config</name><operator>::</operator><name>MaySupportMemoryTagging</name> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SCUDO_MIN_ALIGNMENT_LOG</name><operator>)</operator> <operator>&gt;=</operator> <call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
