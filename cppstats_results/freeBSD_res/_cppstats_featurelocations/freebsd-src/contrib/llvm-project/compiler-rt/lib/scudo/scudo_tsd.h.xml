<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/scudo_tsd.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_TSD_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__scudo</name> <block>{<block_content>

<struct>struct <macro><name>ALIGNED</name><argument_list>(<argument>SANITIZER_CACHE_LINE_SIZE</argument>)</argument_list></macro> <name>ScudoTSD</name> <block>{
<decl_stmt><decl><type><name>AllocatorCacheT</name></type> <name>Cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>QuarantineCachePlaceHolder</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commitBack</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>tryLock</name><parameter_list>()</parameter_list> TRY_ACQUIRE<parameter_list>(<parameter><decl><type><name>true</name></type></decl></parameter>, <parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Mutex</name><operator>.</operator><name>TryLock</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Precedence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Precedence</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Precedence</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>MonotonicNanoTime</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <call><name>FIRST_32_SECOND_64</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>lock</name><parameter_list>()</parameter_list> ACQUIRE<parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Precedence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>unlock</name><parameter_list>()</parameter_list> RELEASE<parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>getPrecedence</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Precedence</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>Precedence</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>initThread</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>MinimalInit</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_tsd_exclusive.inc"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_tsd_shared.inc"</cpp:file></cpp:include>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
