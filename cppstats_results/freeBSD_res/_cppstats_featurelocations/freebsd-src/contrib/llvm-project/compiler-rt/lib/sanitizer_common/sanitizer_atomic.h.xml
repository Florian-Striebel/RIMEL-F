<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_atomic.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ATOMIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<enum>enum <name>memory_order</name> <block>{
<decl><name>memory_order_relaxed</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>memory_order_consume</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>memory_order_acquire</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>memory_order_release</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>memory_order_acq_rel</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>memory_order_seq_cst</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>atomic_uint8_t</name> <block>{
<typedef>typedef <type><name>u8</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>val_dont_use</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_uint16_t</name> <block>{
<typedef>typedef <type><name>u16</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>val_dont_use</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_sint32_t</name> <block>{
<typedef>typedef <type><name>s32</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>val_dont_use</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_uint32_t</name> <block>{
<typedef>typedef <type><name>u32</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>val_dont_use</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_uint64_t</name> <block>{
<typedef>typedef <type><name>u64</name></type> <name>Type</name>;</typedef>

<expr_stmt><expr><specifier>volatile</specifier> <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <name>Type</name> <name>val_dont_use</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>atomic_uintptr_t</name> <block>{
<typedef>typedef <type><name>uptr</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>val_dont_use</name></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic_clang.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic_msvc.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported compiler"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_load_relaxed</name><argument_list>(<argument>const volatile T *a</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>atomic_store_relaxed</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>v</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
