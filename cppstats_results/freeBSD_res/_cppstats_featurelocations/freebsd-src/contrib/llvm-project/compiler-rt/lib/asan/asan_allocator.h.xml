<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_allocator.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_interceptors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<enum>enum <name>AllocType</name> <block>{
<decl><name>FROM_MALLOC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FROM_NEW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FROM_NEW_BR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>AsanChunk</name></decl>;</decl_stmt>

<struct>struct <name>AllocatorOptions</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>quarantine_size_mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>thread_local_quarantine_size_kb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>min_redzone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>max_redzone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>may_return_null</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>alloc_dealloc_mismatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Flags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CopyTo</name><parameter_list>(<parameter><decl><type><name>Flags</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CommonFlags</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>InitializeAllocator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AllocatorOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReInitializeAllocator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AllocatorOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GetAllocatorOptions</name><parameter_list>(<parameter><decl><type><name>AllocatorOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>AsanChunkView</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>AsanChunkView</name><argument_list>(<argument><expr><name>AsanChunk</name> <operator>*</operator><name>chunk</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>chunk_</name><argument_list>(<argument>chunk</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAllocated</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsQuarantined</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>Beg</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>End</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>UsedSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>UserRequestedAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>AllocTid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>FreeTid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Eq</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AsanChunkView</name> <operator>&amp;</operator><name>c</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>chunk_</name> <operator>==</operator> <name><name>c</name><operator>.</operator><name>chunk_</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>GetAllocStackId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>GetFreeStackId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>StackTrace</name> <macro><name>GetAllocStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>StackTrace</name> <macro><name>GetFreeStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>AllocType</name> <macro><name>GetAllocType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>AddrIsInside</name><argument_list>(<argument><expr><name>uptr</name> <name>addr</name></expr></argument>, <argument><expr><name>uptr</name> <name>access_size</name></expr></argument>, <argument><expr><name>sptr</name> <operator>*</operator><name>offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <call><name>Beg</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <name>access_size</name><operator>)</operator> <operator>&lt;=</operator> <call><name>End</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <call><name>Beg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>AddrIsAtLeft</name><argument_list>(<argument><expr><name>uptr</name> <name>addr</name></expr></argument>, <argument><expr><name>uptr</name> <name>access_size</name></expr></argument>, <argument><expr><name>sptr</name> <operator>*</operator><name>offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>access_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <call><name>Beg</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <call><name>Beg</name><argument_list>()</argument_list></call> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>AddrIsAtRight</name><argument_list>(<argument><expr><name>uptr</name> <name>addr</name></expr></argument>, <argument><expr><name>uptr</name> <name>access_size</name></expr></argument>, <argument><expr><name>sptr</name> <operator>*</operator><name>offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>access_size</name> <operator>&gt;</operator> <call><name>End</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <call><name>End</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>AsanChunk</name> <modifier>*</modifier><specifier>const</specifier></type> <name>chunk_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>AsanChunkView</name></type> <name>FindHeapChunkByAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>AsanChunkView</name></type> <name>FindHeapChunkByAllocBeg</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>AsanChunkFifoList</name><range>: <expr><name>public</name> <name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>AsanChunk</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>AsanChunkFifoList</name><argument_list>(<argument>LinkerInitialized</argument>)</argument_list></macro> <block>{ }</block>
<macro><name>AsanChunkFifoList</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>clear</name><argument_list>()</argument_list></call></expr>; }</block>
<name>void</name> <call><name>Push</name><argument_list>(<argument><expr><name>AsanChunk</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>PushList</name><argument_list>(<argument><expr><name>AsanChunkFifoList</name> <operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>;
<expr><name>AsanChunk</name> <operator>*</operator><call><name>Pop</name><argument_list>()</argument_list></call></expr>;
<expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block>
<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>AsanChunk</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;
<expr><name>size_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block>
<name>private</name><operator>:</operator>
<name>uptr</name> <name>size_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>AsanMapUnmapCallback</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>OnMap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>OnUnmap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CAN_USE_ALLOCATOR64</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x20000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SANITIZER_ANDROID</name></expr></cpp:elif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x2000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>VeryCompactSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_RISCV64</name></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x2000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>VeryDenseSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0x10000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x10000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x20000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x8000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0x600000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>AddressSpaceViewTy</name><operator>&gt;</operator>
struct <name>AP64</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceBeg</name> <operator>=</operator> <name>kAllocatorSpace</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceSize</name> <operator>=</operator> <name>kAllocatorSize</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kMetadataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<typedef>typedef <expr_stmt><expr><name>__asan</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>AsanMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>PrimaryAllocatorASVT</name> <init>= <expr><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name><name>AP64</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>CompactSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>AddressSpaceViewTy</name><operator>&gt;</operator>
struct <name>AP32</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceBeg</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>u64</name> <name>kSpaceSize</name> <operator>=</operator> <name>SANITIZER_MMAP_RANGE_SIZE</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kMetadataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<typedef>typedef <expr_stmt><expr><name>__asan</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kRegionSizeLog</name> <operator>=</operator> <literal type="number">20</literal></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>AsanMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
};
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>PrimaryAllocatorASVT</name> <init>= <expr><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name><name>AP32</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumberOfSizeClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kNumClasses</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>AsanAllocatorASVT</name> <init>=
<expr><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AsanAllocator</name> <init>= <expr><name><name>AsanAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AllocatorCache</name> <init>= <expr><name>AsanAllocator</name><operator>::</operator><name>AllocatorCache</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>AsanThreadLocalMallocStorage</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name><name>quarantine_cache</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatorCache</name></type> <name>allocator_cache</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>CommitBack</name><parameter_list>()</parameter_list>;</function_decl>
<label><name>private</name>:</label>

<macro><name>AsanThreadLocalMallocStorage</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
<parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>asan_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>asan_delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>asan_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>asan_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>asan_malloc_usable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>asan_mz_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>asan_mz_force_lock</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>asan_mz_force_unlock</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintInternalAllocatorStats</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AsanSoftRssLimitExceededCallback</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>exceeded</name></decl></parameter>)</parameter_list>;</function_decl>

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
