<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/fp_lib.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FP_LIB_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FP_LIB_HEADER</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> <operator>&lt;</operator> <literal type="number">903000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int64_t</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINT64_C</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c##ULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SINGLE_PRECISION</name></expr></cpp:if>

<typedef>typedef <type><name>uint16_t</name></type> <name>half_rep_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>rep_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>twice_rep_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>srep_t</name>;</typedef>
<typedef>typedef <type><name>float</name></type> <name>fp_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_REP_C</name></cpp:macro> <cpp:value>UINT16_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP_C</name></cpp:macro> <cpp:value>UINT32_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>significandBits</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>rep_clz</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>clzsi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>wideMultiply</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>rep_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <name>product</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <name>product</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function_decl><type><name>COMPILER_RT_ABI</name> <name>fp_t</name></type> <name>__addsf3</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>DOUBLE_PRECISION</name></expr></cpp:elif>

<typedef>typedef <type><name>uint32_t</name></type> <name>half_rep_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>rep_t</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>srep_t</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>fp_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_REP_C</name></cpp:macro> <cpp:value>UINT32_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>significandBits</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>rep_clz</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__LP64__</name></expr></cpp:if>
<return>return <expr><call><name>__builtin_clzl</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <call><name>REP_C</name><argument_list>(<argument><expr><literal type="number">0xffffffff00000000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>clzsi</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">32</literal> <operator>+</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name>a</name> <operator>&amp;</operator> <call><name>REP_C</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loWord</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &amp; 0xffffffffU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hiWord</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &gt;&gt; 32)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>wideMultiply</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>rep_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>plolo</name> <init>= <expr><call><name>loWord</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>loWord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>plohi</name> <init>= <expr><call><name>loWord</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>hiWord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>philo</name> <init>= <expr><call><name>hiWord</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>loWord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>phihi</name> <init>= <expr><call><name>hiWord</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>hiWord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>r0</name> <init>= <expr><call><name>loWord</name><argument_list>(<argument><expr><name>plolo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>r1</name> <init>= <expr><call><name>hiWord</name><argument_list>(<argument><expr><name>plolo</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>loWord</name><argument_list>(<argument><expr><name>plohi</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>loWord</name><argument_list>(<argument><expr><name>philo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <name>r0</name> <operator>+</operator> <operator>(</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <call><name>hiWord</name><argument_list>(<argument><expr><name>plohi</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>hiWord</name><argument_list>(<argument><expr><name>philo</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>hiWord</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>phihi</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>loWord</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>hiWord</name></cpp:undef>

<function_decl><type><name>COMPILER_RT_ABI</name> <name>fp_t</name></type> <name>__adddf3</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>QUAD_PRECISION</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__LDBL_MANT_DIG__</name> <operator>==</operator> <literal type="number">113</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRT_LDBL_128BIT</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>uint64_t</name></type> <name>half_rep_t</name>;</typedef>
<typedef>typedef <type><name>__uint128_t</name></type> <name>rep_t</name>;</typedef>
<typedef>typedef <type><name>__int128_t</name></type> <name>srep_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>fp_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_REP_C</name></cpp:macro> <cpp:value>UINT64_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP_C</name></cpp:macro> <cpp:value>(__uint128_t)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>significandBits</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>rep_clz</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name>__uint128_t</name></type> <name>ll</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_YUGA_BIG_ENDIAN</name></expr></cpp:if>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
}</block> <decl><name>s</name></decl>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
}</block> <decl><name>s</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>uu</name> <init>= <expr><block>{<expr><operator>.</operator><name>ll</name> <operator>=</operator> <name>a</name></expr>}</block></expr></init></decl>;</union>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>add</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uu</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <name><name>uu</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <name><name>uu</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>add</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_LoMask</name></cpp:macro> <cpp:value>UINT64_C(0x00000000ffffffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_HiMask</name></cpp:macro> <cpp:value>UINT64_C(0xffffffff00000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_FullMask</name></cpp:macro> <cpp:value>UINT64_C(0xffffffffffffffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)((a &gt;&gt; 96) &amp; Word_LoMask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)((a &gt;&gt; 64) &amp; Word_LoMask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)((a &gt;&gt; 32) &amp; Word_LoMask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Word_4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(a &amp; Word_LoMask)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>wideMultiply</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>rep_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product11</name> <init>= <expr><call><name>Word_1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_1</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product12</name> <init>= <expr><call><name>Word_1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_2</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product13</name> <init>= <expr><call><name>Word_1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_3</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product14</name> <init>= <expr><call><name>Word_1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_4</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product21</name> <init>= <expr><call><name>Word_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_1</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product22</name> <init>= <expr><call><name>Word_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_2</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product23</name> <init>= <expr><call><name>Word_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_3</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product24</name> <init>= <expr><call><name>Word_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_4</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product31</name> <init>= <expr><call><name>Word_3</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_1</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product32</name> <init>= <expr><call><name>Word_3</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_2</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product33</name> <init>= <expr><call><name>Word_3</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_3</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product34</name> <init>= <expr><call><name>Word_3</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_4</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product41</name> <init>= <expr><call><name>Word_4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_1</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product42</name> <init>= <expr><call><name>Word_4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_2</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product43</name> <init>= <expr><call><name>Word_4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_3</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>product44</name> <init>= <expr><call><name>Word_4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>Word_4</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum0</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product44</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum1</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product34</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product43</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum2</name> <init>=
<expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product24</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product33</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product42</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum3</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product14</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product23</name> <operator>+</operator>
<operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product32</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product41</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum4</name> <init>=
<expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product13</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product22</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product31</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum5</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product12</name> <operator>+</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product21</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>sum6</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator><name>product11</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>r0</name> <init>= <expr><operator>(</operator><name>sum0</name> <operator>&amp;</operator> <name>Word_FullMask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sum1</name> <operator>&amp;</operator> <name>Word_LoMask</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__uint128_t</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name>sum0</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sum1</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <name>Word_FullMask</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>sum2</name> <operator>&amp;</operator> <name>Word_FullMask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sum3</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <name>Word_HiMask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <name>r0</name> <operator>+</operator> <operator>(</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum1</name> <operator>&gt;&gt;</operator> <literal type="number">96</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum2</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum3</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>sum4</name> <operator>+</operator>
<operator>(</operator><name>sum5</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum6</name> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_HiMask</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_LoMask</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Word_FullMask</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> SINGLE_PRECISION, DOUBLE_PRECISION or QUAD_PRECISION must be defined.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SINGLE_PRECISION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DOUBLE_PRECISION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CRT_LDBL_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typeWidth</name></cpp:macro> <cpp:value>(sizeof(rep_t) * CHAR_BIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exponentBits</name></cpp:macro> <cpp:value>(typeWidth - significandBits - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxExponent</name></cpp:macro> <cpp:value>((1 &lt;&lt; exponentBits) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exponentBias</name></cpp:macro> <cpp:value>(maxExponent &gt;&gt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>implicitBit</name></cpp:macro> <cpp:value>(REP_C(1) &lt;&lt; significandBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>significandMask</name></cpp:macro> <cpp:value>(implicitBit - 1U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signBit</name></cpp:macro> <cpp:value>(REP_C(1) &lt;&lt; (significandBits + exponentBits))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>absMask</name></cpp:macro> <cpp:value>(signBit - 1U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exponentMask</name></cpp:macro> <cpp:value>(absMask ^ significandMask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oneRep</name></cpp:macro> <cpp:value>((rep_t)exponentBias &lt;&lt; significandBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infRep</name></cpp:macro> <cpp:value>exponentMask</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quietBit</name></cpp:macro> <cpp:value>(implicitBit &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qnanRep</name></cpp:macro> <cpp:value>(exponentMask | quietBit)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline</name> <name>rep_t</name></type> <name>toRep</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name>fp_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rep_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>rep</name> <init>= <expr><block>{<expr><operator>.</operator><name>f</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>rep</name><operator>.</operator><name>i</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>fromRep</name><parameter_list>(<parameter><decl><type><name>rep_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union><specifier>const</specifier> union <block>{
<decl_stmt><decl><type><name>fp_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rep_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>rep</name> <init>= <expr><block>{<expr><operator>.</operator><name>i</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</union>
<return>return <expr><name><name>rep</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>significand</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><call><name>rep_clz</name><argument_list>(<argument><expr><operator>*</operator><name>significand</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>rep_clz</name><argument_list>(<argument><expr><name>implicitBit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>significand</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>shift</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>wideLeftShift</name><parameter_list>(<parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <operator>*</operator><name>hi</name> <operator>&lt;&lt;</operator> <name>count</name> <operator>|</operator> <operator>*</operator><name>lo</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>typeWidth</name> <operator>-</operator> <name>count</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <operator>*</operator><name>lo</name> <operator>&lt;&lt;</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>wideRightShiftWithSticky</name><parameter_list>(<parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>rep_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>typeWidth</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sticky</name> <init>= <expr><operator>(</operator><operator>*</operator><name>lo</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>typeWidth</name> <operator>-</operator> <name>count</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <operator>*</operator><name>hi</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>typeWidth</name> <operator>-</operator> <name>count</name><operator>)</operator> <operator>|</operator> <operator>*</operator><name>lo</name> <operator>&gt;&gt;</operator> <name>count</name> <operator>|</operator> <name>sticky</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <operator>*</operator><name>hi</name> <operator>&gt;&gt;</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>typeWidth</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sticky</name> <init>= <expr><operator>*</operator><name>hi</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>typeWidth</name> <operator>-</operator> <name>count</name><operator>)</operator> <operator>|</operator> <operator>*</operator><name>lo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <operator>*</operator><name>hi</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>typeWidth</name><operator>)</operator> <operator>|</operator> <name>sticky</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sticky</name> <init>= <expr><operator>*</operator><name>hi</name> <operator>|</operator> <operator>*</operator><name>lo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <name>sticky</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_logbX</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>rep_t</name></type> <name>rep</name> <init>= <expr><call><name>toRep</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>rep</name> <operator>&amp;</operator> <name>exponentMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>significandBits</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <name>maxExponent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>rep</name> <operator>&amp;</operator> <name>signBit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name> <operator>!=</operator> <name>x</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><name>x</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>fromRep</name><argument_list>(<argument><expr><name>infRep</name> <operator>|</operator> <name>signBit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>exp</name> <operator>-</operator> <name>exponentBias</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rep</name> <operator>&amp;=</operator> <name>absMask</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <call><name>normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>(</operator><name>rep</name> <operator>&amp;</operator> <name>exponentMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>significandBits</name></expr>;</expr_stmt>
<return>return <expr><name>exp</name> <operator>-</operator> <name>exponentBias</name> <operator>-</operator> <name>shift</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_scalbnX</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rep_t</name></type> <name>rep</name> <init>= <expr><call><name>toRep</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>rep</name> <operator>&amp;</operator> <name>exponentMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>significandBits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>exp</name> <operator>==</operator> <name>maxExponent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>rep_t</name></type> <name>sig</name> <init>= <expr><name>rep</name> <operator>&amp;</operator> <name>significandMask</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <call><name>normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sig</name> <operator>&amp;=</operator> <operator>~</operator><name>implicitBit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__builtin_sadd_overflow</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><name>INT_MIN</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>rep_t</name></type> <name>sign</name> <init>= <expr><name>rep</name> <operator>&amp;</operator> <name>signBit</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <name>maxExponent</name></expr>)</condition> <block>{<block_content>


<return>return <expr><call><name>fromRep</name><argument_list>(<argument><expr><name>sign</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rep_t</name><operator>)</operator><operator>(</operator><name>maxExponent</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>significandBits</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2.0f</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>fp_t</name></type> <name>tmp</name> <init>= <expr><call><name>fromRep</name><argument_list>(<argument><expr><name>sign</name> <operator>|</operator> <operator>(</operator><call><name>REP_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>significandBits</name><operator>)</operator> <operator>|</operator> <name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name>exponentBias</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>*=</operator> <call><name>fromRep</name><argument_list>(<argument><expr><operator>(</operator><name>rep_t</name><operator>)</operator><name>exp</name> <operator>&lt;&lt;</operator> <name>significandBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>fromRep</name><argument_list>(<argument><expr><name>sign</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rep_t</name><operator>)</operator><name>exp</name> <operator>&lt;&lt;</operator> <name>significandBits</name><operator>)</operator> <operator>|</operator> <name>sig</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_fmaxX</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>



<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>crt_isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SINGLE_PRECISION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_logbf</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_logbX</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_scalbnf</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_scalbnX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_fmaxf</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>__builtin_fmaxf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>__compiler_rt_fmaxX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOUBLE_PRECISION</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_logb</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_logbX</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_scalbn</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_scalbnX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_fmax</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>__builtin_fmax</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>__compiler_rt_fmaxX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUAD_PRECISION</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRT_LDBL_128BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_logbl</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_logbX</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_scalbnl</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_scalbnX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>fp_t</name></type> <name>__compiler_rt_fmaxl</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>fp_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__compiler_rt_fmaxX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>static</specifier> <name>__inline</name> <name>long</name> <name>double</name></type> <name>__compiler_rt_logbl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>crt_logbl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>long</name> <name>double</name></type> <name>__compiler_rt_scalbnl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>crt_scalbnl</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline</name> <name>long</name> <name>double</name></type> <name>__compiler_rt_fmaxl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>crt_fmaxl</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
