<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_quarantine.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_QUARANTINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_QUARANTINE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_list.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Node</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>QuarantineCache</name></decl>;</decl_stmt>

<struct>struct <name>QuarantineBatch</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSize</name> <init>= <expr><literal type="number">1021</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>batch</name><index>[<expr><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>batch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>uptr</name> <macro><name>quarantined_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>batch</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>can_merge</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QuarantineBatch</name><operator>*</operator> <specifier>const</specifier> <name>from</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>count</name> <operator>+</operator> <name><name>from</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <name>kSize</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>QuarantineBatch</name><modifier>*</modifier> <specifier>const</specifier></type> <name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name><name>from</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>batch</name><index>[<expr><name>count</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>batch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>from</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>from</name><operator>-&gt;</operator><name>quarantined_size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>
}</block>;</struct>

<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callback</name></expr></argument>, <argument><expr><name>typename</name> <name>Node</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Quarantine</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>QuarantineCache</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name></type> <name>Cache</name>;</typedef>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Quarantine</name><argument_list>(<argument><expr><name>LinkerInitialized</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>cache_</name><argument_list>(<argument>LINKER_INITIALIZED</argument>)</argument_list></macro> <block>{
}</block>

<name>void</name> <macro><name>Init</name><argument_list>(<argument>uptr size</argument>, <argument>uptr cache_size</argument>)</argument_list></macro> <block>{


<expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cache_size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cache_size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_size_</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_size_</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_cache_size_</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name><name>cache_mutex_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>recycle_mutex_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>uptr</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_size_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>GetCacheSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>max_cache_size_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>cache_size</name> <init>= <expr><call><name>GetCacheSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>Enqueue</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>cb</name><operator>.</operator><name>Recycle</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>-&gt;</operator><name>Size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>cache_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>Drain</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>cache_</name><operator>.</operator><name>Transfer</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name><name>cache_</name><operator>.</operator><name>Size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>GetSize</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>recycle_mutex_</name><operator>.</operator><name>TryLock</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Recycle</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_size_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>DrainAndRecycle</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>cache_</name><operator>.</operator><name>Transfer</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name><name>recycle_mutex_</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Recycle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Quarantine limits: global: %zdMb; thread local: %zdKb\n"</literal></expr></argument>,
<argument><expr><call><name>GetSize</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><call><name>GetCacheSize</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>cache_</name><operator>.</operator><name>PrintStats</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>

<name>char</name> <name><name>pad0_</name><index>[<expr><name>kCacheLineSize</name></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>max_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>min_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>max_cache_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pad1_</name><index>[<expr><name>kCacheLineSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>cache_mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>recycle_mutex_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cache</name></type> <name>cache_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pad2_</name><index>[<expr><name>kCacheLineSize</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>Recycle</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>min_size</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>)</parameter_list> REQUIRES<parameter_list>(<parameter><decl><type><name>recycle_mutex_</name></type></decl></parameter>)</parameter_list>
RELEASE<parameter_list>(<parameter><decl><type><name>recycle_mutex_</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Cache</name></type> <name>tmp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_mutex_</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uptr</name></type> <name>cache_size</name> <init>= <expr><call><name><name>cache_</name><operator>.</operator><name>Size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>overhead_size</name> <init>= <expr><call><name><name>cache_</name><operator>.</operator><name>OverheadSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>cache_size</name></expr></argument>, <argument><expr><name>overhead_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kOverheadThresholdPercents</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_size</name> <operator>&gt;</operator> <name>overhead_size</name> <operator>&amp;&amp;</operator>
<name>overhead_size</name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>kOverheadThresholdPercents</name><operator>)</operator> <operator>&gt;</operator>
<name>cache_size</name> <operator>*</operator> <name>kOverheadThresholdPercents</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cache_</name><operator>.</operator><name>MergeBatches</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><call><name><name>cache_</name><operator>.</operator><name>Size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>min_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>EnqueueBatch</name></name><argument_list>(<argument><expr><call><name><name>cache_</name><operator>.</operator><name>DequeueBatch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<expr_stmt><expr><call><name><name>recycle_mutex_</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DoRecycle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>DoRecycle</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name><name>c</name><operator>-&gt;</operator><name>DequeueBatch</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kPrefetch</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>kPrefetch</name> <operator>&lt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>batch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kPrefetch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PREFETCH</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>batch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>kPrefetch</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PREFETCH</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>batch</name><index>[<expr><name>i</name> <operator>+</operator> <name>kPrefetch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>cb</name><operator>.</operator><name>Recycle</name></name><argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>batch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>cb</name><operator>.</operator><name>Deallocate</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callback</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>QuarantineCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>explicit</name></type> <name>QuarantineCache</name><parameter_list>(<parameter><decl><type><name>LinkerInitialized</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<expr_stmt><expr><call><name>QuarantineCache</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>size_</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>list_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>


<name>uptr</name> <macro><name>Size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>uptr</name> <macro><name>OverheadSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>list_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Enqueue</name><parameter_list>(<parameter><decl><type><name>Callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>list_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>list_</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>count</name> <operator>==</operator> <name>QuarantineBatch</name><operator>::</operator><name>kSize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>QuarantineBatch</name> <operator>*</operator><operator>)</operator><call><name><name>cb</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnqueueBatch</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>list_</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>push_back</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SizeAdd</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Transfer</name><parameter_list>(<parameter><decl><type><name>QuarantineCache</name> <modifier>*</modifier></type><name>from_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>list_</name><operator>.</operator><name>append_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from_cache</name><operator>-&gt;</operator><name>list_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SizeAdd</name><argument_list>(<argument><expr><call><name><name>from_cache</name><operator>-&gt;</operator><name>Size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from_cache</name><operator>-&gt;</operator><name>size_</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EnqueueBatch</name><parameter_list>(<parameter><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>list_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SizeAdd</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>DequeueBatch</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>list_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name><name>list_</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>list_</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SizeSub</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MergeBatches</name><parameter_list>(<parameter><decl><type><name>QuarantineCache</name> <modifier>*</modifier></type><name>to_deallocate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>extracted_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><call><name><name>list_</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>current</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>-&gt;</operator><name>can_merge</name></name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>extracted</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>current</name><operator>-&gt;</operator><name>merge</name></name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>extracted</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>extracted</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>list_</name><operator>.</operator><name>extract</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extracted_size</name> <operator>+=</operator> <name><name>extracted</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>to_deallocate</name><operator>-&gt;</operator><name>EnqueueBatch</name></name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SizeSub</name><argument_list>(<argument><expr><name>extracted_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>uptr</name> <name>batch_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>total_overhead_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>total_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>uptr</name> <name>total_quarantine_chunks</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<for>for <control>(<init><expr><name>List</name><operator>::</operator><name>ConstIterator</name> <name>it</name> <operator>=</operator> <call><name><name>list_</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>list_</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>batch_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>total_bytes</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_overhead_bytes</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>size</name></name> <operator>-</operator> <call><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>quarantined_size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_quarantine_chunks</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
uptr quarantine_chunks_capacity = batch_count * QuarantineBatch::kSize</block><empty_stmt>;</empty_stmt></for>
<name>int</name> <name>chunks_usage_percent</name> <operator>=</operator> <ternary><condition><expr><name>quarantine_chunks_capacity</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>total_quarantine_chunks</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>quarantine_chunks_capacity</name></expr></else></ternary></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>total_quarantined_bytes</name> <init>= <expr><name>total_bytes</name> <operator>-</operator> <name>total_overhead_bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memory_overhead_percent</name> <init>= <expr><ternary><condition><expr><name>total_quarantined_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>total_overhead_bytes</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total_quarantined_bytes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Global quarantine stats: batches: %zd; bytes: %zd (user: %zd); "</literal>
<literal type="string">"chunks: %zd (capacity: %zd); %d%% chunks used; %d%% memory overhead"</literal>
<literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>batch_count</name></expr></argument>, <argument><expr><name>total_bytes</name></expr></argument>, <argument><expr><name>total_quarantined_bytes</name></expr></argument>,
<argument><expr><name>total_quarantine_chunks</name></expr></argument>, <argument><expr><name>quarantine_chunks_capacity</name></expr></argument>,
<argument><expr><name>chunks_usage_percent</name></expr></argument>, <argument><expr><name>memory_overhead_percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<typedef>typedef <type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>QuarantineBatch</name></expr></argument>&gt;</argument_list></name></type> <name>List</name>;</typedef>

<decl_stmt><decl><type><name>List</name></type> <name>list_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>size_</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>SizeAdd</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_</name></expr></argument>, <argument><expr><call><name>Size</name><argument_list>()</argument_list></call> <operator>+</operator> <name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>SizeSub</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>sub</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size_</name></expr></argument>, <argument><expr><call><name>Size</name><argument_list>()</argument_list></call> <operator>-</operator> <name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
