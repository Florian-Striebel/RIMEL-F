<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_internal_defs.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STRINGIFY_</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#S</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STRINGIFY</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SANITIZER_STRINGIFY_(S)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_IMPORT_INTERFACE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_ATTRIBUTE</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_ATTRIBUTE</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_GO</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((weak))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_FREEBSD</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_TLS_INITIAL_EXEC_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((tls_model("initial-exec"))) thread_local</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_TLS_INITIAL_EXEC_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_win_defs.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_WEAK_DEF</name><parameter_list>(<parameter><type><name>ReturnType</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WIN_WEAK_EXPORT_DEF(ReturnType, Name, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERFACE_WEAK_DEF</name><parameter_list>(<parameter><type><name>ReturnType</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" SANITIZER_INTERFACE_ATTRIBUTE SANITIZER_WEAK_ATTRIBUTE ReturnType Name(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SUPPORTS_WEAK_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_SOLARIS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SUPPORTS_WEAK_HOOKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_MAC</name> <operator>&amp;&amp;</operator> <name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&gt;=</operator> <literal type="number">1090</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SUPPORTS_WEAK_HOOKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SUPPORTS_WEAK_HOOKS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_CAN_USE_PREINIT_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_FUCHSIA</name> <operator>||</operator> <name>SANITIZER_NETBSD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_USE_PREINIT_ARRAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_SOLARIS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_USE_PREINIT_ARRAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_USE_PREINIT_ARRAY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_feature</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uptr</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>sptr</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uptr</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name></type> <name>sptr</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uhwptr</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>uptr</name></type> <name>uhwptr</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>s8</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>s16</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>s32</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>s64</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>


<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>fd_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name></type> <name>error_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>fd_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>error_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name></type> <name>pid_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_MAC</name> <operator>||</operator> <operator>(</operator><name>SANITIZER_SOLARIS</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>



<typedef>typedef <type><name>u64</name></type> <name>OFF_T</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>uptr</name></type> <name>OFF_T</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>u64</name></type> <name>OFF64_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <name>SANITIZER_MAC</name></expr></cpp:if>
<typedef>typedef <type><name>uptr</name></type> <name>operator_new_size_type</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>operator_new_size_type</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>u32</name></type> <name>operator_new_size_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>u64</name></type> <name>tid_t</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE_ATTRIBUTE</name></cpp:macro> <cpp:value>SANITIZER_INTERFACE_ATTRIBUTE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_DEFAULT_IMPL</name></cpp:macro> <cpp:value>extern "C" SANITIZER_INTERFACE_ATTRIBUTE SANITIZER_WEAK_ATTRIBUTE NOINLINE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_WEAK_CXX_DEFAULT_IMPL</name></cpp:macro> <cpp:value>extern "C++" SANITIZER_INTERFACE_ATTRIBUTE SANITIZER_WEAK_ATTRIBUTE NOINLINE</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALWAYS_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIAS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(align(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOINLINE</name></cpp:macro> <cpp:value>__declspec(noinline)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro> <cpp:value>__declspec(noreturn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADLOCAL</name></cpp:macro> <cpp:value>__declspec(thread)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_UNUSED_RESULT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALWAYS_INLINE</name></cpp:macro> <cpp:value>inline __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIAS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((alias(x)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((format(printf, f, a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOINLINE</name></cpp:macro> <cpp:value>__attribute__((noinline))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORETURN</name></cpp:macro> <cpp:value>__attribute__((noreturn))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADLOCAL</name></cpp:macro> <cpp:value>__thread</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(x), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLIKELY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(x), 0)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__("prefetchnta (%0)" : : "r" (x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_prefetch(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>__attribute__((warn_unused_result))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED</name></cpp:macro> <cpp:value>__attribute__((used))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MSC_PREREQ</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOEXCEPT</name></cpp:macro> <cpp:value>noexcept</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOEXCEPT</name></cpp:macro> <cpp:value>throw()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>u16</name></type> <name>uu16</name>;</typedef>
<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>u32</name></type> <name>uu32</name>;</typedef>
<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>u64</name></type> <name>uu64</name>;</typedef>
<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>s16</name></type> <name>us16</name>;</typedef>
<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>s32</name></type> <name>us32</name>;</typedef>
<typedef>typedef <macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <type><name>s64</name></type> <name>us64</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>
</block_content>}</block></decl></decl_stmt>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>DWORD</name>;</typedef>
<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<typedef>typedef <type><name>DWORD</name></type> <name>thread_return_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_CALLING_CONV</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>thread_return_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_CALLING_CONV</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>thread_return_t</name></type> (<name>THREAD_CALLING_CONV</name> <modifier>*</modifier><name>thread_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>void</name> <name>NORETURN</name></type> <name>Die</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NORETURN</name></type> <name>CheckFailed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,
<parameter><decl><type><name>u64</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_CHECK_MSG</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(!(expr))) { RawWrite(msg); Die(); } } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_CHECK</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RAW_CHECK_MSG(expr, #expr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_IMPL</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __sanitizer::u64 v1 = (__sanitizer::u64)(c1); __sanitizer::u64 v2 = (__sanitizer::u64)(c2); if (UNLIKELY(!(v1 op v2))) __sanitizer::CheckFailed(__FILE__, __LINE__, "(" #c1 ") " #op " (" #c2 ")", v1, v2); } while (false)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), !=, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), ==, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_NE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), !=, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_LT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), &lt;, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_LE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), &lt;=, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_GT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), &gt;, (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_GE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_IMPL((a), &gt;=, (b))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_EQ(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_NE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_NE(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_LT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_LT(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_LE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_LE(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_GT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_GT(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_GE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_GE(a, b)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_NE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_LT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_LE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_GT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCHECK_GE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREACHABLE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CHECK(0 &amp;&amp; msg); Die(); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIMPLEMENTED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNREACHABLE("unimplemented")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_CHECK</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert(pred, "")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a)/sizeof((a)[0]))</cpp:value></cpp:define>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__INT64_C</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__UINT64_C</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT64_C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c ##L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT64_C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c ##UL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT64_C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c ##LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT64_C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c ##ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INT32_MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MIN</name></cpp:macro> <cpp:value>(-2147483647-1)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INT32_MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MAX</name></cpp:macro> <cpp:value>(2147483647)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINT32_MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_MAX</name></cpp:macro> <cpp:value>(4294967295U)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INT64_MIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MIN</name></cpp:macro> <cpp:value>(-__INT64_C(9223372036854775807)-1)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INT64_MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MAX</name></cpp:macro> <cpp:value>(__INT64_C(9223372036854775807))</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINT64_MAX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_MAX</name></cpp:macro> <cpp:value>(__UINT64_C(18446744073709551615))</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINTPTR_MAX</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTPTR_MAX</name></cpp:macro> <cpp:value>(18446744073709551615UL)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTPTR_MAX</name></cpp:macro> <cpp:value>(4294967295U)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>LinkerInitialized</name> <block>{ <decl><name>LINKER_INITIALIZED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> }</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_S390_31</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(__sanitizer::uptr) __builtin_extract_return_addr(__builtin_return_address(0))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(__sanitizer::uptr) __builtin_return_address(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_FRAME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(__sanitizer::uptr) __builtin_frame_address(0)</cpp:value></cpp:define>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>Trap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name><modifier>*</modifier></type> <name>_ReturnAddress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></extern>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name><modifier>*</modifier></type> <name>_AddressOfReturnAddress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_ReturnAddress</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_AddressOfReturnAddress</name><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(__sanitizer::uptr) _ReturnAddress()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_FRAME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(((__sanitizer::uptr)_AddressOfReturnAddress()) + sizeof(__sanitizer::uptr))</cpp:value></cpp:define>


<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>__ud2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>__ud2</name><name>)</name></cpp:pragma>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>Trap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__ud2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_EINTR</name><parameter_list>(<parameter><type><name>res</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int rverrno; do { res = (f); } while (internal_iserror(res, &amp;rverrno) &amp;&amp; rverrno == EINTR); }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_FRAME_POINTER</name></cpp:macro> <cpp:value>do { volatile __sanitizer::uptr enable_fp; enable_fp = GET_CURRENT_FRAME(); (void)enable_fp; } while (0)</cpp:value></cpp:define>






<decl_stmt><decl><type><name>constexpr</name> <name>u32</name></type> <name>kInvalidTid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>u32</name></type> <name>kMainTid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__dsan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__msan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__scudo</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__ubsan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__interception</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__sanitizer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
