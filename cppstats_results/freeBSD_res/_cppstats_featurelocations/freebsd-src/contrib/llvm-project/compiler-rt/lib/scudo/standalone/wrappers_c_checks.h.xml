<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/wrappers_c_checks.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_CHECKS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CHECKS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>


<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>setErrnoOnNull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Ptr</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <name>bool</name></type> <name>checkAlignedAllocAlignmentAndSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Alignment</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isPowerOfTwo</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isAligned</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>checkPosixMemalignAlignment</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Alignment</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isPowerOfTwo</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isAligned</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>bool</name></type> <name>checkForCallocOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>Product</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_umull_overflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_umull_overflow</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>Product</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>Product</name> <operator>=</operator> <name>Size</name> <operator>*</operator> <name>N</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>Product</name> <operator>/</operator> <name>Size</name><operator>)</operator> <operator>!=</operator> <name>N</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>checkForPvallocOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>PageSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>Size</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
