<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_addrhashmap.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ADDRHASHMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ADDRHASHMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>




















<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>AddrHashMap</name> <block>{<block_content>
<label><name>private</name>:</label>
<struct>struct <name>Cell</name> <block>{
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>AddBucket</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name></type> <name><name>cells</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kBucketSize</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Bucket</name> <block>{
<decl_stmt><decl><type><name>RWMutex</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name></type> <name><name>cells</name><index>[<expr><name>kBucketSize</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AddrHashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Handle</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>, <argument>bool remove</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>, <argument>bool remove</argument>, <argument>bool create</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block></decl>;</decl_stmt>
<function_decl><type><name>T</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>created</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>exists</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name></type> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>map_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bucket</name> <modifier>*</modifier></type><name>bucket_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>cell_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addidx_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>created_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>remove_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>create_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bucket</name> <modifier>*</modifier></type><name>table_</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>acquire</name><parameter_list>(<parameter><decl><type><name>Handle</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>release</name><parameter_list>(<parameter><decl><type><name>Handle</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>calcHash</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>)</argument_list></macro> <block>{
<expr><name>map_</name> <operator>=</operator> <name>map</name></expr>;
<expr><name>addr_</name> <operator>=</operator> <name>addr</name></expr>;
<expr><name>remove_</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>create_</name> <operator>=</operator> <name>true</name></expr>;
<expr><call><name><name>map_</name><operator>-&gt;</operator><name>acquire</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>,
<argument>bool remove</argument>)</argument_list></macro> <block>{
<expr><name>map_</name> <operator>=</operator> <name>map</name></expr>;
<expr><name>addr_</name> <operator>=</operator> <name>addr</name></expr>;
<expr><name>remove_</name> <operator>=</operator> <name>remove</name></expr>;
<expr><name>create_</name> <operator>=</operator> <name>true</name></expr>;
<expr><call><name><name>map_</name><operator>-&gt;</operator><name>acquire</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><macro><name>Handle</name><argument_list>(<argument>AddrHashMap&lt;T</argument>, <argument>kSize&gt; *map</argument>, <argument>uptr addr</argument>,
<argument>bool remove</argument>, <argument>bool create</argument>)</argument_list></macro> <block>{
<expr><name>map_</name> <operator>=</operator> <name>map</name></expr>;
<expr><name>addr_</name> <operator>=</operator> <name>addr</name></expr>;
<expr><name>remove_</name> <operator>=</operator> <name>remove</name></expr>;
<expr><name>create_</name> <operator>=</operator> <name>create</name></expr>;
<expr><call><name><name>map_</name><operator>-&gt;</operator><name>acquire</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><operator>~</operator><macro><name>Handle</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>map_</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>*</operator><name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>) <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>cell_</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>cell_</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>&amp;</operator><name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <block>{
<return>return <expr><name><name>cell_</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><macro><name>created</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>created_</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Handle</name><operator>::</operator><macro><name>exists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>cell_</name> <operator>!=</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>AddrHashMap</name><argument_list>()</argument_list></macro> <block>{
<expr><name>table_</name> <operator>=</operator> <operator>(</operator><name>Bucket</name><operator>*</operator><operator>)</operator><call><name>MmapOrDie</name><argument_list>(<argument><expr><name>kSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>table_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"AddrHashMap"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>uptr</name> <name>kSize</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>acquire</name><argument_list>(<argument>Handle *h</argument>)</argument_list></macro> <name>NO_THREAD_SAFETY_ANALYSIS</name> <block>{
<expr><name>uptr</name> <name>addr</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>addr_</name></name></expr>;
<expr><name>uptr</name> <name>hash</name> <operator>=</operator> <call><name>calcHash</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;
<expr><name>Bucket</name> <operator>*</operator><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>table_</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;

<expr><name><name>h</name><operator>-&gt;</operator><name>created_</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1U</literal></expr>;
<expr><name><name>h</name><operator>-&gt;</operator><name>bucket_</name></name> <operator>=</operator> <name>b</name></expr>;
<expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>nullptr</name></expr>;



<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>locked</name>;</goto></block_content></block></if></if_stmt>

<name>retry</name><operator>:</operator>

<call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kBucketSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>ReadLock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AddBucket</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><operator>(</operator><name>AddBucket</name><operator>*</operator><operator>)</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>add</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>ReadUnlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>locked</name>:</label>


<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kBucketSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>AddBucket</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><operator>(</operator><name>AddBucket</name><operator>*</operator><operator>)</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>add</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>create_</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>created_</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kBucketSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>add</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kInitSize</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><name>AddBucket</name><operator>*</operator><operator>)</operator><call><name>InternalAlloc</name><argument_list>(<argument><expr><name>kInitSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kInitSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <operator>(</operator><name>kInitSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>add</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>add</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>add</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uptr</name></type> <name>oldsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>add</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>add</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>newsize</name> <init>= <expr><name>oldsize</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddBucket</name> <modifier>*</modifier></type><name>add1</name> <init>= <expr><operator>(</operator><name>AddBucket</name><operator>*</operator><operator>)</operator><call><name>InternalAlloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>add1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add1</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <operator>(</operator><name>newsize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>add</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add1</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name><name>add1</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InternalFree</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>add1</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <name>add1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><name><name>add</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
}

template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>uptr</name> <name>kSize</name><operator>&gt;</operator>
<name>void</name> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>release</name><argument_list>(<argument>Handle *h</argument>)</argument_list></macro> <name>NO_THREAD_SAFETY_ANALYSIS</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<name>Bucket</name> <operator>*</operator><name>b</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>bucket_</name></name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cell_</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>created_</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>addr_</name></name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>remove_</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>addr_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AddBucket</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><operator>(</operator><name>AddBucket</name> <operator>*</operator><operator>)</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1U</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>last</name> <init>= <expr><operator>--</operator><name><name>add</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>last</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>c1</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr1</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uptr</name></type> <name>last</name> <init>= <expr><operator>--</operator><name><name>add</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cell</name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>last</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>c1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>addr_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>addidx_</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>mtx</name><operator>.</operator><name>ReadUnlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>uptr</name> <name>kSize</name><operator>&gt;</operator>
<name>uptr</name> <name><name>AddrHashMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>kSize</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>calcHash</name><argument_list>(<argument>uptr addr</argument>)</argument_list></macro> <block>{
<expr><name>addr</name> <operator>+=</operator> <name>addr</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;
<expr><name>addr</name> <operator>^=</operator> <name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;
<return>return <expr><name>addr</name> <operator>%</operator> <name>kSize</name></expr>;</return>
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
