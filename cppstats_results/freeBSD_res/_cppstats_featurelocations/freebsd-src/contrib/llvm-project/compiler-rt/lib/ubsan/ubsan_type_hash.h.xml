<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/ubsan/ubsan_type_hash.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UBSAN_TYPE_HASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBSAN_TYPE_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__ubsan</name> <block>{<block_content>

<typedef>typedef <type><name>uptr</name></type> <name>HashValue</name>;</typedef>



<decl_stmt><decl><type><name>class</name></type> <name>DynamicTypeInfo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MostDerivedTypeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sptr</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SubobjectTypeName</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>DynamicTypeInfo</name><argument_list>(<argument>const char *MDTN</argument>, <argument>sptr Offset</argument>, <argument>const char *STN</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>MostDerivedTypeName</name><argument_list>(<argument><expr><name>MDTN</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SubobjectTypeName</name><argument_list>(<argument>STN</argument>)</argument_list></macro> <expr><block>{}</block>


<name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MostDerivedTypeName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getMostDerivedTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MostDerivedTypeName</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>sptr</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getSubobjectTypeName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SubobjectTypeName</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>DynamicTypeInfo</name></type> <name>getDynamicTypeInfoFromObject</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Object</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>DynamicTypeInfo</name></type> <name>getDynamicTypeInfoFromVtable</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Vtable</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>checkDynamicType</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Object</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Type</name></decl></parameter>, <parameter><decl><type><name>HashValue</name></type> <name>Hash</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>VptrTypeCacheSize</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>VptrMaxOffsetToTop</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>






<extern>extern <literal type="string">"C"</literal> <decl_stmt><decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name>
<name>HashValue</name></type> <name><name>__ubsan_vptr_type_cache</name><index>[<expr><name>VptrTypeCacheSize</name></expr>]</index></name></decl>;</decl_stmt></extern>



<function_decl><type><name>bool</name></type> <name>checkTypeInfoEquality</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>TypeInfo1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>TypeInfo2</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
