<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/quarantine.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_QUARANTINE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_QUARANTINE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<struct>struct <name>QuarantineBatch</name> <block>{


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><literal type="number">1019</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>Count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>Batch</name><index>[<expr><name>MaxCount</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Batch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>uptr</name> <macro><name>getQuarantinedSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>MaxCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Batch</name><index>[<expr><name>Count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Size</name></name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>canMerge</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QuarantineBatch</name> <operator>*</operator><specifier>const</specifier> <name>From</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Count</name> <operator>+</operator> <name><name>From</name><operator>-&gt;</operator><name>Count</name></name> <operator>&lt;=</operator> <name>MaxCount</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>QuarantineBatch</name> <modifier>*</modifier><specifier>const</specifier></type> <name>From</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Count</name> <operator>+</operator> <name><name>From</name><operator>-&gt;</operator><name>Count</name></name></expr></argument>, <argument><expr><name>MaxCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name><name>From</name><operator>-&gt;</operator><name>Count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Batch</name><index>[<expr><name>Count</name> <operator>+</operator> <name>I</name></expr>]</index></name> <operator>=</operator> <name><name>From</name><operator>-&gt;</operator><name>Batch</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>Count</name> <operator>+=</operator> <name><name>From</name><operator>-&gt;</operator><name>Count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <call><name><name>From</name><operator>-&gt;</operator><name>getQuarantinedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>From</name><operator>-&gt;</operator><name>Count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>From</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shuffle</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>State</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>::</operator><name>scudo</name><operator>::</operator><call><name>shuffle</name><argument_list>(<argument><expr><name>Batch</name></expr></argument>, <argument><expr><name>Count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>State</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callback</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>QuarantineCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>uptr</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Size</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>getOverheadSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>List</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>List</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>List</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Count</name> <operator>==</operator> <name>QuarantineBatch</name><operator>::</operator><name>MaxCount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>B</name> <init>=
<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>QuarantineBatch</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Cb</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>B</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enqueueBatch</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>push_back</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addToSize</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transfer</name><parameter_list>(<parameter><decl><type><name>QuarantineCache</name> <modifier>*</modifier></type><name>From</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>append_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>From</name><operator>-&gt;</operator><name>List</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addToSize</name><argument_list>(<argument><expr><call><name><name>From</name><operator>-&gt;</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>From</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enqueueBatch</name><parameter_list>(<parameter><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addToSize</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>dequeueBatch</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>List</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>List</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subFromSize</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>B</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mergeBatches</name><parameter_list>(<parameter><decl><type><name>QuarantineCache</name> <modifier>*</modifier></type><name>ToDeallocate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>ExtractedSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>Current</name> <init>= <expr><call><name><name>List</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>Current</name> <operator>&amp;&amp;</operator> <name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Current</name><operator>-&gt;</operator><name>canMerge</name></name><argument_list>(<argument><expr><name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>Extracted</name> <init>= <expr><name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>Current</name><operator>-&gt;</operator><name>merge</name></name><argument_list>(<argument><expr><name>Extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>Extracted</name><operator>-&gt;</operator><name>Count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>Extracted</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>extract</name></name><argument_list>(<argument><expr><name>Current</name></expr></argument>, <argument><expr><name>Extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ExtractedSize</name> <operator>+=</operator> <name><name>Extracted</name><operator>-&gt;</operator><name>Size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ToDeallocate</name><operator>-&gt;</operator><name>enqueueBatch</name></name><argument_list>(<argument><expr><name>Extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>subFromSize</name><argument_list>(<argument><expr><name>ExtractedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>getStats</name><argument_list>(<argument><expr><name>ScopedString</name> <operator>*</operator><name>Str</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>BatchCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalOverheadBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalQuarantineChunks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>QuarantineBatch</name> <modifier>&amp;</modifier></type><name>Batch</name> <range>: <expr><name>List</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>BatchCount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>TotalBytes</name> <operator>+=</operator> <name><name>Batch</name><operator>.</operator><name>Size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>TotalOverheadBytes</name> <operator>+=</operator> <name><name>Batch</name><operator>.</operator><name>Size</name></name> <operator>-</operator> <call><name><name>Batch</name><operator>.</operator><name>getQuarantinedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TotalQuarantineChunks</name> <operator>+=</operator> <name><name>Batch</name><operator>.</operator><name>Count</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>QuarantineChunksCapacity</name> <init>=
<expr><name>BatchCount</name> <operator>*</operator> <name>QuarantineBatch</name><operator>::</operator><name>MaxCount</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>ChunksUsagePercent</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>QuarantineChunksCapacity</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>TotalQuarantineChunks</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>QuarantineChunksCapacity</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>TotalQuarantinedBytes</name> <init>= <expr><name>TotalBytes</name> <operator>-</operator> <name>TotalOverheadBytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MemoryOverheadPercent</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>TotalQuarantinedBytes</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><name>TotalOverheadBytes</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>TotalQuarantinedBytes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>-&gt;</operator><name>append</name></name><argument_list>(
<argument><expr><literal type="string">"Stats: Quarantine: batches: %zu; bytes: %zu (user: %zu); chunks: %zu "</literal>
<literal type="string">"(capacity: %zu); %zu%% chunks used; %zu%% memory overhead\n"</literal></expr></argument>,
<argument><expr><name>BatchCount</name></expr></argument>, <argument><expr><name>TotalBytes</name></expr></argument>, <argument><expr><name>TotalQuarantinedBytes</name></expr></argument>, <argument><expr><name>TotalQuarantineChunks</name></expr></argument>,
<argument><expr><name>QuarantineChunksCapacity</name></expr></argument>, <argument><expr><name>ChunksUsagePercent</name></expr></argument>, <argument><expr><name>MemoryOverheadPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>SinglyLinkedList</name><argument_list type="generic">&lt;<argument><expr><name>QuarantineBatch</name></expr></argument>&gt;</argument_list></name></type> <name>List</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>Size</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>addToSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Size</name></expr></argument>, <argument><expr><call><name>getSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>subFromSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>sub</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Size</name></expr></argument>, <argument><expr><call><name>getSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callback</name></expr></argument>, <argument><expr><name>typename</name> <name>Node</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>GlobalQuarantine</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name><name>QuarantineCache</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>&gt;</argument_list></name></type> <name>CacheT</name>;</typedef>
<decl_stmt><decl><type><name>using</name></type> <name>ThisT</name> <init>= <expr><name><name>GlobalQuarantine</name><argument_list type="generic">&lt;<argument><expr><name>Callback</name></expr></argument>, <argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>CacheSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>isAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>ThisT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MinSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxCacheSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>Size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>CacheSize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>CacheSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxSize</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MinSize</name></expr></argument>, <argument><expr><name>Size</name> <operator>/</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxCacheSize</name></expr></argument>, <argument><expr><name>CacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>getMaxSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxSize</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>getCacheSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxCacheSize</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>C</name><operator>-&gt;</operator><name>enqueue</name></name><argument_list>(<argument><expr><name>Cb</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>C</name><operator>-&gt;</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>getCacheSize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>drain</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>CacheMutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name><name>Cache</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>getMaxSize</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>RecycleMutex</name><operator>.</operator><name>tryLock</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>recycle</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MinSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>drainAndRecycle</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>CacheMutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name><name>RecycleMutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recycle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>getStats</name><argument_list>(<argument><expr><name>ScopedString</name> <operator>*</operator><name>Str</name></expr></argument>)</argument_list> const <block>{<block_content>

<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>getStats</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Quarantine limits: global: %zuK; thread local: %zuK\n"</literal></expr></argument>,
<argument><expr><call><name>getMaxSize</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><call><name>getCacheSize</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name><name>RecycleMutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>CacheMutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>CacheMutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>RecycleMutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>

<macro><name>alignas</name><argument_list>(<argument>SCUDO_CACHE_LINE_SIZE</argument>)</argument_list></macro> <decl_stmt><decl><type><name>HybridMutex</name></type> <name>CacheMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CacheT</name></type> <name>Cache</name></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>SCUDO_CACHE_LINE_SIZE</argument>)</argument_list></macro> <decl_stmt><decl><type><name>HybridMutex</name></type> <name>RecycleMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>MinSize</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>MaxSize</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<macro><name>alignas</name><argument_list>(<argument>SCUDO_CACHE_LINE_SIZE</argument>)</argument_list></macro> <decl_stmt><decl><type><name>atomic_uptr</name></type> <name>MaxCacheSize</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>recycle</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>MinSize</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CacheT</name></type> <name>Tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Tmp</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>CacheMutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CacheSize</name> <init>= <expr><call><name><name>Cache</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>OverheadSize</name> <init>= <expr><call><name><name>Cache</name><operator>.</operator><name>getOverheadSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>CacheSize</name></expr></argument>, <argument><expr><name>OverheadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>OverheadThresholdPercents</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>CacheSize</name> <operator>&gt;</operator> <name>OverheadSize</name> <operator>&amp;&amp;</operator>
<name>OverheadSize</name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>OverheadThresholdPercents</name><operator>)</operator> <operator>&gt;</operator>
<name>CacheSize</name> <operator>*</operator> <name>OverheadThresholdPercents</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>mergeBatches</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><call><name><name>Cache</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MinSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Tmp</name><operator>.</operator><name>enqueueBatch</name></name><argument_list>(<argument><expr><call><name><name>Cache</name><operator>.</operator><name>dequeueBatch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block>
<expr_stmt><expr><call><name><name>RecycleMutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>doRecycle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>, <argument><expr><name>Cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>doRecycle</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>Cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<decl><type><name>QuarantineBatch</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>C</name><operator>-&gt;</operator><name>dequeueBatch</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>Seed</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>shuffle</name></name><argument_list>(<argument><expr><name>Seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>NumberOfPrefetch</name> <init>= <expr><literal type="number">8UL</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>NumberOfPrefetch</name> <operator>&lt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Batch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumberOfPrefetch</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PREFETCH</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Batch</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Count</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Count</name></name></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Count</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>+</operator> <name>NumberOfPrefetch</name> <operator>&lt;</operator> <name>Count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PREFETCH</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Batch</name><index>[<expr><name>I</name> <operator>+</operator> <name>NumberOfPrefetch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Cb</name><operator>.</operator><name>recycle</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Node</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>Batch</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>Cb</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
