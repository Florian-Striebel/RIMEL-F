<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_linux.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_LINUX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_LINUX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_SOLARIS</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_freebsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_netbsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_posix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_solaris.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_posix.h"</cpp:file></cpp:include>

<struct_decl>struct <name>link_map</name>;</struct_decl>
<struct_decl>struct <name>utsname</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>


<struct_decl>struct <name>linux_dirent</name>;</struct_decl>

<struct>struct <name>ProcSelfMapsBuff</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mmaped_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>MemoryMappingLayoutData</name> <block>{
<decl_stmt><decl><type><name>ProcSelfMapsBuff</name></type> <name>proc_self_maps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>ReadProcMaps</name><parameter_list>(<parameter><decl><type><name>ProcSelfMapsBuff</name> <modifier>*</modifier></type><name>proc_maps</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>internal_getdents</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>linux_dirent</name></name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_sigaltstack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>oss</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_sigprocmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>oldset</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_GLIBC</name></expr></cpp:if>
<function_decl><type><name>uptr</name></type> <name>internal_clock_gettime</name><parameter_list>(<parameter><decl><type><name>__sanitizer_clockid_t</name></type> <name>clk_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name></expr></cpp:if>
<function_decl><type><name>uptr</name></type> <name>internal_prctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>arg3</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>arg4</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>arg5</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>internal_sigaction_norestorer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldact</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>internal_sigdelset</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SANITIZER_RISCV64</name></expr></cpp:if>


<function_decl><type><name>uptr</name></type> <name>internal_clone</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>internal_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>utsname</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FREEBSD</name></expr></cpp:elif>
<function_decl><type><name>void</name></type> <name>internal_sigdelset</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:elif>
<function_decl><type><name>void</name></type> <name>internal_sigdelset</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_clone</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>class</name></type> <name>ThreadLister</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ThreadLister</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>ThreadLister</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<enum>enum <name>Result</name> <block>{
<decl><name>Error</name></decl>,
<decl><name>Incomplete</name></decl>,
<decl><name>Ok</name></decl>,
}</block>;</enum>
<function_decl><type><name>Result</name></type> <name>ListThreads</name><parameter_list>(<parameter><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>tid_t</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>bool</name></type> <name>IsAlive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>descriptor_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>buffer_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>uptr</name></type> <name>ThreadDescriptorSize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>ThreadSelf</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>LibraryNameIs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>full_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ForEachMappedRegion</name><parameter_list>(<parameter><decl><type><name>link_map</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uptr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>inline</specifier> <name>void</name></type> <name>ReleaseMemoryPagesToOSAndZeroFill</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>



<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>SANITIZER_LINUX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMemoryPagesToOS</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__get_tls</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ void** __v; __asm__("mrs %0, tpidr_el0" : "=r"(__v)); __v; })</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__get_tls</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ void** __v; __asm__("mrc p15, 0, %0, c13, c0, 3" : "=r"(__v)); __v; })</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__get_tls</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ register void** __v asm("v1"); __asm__(".set push\n" ".set mips32r2\n" "rdhwr %0,$29\n" ".set pop\n" : "=r"(__v)); __v; })</cpp:value></cpp:define>






<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__get_tls</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ void** __v; __asm__("movl %%gs:0, %0" : "=r"(__v)); __v; })</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__get_tls</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ void** __v; __asm__("mov %%fs:0, %0" : "=r"(__v)); __v; })</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported architecture."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>TLS_SLOT_SANITIZER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ALWAYS_INLINE</name> <name>uptr</name> <modifier>*</modifier></type><name>get_android_tls_ptr</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>__get_tls</name><argument_list>()</argument_list></call><index>[<expr><name>TLS_SLOT_SANITIZER</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
