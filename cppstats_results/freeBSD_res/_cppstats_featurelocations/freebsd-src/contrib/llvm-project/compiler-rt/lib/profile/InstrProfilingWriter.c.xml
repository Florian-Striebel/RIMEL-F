<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingWriter.c">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingPort.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_PROF_DATA</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>

<function_decl><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> (<modifier>*</modifier><name>FreeHook</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>ProfBufferIO</name></type> <name>TheBufferIO</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_BUFFER_SIZE</name></cpp:macro> <cpp:value>8 * 1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>BufferIOBuffer</name><index>[<expr><name>VP_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>InstrProfValueData</name></type> <name><name>VPDataArray</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>VPDataArraySize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VPDataArray</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>VPDataArray</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>uint8_t</name> <modifier>*</modifier></type><name>DynamicBufferIOBuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>uint32_t</name></type> <name>VPBufferSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint32_t</name></type> <name>lprofBufferWriter</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,
<parameter><decl><type><name>ProfDataIOVec</name> <modifier>*</modifier></type><name>IOVecs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>NumIOVecs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>I</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>Buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>This</name><operator>-&gt;</operator><name>WriterCtx</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumIOVecs</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Length</name> <init>= <expr><name><name>IOVecs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>ElmSize</name> <operator>*</operator> <name><name>IOVecs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>NumElm</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>IOVecs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>Buffer</name></expr></argument>, <argument><expr><name><name>IOVecs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr></argument>, <argument><expr><name>Length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>IOVecs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>UseZeroPadding</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>Buffer</name> <operator>+=</operator> <name>Length</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>llvmInitBufferIO</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>, <parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>FileWriter</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>BufferSz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name></name> <operator>=</operator> <name>FileWriter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>OwnFileWriter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>BufferStart</name></name> <operator>=</operator> <name>Buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>BufferSz</name></name> <operator>=</operator> <name>BufferSz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>ProfBufferIO</name> <modifier>*</modifier></type>
<name>lprofCreateBufferIO</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>FileWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><name>DynamicBufferIOBuffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>BufferSize</name> <init>= <expr><name>VPBufferSize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>BufferIOBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferIOBuffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>llvmInitBufferIO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TheBufferIO</name></expr></argument>, <argument><expr><name>FileWriter</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>BufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>TheBufferIO</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>lprofDeleteBufferIO</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>BufferIO</name><operator>-&gt;</operator><name>OwnFileWriter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeHook</name><argument_list>(<argument><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>DynamicBufferIOBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeHook</name><argument_list>(<argument><expr><name>DynamicBufferIOBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DynamicBufferIOBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>VPBufferSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type>
<name>lprofBufferIOWrite</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>+</operator> <name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name> <operator>&gt;</operator> <name><name>BufferIO</name><operator>-&gt;</operator><name>BufferSz</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOFlush</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ProfDataIOVec</name></type> <name><name>IO</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><name>Data</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>Size</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&gt;</operator> <name><name>BufferIO</name><operator>-&gt;</operator><name>BufferSz</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name></name></expr></argument>, <argument><expr><name>IO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><name><name>BufferIO</name><operator>-&gt;</operator><name>BufferStart</name></name> <operator>+</operator> <name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProfDataWriter</name></type> <name>BufferWriter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>initBufferWriter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lprofBufferWriter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferWriter</name></expr></argument>, <argument><expr><name>IO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name> <operator>=</operator>
<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>BufferWriter</name><operator>.</operator><name>WriterCtx</name></name> <operator>-</operator> <name><name>BufferIO</name><operator>-&gt;</operator><name>BufferStart</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>lprofBufferIOFlush</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ProfDataIOVec</name></type> <name><name>IO</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name><name>BufferIO</name><operator>-&gt;</operator><name>BufferStart</name></name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>FileWriter</name></name></expr></argument>, <argument><expr><name>IO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>BufferIO</name><operator>-&gt;</operator><name>CurOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>writeOneValueProfData</name><parameter_list>(<parameter><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl></parameter>,
<parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name></decl>, <decl><type ref="prev"/><name>NumValueKinds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfData</name></type> <name>VPHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>SiteCountArray</name><index>[<expr><name>IPVK_Last</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;=</operator> <name>IPVK_Last</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>SiteCountArray</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Sz</name> <init>=
<expr><call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetValueProfRecordHeaderSize</name></name><argument_list>(<argument><expr><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>offsetof</name><argument_list>(<argument><expr><name>ValueProfRecord</name></expr></argument>, <argument><expr><name>SiteCountArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>SiteCountArray</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>COMPILER_RT_ALLOCA</name><argument_list>(<argument><expr><name>Sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>SiteCountArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>NumValueKinds</name> <operator>=</operator> <call><name><name>VPDataReader</name><operator>-&gt;</operator><name>InitRTRecord</name></name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>SiteCountArray</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>VPHeader</name><operator>.</operator><name>TotalSize</name></name> <operator>=</operator> <call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetValueProfDataSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>VPHeader</name><operator>.</operator><name>NumValueKinds</name></name> <operator>=</operator> <name>NumValueKinds</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOWrite</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>VPHeader</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ValueProfData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetFirstValueProfRecord</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>VPHeader</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>VPHeader</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;=</operator> <name>IPVK_Last</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>J</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfRecord</name></type> <name>RecordHeader</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>RecordHeaderSize</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ValueProfRecord</name></expr></argument>, <argument><expr><name>SiteCountArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SiteCountArraySize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>RecordHeader</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RecordHeader</name><operator>.</operator><name>NumValueSites</name></name> <operator>=</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOWrite</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>RecordHeader</name></expr></argument>,
<argument><expr><name>RecordHeaderSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>SiteCountArraySize</name> <operator>=</operator>
<call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetValueProfRecordHeaderSize</name></name><argument_list>(<argument><expr><name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator>
<name>RecordHeaderSize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOWrite</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>, <argument><expr><name><name>SiteCountArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>SiteCountArraySize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>J</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>J</name> <operator>&lt;</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</condition> <incr><expr><name>J</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>NRead</name></decl>, <decl><type ref="prev"/><name>NRemain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>NextStartNode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>NRemain</name> <operator>=</operator> <call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetNumValueDataForSite</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NRemain</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>NRead</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>NRemain</name> <operator>&gt;</operator> <name>VPDataArraySize</name></expr> ?</condition><then> <expr><name>VPDataArraySize</name></expr> </then><else>: <expr><name>NRemain</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>NextStartNode</name> <operator>=</operator>
<call><name><name>VPDataReader</name><operator>-&gt;</operator><name>GetValueData</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>,
<argument><expr><name>J</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>VPDataArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NextStartNode</name></expr></argument>, <argument><expr><name>NRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOWrite</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>VPDataArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>NRead</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InstrProfValueData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>NRemain</name> <operator>-=</operator> <name>NRead</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>NRemain</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeValueProfData</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>,
<parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProfBufferIO</name> <modifier>*</modifier></type><name>BufferIO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VPDataReader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BufferIO</name> <operator>=</operator> <call><name>lprofCreateBufferIO</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>DI</name> <operator>=</operator> <name>DataBegin</name></expr>;</init> <condition><expr><name>DI</name> <operator>&lt;</operator> <name>DataEnd</name></expr>;</condition> <incr><expr><name>DI</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>writeOneValueProfData</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>, <argument><expr><name>VPDataReader</name></expr></argument>, <argument><expr><name>DI</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>lprofBufferIOFlush</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lprofDeleteBufferIO</name><argument_list>(<argument><expr><name>BufferIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>lprofWriteData</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>,
<parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>SkipNameDataWrite</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name> <init>= <expr><call><name>__llvm_profile_begin_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name> <init>= <expr><call><name>__llvm_profile_end_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name> <init>= <expr><call><name>__llvm_profile_begin_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name> <init>= <expr><call><name>__llvm_profile_end_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name> <init>= <expr><call><name>__llvm_profile_begin_names</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name> <init>= <expr><call><name>__llvm_profile_end_names</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>lprofWriteDataImpl</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>, <argument><expr><name>CountersBegin</name></expr></argument>,
<argument><expr><name>CountersEnd</name></expr></argument>, <argument><expr><name>VPDataReader</name></expr></argument>, <argument><expr><name>NamesBegin</name></expr></argument>, <argument><expr><name>NamesEnd</name></expr></argument>,
<argument><expr><name>SkipNameDataWrite</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type>
<name>lprofWriteDataImpl</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersBegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersEnd</name></decl></parameter>,
<parameter><decl><type><name>VPDataReaderType</name> <modifier>*</modifier></type><name>VPDataReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesEnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>SkipNameDataWrite</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>DataSize</name> <init>= <expr><call><name>__llvm_profile_get_data_size</name><argument_list>(<argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>CountersSize</name> <init>= <expr><name>CountersEnd</name> <operator>-</operator> <name>CountersBegin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>NamesSize</name> <init>= <expr><name>NamesEnd</name> <operator>-</operator> <name>NamesBegin</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>__llvm_profile_header</name></type> <name>Header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DataSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>PaddingBytesBeforeCounters</name></decl>, <decl><type ref="prev"/><name>PaddingBytesAfterCounters</name></decl>,
<decl><type ref="prev"/><name>PaddingBytesAfterNames</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__llvm_profile_get_padding_sizes_for_counters</name><argument_list>(
<argument><expr><name>DataSize</name></expr></argument>, <argument><expr><name>CountersSize</name></expr></argument>, <argument><expr><name>NamesSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PaddingBytesBeforeCounters</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>PaddingBytesAfterCounters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PaddingBytesAfterNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_RAW_HEADER</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Init</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Header.Name = Init;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>ProfDataIOVec</name></type> <name><name>IOVec</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>&amp;</operator><name>Header</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_header</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>IOVec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOVec</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>IOVec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>__llvm_write_binary_ids</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>ProfDataIOVec</name></type> <name><name>IOVecData</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>DataBegin</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__llvm_profile_data</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>DataSize</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>PaddingBytesBeforeCounters</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>CountersBegin</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>CountersSize</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>PaddingBytesAfterCounters</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>SkipNameDataWrite</name> <operator>?</operator> <name>NULL</name> <operator>:</operator> <name>NamesBegin</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NamesSize</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>PaddingBytesAfterNames</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>IOVecData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOVecData</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>IOVecData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>__llvm_profile_is_continuous_mode_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>writeValueProfData</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>VPDataReader</name></expr></argument>, <argument><expr><name>DataBegin</name></expr></argument>, <argument><expr><name>DataEnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
