<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_malloc_bisect.h">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<function><type><specifier>static</specifier> <name>u32</name></type> <name>malloc_hash</name><parameter_list>(<parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>orig_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>len</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MurMur2HashBuilder</name></type> <name>H</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>H</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>orig_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>H</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><call><name><name>H</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>malloc_bisect</name><parameter_list>(<parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>orig_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>left</name> <init>= <expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>malloc_bisect_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>right</name> <init>= <expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>malloc_bisect_right</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>malloc_hash</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>orig_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name> <argument_list type="generic">&lt; <argument><expr><name>left</name> <operator>||</operator> <name>h</name></expr></argument> &gt;</argument_list></name> <name>right</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>malloc_bisect_dump</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"[alloc] %u %zu\n"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>orig_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stack</name><operator>-&gt;</operator><name>Print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</unit>
