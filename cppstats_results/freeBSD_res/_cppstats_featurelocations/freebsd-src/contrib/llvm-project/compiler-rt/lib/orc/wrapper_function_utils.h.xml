<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/wrapper_function_utils.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_WRAPPER_FUNCTION_UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_WRAPPER_FUNCTION_UTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_packed_serialization.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>WrapperFunctionResult</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>WrapperFunctionResult</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>__orc_rt_CWrapperFunctionResultInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>




<macro><name>WrapperFunctionResult</name><argument_list>(<argument>__orc_rt_CWrapperFunctionResult R</argument>)</argument_list></macro> : <macro><name>R</name><argument_list>(<argument>R</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><call><name>WrapperFunctionResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WrapperFunctionResult</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WrapperFunctionResult</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>WrapperFunctionResult</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<macro><name>WrapperFunctionResult</name><argument_list>(<argument>WrapperFunctionResult &amp;&amp;Other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>__orc_rt_CWrapperFunctionResultInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>R</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>WrapperFunctionResult</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>WrapperFunctionResult</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>__orc_rt_CWrapperFunctionResult</name> <name>Tmp</name></expr>;
<expr><call><name>__orc_rt_CWrapperFunctionResultInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>R</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>WrapperFunctionResult</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>__orc_rt_DisposeCWrapperFunctionResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>; }</block>



<name>__orc_rt_CWrapperFunctionResult</name> <macro><name>release</name><argument_list>()</argument_list></macro> <block>{
<expr><name>__orc_rt_CWrapperFunctionResult</name> <name>Tmp</name></expr>;
<expr><call><name>__orc_rt_CWrapperFunctionResultInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tmp</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Tmp</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>__orc_rt_CWrapperFunctionResultData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>__orc_rt_CWrapperFunctionResultSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>__orc_rt_CWrapperFunctionResultEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>WrapperFunctionResult</name> <modifier>&amp;</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__orc_rt_DisposeCWrapperFunctionResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>R</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__orc_rt_CWrapperFunctionResultInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>R</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>__orc_rt_CWrapperFunctionResultAllocate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>R</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__orc_rt_CreateCWrapperFunctionResultFromRange</name><argument_list>(<argument><expr><name>Source</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__orc_rt_CreateCWrapperFunctionResultFromString</name><argument_list>(<argument><expr><name>Source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>copyFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Source</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>copyFrom</name><argument_list>(<argument><expr><call><name><name>Source</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>createOutOfBandError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__orc_rt_CreateCWrapperFunctionResultFromOutOfBandError</name><argument_list>(<argument><expr><name>Msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>createOutOfBandError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Msg</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>createOutOfBandError</name><argument_list>(<argument><expr><call><name><name>Msg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getOutOfBandError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>__orc_rt_CWrapperFunctionResultGetOutOfBandError</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>__orc_rt_CWrapperFunctionResult</name></type> <name>R</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSArgListT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>WrapperFunctionResult</name></expr></argument>&gt;</argument_list></name></type>
<name>serializeViaSPSToWrapperFunctionResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgTs</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>WrapperFunctionResult</name></type> <name>Result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>DataPtr</name> <init>=
<expr><name>WrapperFunctionResult</name><operator>::</operator><call><name>allocate</name><argument_list>(<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>SPSArgListT</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SPSOutputBuffer</name></type> <name>OB</name><argument_list>(<argument><expr><name>DataPtr</name></expr></argument>, <argument><expr><call><name><name>Result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SPSArgListT</name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>OB</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><literal type="string">"Error serializing arguments to blob in call"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>WrapperFunctionHandlerCaller</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>HandlerT</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgTupleT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name><modifier>...</modifier> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier></type> <name>decltype</name><parameter_list>(<parameter><decl><type><name>auto</name></type></decl></parameter>)</parameter_list> call<parameter_list>(<parameter><decl/></parameter></parameter_list>HandlerT &amp;&amp;H<operator>,</operator> <decl_stmt><decl><type><name>ArgTupleT</name> <modifier>&amp;</modifier></type><name>Args</name></decl>,
<decl><type ref="prev"/><name>std</name></decl>::index_sequence&lt;I...&gt;</decl_stmt></function>)</block_content> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>HandlerT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>WrapperFunctionHandlerCaller</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>HandlerT</name></expr></argument>, <argument><expr><name>typename</name> <name>ArgTupleT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name><modifier>...</modifier> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>SPSEmpty</name></type> <name>call</name><argument_list>(<argument><expr><name>HandlerT</name> <operator>&amp;&amp;</operator><name>H</name></expr></argument>, <argument><expr><name>ArgTupleT</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>I</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>HandlerT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SPSEmpty</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>WrapperFunctionImplT</name></expr></argument>,
<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ResultSerializer</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>WrapperFunctionHandlerHelper</name>
<range>: <expr><name>public</name> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;
<argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>WrapperFunctionImplT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>ResultSerializer</name></expr></argument>, <argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>,
<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ResultSerializer</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>ArgTuple</name> <init>= <expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>ArgTs</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ArgIndices</name> <init>= <expr><name>std</name><operator>::</operator><name><name>make_index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>ArgTuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>HandlerT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>apply</name><argument_list>(<argument><expr><name>HandlerT</name> <operator>&amp;&amp;</operator><name>H</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ArgData</name></expr></argument>,
<argument><expr><name>size_t</name> <name>ArgSize</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ArgTuple</name></type> <name>Args</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><macro><name>deserialize</name><argument_list>(<argument>ArgData</argument>, <argument>ArgSize</argument>, <argument>Args</argument>, <argument>ArgIndices{}</argument>)</argument_list></macro></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>WrapperFunctionResult</name><operator>::</operator><call><name>createOutOfBandError</name><argument_list>(
<argument><expr><literal type="string">"Could not deserialize arguments for wrapper function call"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>HandlerResult</name> <init>= <expr><name><name>WrapperFunctionHandlerCaller</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>call</name><argument_list>(
<argument>std::forward&lt;HandlerT&gt;(H)</argument>, <argument>Args</argument>, <argument>ArgIndices{}</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>Result</name> <init>= <expr><name><name>ResultSerializer</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>HandlerResult</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>HandlerResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>Result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>WrapperFunctionResult</name><operator>::</operator><call><name>createOutOfBandError</name><argument_list>(
<argument><expr><call><name>toString</name><argument_list>(<argument><expr><call><name><name>Result</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name><modifier>...</modifier> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ArgData</name></expr></argument>, <argument><expr><name>size_t</name> <name>ArgSize</name></expr></argument>, <argument><expr><name>ArgTuple</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>I</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <block>{<block_content>
<function_decl><type><name>SPSInputBuffer</name></type> <name>IB</name><parameter_list>(<parameter><decl><type><name>ArgData</name></type></decl></parameter>, <parameter><decl><type><name>ArgSize</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>,
<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ResultSerializer</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name> <operator>(</operator><operator>&amp;</operator><operator>)</operator><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ClassT</name></expr></argument>, <argument><expr><name>typename</name> <name>RetT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>,
<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ResultSerializer</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name> <operator>(</operator><name>ClassT</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ClassT</name></expr></argument>, <argument><expr><name>typename</name> <name>RetT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>,
<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ResultSerializer</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name> <operator>(</operator><name>ClassT</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator> <specifier>const</specifier></expr></argument>,
<argument><expr><name>ResultSerializer</name></expr></argument>, <argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>RetT</name><operator>(</operator><name>ArgTs</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSRetTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>RetT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ResultSerializer</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>WrapperFunctionResult</name></expr></argument>&gt;</argument_list></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>RetT</name></type> <name>Result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>serializeViaSPSToWrapperFunctionResult</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSRetTagT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name><name>ResultSerializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>WrapperFunctionResult</name></expr></argument>&gt;</argument_list></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Error</name></type> <name>Err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>serializeViaSPSToWrapperFunctionResult</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>toSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSRetTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>ResultSerializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>, <argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>WrapperFunctionResult</name></expr></argument>&gt;</argument_list></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>serializeViaSPSToWrapperFunctionResult</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>toSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSRetTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>RetT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>ResultDeserializer</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>void</name></type> <name>makeSafe</name><parameter_list>(<parameter><decl><type><name>RetT</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>Error</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>RetT</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ArgData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ArgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SPSInputBuffer</name></type> <name>IB</name><argument_list>(<argument><expr><name>ArgData</name></expr></argument>, <argument><expr><name>ArgSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><literal type="string">"Error deserializing return value from blob in call"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>ResultDeserializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSError</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>void</name></type> <name>makeSafe</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>&amp;</modifier></type><name>Err</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>cantFail</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Error</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>&amp;</modifier></type><name>Err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ArgData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ArgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SPSInputBuffer</name></type> <name>IB</name><argument_list>(<argument><expr><name>ArgData</name></expr></argument>, <argument><expr><name>ArgSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SPSSerializableError</name></type> <name>BSE</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSError</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><literal type="string">"Error deserializing return value from blob in call"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Err</name> <operator>=</operator> <call><name>fromSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSTagT</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>ResultDeserializer</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSExpected</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>void</name></type> <name>makeSafe</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>cantFail</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Error</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ArgData</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>ArgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SPSInputBuffer</name></type> <name>IB</name><argument_list>(<argument><expr><name>ArgData</name></expr></argument>, <argument><expr><name>ArgSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>BSE</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSExpected</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagT</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>IB</name></expr></argument>, <argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><literal type="string">"Error deserializing return value from blob in call"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>E</name> <operator>=</operator> <call><name>fromSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>BSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSSignature</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>WrapperFunction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SPSRetTagT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunction</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name><operator>(</operator><name>SPSTagTs</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetT</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>ResultSerializer</name> <init>= <expr><name>detail</name><operator>::</operator><name><name>ResultSerializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>, <argument><expr><name>RetT</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>RetT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Error</name></type> <name>call</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>FnTag</name></decl></parameter>, <parameter><decl><type><name>RetT</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ArgTs</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>




<expr_stmt><expr><name>detail</name><operator>::</operator><name><name>ResultDeserializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>, <argument><expr><name>RetT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>makeSafe</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ORC_RT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>&amp;</operator><name>__orc_rt_jit_dispatch_ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"__orc_rt_jit_dispatch_ctx not set"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ORC_RT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>&amp;</operator><name>__orc_rt_jit_dispatch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"__orc_rt_jit_dispatch not set"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>ArgBuffer</name> <init>=
<expr><name>detail</name><operator>::</operator><call><name><name>serializeViaSPSToWrapperFunctionResult</name><argument_list type="generic">&lt;<argument><expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ArgBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ArgBuffer</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>WrapperFunctionResult</name></type> <name>ResultBuffer</name> <init>=
<expr><call><name>__orc_rt_jit_dispatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__orc_rt_jit_dispatch_ctx</name></expr></argument>, <argument><expr><name>FnTag</name></expr></argument>,
<argument><expr><call><name><name>ArgBuffer</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ArgBuffer</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ErrMsg</name> <init>= <expr><call><name><name>ResultBuffer</name><operator>.</operator><name>getOutOfBandError</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ErrMsg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>detail</name><operator>::</operator><name><name>ResultDeserializer</name><argument_list type="generic">&lt;<argument><expr><name>SPSRetTagT</name></expr></argument>, <argument><expr><name>RetT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(
<argument><expr><name>Result</name></expr></argument>, <argument><expr><call><name><name>ResultBuffer</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ResultBuffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>HandlerT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>WrapperFunctionResult</name></type> <name>handle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ArgData</name></expr></argument>, <argument><expr><name>size_t</name> <name>ArgSize</name></expr></argument>,
<argument><expr><name>HandlerT</name> <operator>&amp;&amp;</operator><name>Handler</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>WFHH</name> <init>=
<expr><name>detail</name><operator>::</operator><name><name>WrapperFunctionHandlerHelper</name><argument_list type="generic">&lt;<argument><expr><name>HandlerT</name></expr></argument>, <argument><expr><name>ResultSerializer</name></expr></argument>,
<argument><expr><name>SPSTagTs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>WFHH</name><operator>::</operator><call><name>apply</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>HandlerT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Handler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArgData</name></expr></argument>, <argument><expr><name>ArgSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>makeSerializable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Value</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>detail</name><operator>::</operator><name>SPSSerializableError</name> <macro><name>makeSerializable</name><argument_list>(<argument>Error Err</argument>)</argument_list></macro> <block>{
<return>return <expr><name>detail</name><operator>::</operator><call><name>toSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>detail</name><operator>::</operator><name><name>SPSSerializableExpected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>makeSerializable</name><argument_list>(<argument>Expected&lt;T&gt; E</argument>)</argument_list></macro> <block>{
<return>return <expr><name>detail</name><operator>::</operator><call><name>toSPSSerializable</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>SPSTagTs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>WrapperFunction</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>SPSTagTs</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>private</name> <name><name>WrapperFunction</name><argument_list type="generic">&lt;<argument><expr><name>SPSEmpty</name><operator>(</operator><name>SPSTagTs</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Error</name> <macro><name>call</name><argument_list>(<argument>const void *FnTag</argument>, <argument>const ArgTs &amp;...Args</argument>)</argument_list></macro> <block>{
<expr><name>SPSEmpty</name> <name>BE</name></expr>;
<return>return <expr><name><name>WrapperFunction</name><argument_list type="generic">&lt;<argument><expr><name>SPSEmpty</name><operator>(</operator><name>SPSTagTs</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>call</name><argument_list>(<argument><expr><name>FnTag</name></expr></argument>, <argument><expr><name>BE</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name><name>WrapperFunction</name><argument_list type="generic">&lt;<argument><expr><name>SPSEmpty</name><operator>(</operator><name>SPSTagTs</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>handle</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
