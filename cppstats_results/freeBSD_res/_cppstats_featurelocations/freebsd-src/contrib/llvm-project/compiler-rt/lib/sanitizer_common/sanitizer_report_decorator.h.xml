<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_report_decorator.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_REPORT_DECORATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_REPORT_DECORATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SanitizerCommonDecorator</name> <block>{<block_content>


<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SanitizerCommonDecorator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>ansi_</name><argument_list>(<argument>ColorizeReports()</argument>)</argument_list></macro> <block>{}</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Bold</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Default</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[0m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Warning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Red</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Error</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Red</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>MemoryByte</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Magenta</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Black</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[30m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Red</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[31m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Green</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[32m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Yellow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[33m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Blue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[34m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Magenta</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[35m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>Cyan</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[36m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>White</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ansi_</name> <operator>?</operator> <literal type="string">"\033[1m\033[37m"</literal> <operator>:</operator> <literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>ansi_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
