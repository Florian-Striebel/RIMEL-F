<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_clock.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_CLOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_CLOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_dense_alloc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<typedef>typedef <type><name><name>DenseSlabAlloc</name><argument_list type="generic">&lt;<argument><expr><name>ClockBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>ClockAlloc</name>;</typedef>
<typedef>typedef <type><name>DenseSlabAllocCache</name></type> <name>ClockCache</name>;</typedef>


<decl_stmt><decl><type><name>class</name></type> <name>SyncClock</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SyncClock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SyncClock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>u64</name></type> <name>get</name><argument_list>(<argument><expr><name>unsigned</name> <name>tid</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function><type><name>u64</name></type> <name>get_clean</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>tid</name></decl></parameter>)</parameter_list> const;</function>

<function_decl><type><name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nclk</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DebugDump</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>printf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>class</name></type> <name>Iter</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>Iter</name><parameter_list>(<parameter><decl><type><name>SyncClock</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>Iter</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Iter</name><operator>&amp;</operator> <name>other</name><operator>)</operator></expr>;</expr_stmt>
<function_decl><type><name>ClockElem</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>parent_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ClockElem</name> <modifier>*</modifier></type><name>pos_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ClockElem</name> <modifier>*</modifier></type><name>end_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_</name></decl>;</decl_stmt>

<function_decl><type><name>NOINLINE</name> <name>void</name></type> <name>Next</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>Iter</name></type> <name>begin</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>Iter</name></type> <name>end</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadClock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kDirtyTids</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Dirty</name> <block>{
<expr_stmt><expr><name>u32</name> <macro><name>tid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>tid_</name> <operator>==</operator> <name>kShortInvalidTid</name> <operator>?</operator> <name>kInvalidTid</name> <operator>:</operator> <name>tid_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>set_tid</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tid_</name> <operator>=</operator> <ternary><condition><expr><name>tid</name> <operator>==</operator> <name>kInvalidTid</name></expr> ?</condition><then> <expr><name>kShortInvalidTid</name></expr> </then><else>: <expr><name>tid</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>u64</name></type> <name>epoch</name> <range>: <expr><name>kClkBits</name></expr></range></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kShortInvalidTid</name> <init>= <expr><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>kClkBits</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>tid_</name> <range>: <expr><literal type="number">64</literal> <operator>-</operator> <name>kClkBits</name></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dirty</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Dirty is not 64bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>release_store_tid_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>release_store_reused_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dirty</name></type> <name><name>dirty_</name><index>[<expr><name>kDirtyTids</name></expr>]</index></name></decl>;</decl_stmt>
































<decl_stmt><decl><type><name>ClockBlock</name> <modifier>*</modifier></type><name>tab_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>tab_idx_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>blocks_</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Unshare</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>IsShared</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>Cachable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>ResetImpl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FlushDirty</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>capacity</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>get_block</name><argument_list>(<argument><expr><name>uptr</name> <name>bi</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>append_block</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>ClockElem</name> <modifier>&amp;</modifier></type><name>elem</name><argument_list>(<argument><expr><name>unsigned</name> <name>tid</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ThreadClock</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>DenseSlabAllocCache</name></type> <name>Cache</name>;</typedef>

<function_decl><type><name>explicit</name></type> <name>ThreadClock</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>reused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>u64</name></type> <name>get</name><argument_list>(<argument><expr><name>unsigned</name> <name>tid</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tick</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>acquire</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>releaseStoreAcquire</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>release</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>acq_rel</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseStore</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResetCached</name><parameter_list>(<parameter><decl><type><name>ClockCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>NoteGlobalAcquire</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DebugReset</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DebugDump</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>printf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kDirtyTids</name> <init>= <expr><name>SyncClock</name><operator>::</operator><name>kDirtyTids</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tid_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>reused_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name>last_acquire_</name></decl>;</decl_stmt>














































<decl_stmt><decl><type><name>atomic_uint64_t</name></type> <name>global_acquire_</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>u32</name></type> <name>cached_idx_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>cached_size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>cached_blocks_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>nclk_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>clk_</name><index>[<expr><name>kMaxTidInClock</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsAlreadyAcquired</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyncClock</name> <operator>*</operator><name>src</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasAcquiredAfterRelease</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyncClock</name> <operator>*</operator><name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>UpdateCurrentThread</name><argument_list>(<argument><expr><name>ClockCache</name> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>SyncClock</name> <operator>*</operator><name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>u64</name> <name>ThreadClock</name><operator>::</operator><macro><name>get</name><argument_list>(<argument>unsigned tid</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><name>kMaxTidInClock</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>clk_</name><index>[<expr><name>tid</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>void</name> <name>ThreadClock</name><operator>::</operator><macro><name>set</name><argument_list>(<argument>u64 v</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>clk_</name><index>[<expr><name>tid_</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>clk_</name><index>[<expr><name>tid_</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;
}</block>

<name>ALWAYS_INLINE</name> <name>void</name> <name>ThreadClock</name><operator>::</operator><macro><name>tick</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>clk_</name><index>[<expr><name>tid_</name></expr>]</index></name><operator>++</operator></expr>;
}</block>

<name>ALWAYS_INLINE</name> <name>uptr</name> <name>ThreadClock</name><operator>::</operator><macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nclk_</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>void</name> <name>ThreadClock</name><operator>::</operator><macro><name>NoteGlobalAcquire</name><argument_list>(<argument>u64 v</argument>)</argument_list></macro> <block>{



<expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_acquire_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_acquire_</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>ALWAYS_INLINE</name> <name>SyncClock</name><operator>::</operator><name>Iter</name> <name>SyncClock</name><operator>::</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>Iter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>SyncClock</name><operator>::</operator><name>Iter</name> <name>SyncClock</name><operator>::</operator><macro><name>end</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>Iter</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>uptr</name> <name>SyncClock</name><operator>::</operator><macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>size_</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>SyncClock</name><operator>::</operator><name>Iter</name><operator>::</operator><call><name>Iter</name><argument_list>(<argument><expr><name>SyncClock</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>parent_</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator> <expr><call><name>pos_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator> <expr><call><name>end_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>
<operator>,</operator> <macro><name>block_</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Next</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>SyncClock</name><operator>::</operator><name>Iter</name><operator>&amp;</operator> <name>SyncClock</name><operator>::</operator><name>Iter</name><operator>::</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><name>pos_</name><operator>++</operator></expr>;
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>pos_</name> <operator>&gt;=</operator> <name>end_</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Next</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>bool</name> <name>SyncClock</name><operator>::</operator><name>Iter</name><operator>::</operator><name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SyncClock</name><operator>::</operator><name>Iter</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <block>{
<return>return <expr><name>parent_</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>parent_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>ClockElem</name> <operator>&amp;</operator><name>SyncClock</name><operator>::</operator><name>Iter</name><operator>::</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <block>{
<return>return <expr><operator>*</operator><name>pos_</name></expr>;</return>
}</block></expr></expr_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
