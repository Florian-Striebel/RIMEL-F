<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>SizeClassAllocator</name><operator>&gt;</operator> struct <name>SizeClassAllocator64LocalCache</name></expr>;</expr_stmt>






















<struct>struct <name>SizeClassAllocator64FlagMasks</name> <block>{
<enum>enum <block>{
<decl><name>kRandomShuffleChunks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Allocator</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MemoryMapper</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Allocator</name><operator>::</operator><name>CompactPtrT</name> <name>CompactPtrT</name></expr>;</expr_stmt></typedef>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>MemoryMapper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Allocator</name> <operator>&amp;</operator><name>allocator</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>allocator_</name><argument_list>(<argument>allocator</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>GetAndResetStats</name><argument_list>(<argument>uptr &amp;ranges</argument>, <argument>uptr &amp;bytes</argument>)</argument_list></macro> <block>{
<expr><name>ranges</name> <operator>=</operator> <name>released_ranges_count_</name></expr>;
<expr><name>released_ranges_count_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>bytes</name> <operator>=</operator> <name>released_bytes_</name></expr>;
<expr><name>released_bytes_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><name>ranges</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>u64</name> <modifier>*</modifier></type><name>MapPackedCounterArrayBuffer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>buffer_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>buffer_</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>buffer_</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ReleasePageRangeToOS</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>CompactPtrT</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>CompactPtrT</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>region_base</name> <init>= <expr><call><name><name>allocator_</name><operator>.</operator><name>GetRegionBeginBySizeClass</name></name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>from_page</name> <init>= <expr><call><name><name>allocator_</name><operator>.</operator><name>CompactPtrToPointer</name></name><argument_list>(<argument><expr><name>region_base</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>to_page</name> <init>= <expr><call><name><name>allocator_</name><operator>.</operator><name>CompactPtrToPointer</name></name><argument_list>(<argument><expr><name>region_base</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ReleaseMemoryPagesToOS</name><argument_list>(<argument><expr><name>from_page</name></expr></argument>, <argument><expr><name>to_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>released_ranges_count_</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>released_bytes_</name> <operator>+=</operator> <name>to_page</name> <operator>-</operator> <name>from_page</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Allocator</name> <modifier>&amp;</modifier></type><name>allocator_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>released_ranges_count_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>released_bytes_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>u64</name></expr></argument>&gt;</argument_list></name></type> <name>buffer_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Params</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>SizeClassAllocator64</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>typename</name> <name>Params</name><operator>::</operator><name>AddressSpaceView</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><name>Params</name><operator>::</operator><name>kSpaceBeg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceSize</name> <init>= <expr><name>Params</name><operator>::</operator><name>kSpaceSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><name>Params</name><operator>::</operator><name>kMetadataSize</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Params</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Params</name><operator>::</operator><name>MapUnmapCallback</name> <name>MapUnmapCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kRandomShuffleChunks</name> <init>=
<expr><name>Params</name><operator>::</operator><name>kFlags</name> <operator>&amp;</operator> <name>SizeClassAllocator64FlagMasks</name><operator>::</operator><name>kRandomShuffleChunks</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name></type> <name>ThisT</name>;</typedef>
<typedef>typedef <type><name><name>SizeClassAllocator64LocalCache</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name></type> <name>AllocatorCache</name>;</typedef>
<typedef>typedef <type><name><name>MemoryMapper</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name></type> <name>MemoryMapperT</name>;</typedef>



<typedef>typedef <type><name>u32</name></type> <name>CompactPtrT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kCompactPtrScale</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name>PointerToCompactPtr</name><argument_list>(<argument><expr><name>uptr</name> <name>base</name></expr></argument>, <argument><expr><name>uptr</name> <name>ptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompactPtrT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>kCompactPtrScale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CompactPtrToPointer</name><argument_list>(<argument><expr><name>uptr</name> <name>base</name></expr></argument>, <argument><expr><name>CompactPtrT</name> <name>ptr32</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>base</name> <operator>+</operator> <operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr32</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>kCompactPtrScale</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>heap_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalSpaceSize</name> <init>= <expr><name>kSpaceSize</name> <operator>+</operator> <call><name>AdditionalSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>PremappedHeap</name> <operator>=</operator> <name>heap_start</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>PremappedHeap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>kUsingConstantSpaceBeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NonConstSpaceBeg</name> <operator>=</operator> <name>heap_start</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RegionInfoSize</name> <init>= <expr><call><name>AdditionalSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>RegionInfoSpace</name> <operator>=</operator>
<call><name><name>address_range</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>RegionInfoSize</name></expr></argument>, <argument><expr><name>PrimaryAllocatorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>,
<argument><expr><call><name><name>address_range</name><operator>.</operator><name>MapOrDie</name></name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>, <argument><expr><name>RegionInfoSize</name></expr></argument>,
<argument><expr><literal type="string">"SizeClassAllocator: region info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>, <argument><expr><name>RegionInfoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>kUsingConstantSpaceBeg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>kSpaceBeg</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>kSpaceBeg</name></expr></argument>,
<argument><expr><call><name><name>address_range</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>TotalSpaceSize</name></expr></argument>, <argument><expr><name>PrimaryAllocatorName</name></expr></argument>,
<argument><expr><name>kSpaceBeg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>NonConstSpaceBeg</name> <operator>=</operator> <call><name><name>address_range</name><operator>.</operator><name>InitAligned</name></name><argument_list>(
<argument><expr><name>TotalSpaceSize</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name></expr></argument>, <argument><expr><name>PrimaryAllocatorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>NonConstSpaceBeg</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>RegionInfoSpace</name> <operator>=</operator> <call><name>SpaceEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapWithCallbackOrDie</name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>, <argument><expr><call><name>AdditionalSize</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"SizeClassAllocator: region info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>SetReleaseToOSIntervalMs</name><argument_list>(<argument><expr><name>release_to_os_interval_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>RegionInfoSpace</name> <operator>%</operator> <name>kCacheLineSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>s32</name> <macro><name>ReleaseToOSIntervalMs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>release_to_os_interval_ms_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetReleaseToOSIntervalMs</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>release_to_os_interval_ms_</name></expr></argument>, <argument><expr><name>release_to_os_interval_ms</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceReleaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MemoryMapperT</name></type> <name>memory_mapper</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BlockingMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MaybeReleaseToOS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memory_mapper</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanAllocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>size</name> <operator>&lt;=</operator> <name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name> <operator>&amp;&amp;</operator>
<name>alignment</name> <operator>&lt;=</operator> <name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>void</name></type> <name>ReturnToAllocator</name><parameter_list>(<parameter><decl><type><name>MemoryMapperT</name> <modifier>*</modifier></type><name>memory_mapper</name></decl></parameter>,
<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CompactPtrT</name> <modifier>*</modifier></type><name>chunks</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n_chunks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_beg</name> <init>= <expr><call><name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>free_array</name> <init>= <expr><call><name>GetFreeArray</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockingMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>old_num_chunks</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>new_num_freed_chunks</name> <init>= <expr><name>old_num_chunks</name> <operator>+</operator> <name>n_chunks</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>EnsureFreeArraySpace</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>region_beg</name></expr></argument>,
<argument><expr><name>new_num_freed_chunks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Report</name><argument_list>(<argument><expr><literal type="string">"FATAL: Internal error: %s's allocator exhausted the free list "</literal>
<literal type="string">"space for size class %zd (%zd bytes).\n"</literal></expr></argument>, <argument><expr><name>SanitizerToolName</name></expr></argument>,
<argument><expr><name>class_id</name></expr></argument>, <argument><expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Die</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>free_array</name><index>[<expr><name>old_num_chunks</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name> <operator>=</operator> <name>new_num_freed_chunks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name> <operator>+=</operator> <name>n_chunks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MaybeReleaseToOS</name><argument_list>(<argument><expr><name>memory_mapper</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>bool</name></type> <name>GetFromAllocator</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>chunks</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n_chunks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_beg</name> <init>= <expr><call><name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>free_array</name> <init>= <expr><call><name>GetFreeArray</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockingMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_released_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MmapFixedOrDie</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr></argument>,
<argument><expr><literal type="string">"SizeClassAllocator: region data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>n_freed_at_last_release</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_released_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name> <operator>&lt;</operator> <name>n_chunks</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>PopulateFreeArray</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,
<argument><expr><name>n_chunks</name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></argument>, <argument><expr><name>n_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name> <operator>-=</operator> <name>n_chunks</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>base_idx</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_chunks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>free_array</name><index>[<expr><name>base_idx</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_allocated</name></name> <operator>+=</operator> <name>n_chunks</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>PointerIsMine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>P</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kUsingConstantSpaceBeg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>kSpaceBeg</name> <operator>%</operator> <name>kSpaceSize</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>P</name> <operator>/</operator> <name>kSpaceSize</name> <operator>==</operator> <name>kSpaceBeg</name> <operator>/</operator> <name>kSpaceSize</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>P</name> <operator>&gt;=</operator> <call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>P</name> <operator>&lt;</operator> <call><name>SpaceEnd</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>GetRegionBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>kUsingConstantSpaceBeg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kRegionSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>space_beg</name> <init>= <expr><call><name>SpaceBeg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>space_beg</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kRegionSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<name>space_beg</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>uptr</name></type> <name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>uptr</name> <name>class_id</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>+</operator> <name>kRegionSize</name> <operator>*</operator> <name>class_id</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>GetSizeClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>kUsingConstantSpaceBeg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>kSpaceBeg</name> <operator>%</operator> <name>kSpaceSize</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>kRegionSize</name><operator>)</operator> <operator>%</operator> <name>kNumClassesRounded</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>SpaceBeg</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <name>kRegionSize</name><operator>)</operator> <operator>%</operator>
<name>kNumClassesRounded</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>class_id</name> <operator>&gt;=</operator> <name>kNumClasses</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunk_idx</name> <init>= <expr><call><name>GetChunkIdx</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>reg_beg</name> <init>= <expr><call><name>GetRegionBegin</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name> <init>= <expr><name>chunk_idx</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>next_beg</name> <init>= <expr><name>beg</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>&gt;=</operator> <name>next_beg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>reg_beg</name> <operator>+</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>GetActuallyAllocatedSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>PointerIsMine</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ClassID</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>SizeClassMap</name><operator>::</operator><call><name>ClassID</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>kMetadataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunk_idx</name> <init>= <expr><call><name>GetChunkIdx</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_beg</name> <init>= <expr><call><name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetMetadataEnd</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call> <operator>-</operator>
<operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>chunk_idx</name><operator>)</operator> <operator>*</operator> <name>kMetadataSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>TotalMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>allocated_user</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>TestOnlyUnmap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UnmapWithCallbackOrDie</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name><name>address_range</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address_range</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillMemoryProfile</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>rss</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>stats_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>stats_size</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>stats</name><index>[<expr><name>class_id</name></expr>]</index></name> <operator>==</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stats</name><index>[<expr><name>class_id</name></expr>]</index></name> <operator>=</operator> <name>rss</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>rss</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>in_use</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_allocated</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>avail_chunks</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name> <operator>/</operator> <call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(
<argument><expr><literal type="string">"%s %02zd (%6zd): mapped: %6zdK allocs: %7zd frees: %7zd inuse: %6zd "</literal>
<literal type="string">"num_freed_chunks %7zd avail: %6zd rss: %6zdK releases: %6zd "</literal>
<literal type="string">"last released: %6zdK region: 0x%zx\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>region</name><operator>-&gt;</operator><name>exhausted</name></name></expr> ?</condition><then> <expr><literal type="string">"F"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_allocated</name></name></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name></expr></argument>, <argument><expr><name>in_use</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></argument>, <argument><expr><name>avail_chunks</name></expr></argument>,
<argument><expr><name>rss</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>num_releases</name></name></expr></argument>,
<argument><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_released_bytes</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>+</operator> <name>kRegionSize</name> <operator>*</operator> <name>class_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>rss_stats</name><index>[<expr><name>kNumClasses</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rss_stats</name><index>[<expr><name>class_id</name></expr>]</index></name> <operator>=</operator> <call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>+</operator> <name>kRegionSize</name> <operator>*</operator> <name>class_id</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GetMemoryProfile</name><argument_list>(<argument><expr><name>FillMemoryProfile</name></expr></argument>, <argument><expr><name>rss_stats</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>total_mapped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>total_rss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_allocated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_freed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>total_mapped</name> <operator>+=</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_rss</name> <operator>+=</operator> <name><name>rss_stats</name><index>[<expr><name>class_id</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n_allocated</name> <operator>+=</operator> <name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_allocated</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_freed</name> <operator>+=</operator> <name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"Stats: SizeClassAllocator64: %zdM mapped (%zdM rss) in "</literal>
<literal type="string">"%zd allocations; remains %zd\n"</literal></expr></argument>, <argument><expr><name>total_mapped</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>,
<argument><expr><name>total_rss</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>n_allocated</name></expr></argument>, <argument><expr><name>n_allocated</name> <operator>-</operator> <name>n_freed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PrintStats</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name><name>rss_stats</name><index>[<expr><name>class_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForceLock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>mutex</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceUnlock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>kNumClasses</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>mutex</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><name>ForEachChunkCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>class_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>class_id</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>class_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunk_size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_beg</name> <init>= <expr><call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>+</operator> <name>class_id</name> <operator>*</operator> <name>kRegionSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_allocated_user_size</name> <init>=
<expr><name>AddressSpaceView</name><operator>::</operator><call><name>Load</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>allocated_user</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>chunk</name> <init>= <expr><name>region_beg</name></expr></init></decl>;</init>
<condition><expr><name>chunk</name> <operator>&lt;</operator> <name>region_beg</name> <operator>+</operator> <name>region_allocated_user_size</name></expr>;</condition>
<incr><expr><name>chunk</name> <operator>+=</operator> <name>chunk_size</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ClassIdToSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>SizeClassMap</name><operator>::</operator><call><name>Size</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>AdditionalSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RegionInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>kNumClassesRounded</name></expr></argument>,
<argument><expr><call><name>GetPageSizeCached</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name>SizeClassMap</name></type> <name>SizeClassMapT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kNumClasses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumClassesRounded</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kNumClassesRounded</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>PackedCounterArray</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>MemoryMapper</name><operator>&gt;</operator>
<macro><name>PackedCounterArray</name><argument_list>(<argument>u64 num_counters</argument>, <argument>u64 max_value</argument>, <argument>MemoryMapper *mapper</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>n</name><argument_list>(<argument>num_counters</argument>)</argument_list></macro> <block>{
<expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><name>num_counters</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><name>max_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>constexpr</name> <name>u64</name> <name>kMaxCounterBits</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8ULL</literal></expr>;


<expr><name>uptr</name> <name>counter_size_bits</name> <operator>=</operator>
<call><name>RoundUpToPowerOfTwo</name><argument_list>(<argument><expr><call><name>MostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>max_value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>counter_size_bits</name></expr></argument>, <argument><expr><name>kMaxCounterBits</name></expr></argument>)</argument_list></call></expr>;
<expr><name>counter_size_bits_log</name> <operator>=</operator> <call><name>Log2</name><argument_list>(<argument><expr><name>counter_size_bits</name></expr></argument>)</argument_list></call></expr>;
<expr><name>counter_mask</name> <operator>=</operator> <operator>~</operator><literal type="number">0ULL</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>kMaxCounterBits</name> <operator>-</operator> <name>counter_size_bits</name><operator>)</operator></expr>;

<expr><name>uptr</name> <name>packing_ratio</name> <operator>=</operator> <name>kMaxCounterBits</name> <operator>&gt;&gt;</operator> <name>counter_size_bits_log</name></expr>;
<expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><name>packing_ratio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>packing_ratio_log</name> <operator>=</operator> <call><name>Log2</name><argument_list>(<argument><expr><name>packing_ratio</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bit_offset_mask</name> <operator>=</operator> <name>packing_ratio</name> <operator>-</operator> <literal type="number">1</literal></expr>;

<expr><name>buffer</name> <operator>=</operator> <call><name><name>mapper</name><operator>-&gt;</operator><name>MapPackedCounterArrayBuffer</name></name><argument_list>(
<argument><expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>packing_ratio_log</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>packing_ratio_log</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>IsAllocated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>!</operator><name>buffer</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>u64</name> <macro><name>GetCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>n</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>Get</name><argument_list>(<argument><expr><name>uptr</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>index</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <name>packing_ratio_log</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>bit_offset</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>bit_offset_mask</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>counter_size_bits_log</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>bit_offset</name><operator>)</operator> <operator>&amp;</operator> <name>counter_mask</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Inc</name><argument_list>(<argument><expr><name>uptr</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><call><name>Get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>counter_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>index</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <name>packing_ratio_log</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>bit_offset</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>bit_offset_mask</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>counter_size_bits_log</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>bit_offset</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>IncRange</name><argument_list>(<argument><expr><name>uptr</name> <name>from</name></expr></argument>, <argument><expr><name>uptr</name> <name>to</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><name>from</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Inc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>u64</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>counter_size_bits_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>counter_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>packing_ratio_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>bit_offset_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>MemoryMapperT</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FreePagesRangeTracker</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FreePagesRangeTracker</name><argument_list>(<argument>MemoryMapperT *mapper</argument>, <argument>uptr class_id</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>memory_mapper</name><argument_list>(<argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>class_id</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>page_size_scaled_log</name><argument_list>(<argument>Log2(GetPageSizeCached() &gt;&gt; kCompactPtrScale)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>NextPage</name><argument_list>(<argument>bool freed</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>freed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_the_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_range_start_page</name> <operator>=</operator> <name>current_page</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_the_range</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
} else <block>{<block_content>
<expr_stmt><expr><call><name>CloseOpenedRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
current_page++</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>

void Done(</block></if></if_stmt>) <block>{
<expr><call><name>CloseOpenedRange</name><argument_list>()</argument_list></call></expr>;
}</block></block>

<name>private</name><operator>:</operator>
<name>void</name> <macro><name>CloseOpenedRange</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>in_the_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>memory_mapper</name><operator>-&gt;</operator><name>ReleasePageRangeToOS</name></name><argument_list>(
<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>current_range_start_page</name> <operator>&lt;&lt;</operator> <name>page_size_scaled_log</name></expr></argument>,
<argument><expr><name>current_page</name> <operator>&lt;&lt;</operator> <name>page_size_scaled_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_the_range</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

MemoryMapperT *const memory_mapper = nullptr</block><empty_stmt>;</empty_stmt></if></if_stmt>
<specifier>const</specifier> <name>uptr</name> <name>class_id</name> <operator>=</operator> <literal type="number">0</literal></block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>page_size_scaled_log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_the_range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>current_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>current_range_start_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MemoryMapper</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>ReleaseFreeMemoryToOS</name><parameter_list>(<parameter><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>free_array</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>free_array_count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>chunk_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>allocated_pages_count</name></decl></parameter>,
<parameter><decl><type><name>MemoryMapper</name> <modifier>*</modifier></type><name>memory_mapper</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>page_size</name> <init>= <expr><call><name>GetPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uptr</name></type> <name>full_pages_chunk_count_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_chunk_count_per_page</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;=</operator> <name>page_size</name> <operator>&amp;&amp;</operator> <name>page_size</name> <operator>%</operator> <name>chunk_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>full_pages_chunk_count_max</name> <operator>=</operator> <name>page_size</name> <operator>/</operator> <name>chunk_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>same_chunk_count_per_page</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_size</name> <operator>&lt;=</operator> <name>page_size</name> <operator>&amp;&amp;</operator> <name>page_size</name> <operator>%</operator> <name>chunk_size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>chunk_size</name> <operator>%</operator> <operator>(</operator><name>page_size</name> <operator>%</operator> <name>chunk_size</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>full_pages_chunk_count_max</name> <operator>=</operator> <name>page_size</name> <operator>/</operator> <name>chunk_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>same_chunk_count_per_page</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_size</name> <operator>&lt;=</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>full_pages_chunk_count_max</name> <operator>=</operator> <name>page_size</name> <operator>/</operator> <name>chunk_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>same_chunk_count_per_page</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>page_size</name> <operator>&amp;&amp;</operator> <name>chunk_size</name> <operator>%</operator> <name>page_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>full_pages_chunk_count_max</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>same_chunk_count_per_page</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>full_pages_chunk_count_max</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>same_chunk_count_per_page</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>(<argument><expr><literal type="string">"All chunk_size/page_size ratios must be handled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>PackedCounterArray</name></type> <name>counters</name><argument_list>(<argument><expr><name>allocated_pages_count</name></expr></argument>,
<argument><expr><name>full_pages_chunk_count_max</name></expr></argument>, <argument><expr><name>memory_mapper</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>counters</name><operator>.</operator><name>IsAllocated</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>chunk_size_scaled</name> <init>= <expr><name>chunk_size</name> <operator>&gt;&gt;</operator> <name>kCompactPtrScale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>page_size_scaled</name> <init>= <expr><name>page_size</name> <operator>&gt;&gt;</operator> <name>kCompactPtrScale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>page_size_scaled_log</name> <init>= <expr><call><name>Log2</name><argument_list>(<argument><expr><name>page_size_scaled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;=</operator> <name>page_size</name> <operator>&amp;&amp;</operator> <name>page_size</name> <operator>%</operator> <name>chunk_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>free_array_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>counters</name><operator>.</operator><name>Inc</name></name><argument_list>(<argument><expr><name><name>free_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>page_size_scaled_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>free_array_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>counters</name><operator>.</operator><name>IncRange</name></name><argument_list>(
<argument><expr><name><name>free_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>page_size_scaled_log</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>free_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>chunk_size_scaled</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>page_size_scaled_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>



<decl_stmt><decl><type><name><name>FreePagesRangeTracker</name><argument_list type="generic">&lt;<argument><expr><name>MemoryMapper</name></expr></argument>&gt;</argument_list></name></type> <name>range_tracker</name><argument_list>(<argument><expr><name>memory_mapper</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>same_chunk_count_per_page</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>counters</name><operator>.</operator><name>GetCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>range_tracker</name><operator>.</operator><name>NextPage</name></name><argument_list>(<argument><expr><call><name><name>counters</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>full_pages_chunk_count_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>pn</name> <init>=
<expr><ternary><condition><expr><name>chunk_size</name> <operator>&lt;</operator> <name>page_size</name></expr> ?</condition><then> <expr><name>page_size_scaled</name> <operator>/</operator> <name>chunk_size_scaled</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>pnc</name> <init>= <expr><name>pn</name> <operator>*</operator> <name>chunk_size_scaled</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uptr</name></type> <name>prev_page_boundary</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>current_boundary</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>counters</name><operator>.</operator><name>GetCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>page_boundary</name> <init>= <expr><name>prev_page_boundary</name> <operator>+</operator> <name>page_size_scaled</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunks_per_page</name> <init>= <expr><name>pn</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_boundary</name> <operator>&lt;</operator> <name>page_boundary</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_boundary</name> <operator>&gt;</operator> <name>prev_page_boundary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chunks_per_page</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current_boundary</name> <operator>+=</operator> <name>pnc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_boundary</name> <operator>&lt;</operator> <name>page_boundary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chunks_per_page</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>current_boundary</name> <operator>+=</operator> <name>chunk_size_scaled</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_page_boundary</name> <operator>=</operator> <name>page_boundary</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>range_tracker</name><operator>.</operator><name>NextPage</name></name><argument_list>(<argument><expr><call><name><name>counters</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>chunks_per_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>range_tracker</name><operator>.</operator><name>Done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>MemoryMapper</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ReservedAddressRange</name></type> <name>address_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSize</name> <init>= <expr><name>kSpaceSize</name> <operator>/</operator> <name>kNumClassesRounded</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFreeArraySize</name> <init>= <expr><name>kRegionSize</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kUsingConstantSpaceBeg</name> <init>= <expr><name>kSpaceBeg</name> <operator>!=</operator> <operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>NonConstSpaceBeg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>SpaceBeg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>kUsingConstantSpaceBeg</name> <operator>?</operator> <name>kSpaceBeg</name> <operator>:</operator> <name>NonConstSpaceBeg</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>SpaceEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>SpaceBeg</name><argument_list>()</argument_list></call> <operator>+</operator> <name>kSpaceSize</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>kRegionSize</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>kRegionSize</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kUserMapSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetaMapSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFreeArrayMapSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_sint32_t</name></type> <name>release_to_os_interval_ms_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>RegionInfoSpace</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>PremappedHeap</name></decl>;</decl_stmt>

<struct>struct <name>Stats</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>n_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_freed</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ReleaseToOsInfo</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>n_freed_at_last_release</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>num_releases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>last_release_at_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>last_released_bytes</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <macro><name>ALIGNED</name><argument_list>(<argument>SANITIZER_CACHE_LINE_SIZE</argument>)</argument_list></macro> <name>RegionInfo</name> <block>{
<decl_stmt><decl><type><name>BlockingMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>num_freed_chunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mapped_free_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>allocated_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>allocated_meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mapped_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mapped_meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>rand_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exhausted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stats</name></type> <name>stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReleaseToOsInfo</name></type> <name>rtoi</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RegionInfo</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>kCacheLineSize</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>GetRegionInfo</name><argument_list>(<argument><expr><name>uptr</name> <name>class_id</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>regions</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RegionInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RegionInfoSpace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name><name>regions</name><index>[<expr><name>class_id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>GetMetadataEnd</name><argument_list>(<argument><expr><name>uptr</name> <name>region_beg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>region_beg</name> <operator>+</operator> <name>kRegionSize</name> <operator>-</operator> <name>kFreeArraySize</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>GetChunkIdx</name><argument_list>(<argument><expr><name>uptr</name> <name>chunk</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kUsingConstantSpaceBeg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chunk</name> <operator>-=</operator> <call><name>SpaceBeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>offset</name> <init>= <expr><name>chunk</name> <operator>%</operator> <name>kRegionSize</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>SANITIZER_WORDSIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>offset</name> <operator>/</operator> <name>size</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>u32</name><operator>)</operator><name>offset</name> <operator>/</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>size</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>GetFreeArray</name><argument_list>(<argument><expr><name>uptr</name> <name>region_beg</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompactPtrT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetMetadataEnd</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>MapWithCallback</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PremappedHeap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>beg</name> <operator>&gt;=</operator> <name>NonConstSpaceBeg</name> <operator>&amp;&amp;</operator>
<name>beg</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name>NonConstSpaceBeg</name> <operator>+</operator> <name>kSpaceSize</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mapped</name> <init>= <expr><call><name><name>address_range</name><operator>.</operator><name>Map</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>mapped</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>mapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>MapWithCallbackOrDie</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PremappedHeap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>NonConstSpaceBeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>beg</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>NonConstSpaceBeg</name> <operator>+</operator> <name>kSpaceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><call><name><name>address_range</name><operator>.</operator><name>MapOrDie</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnmapWithCallbackOrDie</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PremappedHeap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnUnmap</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>address_range</name><operator>.</operator><name>Unmap</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>EnsureFreeArraySpace</name><parameter_list>(<parameter><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>region_beg</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>num_freed_chunks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>needed_space</name> <init>= <expr><name>num_freed_chunks</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CompactPtrT</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>mapped_free_array</name></name> <operator>&lt;</operator> <name>needed_space</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>new_mapped_free_array</name> <init>= <expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>needed_space</name></expr></argument>, <argument><expr><name>kFreeArrayMapSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>new_mapped_free_array</name></expr></argument>, <argument><expr><name>kFreeArraySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>current_map_end</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetFreeArray</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>region</name><operator>-&gt;</operator><name>mapped_free_array</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>new_map_size</name> <init>= <expr><name>new_mapped_free_array</name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_free_array</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>MapWithCallback</name><argument_list>(<argument><expr><name>current_map_end</name></expr></argument>, <argument><expr><name>new_map_size</name></expr></argument>,
<argument><expr><literal type="string">"SizeClassAllocator: freearray"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_free_array</name></name> <operator>=</operator> <name>new_mapped_free_array</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsRegionExhausted</name><parameter_list>(<parameter><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>additional_map_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name> <operator>+</operator>
<name>additional_map_size</name> <operator>&lt;=</operator> <name>kRegionSize</name> <operator>-</operator> <name>kFreeArraySize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>exhausted</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>exhausted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"%s: Out of memory. "</literal></expr></argument>, <argument><expr><name>SanitizerToolName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"The process has exhausted %zuMB for size class %zu.\n"</literal></expr></argument>,
<argument><expr><name>kRegionSize</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>bool</name></type> <name>PopulateFreeArray</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>requested_count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>region_beg</name> <init>= <expr><call><name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>total_user_bytes</name> <init>=
<expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name> <operator>+</operator> <name>requested_count</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>total_user_bytes</name> <operator>&gt;</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kUsingConstantSpaceBeg</name> <operator>&amp;&amp;</operator> <name>kRandomShuffleChunks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rand_state</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>region_beg</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>ReleaseToOSIntervalMs</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_release_at_ns</name></name> <operator>=</operator> <call><name>MonotonicNanoTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>user_map_size</name> <init>=
<expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>total_user_bytes</name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr></argument>, <argument><expr><name>kUserMapSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>IsRegionExhausted</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>user_map_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>MapWithCallback</name><argument_list>(<argument><expr><name>region_beg</name> <operator>+</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr></argument>,
<argument><expr><name>user_map_size</name></expr></argument>,
<argument><expr><literal type="string">"SizeClassAllocator: region data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name>user_map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>+=</operator> <name>user_map_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>new_chunks_count</name> <init>=
<expr><operator>(</operator><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name><operator>)</operator> <operator>/</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kMetadataSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>total_meta_bytes</name> <init>=
<expr><name><name>region</name><operator>-&gt;</operator><name>allocated_meta</name></name> <operator>+</operator> <name>new_chunks_count</name> <operator>*</operator> <name>kMetadataSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>meta_map_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>total_meta_bytes</name> <operator>&gt;</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name>total_meta_bytes</name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name></expr></argument>, <argument><expr><name>kMetaMapSize</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>meta_map_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name>IsRegionExhausted</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>meta_map_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>MapWithCallback</name><argument_list>(
<argument><expr><call><name>GetMetadataEnd</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name> <operator>-</operator> <name>meta_map_size</name></expr></argument>,
<argument><expr><name>meta_map_size</name></expr></argument>, <argument><expr><literal type="string">"SizeClassAllocator: region metadata"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name> <operator>+=</operator> <name>meta_map_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>total_freed_chunks</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name> <operator>+</operator> <name>new_chunks_count</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>EnsureFreeArraySpace</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>region_beg</name></expr></argument>, <argument><expr><name>total_freed_chunks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>free_array</name> <init>= <expr><call><name>GetFreeArray</name><argument_list>(<argument><expr><name>region_beg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chunk</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_chunks_count</name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>chunk</name> <operator>+=</operator> <name>size</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>free_array</name><index>[<expr><name>total_freed_chunks</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerToCompactPtr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>kRandomShuffleChunks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RandomShuffle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>free_array</name><index>[<expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>new_chunks_count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>rand_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name> <operator>+=</operator> <name>new_chunks_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name> <operator>+=</operator> <name>new_chunks_count</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>allocated_meta</name></name> <operator>+=</operator> <name>new_chunks_count</name> <operator>*</operator> <name>kMetadataSize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>allocated_meta</name></name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>mapped_meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>exhausted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>





<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>MaybeReleaseToOS</name><parameter_list>(<parameter><decl><type><name>MemoryMapperT</name> <modifier>*</modifier></type><name>memory_mapper</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RegionInfo</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>GetRegionInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>chunk_size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>page_size</name> <init>= <expr><call><name>GetPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>n</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>num_freed_chunks</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <name>chunk_size</name> <operator>&lt;</operator> <name>page_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name> <operator>-</operator>
<name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>n_freed_at_last_release</name></name><operator>)</operator> <operator>*</operator> <name>chunk_size</name> <operator>&lt;</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>s32</name></type> <name>interval_ms</name> <init>= <expr><call><name>ReleaseToOSIntervalMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>interval_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_release_at_ns</name></name> <operator>+</operator> <name>interval_ms</name> <operator>*</operator> <literal type="number">1000000ULL</literal> <operator>&gt;</operator>
<call><name>MonotonicNanoTime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ReleaseFreeMemoryToOS</name><argument_list>(
<argument><expr><call><name>GetFreeArray</name><argument_list>(<argument><expr><call><name>GetRegionBeginBySizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>,
<argument><expr><call><name>RoundUpTo</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>allocated_user</name></name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>page_size</name></expr></argument>, <argument><expr><name>memory_mapper</name></expr></argument>,
<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>ranges</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>memory_mapper</name><operator>-&gt;</operator><name>GetAndResetStats</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>n_freed_at_last_release</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>n_freed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>num_releases</name></name> <operator>+=</operator> <name>ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_released_bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>rtoi</name><operator>.</operator><name>last_release_at_ns</name></name> <operator>=</operator> <call><name>MonotonicNanoTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</unit>
