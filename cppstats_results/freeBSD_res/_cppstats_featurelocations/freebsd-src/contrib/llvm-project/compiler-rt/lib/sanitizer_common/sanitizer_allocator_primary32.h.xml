<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>SizeClassAllocator</name><operator>&gt;</operator> struct <name>SizeClassAllocator32LocalCache</name></expr>;</expr_stmt>























<struct>struct <name>SizeClassAllocator32FlagMasks</name> <block>{
<enum>enum <block>{
<decl><name>kRandomShuffleChunks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kUseSeparateSizeClassForBatch</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Params</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>SizeClassAllocator32</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kTwoLevelByteMapSize1</name> <init>=
<expr><operator>(</operator><name>Params</name><operator>::</operator><name>kSpaceSize</name> <operator>&gt;&gt;</operator> <name>Params</name><operator>::</operator><name>kRegionSizeLog</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kMinFirstMapSizeTwoLevelByteMap</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>typename</name> <name>Params</name><operator>::</operator><name>AddressSpaceView</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><name>Params</name><operator>::</operator><name>kSpaceBeg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSpaceSize</name> <init>= <expr><name>Params</name><operator>::</operator><name>kSpaceSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><name>Params</name><operator>::</operator><name>kMetadataSize</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Params</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSizeLog</name> <init>= <expr><name>Params</name><operator>::</operator><name>kRegionSizeLog</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Params</name><operator>::</operator><name>MapUnmapCallback</name> <name>MapUnmapCallback</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>using</name></type> <name>ByteMap</name> <init>= <expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;
<argument><expr><operator>(</operator><name>kTwoLevelByteMapSize1</name> <operator>&lt;</operator> <name>kMinFirstMapSizeTwoLevelByteMap</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>FlatByteMap</name><argument_list type="generic">&lt;<argument><expr><operator>(</operator><name>Params</name><operator>::</operator><name>kSpaceSize</name> <operator>&gt;&gt;</operator> <name>Params</name><operator>::</operator><name>kRegionSizeLog</name><operator>)</operator></expr></argument>,
<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>TwoLevelByteMap</name><argument_list type="generic">&lt;<argument><expr><name>kTwoLevelByteMapSize1</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>SANITIZER_SIGN_EXTENDED_ADDRESSES</name> <operator>||</operator>
<operator>(</operator><name>kSpaceSize</name> <operator>&amp;</operator> <operator>(</operator><name>kSpaceSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kRandomShuffleChunks</name> <init>= <expr><name>Params</name><operator>::</operator><name>kFlags</name> <operator>&amp;</operator>
<name>SizeClassAllocator32FlagMasks</name><operator>::</operator><name>kRandomShuffleChunks</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kUseSeparateSizeClassForBatch</name> <init>= <expr><name>Params</name><operator>::</operator><name>kFlags</name> <operator>&amp;</operator>
<name>SizeClassAllocator32FlagMasks</name><operator>::</operator><name>kUseSeparateSizeClassForBatch</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>TransferBatch</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxNumCached</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kMaxNumCachedHint</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>SetFromArray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>batch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>kMaxNumCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count_</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>batch_</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>batch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<expr_stmt><expr><name>uptr</name> <macro><name>Count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>count_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>count_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>batch_</name><index>[<expr><name>count_</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>count_</name></expr></argument>, <argument><expr><name>kMaxNumCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>void</name></type> <name>CopyToArray</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name><name>to_batch</name><index>[]</index></name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>Count</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to_batch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>batch_</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>AllocationSizeRequiredForNElements</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uptr</name></type> <name>MaxCached</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Min</name><argument_list>(<argument><expr><name>kMaxNumCached</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><call><name>MaxCachedHint</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uptr</name></type> <name>count_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>batch_</name><index>[<expr><name>kMaxNumCached</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kBatchSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransferBatch</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>kBatchSize</name> <operator>&amp;</operator> <operator>(</operator><name>kBatchSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><name>kBatchSize</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>kMaxNumCachedHint</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ClassIdToSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>class_id</name> <operator>==</operator> <name>SizeClassMap</name><operator>::</operator><name>kBatchClassID</name><operator>)</operator></expr> ?</condition><then>
<expr><name>kBatchSize</name></expr> </then><else>: <expr><name>SizeClassMap</name><operator>::</operator><call><name>Size</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name></type> <name>ThisT</name>;</typedef>
<typedef>typedef <type><name><name>SizeClassAllocator32LocalCache</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name></type> <name>AllocatorCache</name>;</typedef>

<function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>heap_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>heap_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>possible_regions</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>size_class_info_array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_class_info_array</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>s32</name> <macro><name>ReleaseToOSIntervalMs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>kReleaseToOSIntervalNever</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetReleaseToOSIntervalMs</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceReleaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>MapWithCallback</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>MmapOrDie</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>PrimaryAllocatorName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnmapWithCallback</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnUnmap</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnmapOrDie</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanAllocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>size</name> <operator>&lt;=</operator> <name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name> <operator>&amp;&amp;</operator>
<name>alignment</name> <operator>&lt;=</operator> <name>SizeClassMap</name><operator>::</operator><name>kMaxSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>kMetadataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>PointerIsMine</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mem</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name> <init>= <expr><call><name>ComputeRegionBeg</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>offset</name> <init>= <expr><name>mem</name> <operator>-</operator> <name>beg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n</name> <init>= <expr><name>offset</name> <operator>/</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>meta</name> <init>= <expr><operator>(</operator><name>beg</name> <operator>+</operator> <name>kRegionSize</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>kMetadataSize</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>TransferBatch</name> <modifier>*</modifier></type><name>AllocateBatch</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SizeClassInfo</name> <modifier>*</modifier></type><name>sci</name> <init>= <expr><call><name>GetSizeClassInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sci</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>PopulateFreeList</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>void</name></type> <name>DeallocateBatch</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>Count</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SizeClassInfo</name> <modifier>*</modifier></type><name>sci</name> <init>= <expr><call><name>GetSizeClassInfo</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sci</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PointerIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>mem</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>SANITIZER_SIGN_EXTENDED_ADDRESSES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mem</name> <operator>&amp;=</operator> <operator>(</operator><name>kSpaceSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>&lt;</operator> <name>kSpaceBeg</name> <operator>||</operator> <name>mem</name> <operator>&gt;=</operator> <name>kSpaceBeg</name> <operator>+</operator> <name>kSpaceSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>GetSizeClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>possible_regions</name><index>[<expr><call><name>ComputeRegionId</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>PointerIsMine</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mem</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name> <init>= <expr><call><name>ComputeRegionBeg</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>offset</name> <init>= <expr><name>mem</name> <operator>-</operator> <name>beg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>n</name> <init>= <expr><name>offset</name> <operator>/</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>beg</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>*</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>GetActuallyAllocatedSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>PointerIsMine</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><call><name>GetSizeClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ClassID</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>SizeClassMap</name><operator>::</operator><call><name>ClassID</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>uptr</name></type> <name>TotalMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumPossibleRegions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>possible_regions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>kRegionSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TestOnlyUnmap</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumPossibleRegions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>possible_regions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UnmapWithCallback</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <name>kRegionSize</name><operator>)</operator></expr></argument>, <argument><expr><name>kRegionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForceLock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kNumClasses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetSizeClassInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>mutex</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceUnlock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>kNumClasses</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GetSizeClassInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>mutex</name><operator>.</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><name>ForEachChunkCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>region</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>region</name> <operator>&lt;</operator> <name>kNumPossibleRegions</name></expr>;</condition> <incr><expr><name>region</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>possible_regions</name><index>[<expr><name>region</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>chunk_size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name><name>possible_regions</name><index>[<expr><name>region</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>max_chunks_in_region</name> <init>= <expr><name>kRegionSize</name> <operator>/</operator> <operator>(</operator><name>chunk_size</name> <operator>+</operator> <name>kMetadataSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>region_beg</name> <init>= <expr><name>region</name> <operator>*</operator> <name>kRegionSize</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>chunk</name> <init>= <expr><name>region_beg</name></expr></init></decl>;</init>
<condition><expr><name>chunk</name> <operator>&lt;</operator> <name>region_beg</name> <operator>+</operator> <name>max_chunks_in_region</name> <operator>*</operator> <name>chunk_size</name></expr>;</condition>
<incr><expr><name>chunk</name> <operator>+=</operator> <name>chunk_size</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>AdditionalSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<typedef>typedef <type><name>SizeClassMap</name></type> <name>SizeClassMapT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kNumClasses</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kRegionSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumPossibleRegions</name> <init>= <expr><name>kSpaceSize</name> <operator>/</operator> <name>kRegionSize</name></expr></init></decl>;</decl_stmt>

<struct>struct <macro><name>ALIGNED</name><argument_list>(<argument>SANITIZER_CACHE_LINE_SIZE</argument>)</argument_list></macro> <name>SizeClassInfo</name> <block>{
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>TransferBatch</name></expr></argument>&gt;</argument_list></name></type> <name>free_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>rand_state</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SizeClassInfo</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>kCacheLineSize</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>ComputeRegionId</name><argument_list>(<argument><expr><name>uptr</name> <name>mem</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SANITIZER_SIGN_EXTENDED_ADDRESSES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mem</name> <operator>&amp;=</operator> <operator>(</operator><name>kSpaceSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>res</name> <init>= <expr><name>mem</name> <operator>&gt;&gt;</operator> <name>kRegionSizeLog</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>kNumPossibleRegions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>ComputeRegionBeg</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>mem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>mem</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kRegionSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>AllocateRegion</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>res</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>MmapAlignedOrDieOnFatalError</name><argument_list>(
<argument><expr><name>kRegionSize</name></expr></argument>, <argument><expr><name>kRegionSize</name></expr></argument>, <argument><expr><name>PrimaryAllocatorName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MapUnmapCallback</name><argument_list>()</argument_list></call><operator>.</operator><call><name>OnMap</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>kRegionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stat</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><name>AllocatorStatMapped</name></expr></argument>, <argument><expr><name>kRegionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>kRegionSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>possible_regions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>ComputeRegionId</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SizeClassInfo</name> <modifier>*</modifier></type><name>GetSizeClassInfo</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>kNumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>size_class_info_array</name><index>[<expr><name>class_id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PopulateBatches</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SizeClassInfo</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>,
<parameter><decl><type><name>TransferBatch</name> <modifier>*</modifier><modifier>*</modifier></type><name>current_batch</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>max_count</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>pointers_array</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kRandomShuffleChunks</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>kUseSeparateSizeClassForBatch</name> <operator>||</operator>
<name>class_id</name> <operator>!=</operator> <name>SizeClassMap</name><operator>::</operator><name>kBatchClassID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RandomShuffle</name><argument_list>(<argument><expr><name>pointers_array</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sci</name><operator>-&gt;</operator><name>rand_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><name>current_batch</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>CreateBatch</name></name><argument_list>(<argument><expr><name>class_id</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>(</operator><name>TransferBatch</name><operator>*</operator><operator>)</operator><name><name>pointers_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>Add</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pointers_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>b</name><operator>-&gt;</operator><name>Count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>max_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>current_batch</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PopulateFreeList</name><parameter_list>(<parameter><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>SizeClassInfo</name> <modifier>*</modifier></type><name>sci</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>region</name> <init>= <expr><call><name>AllocateRegion</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>region</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kRandomShuffleChunks</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>sci</name><operator>-&gt;</operator><name>rand_state</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sci</name><operator>-&gt;</operator><name>rand_state</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sci</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>NanoTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>size</name> <init>= <expr><call><name>ClassIdToSize</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>n_chunks</name> <init>= <expr><name>kRegionSize</name> <operator>/</operator> <operator>(</operator><name>size</name> <operator>+</operator> <name>kMetadataSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>max_count</name> <init>= <expr><name>TransferBatch</name><operator>::</operator><call><name>MaxCached</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>max_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kShuffleArraySize</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>shuffle_array</name><index>[<expr><name>kShuffleArraySize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><name>region</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>region</name> <operator>+</operator> <name>n_chunks</name> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>shuffle_array</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>kShuffleArraySize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>PopulateBatches</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>max_count</name></expr></argument>,
<argument><expr><name>shuffle_array</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>PopulateBatches</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sci</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>max_count</name></expr></argument>,
<argument><expr><name>shuffle_array</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><call><name><name>b</name><operator>-&gt;</operator><name>Count</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sci</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ByteMap</name></type> <name>possible_regions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SizeClassInfo</name></type> <name><name>size_class_info_array</name><index>[<expr><name>kNumClasses</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</unit>
