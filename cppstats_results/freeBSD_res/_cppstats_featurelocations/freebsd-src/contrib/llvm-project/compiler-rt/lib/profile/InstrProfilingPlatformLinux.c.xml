<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingPlatformLinux.c">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__Fuchsia__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;elf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;link.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ElfW</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ElfW</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__ElfN(type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_DATA_START</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_START(INSTR_PROF_DATA_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_DATA_STOP</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_STOP(INSTR_PROF_DATA_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NAME_START</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_START(INSTR_PROF_NAME_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NAME_STOP</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_STOP(INSTR_PROF_NAME_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_CNTS_START</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_START(INSTR_PROF_CNTS_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_CNTS_STOP</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_STOP(INSTR_PROF_CNTS_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_ORDERFILE_START</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_START(INSTR_PROF_ORDERFILE_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_VNODES_START</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_START(INSTR_PROF_VNODES_COMMON)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_VNODES_STOP</name></cpp:macro> <cpp:value>INSTR_PROF_SECT_STOP(INSTR_PROF_VNODES_COMMON)</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__llvm_profile_data</name> <name>PROF_DATA_START</name> <name>COMPILER_RT_VISIBILITY</name></type>
<name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__llvm_profile_data</name> <name>PROF_DATA_STOP</name> <name>COMPILER_RT_VISIBILITY</name></type>
<name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name> <name>PROF_CNTS_START</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name> <name>PROF_CNTS_STOP</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint32_t</name> <name>PROF_ORDERFILE_START</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <name>PROF_NAME_START</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <name>PROF_NAME_STOP</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ValueProfNode</name> <name>PROF_VNODES_START</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ValueProfNode</name> <name>PROF_VNODES_STOP</name> <name>COMPILER_RT_VISIBILITY</name></type> <name>COMPILER_RT_WEAK</name></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type>
<name>__llvm_profile_begin_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_DATA_START</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type>
<name>__llvm_profile_end_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_DATA_STOP</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_begin_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_NAME_START</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_end_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_NAME_STOP</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_CNTS_START</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_end_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_CNTS_STOP</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint32_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_orderfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_ORDERFILE_START</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type>
<name>__llvm_profile_begin_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_VNODES_START</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_end_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>PROF_VNODES_STOP</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name> <init>= <expr><operator>&amp;</operator><name>PROF_VNODES_START</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>EndVNode</name> <init>= <expr><operator>&amp;</operator><name>PROF_VNODES_STOP</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NT_GNU_BUILD_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>RoundUp</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteOneBinaryId</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>BinaryIdLen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>BinaryIdData</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProfDataIOVec</name></type> <name><name>BinaryIdIOVec</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><operator>&amp;</operator><name>BinaryIdLen</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BinaryIdData</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>BinaryIdLen</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>BinaryIdIOVec</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BinaryIdIOVec</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>BinaryIdIOVec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>WriteBinaryIdForNote</name><argument_list>(<argument><expr><name>ProfDataWriter</name> <operator>*</operator><name>Writer</name></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>Note</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>BinaryIdSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NoteName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>Note</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Note</name><operator>-&gt;</operator><name>n_type</name></name> <operator>==</operator> <name>NT_GNU_BUILD_ID</name> <operator>&amp;&amp;</operator> <name><name>Note</name><operator>-&gt;</operator><name>n_namesz</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>NoteName</name></expr></argument>, <argument><expr><literal type="string">"GNU\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>BinaryIdLen</name> <init>= <expr><name><name>Note</name><operator>-&gt;</operator><name>n_descsz</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>BinaryIdData</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>NoteName</name> <operator>+</operator> <call><name>RoundUp</name><argument_list>(<argument><expr><name><name>Note</name><operator>-&gt;</operator><name>n_namesz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Writer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>WriteOneBinaryId</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>BinaryIdLen</name></expr></argument>, <argument><expr><name>BinaryIdData</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BinaryIdSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BinaryIdLen</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>BinaryIdLen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>BinaryIdSize</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>WriteBinaryIds</name><argument_list>(<argument><expr><name>ProfDataWriter</name> <operator>*</operator><name>Writer</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>Note</name></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>NotesEnd</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>TotalBinaryIdsSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>Note</name> <operator>&lt;</operator> <name>NotesEnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Result</name> <init>= <expr><call><name>WriteBinaryIdForNote</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>Note</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>TotalBinaryIdsSize</name> <operator>+=</operator> <name>Result</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>NoteOffset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>RoundUp</name><argument_list>(<argument><expr><name><name>Note</name><operator>-&gt;</operator><name>n_namesz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>RoundUp</name><argument_list>(<argument><expr><name><name>Note</name><operator>-&gt;</operator><name>n_descsz</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Note</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>Note</name><operator>)</operator> <operator>+</operator> <name>NoteOffset</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>TotalBinaryIdsSize</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<extern>extern const ElfW(Ehdr</extern>)</block_content> __ehdr_start __attribute__((visibility("hidden"</block></function>)))<empty_stmt>;</empty_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Ehdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ElfHeader</name> <operator>=</operator> <operator>&amp;</operator><name>__ehdr_start</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ProgramHeader</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ElfHeader</name> <operator>+</operator> <name><name>ElfHeader</name><operator>-&gt;</operator><name>e_phoff</name></name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>I</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name><name>ElfHeader</name><operator>-&gt;</operator><name>e_phnum</name></name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ProgramHeader</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>p_type</name> <operator>!=</operator> <name>PT_NOTE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>Note</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ElfHeader</name> <operator>+</operator> <name><name>ProgramHeader</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>p_offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>NotesEnd</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>Note</name><operator>)</operator> <operator>+</operator> <name><name>ProgramHeader</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>p_filesz</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>WriteBinaryIds</name><argument_list>(<argument><expr><name>Writer</name></expr></argument>, <argument><expr><name>Note</name></expr></argument>, <argument><expr><name>NotesEnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




COMPILER_RT_VISIBILITY <function><type><name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
