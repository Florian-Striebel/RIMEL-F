<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_mapping.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_MAPPING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_MAPPING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_internal.h"</cpp:file></cpp:include>









































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_SHADOW_SCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowScale</name> <init>= <expr><name>ASAN_SHADOW_SCALE</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowScale</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowSentinel</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowOffset32</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">44</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kDefaultShort64bitShadowOffset</name> <init>=
<expr><literal type="number">0x7FFFFFFF</literal> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0xFFFULL</literal> <operator>&lt;&lt;</operator> <name>kDefaultShadowScale</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kAArch64_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">36</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kRiscv64_ShadowOffset64</name> <init>= <expr><literal type="number">0xd55550000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kMIPS32_ShadowOffset32</name> <init>= <expr><literal type="number">0x0aaa0000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kMIPS64_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">37</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kPPC64_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">44</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSystemZ_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSPARC64_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">43</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kFreeBSD_ShadowOffset32</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kFreeBSD_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">46</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kNetBSD_ShadowOffset32</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kNetBSD_ShadowOffset64</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">46</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kWindowsShadowOffset32</name> <init>= <expr><literal type="number">3ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_SCALE</name></cpp:macro> <cpp:value>kDefaultShadowScale</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__asan_shadow_memory_dynamic_address</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kMIPS32_ShadowOffset32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FREEBSD</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kFreeBSD_ShadowOffset32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kNetBSD_ShadowOffset32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kWindowsShadowOffset32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_IOS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__asan_shadow_memory_dynamic_address</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kDefaultShadowOffset32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_IOS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__asan_shadow_memory_dynamic_address</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_MAC</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__asan_shadow_memory_dynamic_address</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_RISCV64</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kRiscv64_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kAArch64_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kPPC64_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kSystemZ_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FREEBSD</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kFreeBSD_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kNetBSD_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kDefaultShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kMIPS64_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kSPARC64_ShadowOffset64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS64</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>__asan_shadow_memory_dynamic_address</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OFFSET</name></cpp:macro> <cpp:value>kDefaultShort64bitShadowOffset</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_PREMAP_SHADOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_PREMAP_SHADOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_GRANULARITY</name></cpp:macro> <cpp:value>(1ULL &lt;&lt; SHADOW_SCALE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_ASAN_MAPPING_PROFILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DO_ASAN_MAPPING_PROFILE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_ASAN_MAPPING</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>AsanMappingProfile[__LINE__]++;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_ASAN_MAPPING</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_FIXED_MAPPING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name><name>AsanMappingProfile</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ASAN_FIXED_MAPPING</name></expr></cpp:if>



<decl_stmt><decl><type><specifier>static</specifier> <name>uptr</name></type> <name>kHighMemEnd</name> <init>= <expr><literal type="number">0x7fffffffffffULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uptr</name></type> <name>kMidMemBeg</name> <init>= <expr><literal type="number">0x3000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uptr</name></type> <name>kMidMemEnd</name> <init>= <expr><literal type="number">0x4fffffffffULL</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighMemEnd</name></decl>, <decl><type ref="prev"/><name>kMidMemBeg</name></decl>, <decl><type ref="prev"/><name>kMidMemEnd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_mapping_sparc64.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((mem) &gt;&gt; SHADOW_SCALE) + (SHADOW_OFFSET))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemBeg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowMemEnd</name></cpp:macro> <cpp:value>(SHADOW_OFFSET ? SHADOW_OFFSET - 1 : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowBeg</name></cpp:macro> <cpp:value>SHADOW_OFFSET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLowShadowEnd</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kLowMemEnd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighMemBeg</name></cpp:macro> <cpp:value>(MEM_TO_SHADOW(kHighMemEnd) + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowBeg</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kHighMemBeg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHighShadowEnd</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kHighMemEnd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMidShadowBeg</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kMidMemBeg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMidShadowEnd</name></cpp:macro> <cpp:value>MEM_TO_SHADOW(kMidMemEnd)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseShadowStart</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kZeroBaseMaxShadowStart</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapBeg</name></cpp:macro> <cpp:value>(kLowShadowEnd ? kLowShadowEnd + 1 : kZeroBaseShadowStart)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGapEnd</name></cpp:macro> <cpp:value>((kMidMemBeg ? kMidShadowBeg : kHighShadowBeg) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap2Beg</name></cpp:macro> <cpp:value>(kMidMemBeg ? kMidShadowEnd + 1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap2End</name></cpp:macro> <cpp:value>(kMidMemBeg ? kMidMemBeg - 1 : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap3Beg</name></cpp:macro> <cpp:value>(kMidMemBeg ? kMidMemEnd + 1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kShadowGap3End</name></cpp:macro> <cpp:value>(kMidMemBeg ? kHighShadowBeg - 1 : 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>kLowMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInLowShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kLowShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kLowShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMidMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMidMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kMidMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kMidMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMidShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMidMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kMidShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kMidShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighMemEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInHighShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kHighMemBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <name>kHighShadowBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kHighShadowEnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInShadowGap</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kMidMemBeg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SHADOW_OFFSET</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>a</name> <operator>&gt;=</operator> <name>kShadowGapBeg</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>kShadowGap2Beg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kShadowGap2End</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>kShadowGap3Beg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kShadowGap3End</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>SHADOW_OFFSET</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>kShadowGapBeg</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name>kShadowGapEnd</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadowSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>size</name> <operator>&gt;&gt;</operator> <name>SHADOW_SCALE</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AddrIsInLowMem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInMidMem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInHighMem</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>flags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>protect_shadow_gap</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>AddrIsInShadowGap</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>AddrIsInMem</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>MEM_TO_SHADOW</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsInShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AddrIsInLowShadow</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInMidShadow</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AddrIsInHighShadow</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddrIsAlignedByGranularity</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><name>SHADOW_GRANULARITY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AddressIsPoisoned</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PROFILE_ASAN_MAPPING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAccessSize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>shadow_address</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>MEM_TO_SHADOW</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>s8</name></type> <name>shadow_value</name> <init>= <expr><operator>*</operator><name>shadow_address</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shadow_value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>last_accessed_byte</name> <init>= <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><name>SHADOW_GRANULARITY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>+</operator> <name>kAccessSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>last_accessed_byte</name> <operator>&gt;=</operator> <name>shadow_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kAsanMappingProfileSize</name> <init>= <expr><name>__LINE__</name></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
