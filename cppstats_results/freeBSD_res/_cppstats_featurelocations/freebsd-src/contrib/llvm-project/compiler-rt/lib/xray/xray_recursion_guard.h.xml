<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_recursion_guard.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_XRAY_RECURSION_GUARD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_XRAY_RECURSION_GUARD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_atomic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>















<decl_stmt><decl><type><name>class</name></type> <name>RecursionGuard</name> <block>{<block_content>
<decl_stmt><decl><type><name>atomic_uint8_t</name> <modifier>&amp;</modifier></type><name>Running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Valid</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><specifier>inline</specifier> <call><name>RecursionGuard</name><argument_list>(<argument><expr><name>atomic_uint8_t</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Running</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Valid</name><argument_list>(<argument>!atomic_exchange(&amp;R, <literal type="number">1</literal>, memory_order_acq_rel)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>inline</specifier> <call><name>RecursionGuard</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecursionGuard</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <call><name>RecursionGuard</name><argument_list>(<argument><expr><name>RecursionGuard</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>RecursionGuard</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RecursionGuard</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>RecursionGuard</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>RecursionGuard</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>explicit</name> <specifier>inline</specifier> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Valid</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <operator>~</operator><macro><name>RecursionGuard</name><argument_list>()</argument_list></macro> <name>noexcept</name> <block>{
<if_stmt><if>if <condition>(<expr><name>Valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Running</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
