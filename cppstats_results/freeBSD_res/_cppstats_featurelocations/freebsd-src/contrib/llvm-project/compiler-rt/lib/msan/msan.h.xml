<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/msan/msan.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msan_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubsan/ubsan_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSAN_REPLACE_OPERATORS_NEW_AND_DELETE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSAN_REPLACE_OPERATORS_NEW_AND_DELETE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSAN_CONTAINS_UBSAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSAN_CONTAINS_UBSAN</name></cpp:macro> <cpp:value>CAN_SANITIZE_UB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>MappingDesc</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name></decl>;</decl_stmt>
<enum>enum <name>Type</name> <block>{
<decl><name>INVALID</name></decl>, <decl><name>APP</name></decl>, <decl><name>SHADOW</name></decl>, <decl><name>ORIGIN</name></decl>
}</block> <decl><name>type</name></decl>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x000200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x000200000000ULL</literal></expr>, <expr><literal type="number">0x002200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x002200000000ULL</literal></expr>, <expr><literal type="number">0x004000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x004000000000ULL</literal></expr>, <expr><literal type="number">0x004200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x004200000000ULL</literal></expr>, <expr><literal type="number">0x006000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x006000000000ULL</literal></expr>, <expr><literal type="number">0x006200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x006200000000ULL</literal></expr>, <expr><literal type="number">0x008000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x008000000000ULL</literal></expr>, <expr><literal type="number">0x008200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x008200000000ULL</literal></expr>, <expr><literal type="number">0x00a000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00a000000000ULL</literal></expr>, <expr><literal type="number">0x00a200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00a200000000ULL</literal></expr>, <expr><literal type="number">0x00c000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00c000000000ULL</literal></expr>, <expr><literal type="number">0x00e200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00e200000000ULL</literal></expr>, <expr><literal type="number">0x00ffffffffffULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-3"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) ^ 0x8000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>shadow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(shadow)) + 0x2000000000ULL)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>














<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x00000000000ULL</literal></expr>, <expr><literal type="number">0x01000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01000000000ULL</literal></expr>, <expr><literal type="number">0x02000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02000000000ULL</literal></expr>, <expr><literal type="number">0x03000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x03000000000ULL</literal></expr>, <expr><literal type="number">0x04000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x04000000000ULL</literal></expr>, <expr><literal type="number">0x05000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05000000000ULL</literal></expr>, <expr><literal type="number">0x06000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06000000000ULL</literal></expr>, <expr><literal type="number">0x07000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x07000000000ULL</literal></expr>, <expr><literal type="number">0x08000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x08000000000ULL</literal></expr>, <expr><literal type="number">0x09000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x09000000000ULL</literal></expr>, <expr><literal type="number">0x0A000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0A000000000ULL</literal></expr>, <expr><literal type="number">0x0B000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0B000000000ULL</literal></expr>, <expr><literal type="number">0x0F000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0F000000000ULL</literal></expr>, <expr><literal type="number">0x10000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10000000000ULL</literal></expr>, <expr><literal type="number">0x11000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11000000000ULL</literal></expr>, <expr><literal type="number">0x12000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-4"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x12000000000ULL</literal></expr>, <expr><literal type="number">0x17000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17000000000ULL</literal></expr>, <expr><literal type="number">0x18000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-4"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18000000000ULL</literal></expr>, <expr><literal type="number">0x19000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-4"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19000000000ULL</literal></expr>, <expr><literal type="number">0x20000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x20000000000ULL</literal></expr>, <expr><literal type="number">0x21000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-5"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21000000000ULL</literal></expr>, <expr><literal type="number">0x26000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26000000000ULL</literal></expr>, <expr><literal type="number">0x27000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-5"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27000000000ULL</literal></expr>, <expr><literal type="number">0x28000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-5"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x28000000000ULL</literal></expr>, <expr><literal type="number">0x29000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-7"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x29000000000ULL</literal></expr>, <expr><literal type="number">0x2A000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-7"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2A000000000ULL</literal></expr>, <expr><literal type="number">0x2B000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-6"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2B000000000ULL</literal></expr>, <expr><literal type="number">0x2C000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2C000000000ULL</literal></expr>, <expr><literal type="number">0x2D000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-6"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2D000000000ULL</literal></expr>, <expr><literal type="number">0x2E000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-6"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2E000000000ULL</literal></expr>, <expr><literal type="number">0x2F000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-7"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2F000000000ULL</literal></expr>, <expr><literal type="number">0x39000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x39000000000ULL</literal></expr>, <expr><literal type="number">0x3A000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-9"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3A000000000ULL</literal></expr>, <expr><literal type="number">0x3B000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-9"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3B000000000ULL</literal></expr>, <expr><literal type="number">0x3C000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-8"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3C000000000ULL</literal></expr>, <expr><literal type="number">0x3D000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3D000000000ULL</literal></expr>, <expr><literal type="number">0x3E000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-8"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3E000000000ULL</literal></expr>, <expr><literal type="number">0x3F000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-8"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3F000000000ULL</literal></expr>, <expr><literal type="number">0x40000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-9"</literal></expr>}</block></expr>,





<expr><block>{<expr><literal type="number">0x0040000000000ULL</literal></expr>, <expr><literal type="number">0x0041000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0041000000000ULL</literal></expr>, <expr><literal type="number">0x0042000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-10"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0042000000000ULL</literal></expr>, <expr><literal type="number">0x0047000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0047000000000ULL</literal></expr>, <expr><literal type="number">0x0048000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-10"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0048000000000ULL</literal></expr>, <expr><literal type="number">0x0049000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-10"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0049000000000ULL</literal></expr>, <expr><literal type="number">0x0050000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0050000000000ULL</literal></expr>, <expr><literal type="number">0x0051000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-11"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0051000000000ULL</literal></expr>, <expr><literal type="number">0x0056000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0056000000000ULL</literal></expr>, <expr><literal type="number">0x0057000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-11"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0057000000000ULL</literal></expr>, <expr><literal type="number">0x0058000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-11"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0058000000000ULL</literal></expr>, <expr><literal type="number">0x0059000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-12"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0059000000000ULL</literal></expr>, <expr><literal type="number">0x005E000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x005E000000000ULL</literal></expr>, <expr><literal type="number">0x005F000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-12"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x005F000000000ULL</literal></expr>, <expr><literal type="number">0x0060000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-12"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0060000000000ULL</literal></expr>, <expr><literal type="number">0x0061000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0061000000000ULL</literal></expr>, <expr><literal type="number">0x0062000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-13"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0062000000000ULL</literal></expr>, <expr><literal type="number">0x0067000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0067000000000ULL</literal></expr>, <expr><literal type="number">0x0068000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-13"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0068000000000ULL</literal></expr>, <expr><literal type="number">0x0069000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-13"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0069000000000ULL</literal></expr>, <expr><literal type="number">0x0AAAAA0000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AAAAA0000000ULL</literal></expr>, <expr><literal type="number">0x0AAAB00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-14"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AAAB00000000ULL</literal></expr>, <expr><literal type="number">0x0AACAA0000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AACAA0000000ULL</literal></expr>, <expr><literal type="number">0x0AACB00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-14"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AACB00000000ULL</literal></expr>, <expr><literal type="number">0x0AADAA0000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AADAA0000000ULL</literal></expr>, <expr><literal type="number">0x0AADB00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-14"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0AADB00000000ULL</literal></expr>, <expr><literal type="number">0x0FF9F00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0FF9F00000000ULL</literal></expr>, <expr><literal type="number">0x0FFA000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-15"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0FFA000000000ULL</literal></expr>, <expr><literal type="number">0x0FFAF00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0FFAF00000000ULL</literal></expr>, <expr><literal type="number">0x0FFB000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-15"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0FFB000000000ULL</literal></expr>, <expr><literal type="number">0x0FFFF00000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0FFFF00000000ULL</literal></expr>, <expr><literal type="number">0x1000000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-15"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uptr)mem ^ 0x6000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>shadow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(shadow)) + 0x1000000000ULL)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <name>SANITIZER_PPC64</name></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x000200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"low memory"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x000200000000ULL</literal></expr>, <expr><literal type="number">0x080000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x080000000000ULL</literal></expr>, <expr><literal type="number">0x180200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x180200000000ULL</literal></expr>, <expr><literal type="number">0x1C0000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1C0000000000ULL</literal></expr>, <expr><literal type="number">0x2C0200000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2C0200000000ULL</literal></expr>, <expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><literal type="number">0x800000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"high memory"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEARIZE_MEM</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem) &amp; ~0xE00000000000ULL) ^ 0x100000000000ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LINEARIZE_MEM((mem)) + 0x080000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>shadow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(shadow)) + 0x140000000000ULL)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <name>SANITIZER_S390_64</name></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x040000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"low memory"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x040000000000ULL</literal></expr>, <expr><literal type="number">0x080000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x080000000000ULL</literal></expr>, <expr><literal type="number">0x180000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x180000000000ULL</literal></expr>, <expr><literal type="number">0x1C0000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1C0000000000ULL</literal></expr>, <expr><literal type="number">0x2C0000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2C0000000000ULL</literal></expr>, <expr><literal type="number">0x440000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x440000000000ULL</literal></expr>, <expr><literal type="number">0x500000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"high memory"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((uptr)(mem)) &amp; ~0xC00000000000ULL) + 0x080000000000ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>shadow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(shadow)) + 0x140000000000ULL)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FREEBSD</name> <operator>&amp;&amp;</operator> <name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:elif>



<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"low memory"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><literal type="number">0x310000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x310000000000ULL</literal></expr>, <expr><literal type="number">0x380000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x380000000000ULL</literal></expr>, <expr><literal type="number">0x590000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x590000000000ULL</literal></expr>, <expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><literal type="number">0x800000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"high memory"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEARIZE_MEM</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem) &amp; ~0xc00000000000ULL) ^ 0x200000000000ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LINEARIZE_MEM((mem)) + 0x100000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>shadow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(shadow)) + 0x280000000000)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name> <operator>||</operator> <operator>(</operator><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSAN_LINUX_X86_64_OLD_MAPPING</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><literal type="number">0x800000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) &amp; ~0x400000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) + 0x200000000000ULL)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<decl_stmt><decl><type><specifier>const</specifier> <name>MappingDesc</name></type> <name><name>kMemoryLayout</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x000000000000ULL</literal></expr>, <expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x010000000000ULL</literal></expr>, <expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100000000000ULL</literal></expr>, <expr><literal type="number">0x110000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x110000000000ULL</literal></expr>, <expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x200000000000ULL</literal></expr>, <expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x300000000000ULL</literal></expr>, <expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-3"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400000000000ULL</literal></expr>, <expr><literal type="number">0x500000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x500000000000ULL</literal></expr>, <expr><literal type="number">0x510000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>SHADOW</name></expr>, <expr><literal type="string">"shadow-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x510000000000ULL</literal></expr>, <expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-2"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x600000000000ULL</literal></expr>, <expr><literal type="number">0x610000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>ORIGIN</name></expr>, <expr><literal type="string">"origin-1"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x610000000000ULL</literal></expr>, <expr><literal type="number">0x700000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>INVALID</name></expr>, <expr><literal type="string">"invalid"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x700000000000ULL</literal></expr>, <expr><literal type="number">0x800000000000ULL</literal></expr>, <expr><name>MappingDesc</name><operator>::</operator><name>APP</name></expr>, <expr><literal type="string">"app-3"</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) ^ 0x500000000000ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_TO_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uptr)(mem)) + 0x100000000000ULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported platform"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kMemoryLayoutSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>kMemoryLayout</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kMemoryLayout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_TO_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SHADOW_TO_ORIGIN(MEM_TO_SHADOW((mem))))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(optimize(<literal type="string">"unroll-loops"</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>addr_is_type</name><argument_list>(<argument><expr><name>uptr</name> <name>addr</name></expr></argument>, <argument><expr><name>MappingDesc</name><operator>::</operator><name>Type</name> <name>mapping_type</name></expr></argument>)</argument_list> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unroll</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kMemoryLayoutSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>mapping_type</name> <operator>&amp;&amp;</operator>
<name>addr</name> <operator>&gt;=</operator> <name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>kMemoryLayout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_APP</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::APP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_SHADOW</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::SHADOW)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IS_ORIGIN</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr_is_type((uptr)(mem), MappingDesc::ORIGIN)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kMsanParamTlsSize</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kMsanRetvalTlsSize</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__msan</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>msan_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>msan_init_is_running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>msan_report_count</name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ProtectRange</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>InitShadow</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init_origins</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>GetProcSelfMaps</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeInterceptors</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MsanAllocatorInit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MsanDeallocate</name><parameter_list>(<parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>msan_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msan_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>InstallTrapHandler</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InstallAtExitHandler</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetStackOriginDescr</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EnterSymbolizer</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ExitSymbolizer</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsInSymbolizer</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>SymbolizerScope</name> <block>{
<macro><name>SymbolizerScope</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>EnterSymbolizer</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>SymbolizerScope</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>ExitSymbolizer</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>PrintWarning</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintWarningWithOrigin</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>origin</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>UnpoisonParam</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnpoisonThreadLocalState</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>u32</name></type> <name>ChainOrigin</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>STACK_TRACE_TAG_POISON</name> <init>= <expr><name>StackTrace</name><operator>::</operator><name>TAG_CUSTOM</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MALLOC_STACK_TRACE</name></cpp:macro> <cpp:value>BufferedStackTrace stack; if (__msan_get_track_origins() &amp;&amp; msan_inited) stack.Unwind(StackTrace::GetCurrentPc(), GET_CURRENT_FRAME(), nullptr, common_flags()-&gt;fast_unwind_on_malloc, common_flags()-&gt;malloc_context_size)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STORE_STACK_TRACE_PC_BP</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>bp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BufferedStackTrace stack; if (__msan_get_track_origins() &gt; 1 &amp;&amp; msan_inited) { int size = flags()-&gt;store_context_size; if (!SANITIZER_CAN_FAST_UNWIND) size = Min(size, 1); stack.Unwind(pc, bp, nullptr, common_flags()-&gt;fast_unwind_on_malloc, size);}</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STORE_STACK_TRACE</name></cpp:macro> <cpp:value>GET_STORE_STACK_TRACE_PC_BP(StackTrace::GetCurrentPc(), GET_CURRENT_FRAME())</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FATAL_STACK_TRACE_PC_BP</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>bp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BufferedStackTrace stack; if (msan_inited) { stack.Unwind(pc, bp, nullptr, common_flags()-&gt;fast_unwind_on_fatal); }</cpp:value></cpp:define>





<decl_stmt><decl><type><name>class</name></type> <name>ScopedThreadLocalStateBackup</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ScopedThreadLocalStateBackup</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Backup</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedThreadLocalStateBackup</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Restore</name><argument_list>()</argument_list></call></expr>; }</block>
<name>void</name> <call><name>Backup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Restore</name><parameter_list>()</parameter_list>;</function_decl>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>u64</name></type> <name>va_arg_overflow_size_tls</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>MsanTSDInit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>MsanTSDGet</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MsanTSDSet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MsanTSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSAN_MALLOC_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_malloc_hook) { UnpoisonParam(2); __sanitizer_malloc_hook(ptr, size); } RunMallocHooks(ptr, size); } while (false)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSAN_FREE_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_free_hook) { UnpoisonParam(1); __sanitizer_free_hook(ptr); } RunFreeHooks(ptr); } while (false)</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
