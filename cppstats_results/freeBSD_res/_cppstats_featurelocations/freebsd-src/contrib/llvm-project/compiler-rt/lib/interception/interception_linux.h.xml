<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/interception/interception_linux.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name> <operator>||</operator> <name>SANITIZER_SOLARIS</name></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDED_FROM_INTERCEPTION_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"interception_linux.h should be included from interception library only"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERCEPTION_LINUX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTION_LINUX_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__interception</name> <block>{<block_content>
<function_decl><type><name>bool</name></type> <name>InterceptFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>ptr_to_real</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>wrapper</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>InterceptFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ver</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>ptr_to_real</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>wrapper</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_LINUX_OR_FREEBSD</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::__interception::InterceptFunction( #func, (::__interception::uptr *) &amp; REAL(func), (::__interception::uptr) &amp; (func), (::__interception::uptr) &amp; WRAP(func))</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_GLIBC</name> <operator>||</operator> <name>SANITIZER_FREEBSD</name> <operator>||</operator> <name>SANITIZER_NETBSD</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::__interception::InterceptFunction( #func, symver, (::__interception::uptr *) &amp; REAL(func), (::__interception::uptr) &amp; (func), (::__interception::uptr) &amp; WRAP(func))</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_LINUX_OR_FREEBSD(func)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
