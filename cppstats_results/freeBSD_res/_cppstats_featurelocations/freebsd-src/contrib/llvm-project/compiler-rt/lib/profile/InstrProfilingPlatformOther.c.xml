<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingPlatformOther.c">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataFirst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesFirst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NamesLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersFirst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>CountersLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>OrderFileFirst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>getMinAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>A1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>A2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>A1</name> <operator>&lt;</operator> <name>A2</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><name>A2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>getMaxAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>A1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>A2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>A1</name> <operator>&gt;</operator> <name>A2</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><name>A2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>__llvm_profile_register_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><operator>(</operator><name>__llvm_profile_data</name> <operator>*</operator><operator>)</operator><name>Data_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DataFirst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>DataFirst</name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DataLast</name> <operator>=</operator> <name>Data</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>CountersFirst</name> <operator>=</operator> <name><name>Data</name><operator>-&gt;</operator><name>CounterPtr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>CountersLast</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>Data</name><operator>-&gt;</operator><name>CounterPtr</name></name> <operator>+</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumCounters</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>DataFirst</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>__llvm_profile_data</name> <operator>*</operator><operator>)</operator><call><name>getMinAddr</name><argument_list>(<argument><expr><name>DataFirst</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CountersFirst</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>getMinAddr</name><argument_list>(<argument><expr><name>CountersFirst</name></expr></argument>, <argument><expr><name><name>Data</name><operator>-&gt;</operator><name>CounterPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DataLast</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>__llvm_profile_data</name> <operator>*</operator><operator>)</operator><call><name>getMaxAddr</name><argument_list>(<argument><expr><name>DataLast</name></expr></argument>, <argument><expr><name>Data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CountersLast</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>getMaxAddr</name><argument_list>(
<argument><expr><name>CountersLast</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>Data</name><operator>-&gt;</operator><name>CounterPtr</name></name> <operator>+</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumCounters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>__llvm_profile_register_names_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NamesStart</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>NamesSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>NamesFirst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NamesFirst</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NamesStart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NamesLast</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NamesStart</name> <operator>+</operator> <name>NamesSize</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>NamesFirst</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>getMinAddr</name><argument_list>(<argument><expr><name>NamesFirst</name></expr></argument>, <argument><expr><name>NamesStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NamesLast</name> <operator>=</operator>
<operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>getMaxAddr</name><argument_list>(<argument><expr><name>NamesLast</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NamesStart</name> <operator>+</operator> <name>NamesSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_begin_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>DataFirst</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_end_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>DataLast</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_begin_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NamesFirst</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_end_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NamesLast</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>CountersFirst</name></expr>;</return> </block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_end_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>CountersLast</name></expr>;</return> </block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>uint32_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_orderfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>OrderFileFirst</name></expr>;</return> </block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_begin_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_end_vnodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <name>ValueProfNode</name> <modifier>*</modifier></type><name>EndVNode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>int</name></type> <name>__llvm_write_binary_ids</name><parameter_list>(<parameter><decl><type><name>ProfDataWriter</name> <modifier>*</modifier></type><name>Writer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
