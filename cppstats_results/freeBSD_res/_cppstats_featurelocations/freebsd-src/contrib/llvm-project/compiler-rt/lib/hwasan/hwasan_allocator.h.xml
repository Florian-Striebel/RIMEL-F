<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_allocator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_mapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_poisoning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_checks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_report.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_ring_buffer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Unsupported platform</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<struct>struct <name>Metadata</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>requested_size_low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>requested_size_high</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>right_aligned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>alloc_context_id</name></decl>;</decl_stmt>
<function><type><name>u64</name></type> <name>get_requested_size</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u64</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>requested_size_high</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>requested_size_low</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>set_requested_size</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>requested_size_low</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>requested_size_high</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></function>
}</block>;</struct>

<struct>struct <name>HwasanMapUnmapCallback</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>OnMap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><call><name>UpdateMemoryUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>OnUnmap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const <block>{<block_content>



<expr_stmt><expr><call><name>TagMemory</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxAllowedMallocSize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>AP64</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><operator>~</operator><literal type="number">0ULL</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_ALIASING_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceSize</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kAddressTagShift</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceSize</name> <init>= <expr><literal type="number">0x2000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Metadata</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>VeryDenseSizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>HwasanMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>AP64</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryAllocator</name>;</typedef>
<typedef>typedef <type><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name>PrimaryAllocator</name></expr></argument>&gt;</argument_list></name></type> <name>Allocator</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>Allocator</name><operator>::</operator><name>AllocatorCache</name> <name>AllocatorCache</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>void</name></type> <name>AllocatorSwallowThreadLocalCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>HwasanChunkView</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>HwasanChunkView</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>block_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>metadata_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>HwasanChunkView</name><argument_list>(<argument>uptr block</argument>, <argument>Metadata *metadata</argument>)</argument_list></macro>
<operator>:</operator> <call><name>block_</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>metadata_</name><argument_list>(<argument>metadata</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <macro><name>IsAllocated</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>Beg</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>End</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>UsedSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>uptr</name> <macro><name>ActualSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>GetAllocStackId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>FromSmallHeap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uptr</name></type> <name>block_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Metadata</name> <modifier>*</modifier><specifier>const</specifier></type> <name>metadata_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>HwasanChunkView</name></type> <name>FindHeapChunkByAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>address</name></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>HeapAllocationRecord</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>tagged_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>alloc_context_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>free_context_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>requested_size</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>RingBuffer</name><argument_list type="generic">&lt;<argument><expr><name>HeapAllocationRecord</name></expr></argument>&gt;</argument_list></name></type> <name>HeapAllocationsRingBuffer</name>;</typedef>

<function_decl><type><name>void</name></type> <name>GetAllocatorStats</name><parameter_list>(<parameter><decl><type><name>AllocatorStatCounters</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>InTaggableRegion</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_ALIASING_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<return>return <expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <name>kTaggableRegionCheckShift</name><operator>)</operator> <operator>==</operator>
<operator>(</operator><call><name>GetShadowOffset</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <name>kTaggableRegionCheckShift</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
