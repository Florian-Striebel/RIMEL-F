<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/dfsan/dfsan_origin.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_ORIGIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_ORIGIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dfsan_chained_origin_depot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dfsan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stackdepot.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>

























<decl_stmt><decl><type><name>class</name></type> <name>Origin</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isValidId</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>u32</name> <macro><name>raw_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>raw_id_</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isChainedOrigin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Origin</name><operator>::</operator><call><name>isValidId</name><argument_list>(<argument><expr><name>raw_id_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>u32</name> <macro><name>getChainedId</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>Origin</name><operator>::</operator><call><name>isValidId</name><argument_list>(<argument><expr><name>raw_id_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>raw_id_</name> <operator>&amp;</operator> <name>kChainedIdMask</name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>Origin</name></type> <name>getNextChainedOrigin</name><argument_list>(<argument><expr><name>StackTrace</name> <operator>*</operator><name>stack</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>Origin</name><operator>::</operator><call><name>isValidId</name><argument_list>(<argument><expr><name>raw_id_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>prev_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stack_id</name> <init>= <expr><call><name>GetChainedOriginDepot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Get</name><argument_list>(<argument><expr><call><name>getChainedId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stack</name> <operator>=</operator> <call><name>StackDepotGet</name><argument_list>(<argument><expr><name>stack_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>Origin</name><argument_list>(<argument><expr><name>prev_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>Origin</name></type> <name>CreateChainedOrigin</name><parameter_list>(<parameter><decl><type><name>Origin</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><ternary><condition><expr><call><name><name>prev</name><operator>.</operator><name>isChainedOrigin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>prev</name><operator>.</operator><name>depth</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>flags</name><argument_list>()</argument_list></call><operator>.</operator><name>origin_history_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <call><name>flags</name><argument_list>()</argument_list></call><operator>.</operator><name>origin_history_size</name> <operator>||</operator> <name>depth</name> <operator>&gt;</operator> <name>kMaxDepth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>StackDepotHandle</name></type> <name>h</name> <init>= <expr><call><name>StackDepotPut_WithHandle</name><argument_list>(<argument><expr><operator>*</operator><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>h</name><operator>.</operator><name>valid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>flags</name><argument_list>()</argument_list></call><operator>.</operator><name>origin_history_per_stack_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>use_count</name> <init>= <expr><call><name><name>h</name><operator>.</operator><name>use_count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>use_count</name> <operator>&gt;</operator> <call><name>flags</name><argument_list>()</argument_list></call><operator>.</operator><name>origin_history_per_stack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>chained_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>inserted</name> <init>=
<expr><call><name>GetChainedOriginDepot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Put</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prev</name><operator>.</operator><name>raw_id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>chained_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>chained_id</name> <operator>&amp;</operator> <name>kChainedIdMask</name><operator>)</operator> <operator>==</operator> <name>chained_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inserted</name> <operator>&amp;&amp;</operator> <call><name>flags</name><argument_list>()</argument_list></call><operator>.</operator><name>origin_history_per_stack_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>inc_use_count_unsafe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>Origin</name><argument_list>(<argument><expr><operator>(</operator><name>depth</name> <operator>&lt;&lt;</operator> <name>kDepthShift</name><operator>)</operator> <operator>|</operator> <name>chained_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Origin</name></type> <name>FromRawId</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Origin</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kDepthBits</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kDepthShift</name> <init>= <expr><literal type="number">32</literal> <operator>-</operator> <name>kDepthBits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kChainedIdMask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>kDepthBits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>raw_id_</name></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <macro><name>Origin</name><argument_list>(<argument>u32 raw_id</argument>)</argument_list></macro> : <macro><name>raw_id_</name><argument_list>(<argument>raw_id</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>int</name> <macro><name>depth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isChainedOrigin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>raw_id_</name> <operator>&gt;&gt;</operator> <name>kDepthShift</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kDepthBits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxDepth</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kDepthBits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
