<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_fdr_controller.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_LIB_XRAY_XRAY_FDR_CONTROLLER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_RT_LIB_XRAY_XRAY_FDR_CONTROLLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray/xray_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray/xray_records.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_buffer_queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_fdr_log_writer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>Version</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>FDRController</name> <block>{<block_content>
<decl_stmt><decl><type><name>BufferQueue</name> <modifier>*</modifier></type><name>BQ</name></decl>;</decl_stmt>
<expr_stmt><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <operator>&amp;</operator><name>B</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FDRLogWriter</name> <modifier>&amp;</modifier></type><name>W</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>WallClockReader</name>)<parameter_list>(<parameter><decl><type><name>clockid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CycleThreshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>LastFunctionEntryTSC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>LatestTSC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>LatestCPU</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tid_t</name></type> <name>TId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>PId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>First</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>UndoableFunctionEnters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>UndoableTailExits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>finalized</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>XRAY_NEVER_INSTRUMENT</name> <block>{
<return>return <expr><name>BQ</name> <operator>==</operator> <name>nullptr</name> <operator>||</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>finalizing</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>bool</name></type> <name>hasSpace</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>S</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<return>return <expr><name><name>B</name><operator>.</operator><name>Data</name></name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>==</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>W</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>S</name> <operator>&lt;=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>B</name><operator>.</operator><name>Size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>constexpr</name> <name>int32_t</name></type> <name>mask</name><argument_list>(<argument><expr><name>int32_t</name> <name>FuncId</name></expr></argument>)</argument_list> const <name>XRAY_NEVER_INSTRUMENT</name> <block>{<block_content>
<return>return <expr><name>FuncId</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>getNewBuffer</name><parameter_list>()</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>BQ</name><operator>-&gt;</operator><name>getBuffer</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BufferQueue</name><operator>::</operator><name>ErrorCode</name><operator>::</operator><name>Ok</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>W</name><operator>.</operator><name>resetRecord</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name><name>W</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LatestCPU</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>First</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setupNewBuffer</name><parameter_list>()</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>hasSpace</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TId</name> <operator>=</operator> <call><name>GetTid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PId</name> <operator>=</operator> <call><name>internal_getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<struct>struct <macro><name>timespec</name></macro> <name>TS</name> <block>{
<expr_stmt><expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr></expr_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>WallClockReader</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MetadataRecord</name></type> <name><name>Metadata</name><index>[]</index></name> <init>= <expr><block>{






<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>NewBuffer</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,




<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>WalltimeMarker</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TS</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TS</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,


<expr><call><name><name>createMetadataRecord</name><argument_list type="generic">&lt;<argument><expr><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>Pid</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeMetadataRecords</name></name><argument_list>(<argument><expr><name>Metadata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>prepareBuffer</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>S</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>hasSpace</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getNewBuffer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setupNewBuffer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>First</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>First</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>W</name><operator>.</operator><name>resetRecord</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name><name>B</name><operator>.</operator><name>Extents</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>setupNewBuffer</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>returnBuffer</name><parameter_list>()</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>BQ</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>First</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>BQ</name><operator>-&gt;</operator><name>releaseBuffer</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>BQ</name><operator>-&gt;</operator><name>releaseBuffer</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BufferQueue</name><operator>::</operator><name>ErrorCode</name><operator>::</operator><name>Ok</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>PreambleResult</name> <block>{<block_content> <expr_stmt><expr><name>NoChange</name></expr><operator>,</operator> <expr><name>WroteMetadata</name></expr><operator>,</operator> <expr><name>InvalidBuffer</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<function><type><name>PreambleResult</name></type> <name>recordPreamble</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>LatestCPU</name> <operator>!=</operator> <name>CPU</name> <operator>||</operator> <name>LatestTSC</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LatestCPU</name> <operator>=</operator> <name>CPU</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>!=</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>W</name><operator>.</operator><name>writeMetadata</name></name><operator>&lt;</operator><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>NewCPUId</name><operator>&gt;</operator><operator>(</operator><name>CPU</name><operator>,</operator> <name>TSC</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>PreambleResult</name><operator>::</operator><name>WroteMetadata</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>LatestCPU</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>UNLIKELY</name><argument_list>(<argument>LatestTSC &gt; TSC ||
TSC - LatestTSC &gt;
uint64_t{std::numeric_limits&lt;int32_t&gt;::max()}</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>!=</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>W</name><operator>.</operator><name>writeMetadata</name></name><operator>&lt;</operator><name>MetadataRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>TSCWrap</name><operator>&gt;</operator><operator>(</operator><name>TSC</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>PreambleResult</name><operator>::</operator><name>WroteMetadata</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>PreambleResult</name><operator>::</operator><name>NoChange</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>rewindRecords</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>






<decl_stmt><decl><type><name>FunctionRecord</name></type> <name>F</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>W</name><operator>.</operator><name>undoWrites</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>!=</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><call><name><name>W</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>RecordKind</name></name> <operator>==</operator>
<call><name>uint8_t</name><argument_list>(<argument><expr><name>FunctionRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>FunctionEnter</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Expected to find function entry recording when rewinding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>FuncId</name></name></expr></argument>, <argument><expr><name>FuncId</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0x0F</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LatestTSC</name> <operator>-=</operator> <name><name>F</name><operator>.</operator><name>TSCDelta</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>UndoableFunctionEnters</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LastFunctionEntryTSC</name> <operator>-=</operator> <name><name>F</name><operator>.</operator><name>TSCDelta</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>LastFunctionEntryTSC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>RewindingTSC</name> <init>= <expr><name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>RewindingRecordPtr</name> <init>= <expr><call><name><name>W</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>UndoableTailExits</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>!=</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><name>RewindingRecordPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>RecordKind</name></name></expr></argument>,
<argument><expr><call><name>uint8_t</name><argument_list>(<argument><expr><name>FunctionRecord</name><operator>::</operator><name>RecordKinds</name><operator>::</operator><name>FunctionTailExit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RewindingTSC</name> <operator>-=</operator> <name><name>F</name><operator>.</operator><name>TSCDelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RewindingRecordPtr</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>.</operator><name>Generation</name></name> <operator>!=</operator> <call><name><name>BQ</name><operator>-&gt;</operator><name>generation</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><name>RewindingRecordPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>TSC</name> <operator>-</operator> <name>RewindingTSC</name><operator>)</operator> <operator>&gt;=</operator> <name>CycleThreshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>UndoableTailExits</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>W</name><operator>.</operator><name>undoWrites</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>RewindingTSC</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>WallClockFunc</name></expr></argument>&gt;</argument_list></name></type>
<name>FDRController</name><argument_list>(<argument><expr><name>BufferQueue</name> <operator>*</operator><name>BQ</name></expr></argument>, <argument><expr><name>BufferQueue</name><operator>::</operator><name>Buffer</name> <operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>FDRLogWriter</name> <operator>&amp;</operator><name>W</name></expr></argument>,
<argument><expr><name>WallClockFunc</name> <name>R</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>C</name></expr></argument>)</argument_list> <name>XRAY_NEVER_INSTRUMENT</name>
<range>: <expr><call><name>BQ</name><argument_list>(<argument><expr><name>BQ</name></expr></argument>)</argument_list></call></expr></range></decl>,
<decl><type ref="prev"/><name>B</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>W</name><argument_list>(<argument><expr><name>W</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>WallClockReader</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>CycleThreshold</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>functionEnter</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>PreambleStatus</name> <init>= <expr><call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>WroteMetadata</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>UndoableFunctionEnters</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LastFunctionEntryTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeFunction</name></name><argument_list>(<argument><expr><name>FDRLogWriter</name><operator>::</operator><name>FunctionRecordKind</name><operator>::</operator><name>Enter</name></expr></argument>,
<argument><expr><call><name>mask</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Delta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>functionTailExit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>PreambleStatus</name> <init>= <expr><call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>NoChange</name> <operator>&amp;&amp;</operator>
<name>UndoableFunctionEnters</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>TSC</name> <operator>-</operator> <name>LastFunctionEntryTSC</name> <operator>&lt;</operator> <name>CycleThreshold</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rewindRecords</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>, <argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <ternary><condition><expr><name>UndoableFunctionEnters</name></expr> ?</condition><then> <expr><name>UndoableTailExits</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeFunction</name></name><argument_list>(<argument><expr><name>FDRLogWriter</name><operator>::</operator><name>FunctionRecordKind</name><operator>::</operator><name>TailExit</name></expr></argument>,
<argument><expr><call><name>mask</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Delta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>functionEnterArg</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>Arg</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LastFunctionEntryTSC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeFunctionWithArg</name></name><argument_list>(<argument><expr><name>FDRLogWriter</name><operator>::</operator><name>FunctionRecordKind</name><operator>::</operator><name>EnterArg</name></expr></argument>,
<argument><expr><call><name>mask</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Delta</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>functionExit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>PreambleStatus</name> <init>= <expr><call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>PreambleStatus</name> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>NoChange</name> <operator>&amp;&amp;</operator>
<name>UndoableFunctionEnters</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>TSC</name> <operator>-</operator> <name>LastFunctionEntryTSC</name> <operator>&lt;</operator> <name>CycleThreshold</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rewindRecords</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>, <argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeFunction</name></name><argument_list>(<argument><expr><name>FDRLogWriter</name><operator>::</operator><name>FunctionRecordKind</name><operator>::</operator><name>Exit</name></expr></argument>, <argument><expr><call><name>mask</name><argument_list>(<argument><expr><name>FuncId</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Delta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>customEvent</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Event</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>EventSize</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>EventSize</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeCustomEvent</name></name><argument_list>(<argument><expr><name>Delta</name></expr></argument>, <argument><expr><name>Event</name></expr></argument>, <argument><expr><name>EventSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>typedEvent</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TSC</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>CPU</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>EventType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Event</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>EventSize</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>prepareBuffer</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>EventSize</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>recordPreamble</name><argument_list>(<argument><expr><name>TSC</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PreambleResult</name><operator>::</operator><name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>Delta</name> <init>= <expr><name>TSC</name> <operator>-</operator> <name>LatestTSC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LatestTSC</name> <operator>=</operator> <name>TSC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableFunctionEnters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>UndoableTailExits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name><name>W</name><operator>.</operator><name>writeTypedEvent</name></name><argument_list>(<argument><expr><name>Delta</name></expr></argument>, <argument><expr><name>EventType</name></expr></argument>, <argument><expr><name>Event</name></expr></argument>, <argument><expr><name>EventSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>flush</name><parameter_list>()</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>finalized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>returnBuffer</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
