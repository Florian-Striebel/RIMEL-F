<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerBuiltins.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_BUILTINS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_BUILTINS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerPlatform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LIBFUZZER_MSVC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_return_address(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>uint8_t</name></type> <name>Bswap</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>Bswap</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_bswap16</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>Bswap</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>Bswap</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>Clzll</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>int</name></type> <name>Popcountll</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
