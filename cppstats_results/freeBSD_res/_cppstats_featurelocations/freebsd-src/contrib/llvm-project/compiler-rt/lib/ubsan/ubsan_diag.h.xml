<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/ubsan/ubsan_diag.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UBSAN_DIAG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBSAN_DIAG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubsan_value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_symbolizer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__ubsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolizedStackHolder</name> <block>{<block_content>
<decl_stmt><decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>Stack</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Stack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Stack</name><operator>-&gt;</operator><name>ClearAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>SymbolizedStackHolder</name><argument_list>(<argument><expr><name>SymbolizedStack</name> <operator>*</operator><name>Stack</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Stack</name><argument_list>(<argument>Stack</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><macro><name>SymbolizedStackHolder</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>clear</name><argument_list>()</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>reset</name><argument_list>(<argument>SymbolizedStack *S</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Stack</name> <operator>!=</operator> <name>S</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>Stack</name> <operator>=</operator> <name>S</name></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>SymbolizedStack</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Stack</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>SymbolizedStack</name> <modifier>*</modifier></type><name>getSymbolizedLocation</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>PC</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>SymbolizedStack</name> <modifier>*</modifier></type><name>getCallerLocation</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>CallerPC</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>CallerPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>PC</name> <init>= <expr><name>StackTrace</name><operator>::</operator><call><name>GetPreviousInstructionPc</name><argument_list>(<argument><expr><name>CallerPC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>getSymbolizedLocation</name><argument_list>(<argument><expr><name>PC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><name>uptr</name></type> <name>MemoryLocation</name>;</typedef>



<decl_stmt><decl><type><name>class</name></type> <name>Location</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>LocationKind</name> <block>{ <decl><name>LK_Null</name></decl>, <decl><name>LK_Source</name></decl>, <decl><name>LK_Memory</name></decl>, <decl><name>LK_Symbolized</name></decl> }</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>LocationKind</name></type> <name>Kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>SourceLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryLocation</name></type> <name>MemoryLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SymbolizedStack</name> <modifier>*</modifier></type><name>SymbolizedLoc</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Location</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Kind</name><argument_list>(<argument>LK_Null</argument>)</argument_list></macro> <block>{}</block>
<macro><name>Location</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <operator>:</operator>
<call><name>Kind</name><argument_list>(<argument><expr><name>LK_Source</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SourceLoc</name><argument_list>(<argument>Loc</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>Location</name><argument_list>(<argument>MemoryLocation Loc</argument>)</argument_list></macro> <operator>:</operator>
<call><name>Kind</name><argument_list>(<argument><expr><name>LK_Memory</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>MemoryLoc</name><argument_list>(<argument>Loc</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>Location</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymbolizedStackHolder</name> <operator>&amp;</operator><name>Stack</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>Kind</name><argument_list>(<argument><expr><name>LK_Symbolized</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SymbolizedLoc</name><argument_list>(<argument>Stack.get()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>LocationKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSourceLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>LK_Source</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMemoryLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>LK_Memory</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSymbolizedStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>LK_Symbolized</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getSourceLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isSourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SourceLoc</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>MemoryLocation</name> <macro><name>getMemoryLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isMemoryLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MemoryLoc</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>SymbolizedStack</name> <operator>*</operator><macro><name>getSymbolizedStack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>isSymbolizedStack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SymbolizedLoc</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>DiagLevel</name> <block>{
<decl><name>DL_Error</name></decl>,
<decl><name>DL_Note</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>class</name></type> <name>Range</name> <block>{<block_content>
<decl_stmt><decl><type><name>Location</name></type> <name>Start</name></decl>, <decl><type ref="prev"/><name>End</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Text</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Range</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Start</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>End</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>Text</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<macro><name>Range</name><argument_list>(<argument>MemoryLocation Start</argument>, <argument>MemoryLocation End</argument>, <argument>const char *Text</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Start</name><argument_list>(<argument><expr><name>Start</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>End</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Text</name><argument_list>(<argument>Text</argument>)</argument_list></macro> <expr><block>{}</block>
<name>Location</name> <macro><name>getStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Start</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Location</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Text</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TypeName</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Name</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Name</name><argument_list>(<argument>Name</argument>)</argument_list></macro> <block>{}</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Name</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ErrorType</name> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBSAN_CHECK</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>SummaryKind</name></type></parameter>, <parameter><type><name>FSanitizeFlagName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubsan_checks.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UBSAN_CHECK</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>Diag</name> <block>{<block_content>

<decl_stmt><decl><type><name>Location</name></type> <name>Loc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DiagLevel</name></type> <name>Level</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ErrorType</name></type> <name>ET</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Message</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <name>ArgKind</name> <block>{
<decl><name>AK_String</name></decl>,
<decl><name>AK_TypeName</name></decl>,
<decl><name>AK_UInt</name></decl>,
<decl><name>AK_SInt</name></decl>,
<decl><name>AK_Float</name></decl>,
<decl><name>AK_Pointer</name></decl>
}</block>;</enum>


<struct>struct <name>Arg</name> <block>{
<macro><name>Arg</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>Arg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>String</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_String</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>String</name><argument_list>(<argument>String</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>Arg</name><argument_list>(<argument>TypeName TN</argument>)</argument_list></macro> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_TypeName</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>String</name><argument_list>(<argument>TN.getName()</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>Arg</name><argument_list>(<argument>UIntMax UInt</argument>)</argument_list></macro> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_UInt</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>UInt</name><argument_list>(<argument>UInt</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>Arg</name><argument_list>(<argument>SIntMax SInt</argument>)</argument_list></macro> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_SInt</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SInt</name><argument_list>(<argument>SInt</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>Arg</name><argument_list>(<argument>FloatMax Float</argument>)</argument_list></macro> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_Float</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Float</name><argument_list>(<argument>Float</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>Arg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>Pointer</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>AK_Pointer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Pointer</name><argument_list>(<argument>Pointer</argument>)</argument_list></macro> <expr><block>{}</block>

<name>ArgKind</name> <name>Kind</name></expr>;</expr_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>String</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UIntMax</name></type> <name>UInt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIntMax</name></type> <name>SInt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FloatMax</name></type> <name>Float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Pointer</name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MaxArgs</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MaxRanges</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Arg</name></type> <name><name>Args</name><index>[<expr><name>MaxArgs</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Range</name></type> <name><name>Ranges</name><index>[<expr><name>MaxRanges</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumRanges</name></decl>;</decl_stmt>

<function><type><name>Diag</name> <modifier>&amp;</modifier></type><name>AddArg</name><parameter_list>(<parameter><decl><type><name>Arg</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>NumArgs</name> <operator>!=</operator> <name>MaxArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Args</name><index>[<expr><name>NumArgs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Diag</name> <modifier>&amp;</modifier></type><name>AddRange</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>NumRanges</name> <operator>!=</operator> <name>MaxRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ranges</name><index>[<expr><name>NumRanges</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>Diag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Diag</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Diag</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Diag</name> <operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>Diag</name><argument_list>(<argument>Location Loc</argument>, <argument>DiagLevel Level</argument>, <argument>ErrorType ET</argument>, <argument>const char *Message</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Level</name><argument_list>(<argument><expr><name>Level</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ET</name><argument_list>(<argument><expr><name>ET</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Message</name><argument_list>(<argument><expr><name>Message</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NumArgs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>NumRanges</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><call><name>Diag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Str</name><operator>)</operator> <block>{ <return>return <expr><call><name>AddArg</name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>TypeName</name> <name>TN</name><operator>)</operator> <block>{ <return>return <expr><call><name>AddArg</name><argument_list>(<argument><expr><name>TN</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>V</name><operator>)</operator> <block>{ <return>return <expr><call><name>AddArg</name><argument_list>(<argument><expr><call><name>UIntMax</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><name>V</name><operator>)</operator> <block>{ <return>return <expr><call><name>AddArg</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>TypeDescriptor</name> <operator>&amp;</operator><name>V</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Value</name> <operator>&amp;</operator><name>V</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{ <return>return <expr><call><name>AddRange</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ReportOptions</name> <block>{


<decl_stmt><decl><type><name>bool</name></type> <name>FromUnrecoverableHandler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>bp</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>ignoreReport</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SLoc</name></decl></parameter>, <parameter><decl><type><name>ReportOptions</name></type> <name>Opts</name></decl></parameter>, <parameter><decl><type><name>ErrorType</name></type> <name>ET</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_REPORT_OPTIONS</name><parameter_list>(<parameter><type><name>unrecoverable_handler</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_CALLER_PC_BP; ReportOptions Opts = {unrecoverable_handler, pc, bp}</cpp:value></cpp:define>






<decl_stmt><decl><type><name>class</name></type> <name>ScopedReport</name> <block>{<block_content>
<struct>struct <name>Initializer</name> <block>{
<expr_stmt><expr><call><name>Initializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>Initializer</name></type> <name>initializer_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScopedErrorReportLock</name></type> <name>report_lock_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ReportOptions</name></type> <name>Opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Location</name></type> <name>SummaryLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ErrorType</name></type> <name>Type</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ScopedReport</name><argument_list>(<argument>ReportOptions Opts</argument>, <argument>Location SummaryLoc</argument>, <argument>ErrorType Type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ScopedReport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckLocked</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ScopedErrorReportLock</name><operator>::</operator><call><name>CheckLocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>InitializeSuppressions</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsVptrCheckSuppressed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TypeName</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>IsPCSuppressed</name><parameter_list>(<parameter><decl><type><name>ErrorType</name></type> <name>ET</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>PC</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name></decl></parameter>)</parameter_list>;</function_decl>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
