<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_sync.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_SYNC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_SYNC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_deadlock_detector_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_dense_alloc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>



<enum>enum <name>MutexFlags</name> <block>{
<decl><name>MutexFlagLinkerInit</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>MutexFlagWriteReentrant</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>MutexFlagReadReentrant</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>MutexFlagReadLock</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>MutexFlagTryLock</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>MutexFlagTryLockFailed</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>MutexFlagRecursiveLock</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>MutexFlagRecursiveUnlock</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>MutexFlagNotStatic</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,



<decl><name>MutexFlagBroken</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>,

<decl><name>MutexFlagDoPreLockOnPostLock</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>,

<decl><name>MutexCreationFlagMask</name> <init>= <expr><name>MutexFlagLinkerInit</name> <operator>|</operator>
<name>MutexFlagWriteReentrant</name> <operator>|</operator>
<name>MutexFlagReadReentrant</name> <operator>|</operator>
<name>MutexFlagNotStatic</name></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>SyncVar</name> <block>{
<expr_stmt><expr><call><name>SyncVar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mutex</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>creation_stack_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>owner_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>last_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recursion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDMutex</name></type> <name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SyncClock</name></type> <name>read_clock</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SyncClock</name></type> <name>clock</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>u64</name> <macro><name>GetId</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name>GetLsb</name><argument_list>(<argument><expr><operator>(</operator><name>u64</name><operator>)</operator><name>addr</name> <operator>|</operator> <operator>(</operator><name>uid</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckId</name><argument_list>(<argument><expr><name>u64</name> <name>uid</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>GetLsb</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>GetLsb</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>uid</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>uptr</name></type> <name>SplitId</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <name>id</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>GetLsb</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>IsFlagSet</name><argument_list>(<argument><expr><name>u32</name> <name>f</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>f</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetFlags</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateFlags</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>flagz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flagz</name> <operator>&amp;</operator> <name>MutexCreationFlagMask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>current</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&amp;</operator> <name>MutexCreationFlagMask</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>current</name> <operator>|</operator> <operator>(</operator><name>flagz</name> <operator>&amp;</operator> <name>MutexCreationFlagMask</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>MetaMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MetaMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>AllocBlock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>FreeBlock</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>FreeRange</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResetRange</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MBlock</name><modifier>*</modifier></type> <name>GetBlock</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SyncVar</name><modifier>*</modifier></type> <name>GetOrCreateAndLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write_lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SyncVar</name><modifier>*</modifier></type> <name>GetIfExistsAndLock</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write_lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MoveMemory</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>OnProcIdle</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kFlagMask</name> <init>= <expr><literal type="number">3u</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kFlagBlock</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kFlagSync</name> <init>= <expr><literal type="number">2u</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>DenseSlabAlloc</name><argument_list type="generic">&lt;<argument><expr><name>MBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>kFlagMask</name></expr></argument>&gt;</argument_list></name></type> <name>BlockAlloc</name>;</typedef>
<typedef>typedef <type><name><name>DenseSlabAlloc</name><argument_list type="generic">&lt;<argument><expr><name>SyncVar</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>kFlagMask</name></expr></argument>&gt;</argument_list></name></type> <name>SyncAlloc</name>;</typedef>
<decl_stmt><decl><type><name>BlockAlloc</name></type> <name>block_alloc_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SyncAlloc</name></type> <name>sync_alloc_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint64_t</name></type> <name>uid_gen_</name></decl>;</decl_stmt>

<function_decl><type><name>SyncVar</name><modifier>*</modifier></type> <name>GetAndLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write_lock</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
