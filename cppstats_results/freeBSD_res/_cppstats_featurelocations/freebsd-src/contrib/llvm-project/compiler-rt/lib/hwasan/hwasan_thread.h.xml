<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_thread.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_ring_buffer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name><name>CompactRingBuffer</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name> <name>StackAllocationsRingBuffer</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>Thread</name> <block>{<block_content>
<label><name>public</name>:</label>

<struct_decl>struct <name>InitState</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_buffer_start</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_buffer_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InitState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitRandomState</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitStackAndTls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InitState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>InitStackRingBuffer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_buffer_start</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>uptr</name></type> <name>stack_top</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>stack_top_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>stack_bottom</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>stack_bottom_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>stack_size</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>stack_top</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>stack_bottom</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>tls_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_begin_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>tls_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_end_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>IsMainThread</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>unique_id_</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>AddrIsInStack</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>addr</name> <operator>&gt;=</operator> <name>stack_bottom_</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>stack_top_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>allocator_cache</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>allocator_cache_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>HeapAllocationsRingBuffer</name> <modifier>*</modifier></type><name>heap_allocations</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>heap_allocations_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>StackAllocationsRingBuffer</name> <modifier>*</modifier></type><name>stack_allocations</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>stack_allocations_</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>tag_t</name></type> <name>GenerateRandomTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>num_bits</name> <init>= <expr><name>kTagBits</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>DisableTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>tagging_disabled_</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>EnableTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>tagging_disabled_</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>u64</name> <macro><name>unique_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>unique_id_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>Announce</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>announced_</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>announced_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Print</name><argument_list>(<argument><expr><literal type="string">"Thread: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uptr</name> <modifier>&amp;</modifier></type><name>vfork_spill</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>vfork_spill_</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>


<function_decl><type><name>void</name></type> <name>ClearShadowForThreadStackAndTLS</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uptr</name></type> <name>vfork_spill_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>stack_top_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>stack_bottom_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tls_begin_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tls_end_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>random_state_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>random_buffer_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AllocatorCache</name></type> <name>allocator_cache_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HeapAllocationsRingBuffer</name> <modifier>*</modifier></type><name>heap_allocations_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackAllocationsRingBuffer</name> <modifier>*</modifier></type><name>stack_allocations_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name>unique_id_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>tagging_disabled_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>announced_</name></decl>;</decl_stmt>

<macro><name>friend</name></macro> <struct_decl>struct <name>ThreadListHead</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>Thread</name> <modifier>*</modifier></type><name>GetCurrentThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name> <modifier>*</modifier></type><name>GetCurrentThreadLongPtr</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>ScopedTaggingDisabler</name> <block>{
<macro><name>ScopedTaggingDisabler</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>GetCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>DisableTagging</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedTaggingDisabler</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>GetCurrentThread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>EnableTagging</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
