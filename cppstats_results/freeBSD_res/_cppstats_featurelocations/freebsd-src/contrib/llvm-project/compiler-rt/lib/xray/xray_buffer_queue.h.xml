<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_buffer_queue.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_BUFFER_QUEUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_BUFFER_QUEUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>






<decl_stmt><decl><type><name>class</name></type> <name>BufferQueue</name> <block>{<block_content>
<label><name>public</name>:</label>









<struct>struct <name>ControlBlock</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>atomic_uint64_t</name></type> <name>RefCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr><name>kCacheLineSize</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>




<decl_stmt><decl><type><name>char</name></type> <name><name>Data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Buffer</name> <block>{
<decl_stmt><decl><type><name>atomic_uint64_t</name> <modifier>*</modifier></type><name>Extents</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Generation</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>BufferQueue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ControlBlock</name> <modifier>*</modifier></type><name>BackingStore</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ControlBlock</name> <modifier>*</modifier></type><name>ExtentsBackingStore</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>BufferRep</name> <block>{

<decl_stmt><decl><type><name>Buffer</name></type> <name>Buff</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<label><name>private</name>:</label>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Iterator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>BufferRep</name> <modifier>*</modifier></type><name>Buffers</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>, <argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;
<do>do <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>Offset</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> while (!Buffers[Offset].Used &amp;&amp; Offset != Max</block></do>)</block></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>Iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>Iterator</name> <name>C</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
<return>return <expr><name>C</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>T</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Buffers</name><index>[<expr><name>Offset</name></expr>]</index></name><operator>.</operator><name>Buff</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>T</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>Buffers</name><index>[<expr><name>Offset</name></expr>]</index></name><operator>.</operator><name>Buff</name><operator>)</operator></expr>;</return> </block_content>}</block>

Iterator(BufferRep *Root</block></decl>, <decl><type ref="prev"/><name>size_t</name> <name>O</name></decl>, <decl><type ref="prev"/><name>size_t</name> <name>M</name></decl>) XRAY_NEVER_INSTRUMENT
: Buffers(Root</decl_stmt>)</block_content></block></decl>,
<decl><type ref="prev"/><name>Offset</name><argument_list>(<argument><expr><name>O</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>Max</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list> <block>{<block_content>


<while>while <condition>(<expr><operator>!</operator><name><name>Buffers</name><index>[<expr><name>Offset</name></expr>]</index></name><operator>.</operator><name>Used</name> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>!=</operator> <name>Max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>Offset</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><call><name>Iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Iterator</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Iterator</name><argument_list>(<argument><expr><name>Iterator</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>Iterator</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Iterator</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Iterator</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>Iterator</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Iterator</name> <operator>&amp;</operator><name>L</name><operator>,</operator> <specifier>const</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{
<expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>L</name><operator>.</operator><name>Max</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>Max</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>L</name><operator>.</operator><name>Buffers</name></name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>Buffers</name></name> <operator>&amp;&amp;</operator> <name><name>L</name><operator>.</operator><name>Offset</name></name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>Offset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Iterator</name> <operator>&amp;</operator><name>L</name><operator>,</operator> <specifier>const</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>R</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>L</name> <operator>==</operator> <name>R</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
};


<decl_stmt><decl><type><name>size_t</name></type> <name>BufferSize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>BufferCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpinMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint8_t</name></type> <name>Finalizing</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ControlBlock</name> <modifier>*</modifier></type><name>BackingStore</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ControlBlock</name> <modifier>*</modifier></type><name>ExtentsBackingStore</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BufferRep</name> <modifier>*</modifier></type><name>Buffers</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>BufferRep</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>BufferRep</name> <modifier>*</modifier></type><name>First</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>LiveBuffers</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>atomic_uint64_t</name></type> <name>Generation</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>cleanupBuffers</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ErrorCode</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>Ok</name></expr>,
<expr><name>NotEnoughMemory</name></expr>,
<expr><name>QueueFinalizing</name></expr>,
<expr><name>UnrecognizedBuffer</name></expr>,
<expr><name>AlreadyFinalized</name></expr>,
<expr><name>AlreadyInitialized</name></expr>,
}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getErrorString</name><parameter_list>(<parameter><decl><type><name>ErrorCode</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>E</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>Ok</name></expr>:</case>
<return>return <expr><literal type="string">"(none)"</literal></expr>;</return>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>NotEnoughMemory</name></expr>:</case>
<return>return <expr><literal type="string">"no available buffers in the queue"</literal></expr>;</return>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>QueueFinalizing</name></expr>:</case>
<return>return <expr><literal type="string">"queue already finalizing"</literal></expr>;</return>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>UnrecognizedBuffer</name></expr>:</case>
<return>return <expr><literal type="string">"buffer being returned not owned by buffer queue"</literal></expr>;</return>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>AlreadyFinalized</name></expr>:</case>
<return>return <expr><literal type="string">"queue already finalized"</literal></expr>;</return>
<case>case <expr><name>ErrorCode</name><operator>::</operator><name>AlreadyInitialized</name></expr>:</case>
<return>return <expr><literal type="string">"queue already initialized"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="string">"unknown error"</literal></expr>;</return>
</block_content>}</block></function>



<macro><name>BufferQueue</name><argument_list>(<argument>size_t B</argument>, <argument>size_t N</argument>, <argument>bool &amp;Success</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>













<function_decl><type><name>ErrorCode</name></type> <name>getBuffer</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>ErrorCode</name></type> <name>releaseBuffer</name><parameter_list>(<parameter><decl><type><name>Buffer</name> <modifier>&amp;</modifier></type><name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>ErrorCode</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>BS</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>BC</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>finalizing</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Finalizing</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>generation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Generation</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>ConfiguredBufferSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BufferSize</name></expr>;</return> }</block></expr></expr_stmt>








<function_decl><type><name>ErrorCode</name></type> <name>finalize</name><parameter_list>()</parameter_list>;</function_decl>




<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>F</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>Fn</name></decl></parameter>)</parameter_list> XRAY_NEVER_INSTRUMENT <block>{<block_content>
<decl_stmt><decl><type><name>SpinMutexLock</name></type> <name>G</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Fn</name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name><name>Iterator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Buffer</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name><name>Iterator</name><argument_list type="generic">&lt;<argument><expr><name>Buffer</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>Buffers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>cbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><name>Buffers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>Buffers</name></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>cend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><name>Buffers</name></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>, <argument><expr><name>BufferCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>BufferQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
