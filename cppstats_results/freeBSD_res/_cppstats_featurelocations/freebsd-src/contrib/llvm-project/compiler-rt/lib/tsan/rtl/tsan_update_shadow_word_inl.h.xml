<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_update_shadow_word_inl.h">













<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kAccessSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kAccessSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>&amp;</operator><name><name>shadow_mem</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>LoadShadow</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>IsZero</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stored</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StoreIfNotYetStored</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stored</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>Shadow</name><operator>::</operator><call><name>Addr0AndSizeAreEqual</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>Shadow</name><operator>::</operator><call><name>TidsAreEqual</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>IsRWWeakerOrEqual</name></name><argument_list>(<argument><expr><name>kAccessIsWrite</name></expr></argument>, <argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StoreIfNotYetStored</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stored</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HappensBefore</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>old</name><operator>.</operator><name>IsRWWeakerOrEqual</name></name><argument_list>(<argument><expr><name>kAccessIsWrite</name></expr></argument>, <argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>StoreIfNotYetStored</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stored</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>IsBothReadsOrAtomic</name></name><argument_list>(<argument><expr><name>kAccessIsWrite</name></expr></argument>, <argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>RACE</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Shadow</name><operator>::</operator><call><name>TwoRangesIntersect</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>kAccessSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Shadow</name><operator>::</operator><call><name>TidsAreEqual</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>old</name><operator>.</operator><name>IsBothReadsOrAtomic</name></name><argument_list>(<argument><expr><name>kAccessIsWrite</name></expr></argument>, <argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>HappensBefore</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>RACE</name>;</goto>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</unit>
