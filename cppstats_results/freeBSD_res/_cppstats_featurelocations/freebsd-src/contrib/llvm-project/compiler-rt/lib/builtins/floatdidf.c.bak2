











#include "int_lib.h"









#ifndef __SOFTFP__



COMPILER_RT_ABI double __floatdidf(di_int a) {
  static const double twop52 = 4503599627370496.0; 
  static const double twop32 = 4294967296.0;       

  union {
    int64_t x;
    double d;
  } low = {.d = twop52};

  const double high = (int32_t)(a >> 32) * twop32;
  low.x |= a & INT64_C(0x00000000ffffffff);

  const double result = (high - twop52) + low.d;
  return result;
}

#else




COMPILER_RT_ABI double __floatdidf(di_int a) {
  if (a == 0)
    return 0.0;
  const unsigned N = sizeof(di_int) * CHAR_BIT;
  const di_int s = a >> (N - 1);
  a = (a ^ s) - s;
  int sd = N - __builtin_clzll(a); 
  int e = sd - 1;                  
  if (sd > DBL_MANT_DIG) {
    
    
    
    
    
    
    
    switch (sd) {
    case DBL_MANT_DIG + 1:
      a <<= 1;
      break;
    case DBL_MANT_DIG + 2:
      break;
    default:
      a = ((du_int)a >> (sd - (DBL_MANT_DIG + 2))) |
          ((a & ((du_int)(-1) >> ((N + DBL_MANT_DIG + 2) - sd))) != 0);
    };
    
    a |= (a & 4) != 0; 
    ++a;               
    a >>= 2;           
    
    if (a & ((du_int)1 << DBL_MANT_DIG)) {
      a >>= 1;
      ++e;
    }
    
  } else {
    a <<= (DBL_MANT_DIG - sd);
    
  }
  double_bits fb;
  fb.u.s.high = ((su_int)s & 0x80000000) |        
                ((su_int)(e + 1023) << 20) |      
                ((su_int)(a >> 32) & 0x000FFFFF); 
  fb.u.s.low = (su_int)a;                         
  return fb.f;
}
#endif

#if defined(__ARM_EABI__)
#if defined(COMPILER_RT_ARMHF_TARGET)
AEABI_RTABI double __aeabi_l2d(di_int a) { return __floatdidf(a); }
#else
COMPILER_RT_ALIAS(__floatdidf, __aeabi_l2d)
#endif
#endif
