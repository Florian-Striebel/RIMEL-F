<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_mapping.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_MAPPING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_MAPPING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_interface_internal.h"</cpp:file></cpp:include>


















<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kShadowScale</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kShadowAlignment</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kShadowScale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kLowMemStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kLowMemEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kLowShadowEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kLowShadowStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighShadowStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighShadowEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighMemStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uptr</name></type> <name>kHighMemEnd</name></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>GetShadowOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>SANITIZER_FUCHSIA</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>__hwasan_shadow_memory_dynamic_address</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>untagged_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>untagged_addr</name> <operator>&gt;&gt;</operator> <name>kShadowScale</name><operator>)</operator> <operator>+</operator> <call><name>GetShadowOffset</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>ShadowToMem</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>shadow_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>shadow_addr</name> <operator>-</operator> <call><name>GetShadowOffset</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>kShadowScale</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>MemToShadowSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>size</name> <operator>&gt;&gt;</operator> <name>kShadowScale</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>MemIsApp</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>MemIsShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>kLowShadowStart</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>kLowShadowEnd</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>kHighShadowStart</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>kHighShadowEnd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>uptr</name></type> <name>GetAliasRegionStart</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
