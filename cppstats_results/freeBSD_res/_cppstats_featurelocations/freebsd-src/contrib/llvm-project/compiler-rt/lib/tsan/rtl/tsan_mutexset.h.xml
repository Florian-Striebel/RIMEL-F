<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_mutexset.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_MUTEXSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_MUTEXSET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MutexSet</name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxSize</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Desc</name> <block>{
<decl_stmt><decl><type><name>u64</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>write</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>MutexSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>epoch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Del</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>uptr</name> <macro><name>Size</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Desc</name></type> <name>Get</name><argument_list>(<argument><expr><name>uptr</name> <name>i</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MutexSet</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <block>{
<expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<name>uptr</name> <name>size_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Desc</name></type> <name><name>descs_</name><index>[<expr><name>kMaxSize</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>RemovePos</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>MutexSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MutexSet</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_GO</name></expr></cpp:if>
<expr_stmt><expr><name>MutexSet</name><operator>::</operator><macro><name>MutexSet</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>void</name> <name>MutexSet</name><operator>::</operator><macro><name>Add</name><argument_list>(<argument>u64 id</argument>, <argument>bool write</argument>, <argument>u64 epoch</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <name>MutexSet</name><operator>::</operator><macro><name>Del</name><argument_list>(<argument>u64 id</argument>, <argument>bool write</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <name>MutexSet</name><operator>::</operator><macro><name>Remove</name><argument_list>(<argument>u64 id</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <name>MutexSet</name><operator>::</operator><macro><name>RemovePos</name><argument_list>(<argument>uptr i</argument>)</argument_list></macro> <block>{}</block>
<name>uptr</name> <name>MutexSet</name><operator>::</operator><macro><name>Size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>MutexSet</name><operator>::</operator><name>Desc</name> <name>MutexSet</name><operator>::</operator><macro><name>Get</name><argument_list>(<argument>uptr i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Desc</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
