<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_asm.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GCC_HAVE_DWARF2_CFI_ASM</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_INL_ADJUST_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>".cfi_adjust_cfa_offset " #n ";"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_STARTPROC</name></cpp:macro> <cpp:value>.cfi_startproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_ENDPROC</name></cpp:macro> <cpp:value>.cfi_endproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_ADJUST_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_adjust_cfa_offset n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_def_cfa_offset n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_REL_OFFSET</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_rel_offset reg, n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_OFFSET</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_offset reg, n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA_REGISTER</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_def_cfa_register reg</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_def_cfa reg, n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_RESTORE</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.cfi_restore reg</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_INL_ADJUST_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_STARTPROC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_ENDPROC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_ADJUST_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA_OFFSET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_REL_OFFSET</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_OFFSET</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA_REGISTER</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_DEF_CFA</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFI_RESTORE</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_HIDDEN</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.hidden symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_TYPE_FUNCTION</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.type symbol, %function</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SIZE</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.size symbol, .-symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SYMBOL</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SYMBOL_INTERCEPTOR</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_WRAPPER_NAME</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__interceptor_##symbol</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_HIDDEN</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_TYPE_FUNCTION</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SIZE</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SYMBOL</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_##symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SYMBOL_INTERCEPTOR</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_wrap_##symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_WRAPPER_NAME</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__interceptor_##symbol</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__Fuchsia__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_EXEC_STACK_DIRECTIVE</name></cpp:macro> <cpp:value>.section .note.GNU-stack,"",%progbits</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_EXEC_STACK_DIRECTIVE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
