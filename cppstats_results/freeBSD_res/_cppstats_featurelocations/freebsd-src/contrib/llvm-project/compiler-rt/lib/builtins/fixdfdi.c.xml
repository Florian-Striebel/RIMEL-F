<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/fixdfdi.c">







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_PRECISION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fp_lib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SOFTFP__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function_decl><type><name>COMPILER_RT_ABI</name> <name>du_int</name></type> <name>__fixunsdfdi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>COMPILER_RT_ABI</name> <name>di_int</name></type> <name>__fixdfdi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><call><name>__fixunsdfdi</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>__fixunsdfdi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<typedef>typedef <type><name>di_int</name></type> <name>fixint_t</name>;</typedef>
<typedef>typedef <type><name>du_int</name></type> <name>fixuint_t</name>;</typedef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fp_fixint_impl.inc"</cpp:file></cpp:include>

<function><type><name>COMPILER_RT_ABI</name> <name>di_int</name></type> <name>__fixdfdi</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__fixint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_ARMHF_TARGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AEABI_RTABI</name> <name>di_int</name></type> <name>__aeabi_d2lz</name><parameter_list>(<parameter><decl><type><name>fp_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__fixdfdi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__fixdfdi</argument>, <argument>__aeabi_d2lz</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
