<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_rtl.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_RTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_RTL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_deadlock_detector_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_libignore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_suppressions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_thread_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_mman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_report.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_mutexset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_ignoreset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_stack_trace.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>!=</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ThreadSanitizer is supported only on 64-bit platforms"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<struct_decl>struct <name>MapUnmapCallback</name>;</struct_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>AP32</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kSpaceSize</name> <init>= <expr><name>SANITIZER_MMAP_RANGE_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>CompactSizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kRegionSizeLog</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>__tsan</name><operator>::</operator><name>MapUnmapCallback</name> <name>MapUnmapCallback</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name>AP32</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryAllocator</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>AP64</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceBeg</name> <init>= <expr><name>Mapping</name><operator>::</operator><name>kHeapMemBeg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kSpaceSize</name> <init>= <expr><name>Mapping</name><operator>::</operator><name>kHeapMemEnd</name> <operator>-</operator> <name>Mapping</name><operator>::</operator><name>kHeapMemBeg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMetadataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>__tsan</name><operator>::</operator><name>MapUnmapCallback</name> <name>MapUnmapCallback</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>LocalAddressSpaceView</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name>AP64</name></expr></argument>&gt;</argument_list></name></type> <name>PrimaryAllocator</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name>PrimaryAllocator</name></expr></argument>&gt;</argument_list></name></type> <name>Allocator</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>Allocator</name><operator>::</operator><name>AllocatorCache</name> <name>AllocatorCache</name></expr>;</expr_stmt></typedef>
<function_decl><type><name>Allocator</name> <modifier>*</modifier></type><name>allocator</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>u64</name></type> <name>kShadowRodata</name> <init>= <expr><operator>(</operator><name>u64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>FastState</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FastState</name><argument_list>(<argument>u64 tid</argument>, <argument>u64 epoch</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>x_</name> <operator>=</operator> <name>tid</name> <operator>&lt;&lt;</operator> <name>kTidShift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_</name> <operator>|=</operator> <name>epoch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>tid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>epoch</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>epoch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>GetIgnoreBit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>explicit</name></macro> <macro><name>FastState</name><argument_list>(<argument>u64 x</argument>)</argument_list></macro>
: <macro><name>x_</name><argument_list>(<argument>x</argument>)</argument_list></macro> <block>{<block_content>
</block_content>}</block>

<expr_stmt><expr><name>u64</name> <macro><name>raw</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>x_</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>u64</name> <macro><name>tid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>u64</name> <name>res</name> <operator>=</operator> <operator>(</operator><name>x_</name> <operator>&amp;</operator> <operator>~</operator><name>kIgnoreBit</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>kTidShift</name></expr>;
<return>return <expr><name>res</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>u64</name> <macro><name>TidWithIgnore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>u64</name> <name>res</name> <operator>=</operator> <name>x_</name> <operator>&gt;&gt;</operator> <name>kTidShift</name></expr>;
<return>return <expr><name>res</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>u64</name> <macro><name>epoch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>u64</name> <name>res</name> <operator>=</operator> <name>x_</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kClkBits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;
<return>return <expr><name>res</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>IncrementEpoch</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>old_epoch</name> <init>= <expr><call><name>epoch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x_</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>old_epoch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>epoch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>old_epoch</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetIgnoreBit</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>x_</name> <operator>|=</operator> <name>kIgnoreBit</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>ClearIgnoreBit</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>x_</name> <operator>&amp;=</operator> <operator>~</operator><name>kIgnoreBit</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>GetIgnoreBit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>s64</name><operator>)</operator><name>x_</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetHistorySize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x_</name> <operator>=</operator> <operator>(</operator><name>x_</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kHistoryMask</name> <operator>&lt;&lt;</operator> <name>kHistoryShift</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>kHistoryShift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>ALWAYS_INLINE</name>
<name>int</name> <macro><name>GetHistorySize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <name>kHistoryShift</name><operator>)</operator> <operator>&amp;</operator> <name>kHistoryMask</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>ClearHistorySize</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SetHistorySize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>ALWAYS_INLINE</name>
<name>u64</name> <macro><name>GetTracePos</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>int</name> <name>hs</name> <operator>=</operator> <call><name>GetHistorySize</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>u64</name> <name>mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>kTracePartSizeBits</name> <operator>+</operator> <name>hs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;
<return>return <expr><call><name>epoch</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kTidShift</name> <init>= <expr><literal type="number">64</literal> <operator>-</operator> <name>kTidBits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kIgnoreBit</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kFreedBit</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kHistoryShift</name> <init>= <expr><name>kClkBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kHistoryMask</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>x_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>Shadow</name> <range>: <expr><name>public</name> <name>FastState</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>Shadow</name><argument_list>(<argument>u64 x</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>FastState</name><argument_list>(<argument>x</argument>)</argument_list></macro> <block>{
}</block>

<name>explicit</name> <call><name>Shadow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FastState</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>FastState</name><argument_list>(<argument>s.x_</argument>)</argument_list></macro> <block>{
<expr><call><name>ClearHistorySize</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>SetAddr0AndSizeLog</name><argument_list>(<argument>u64 addr0</argument>, <argument>unsigned kAccessSizeLog</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <name>kClkBits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>addr0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>x_</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>kAccessSizeLog</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>addr0</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>kClkBits</name></expr>;
<expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><call><name>size_log</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>addr0</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>addr0</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>SetWrite</name><argument_list>(<argument>unsigned kAccessIsWrite</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>x_</name> <operator>&amp;</operator> <name>kReadBit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kAccessIsWrite</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x_</name> <operator>|=</operator> <name>kReadBit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>kAccessIsWrite</name></expr></argument>, <argument><expr><call><name>IsWrite</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
}</block>

<name>void</name> <macro><name>SetAtomic</name><argument_list>(<argument>bool kIsAtomic</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>kIsAtomic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x_</name> <operator>|=</operator> <name>kAtomicBit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>IsAtomic</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAtomic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>x_</name> <operator>&amp;</operator> <name>kAtomicBit</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>x_</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>TidsAreEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>shifted_xor</name> <init>= <expr><operator>(</operator><name><name>s1</name><operator>.</operator><name>x_</name></name> <operator>^</operator> <name><name>s2</name><operator>.</operator><name>x_</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>kTidShift</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>shifted_xor</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s1</name><operator>.</operator><name>TidWithIgnore</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>TidWithIgnore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>shifted_xor</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALWAYS_INLINE</name>
<name>bool</name></type> <name>Addr0AndSizeAreEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>masked_xor</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s1</name><operator>.</operator><name>x_</name></name> <operator>^</operator> <name><name>s2</name><operator>.</operator><name>x_</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>kClkBits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>masked_xor</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ALWAYS_INLINE</name> <name>bool</name></type> <name>TwoRangesIntersect</name><parameter_list>(<parameter><decl><type><name>Shadow</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>Shadow</name></type> <name>s2</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>kS2AccessSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>diff</name> <init>= <expr><call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s64</name><operator>)</operator><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <operator>-</operator><name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kS2AccessSize</name> <operator>&gt;</operator> <name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>TwoRangesIntersectSlow</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>TwoRangesIntersectSlow</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>u64</name> <name>ALWAYS_INLINE</name> <macro><name>addr0</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <name>kClkBits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>u64</name> <name>ALWAYS_INLINE</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <call><name>size_log</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>ALWAYS_INLINE</name> <macro><name>IsWrite</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>IsRead</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>ALWAYS_INLINE</name> <macro><name>IsRead</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>x_</name> <operator>&amp;</operator> <name>kReadBit</name></expr>;</return> }</block></expr></expr_stmt>










<function><type><name>void</name></type> <name>MarkAsFreed</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>x_</name> <operator>|=</operator> <name>kFreedBit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsFreed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>x_</name> <operator>&amp;</operator> <name>kFreedBit</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>bool</name></type> <name>GetFreedAndReset</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>x_</name> <operator>&amp;</operator> <name>kFreedBit</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x_</name> <operator>&amp;=</operator> <operator>~</operator><name>kFreedBit</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name> <name>ALWAYS_INLINE</name></type> <name>IsBothReadsOrAtomic</name><argument_list>(<argument><expr><name>bool</name> <name>kIsWrite</name></expr></argument>, <argument><expr><name>bool</name> <name>kIsAtomic</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>v</name> <init>= <expr><name>x_</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>kIsWrite</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>kReadShift</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>kIsAtomic</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>kAtomicShift</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><call><name>IsWrite</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>kIsWrite</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>kIsAtomic</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>ALWAYS_INLINE</name></type> <name>IsRWNotWeaker</name><argument_list>(<argument><expr><name>bool</name> <name>kIsWrite</name></expr></argument>, <argument><expr><name>bool</name> <name>kIsAtomic</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <name>kReadShift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator>
<operator>&lt;=</operator> <call><name>u64</name><argument_list>(<argument><expr><operator>(</operator><name>kIsWrite</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kIsAtomic</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>kIsAtomic</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kIsAtomic</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsWrite</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <operator>!</operator><name>kIsWrite</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>ALWAYS_INLINE</name></type> <name>IsRWWeakerOrEqual</name><argument_list>(<argument><expr><name>bool</name> <name>kIsWrite</name></expr></argument>, <argument><expr><name>bool</name> <name>kIsAtomic</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <name>kReadShift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator>
<operator>&gt;=</operator> <call><name>u64</name><argument_list>(<argument><expr><operator>(</operator><name>kIsWrite</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kIsAtomic</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>kIsAtomic</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>IsAtomic</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kIsAtomic</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsWrite</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <operator>!</operator><name>kIsWrite</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kReadShift</name> <init>= <expr><literal type="number">5</literal> <operator>+</operator> <name>kClkBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kReadBit</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kReadShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kAtomicShift</name> <init>= <expr><literal type="number">6</literal> <operator>+</operator> <name>kClkBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name>kAtomicBit</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kAtomicShift</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>u64</name> <macro><name>size_log</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>x_</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>kClkBits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>TwoRangesIntersectSlow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Shadow</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s2</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>s2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>s1</name><operator>.</operator><name>addr0</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
};

<struct_decl>struct <name>ThreadSignalContext</name>;</struct_decl>

<struct>struct <name>JmpBuf</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_signal_send</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_blocking_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>in_signal_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name> <modifier>*</modifier></type><name>shadow_stack_pos</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>Processor</name> <block>{
<decl_stmt><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name>AllocatorCache</name></type> <name>alloc_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InternalAllocatorCache</name></type> <name>internal_alloc_cache</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>DenseSlabAllocCache</name></type> <name>block_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DenseSlabAllocCache</name></type> <name>sync_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DenseSlabAllocCache</name></type> <name>clock_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDPhysicalThread</name> <modifier>*</modifier></type><name>dd_pt</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>



<struct>struct <name>ScopedGlobalProcessor</name> <block>{
<expr_stmt><expr><call><name>ScopedGlobalProcessor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ScopedGlobalProcessor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>ThreadState</name> <block>{
<decl_stmt><decl><type><name>FastState</name></type> <name>fast_state</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>u64</name></type> <name>fast_synch_epoch</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ThreadState</name><modifier>*</modifier></type> <name>current</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>ignore_reads_and_writes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suppress_reports</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name>IgnoreSet</name></type> <name>mop_ignore_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IgnoreSet</name></type> <name>sync_ignore_set</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>uptr</name> <modifier>*</modifier></type><name>shadow_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name> <modifier>*</modifier></type><name>shadow_stack_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name> <modifier>*</modifier></type><name>shadow_stack_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name> <modifier>*</modifier></type><name>racy_shadow_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>racy_state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutexSet</name></type> <name>mset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadClock</name></type> <name>clock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>JmpBuf</name></expr></argument>&gt;</argument_list></name></type> <name>jmp_bufs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_interceptors</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>unique_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_symbolizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_ignored_lib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_dead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_freeing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_vptr_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>stk_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>stk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>tls_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>tls_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>tctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DDLogicalThread</name> <modifier>*</modifier></type><name>dd_lt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<function><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>proc1</name></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>in_signal_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadSignalContext</name> <modifier>*</modifier></type><name>signal_ctx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name>u32</name></type> <name>last_sleep_stack_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadClock</name></type> <name>last_sleep_clock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>int</name></type> <name>nomalloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ReportDesc</name> <modifier>*</modifier></type><name>current_report</name></decl>;</decl_stmt>

<function_decl><type><name>explicit</name></type> <name>ThreadState</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unique_id</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>epoch</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>reuse_count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stk_addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stk_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>tls_addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>tls_size</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name> <operator>||</operator> <name>SANITIZER_ANDROID</name></expr></cpp:if>
<function_decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>cur_thread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>set_cur_thread</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cur_thread_finalize</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>cur_thread_init</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>__attribute__</name><argument_list>(<argument>(tls_model(<literal type="string">"initial-exec"</literal>))</argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>extern</specifier> <name>THREADLOCAL</name> <name>char</name></type> <name><name>cur_thread_placeholder</name><index>[]</index></name></decl>;</decl_stmt>
<function><type><specifier>inline</specifier> <name>ThreadState</name> <modifier>*</modifier></type><name>cur_thread</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadState</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cur_thread_placeholder</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>current</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>cur_thread_init</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadState</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cur_thread_placeholder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>thr</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>set_cur_thread</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ThreadState</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cur_thread_placeholder</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>current</name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>cur_thread_finalize</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name> <name>ThreadContext</name></type> <name>final</name> <range>: <expr><name>public</name> <name>ThreadContextBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ThreadContext</name><argument_list>(<argument>int tid</argument>)</argument_list></macro></expr>;
<expr><operator>~</operator><call><name>ThreadContext</name><argument_list>()</argument_list></call></expr>;
<expr><name>ThreadState</name> <operator>*</operator><name>thr</name></expr>;
<expr><name>u32</name> <name>creation_stack_id</name></expr>;
<expr><name>SyncClock</name> <name>sync</name></expr>;



<expr><name>u64</name> <name>epoch0</name></expr>;
<expr><name>u64</name> <name>epoch1</name></expr>;


<expr><name>void</name> <macro><name>OnDead</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnJoined</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnFinished</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnStarted</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnCreated</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnReset</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>OnDetached</name><argument_list>(<argument>void *arg</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>RacyStacks</name> <block>{
<decl_stmt><decl><type><name>MD5Hash</name></type> <name><name>hash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RacyStacks</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
}</block>
<decl/></struct>};

<struct>struct <name>RacyAddress</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>addr_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>addr_max</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FiredSuppression</name> <block>{
<decl_stmt><decl><type><name>ReportType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>pc_or_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Suppression</name> <modifier>*</modifier></type><name>supp</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Context</name> <block>{
<expr_stmt><expr><call><name>Context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>after_multithreaded_fork</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>MetaMap</name></type> <name>metamap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Mutex</name></type> <name>report_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nreported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nmissed_expected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint64_t</name></type> <name>last_symbolize_time_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>background_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name>stop_background_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadRegistry</name> <modifier>*</modifier></type><name>thread_registry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Mutex</name></type> <name>racy_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>RacyStacks</name></expr></argument>&gt;</argument_list></name></type> <name>racy_stacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>RacyAddress</name></expr></argument>&gt;</argument_list></name></type> <name>racy_addresses</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Mutex</name></type> <name>fired_suppressions_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>FiredSuppression</name></expr></argument>&gt;</argument_list></name></type> <name>fired_suppressions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDetector</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ClockAlloc</name></type> <name>clock_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Flags</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name><name>int_alloc_cnt</name><index>[<expr><name>MBlockTypeCount</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name><name>int_alloc_siz</name><index>[<expr><name>MBlockTypeCount</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<function><type><name>ALWAYS_INLINE</name> <name>Flags</name> <modifier>*</modifier></type><name>flags</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ScopedIgnoreInterceptors</name> <block>{
<macro><name>ScopedIgnoreInterceptors</name><argument_list>()</argument_list></macro> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<expr_stmt><expr><call><name>cur_thread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ignore_interceptors</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>ScopedIgnoreInterceptors</name><argument_list>()</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<expr><call><name>cur_thread</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ignore_interceptors</name><operator>--</operator></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></expr_stmt>
}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetObjectTypeFromTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetReportHeaderFromTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>TagFromShadowStackFrame</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedReportBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>void</name></type> <name>AddMemoryAccess</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>external_tag</name></decl></parameter>, <parameter><decl><type><name>Shadow</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name></type> <name>stack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MutexSet</name> <modifier>*</modifier></type><name>mset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddStack</name><parameter_list>(<parameter><decl><type><name>StackTrace</name></type> <name>stack</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>suppressable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddThread</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ThreadContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>suppressable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddThread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unique_tid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>suppressable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddUniqueTid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unique_tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddMutex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SyncVar</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>u64</name></type> <name>AddMutex</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddLocation</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddSleep</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>stack_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>ReportDesc</name> <operator>*</operator><macro><name>GetReport</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<macro><name>ScopedReportBase</name><argument_list>(<argument>ReportType typ</argument>, <argument>uptr tag</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>ScopedReportBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ReportDesc</name> <modifier>*</modifier></type><name>rep_</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ScopedIgnoreInterceptors</name></type> <name>ignore_interceptors_</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AddDeadMutex</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>ScopedReportBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScopedReportBase</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScopedReportBase</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedReport</name> <range>: <expr><name>public</name> <name>ScopedReportBase</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ScopedReport</name><argument_list>(<argument>ReportType typ</argument>, <argument>uptr tag = kExternalTagNone</argument>)</argument_list></macro></expr>;
<expr><operator>~</operator><call><name>ScopedReport</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>ScopedErrorReportLock</name> <name>lock_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>ShouldReport</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>ReportType</name></type> <name>typ</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>IsThreadStackOrTls</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RestoreStack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name>epoch</name></decl></parameter>, <parameter><decl><type><name>VarSizeStackTrace</name> <modifier>*</modifier></type><name>stk</name></decl></parameter>,
<parameter><decl><type><name>MutexSet</name> <modifier>*</modifier></type><name>mset</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>StackTraceTy</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ExtractTagFromStack</name><parameter_list>(<parameter><decl><type><name>StackTraceTy</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>possible_tag_pc</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>possible_tag</name> <init>= <expr><call><name>TagFromShadowStackFrame</name><argument_list>(<argument><expr><name>possible_tag_pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>possible_tag</name> <operator>==</operator> <name>kExternalTagNone</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>trace_buffer</name><index>[<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>trace_buffer</name><index>[<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name>possible_tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>StackTraceTy</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ObtainCurrentStack</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>toppc</name></decl></parameter>, <parameter><decl><type><name>StackTraceTy</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><name><name>thr</name><operator>-&gt;</operator><name>shadow_stack_pos</name></name> <operator>-</operator> <name><name>thr</name><operator>-&gt;</operator><name>shadow_stack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>toppc</name> <operator>&gt;</operator> <name>kStackTraceMax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>size</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>toppc</name> <operator>-</operator> <name>kStackTraceMax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>kStackTraceMax</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>toppc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>stack</name><operator>-&gt;</operator><name>Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr</name><operator>-&gt;</operator><name>shadow_stack</name><index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>toppc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExtractTagFromStack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_FATAL</name><parameter_list>(<parameter><type><name>thr</name></type></parameter>, <parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VarSizeStackTrace stack; ObtainCurrentStack(thr, pc, &amp;stack); stack.ReverseOrder();</cpp:value></cpp:define>




<function_decl><type><name>void</name></type> <name>MapShadow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MapThreadTrace</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DontNeedShadowFor</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnmapShadow</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeShadowMemory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeInterceptors</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeLibIgnore</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeDynamicAnnotations</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ForkBefore</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ForkParentAfter</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ForkChildAfter</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReportRace</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>OutputReport</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ScopedReport</name> <modifier>&amp;</modifier></type><name>srep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsFiredSuppression</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ReportType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name></type> <name>trace</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsExpectedReport</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintMatchedBenignRaces</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_DEBUG_OUTPUT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSAN_DEBUG_OUTPUT</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPrintf</name></cpp:macro> <cpp:value>Printf</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPrintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_DEBUG_OUTPUT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSAN_DEBUG_OUTPUT</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPrintf2</name></cpp:macro> <cpp:value>Printf</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPrintf2</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>u32</name></type> <name>CurrentStackId</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ReportStack</name> <modifier>*</modifier></type><name>SymbolizeStackId</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>stack_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintCurrentStack</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintCurrentStackSlow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MaybeSpawnBackgroundThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Finalize</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>OnUserAlloc</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>OnUserFree</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MemoryAccess</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kAccessIsWrite</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kIsAtomic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryAccessImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kAccessIsWrite</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kIsAtomic</name></decl></parameter>,
<parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>shadow_mem</name></decl></parameter>, <parameter><decl><type><name>Shadow</name></type> <name>cur</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryAccessRange</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_write</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryAccessRangeStep</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_write</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnalignedMemoryAccess</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kAccessIsWrite</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kIsAtomic</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kSizeLog1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kSizeLog2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kSizeLog4</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kSizeLog8</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <name>ALWAYS_INLINE</name></type> <name>MemoryRead</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccess</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>ALWAYS_INLINE</name></type> <name>MemoryWrite</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccess</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>ALWAYS_INLINE</name></type> <name>MemoryReadAtomic</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccess</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>ALWAYS_INLINE</name></type> <name>MemoryWriteAtomic</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kAccessSizeLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>MemoryAccess</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>kAccessSizeLog</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>MemoryResetRange</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryRangeFreed</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryRangeImitateWrite</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemoryRangeImitateWriteOrResetRange</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ThreadIgnoreBegin</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>save_stack</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadIgnoreEnd</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadIgnoreSyncBegin</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>save_stack</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadIgnoreSyncEnd</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>FuncEntry</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FuncExit</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ThreadCreate</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadStart</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>tid_t</name></type> <name>os_id</name></decl></parameter>,
<parameter><decl><type><name>ThreadType</name></type> <name>thread_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadFinish</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ThreadConsumeTid</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadJoin</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadDetach</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadFinalize</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadSetName</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ThreadCount</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessPendingSignals</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ThreadNotJoined</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Processor</name> <modifier>*</modifier></type><name>ProcCreate</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcDestroy</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcWire</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcUnwire</name><parameter_list>(<parameter><decl><type><name>Processor</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>MutexCreate</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexDestroy</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexPreLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexPostLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rec</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>MutexUnlock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexPreReadLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexPostReadLock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>flagz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexReadUnlock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexReadOrWriteUnlock</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexRepair</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutexInvalidAccess</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Acquire</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>AcquireGlobal</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Release</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseStoreAcquire</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseStore</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AfterSleep</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AcquireImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseStoreAcquireImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReleaseStoreImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AcquireReleaseImpl</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>SyncClock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_DEBUG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_MAC</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HACKY_CALL</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ __volatile__("sub $1024, %%rsp;" CFI_INL_ADJUST_CFA_OFFSET(1024) ".hidden " #f "_thunk;" "call " #f "_thunk;" "add $1024, %%rsp;" CFI_INL_ADJUST_CFA_OFFSET(-1024) ::: "memory", "cc");</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HACKY_CALL</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>TraceSwitch</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>TraceTopPC</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>TraceSize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>TraceParts</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>Trace</name> <modifier>*</modifier></type><name>ThreadTrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>__tsan_trace_switch</name><parameter_list>()</parameter_list>;</function_decl></extern>
<function><type><name>void</name> <name>ALWAYS_INLINE</name></type> <name>TraceAddEvent</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>FastState</name></type> <name>fs</name></decl></parameter>,
<parameter><decl><type><name>EventType</name></type> <name>typ</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kCollectHistory</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>typ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>typ</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>GetLsb</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>kEventPCBits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>pos</name> <init>= <expr><call><name><name>fs</name><operator>.</operator><name>GetTracePos</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>pos</name> <operator>%</operator> <name>kTracePartSize</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<expr_stmt><expr><call><name>HACKY_CALL</name><argument_list>(<argument><expr><name>__tsan_trace_switch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>TraceSwitch</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Event</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>(</operator><name>Event</name><operator>*</operator><operator>)</operator><call><name>GetThreadTrace</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>tid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Event</name> <modifier>*</modifier></type><name>evp</name> <init>= <expr><operator>&amp;</operator><name><name>trace</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Event</name></type> <name>ev</name> <init>= <expr><operator>(</operator><name>u64</name><operator>)</operator><name>addr</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>typ</name> <operator>&lt;&lt;</operator> <name>kEventPCBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>evp</name> <operator>=</operator> <name>ev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<function><type><name>uptr</name> <name>ALWAYS_INLINE</name></type> <name>HeapEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HeapMemEnd</name><argument_list>()</argument_list></call> <operator>+</operator> <name>PrimaryAllocator</name><operator>::</operator><call><name>AdditionalSize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>FiberCreate</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FiberDestroy</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FiberSwitch</name><parameter_list>(<parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ThreadState</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>FiberSwitchFlags</name> <block>{
<decl><name>FiberSwitchFlagNoSync</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
}</block>;</enum>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
