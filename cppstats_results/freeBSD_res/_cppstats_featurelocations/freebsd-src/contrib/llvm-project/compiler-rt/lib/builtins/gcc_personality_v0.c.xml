<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/gcc_personality_v0.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unwind.h&gt;</cpp:file></cpp:include>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_DWARF_EH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind-ehabi-helpers.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winnt.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>EXCEPTION_DISPOSITION</name></type> <name>_GCC_specific_handler</name><parameter_list>(<parameter><decl><type><name>PEXCEPTION_RECORD</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PCONTEXT</name></type></decl></parameter>,
<parameter><decl><type><name>PDISPATCHER_CONTEXT</name></type></decl></parameter>,
<parameter><decl><type><name>_Unwind_Personality_Fn</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_omit</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_absptr</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_uleb128</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_udata2</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_udata4</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_udata8</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_sleb128</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_sdata2</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_sdata4</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_sdata8</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_pcrel</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_textrel</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_datarel</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_funcrel</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_aligned</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_indirect</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>readULEB128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>readEncodedPointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>DW_EH_PE_omit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>encoding</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_EH_PE_absptr</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_uleb128</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>readULEB128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata2</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata4</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata8</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata2</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata4</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata8</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sleb128</name></expr>:</case>
<default>default:</default>

<expr_stmt><expr><call><name>compilerrt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<switch>switch <condition>(<expr><name>encoding</name> <operator>&amp;</operator> <literal type="number">0x70</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_EH_PE_absptr</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>DW_EH_PE_pcrel</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_textrel</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_datarel</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_funcrel</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_aligned</name></expr>:</case>
<default>default:</default>

<expr_stmt><expr><call><name>compilerrt_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>&amp;</operator> <name>DW_EH_PE_indirect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>result</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_DWARF_EH__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_ARM_EHABI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function_decl><type><name>_Unwind_Reason_Code</name></type> <name>__gnu_unwind_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>_Unwind_Reason_Code</name></type>
<name>continueUnwind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>exceptionObject</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USING_ARM_EHABI</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>__gnu_unwind_frame</name><argument_list>(<argument><expr><name>exceptionObject</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_URC_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_URC_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>_URC_CONTINUE_UNWIND</name></expr>;</return>
</block_content>}</block></function>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></cpp:if>


<decl_stmt><decl><type><name>COMPILER_RT_ABI</name> <name>_Unwind_Reason_Code</name></type> <name>__gcc_personality_sj0</name><argument_list>(
<argument><expr><name>int</name> <name>version</name></expr></argument>, <argument><expr><name>_Unwind_Action</name> <name>actions</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>exceptionClass</name></expr></argument>,
<argument><expr>struct <name>_Unwind_Exception</name> <operator>*</operator><name>exceptionObject</name></expr></argument>, <argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>USING_ARM_EHABI</name></expr></cpp:elif>

<name>COMPILER_RT_ABI</name> <name>_Unwind_Reason_Code</name> <name>__gcc_personality_v0</name><argument_list>(
<argument><expr><name>_Unwind_State</name> <name>state</name></expr></argument>, <argument><expr>struct <name>_Unwind_Exception</name> <operator>*</operator><name>exceptionObject</name></expr></argument>,
<argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
static <name>_Unwind_Reason_Code</name> <name>__gcc_personality_imp</name><argument_list>(
<argument><expr><name>int</name> <name>version</name></expr></argument>, <argument><expr><name>_Unwind_Action</name> <name>actions</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>exceptionClass</name></expr></argument>,
<argument><expr>struct <name>_Unwind_Exception</name> <operator>*</operator><name>exceptionObject</name></expr></argument>, <argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>COMPILER_RT_ABI</name> <name>_Unwind_Reason_Code</name> <name>__gcc_personality_v0</name><argument_list>(
<argument><expr><name>int</name> <name>version</name></expr></argument>, <argument><expr><name>_Unwind_Action</name> <name>actions</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>exceptionClass</name></expr></argument>,
<argument><expr>struct <name>_Unwind_Exception</name> <operator>*</operator><name>exceptionObject</name></expr></argument>, <argument><expr>struct <name>_Unwind_Context</name> <operator>*</operator><name>context</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USING_ARM_EHABI</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>_US_ACTION_MASK</name><operator>)</operator> <operator>!=</operator> <name>_US_UNWIND_FRAME_STARTING</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>actions</name> <operator>&amp;</operator> <name>_UA_SEARCH_PHASE</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>continueUnwind</name><argument_list>(<argument><expr><name>exceptionObject</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lsda</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>_Unwind_GetLanguageSpecificData</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lsda</name> <operator>==</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>continueUnwind</name><argument_list>(<argument><expr><name>exceptionObject</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>pc</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>_Unwind_GetIP</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>funcStart</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>_Unwind_GetRegionStart</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>pcOffset</name> <init>= <expr><name>pc</name> <operator>-</operator> <name>funcStart</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>lpStartEncoding</name> <init>= <expr><operator>*</operator><name>lsda</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lpStartEncoding</name> <operator>!=</operator> <name>DW_EH_PE_omit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>readEncodedPointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lsda</name></expr></argument>, <argument><expr><name>lpStartEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ttypeEncoding</name> <init>= <expr><operator>*</operator><name>lsda</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ttypeEncoding</name> <operator>!=</operator> <name>DW_EH_PE_omit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>readULEB128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lsda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>callSiteEncoding</name> <init>= <expr><operator>*</operator><name>lsda</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>callSiteTableLength</name> <init>= <expr><call><name>readULEB128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lsda</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>callSiteTableStart</name> <init>= <expr><name>lsda</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>callSiteTableEnd</name> <init>= <expr><name>callSiteTableStart</name> <operator>+</operator> <name>callSiteTableLength</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>callSiteTableStart</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>callSiteTableEnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>start</name> <init>= <expr><call><name>readEncodedPointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>callSiteEncoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>readEncodedPointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>callSiteEncoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>landingPad</name> <init>= <expr><call><name>readEncodedPointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>callSiteEncoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>readULEB128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>landingPad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>&lt;=</operator> <name>pcOffset</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pcOffset</name> <operator>&lt;</operator> <operator>(</operator><name>start</name> <operator>+</operator> <name>length</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>_Unwind_SetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>__builtin_eh_return_data_regno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>exceptionObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_Unwind_SetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>__builtin_eh_return_data_regno</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_Unwind_SetIP</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>funcStart</name> <operator>+</operator> <name>landingPad</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_URC_INSTALL_CONTEXT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<return>return <expr><call><name>continueUnwind</name><argument_list>(<argument><expr><name>exceptionObject</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SEH__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USING_SJLJ_EXCEPTIONS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>COMPILER_RT_ABI</name> <name>EXCEPTION_DISPOSITION</name></type>
<name>__gcc_personality_seh0</name><parameter_list>(<parameter><decl><type><name>PEXCEPTION_RECORD</name></type> <name>ms_exc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>this_frame</name></decl></parameter>,
<parameter><decl><type><name>PCONTEXT</name></type> <name>ms_orig_context</name></decl></parameter>, <parameter><decl><type><name>PDISPATCHER_CONTEXT</name></type> <name>ms_disp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_GCC_specific_handler</name><argument_list>(<argument><expr><name>ms_exc</name></expr></argument>, <argument><expr><name>this_frame</name></expr></argument>, <argument><expr><name>ms_orig_context</name></expr></argument>, <argument><expr><name>ms_disp</name></expr></argument>,
<argument><expr><name>__gcc_personality_imp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
