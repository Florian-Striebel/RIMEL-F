<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/error.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensible_rtti.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stl_extras.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>ErrorInfoBase</name> <range>: <expr><name>public</name> <name><name>RTTIExtends</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>, <argument><expr><name>RTTIRoot</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>ORC_RT_NODISCARD</name></type> <name>Error</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>Error</name></type> <name>make_error</name><argument_list>(<argument><expr><name>ArgTs</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>Error</name></type> <name>repackage_error</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name> <call><name>error_cast</name><argument_list>(<argument><expr><name>Error</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>Expected</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<expr_stmt><expr><operator>~</operator><macro><name>Error</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>; }</block>

<call><name>Error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Error</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Error</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Error</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>




<macro><name>Error</name><argument_list>(<argument>Error &amp;&amp;Other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<decl_stmt><decl><type><name>Error</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>Error</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{

<expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>setPtr</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getPtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;


<expr><call><name>setChecked</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;


<expr><call><name><name>Other</name><operator>.</operator><name>setPtr</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Other</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>


<function><type><specifier>static</specifier> <name>Error</name></type> <name>success</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Error</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>explicit</name> <name>operator</name></type> <name>bool</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr><call><name>getPtr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getPtr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>&gt;</argument_list></name> <name>bool</name> <macro><name>isA</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getPtr</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getPtr</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>isA</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Error</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>Error</name><argument_list>(<argument>std::unique_ptr&lt;ErrorInfoBase&gt; ErrInfo</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>RawErrPtr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ErrInfo</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>RawErrPtr</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"ErrorInfo is insufficiently aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ErrPtr</name> <operator>=</operator> <name>RawErrPtr</name> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>assertIsChecked</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ORC_RT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>isChecked</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>getPtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error must be checked prior to destruction.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name> <operator>=</operator> <name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name> <name>ErrT</name> <operator>*</operator><macro><name>getPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ErrPtr</name> <operator>&amp;</operator> <operator>~</operator><call><name>uintptr_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setPtr</name><parameter_list>(<parameter><decl><type><name>ErrorInfoBase</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ErrPtr</name> <operator>=</operator> <operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><call><name>uintptr_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ErrPtr</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isChecked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ErrPtr</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setChecked</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Checked</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ErrPtr</name> <operator>=</operator> <operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ErrPtr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><call><name>uintptr_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>Checked</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name> <operator>=</operator> <name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name> <macro><name>takePayload</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>, <argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"ErrT is not an ErrorInfoBase subclass"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name> <call><name>Tmp</name><argument_list>(<argument><expr><call><name><name>getPtr</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>setPtr</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>setChecked</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>ErrPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTs</name></expr></argument>&gt;</argument_list></name> <name>Error</name></type> <name>make_error</name><argument_list>(<argument><expr><name>ArgTs</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>, <argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"ErrT is not an ErrorInfoBase subclass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Error</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>ArgTs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>inline</specifier> <name>Error</name></type> <name>repackage_error</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name> <name>EIB</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>Error</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>EIB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>














<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name> <macro><name>error_cast</name><argument_list>(<argument>Error &amp;Err</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>, <argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"ErrT is not an ErrorInfoBase subclass"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Err</name><operator>.</operator><name>isA</name></name><operator>&lt;</operator><name>ErrT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Err</name><operator>.</operator><name>takePayload</name></name><operator>&lt;</operator><name>ErrT</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ErrorAsOutParameter</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ErrorAsOutParameter</name><argument_list>(<argument><expr><name>Error</name> <operator>*</operator><name>Err</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Err</name><argument_list>(<argument>Err</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><name>Err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>!</operator><operator>!</operator><operator>*</operator><name>Err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>ErrorAsOutParameter</name><argument_list>()</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><name>Err</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>Err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Err</name> <operator>=</operator> <name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Error</name> <modifier>*</modifier></type><name>Err</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ORC_RT_NODISCARD</name></type> <name>Expected</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>Expected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>IsRef</name> <init>= <expr><name>std</name><operator>::</operator><name><name>is_reference</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>wrap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>error_type</name> <init>= <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>storage_type</name> <init>= <expr><name>std</name><operator>::</operator><name><name>conditional_t</name><argument_list type="generic">&lt;<argument><expr><name>IsRef</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>T</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_reference</name> <init>= <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_pointer</name> <init>= <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>remove_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>Expected</name><argument_list>(<argument>Error Err</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>HasError</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Unchecked</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Err</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot create Expected&lt;T&gt; from Error success value"</literal></expr></argument>)</argument_list></call></expr>;
<macro><name>new</name> <argument_list>(<argument>getErrorStorage()</argument>)</argument_list></macro> <expr><call><name>error_type</name><argument_list>(<argument><expr><call><name><name>Err</name><operator>.</operator><name>takePayload</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name>
<call><name>Expected</name><argument_list>(<argument><expr><name>OtherT</name> <operator>&amp;&amp;</operator><name>Val</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>OtherT</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name> <operator>*</operator> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>HasError</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Unchecked</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{
<macro><name>new</name> <argument_list>(<argument>getStorage()</argument>)</argument_list></macro> <expr><call><name>storage_type</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>OtherT</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>


<macro><name>Expected</name><argument_list>(<argument>Expected &amp;&amp;Other</argument>)</argument_list></macro> <block>{ <expr><call><name>moveConstruct</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name>
<macro><name>Expected</name><argument_list>(
<argument>Expected&lt;OtherT&gt; &amp;&amp;Other</argument>,
<argument>std::enable_if_t&lt;std::is_convertible&lt;OtherT</argument>, <argument>T&gt;::value&gt; * = nullptr</argument>)</argument_list></macro> <block>{
<expr><call><name>moveConstruct</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <macro><name>Expected</name><argument_list>(
<argument>Expected&lt;OtherT&gt; &amp;&amp;Other</argument>,
<argument>std::enable_if_t&lt;!std::is_convertible&lt;OtherT</argument>, <argument>T&gt;::value&gt; * = nullptr</argument>)</argument_list></macro> <block>{
<expr><call><name>moveConstruct</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>


<name>Expected</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Expected</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><call><name>moveAssign</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><operator>~</operator><macro><name>Expected</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasError</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getStorage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><operator>~</operator><call><name>storage_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getErrorStorage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><operator>~</operator><call><name>error_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>



<function><type><name>explicit</name> <name>operator</name></type> <name>bool</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Unchecked</name> <operator>=</operator> <name>HasError</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><name>HasError</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ErrT</name></expr></argument>&gt;</argument_list></name> <name>bool</name> <macro><name>isFailureOfType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HasError</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name>getErrorStorage</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>template</name> <call><name><name>isFailureOfType</name><argument_list type="generic">&lt;<argument><expr><name>ErrT</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>










<function><type><name>Error</name></type> <name>takeError</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Unchecked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>HasError</name></expr> ?</condition><then> <expr><call><name>Error</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><call><name>getErrorStorage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> <block>{<block_content>
<expr_stmt><expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>toPointer</name><argument_list>(<argument><expr><call><name>getStorage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


const_pointer operator-&gt;(</block></decl>) const <block>{<block_content>
<expr_stmt><expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>toPointer</name><argument_list>(<argument><expr><call><name>getStorage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl_stmt>


<function><type><name>reference</name></type> <name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>const_reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T1</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>compareThisIfSameType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>a</name> <operator>==</operator> <operator>&amp;</operator><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T1</name></expr></argument>, <argument><expr><name>class</name> <name>T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>compareThisIfSameType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>moveConstruct</name><argument_list>(<argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>OtherT</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>HasError</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>HasError</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Unchecked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Other</name><operator>.</operator><name>Unchecked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasError</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>new</name> <argument_list>(<argument>getStorage()</argument>)</argument_list></macro> <expr_stmt><expr><call><name>storage_type</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>Other</name><operator>.</operator><name>getStorage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<macro><name>new</name> <argument_list>(<argument>getErrorStorage()</argument>)</argument_list></macro> <expr_stmt><expr><call><name>error_type</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>Other</name><operator>.</operator><name>getErrorStorage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>OtherT</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>moveAssign</name><argument_list>(<argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>OtherT</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assertIsChecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compareThisIfSameType</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name/></name>~<call><name>Expected</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>this</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Expected</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>pointer</name></type> <name>toPointer</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>Val</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>const_pointer</name></type> <name>toPointer</name><argument_list>(<argument><expr><name>const_pointer</name> <name>Val</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Val</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>pointer</name></type> <name>toPointer</name><parameter_list>(<parameter><decl><type><name>wrap</name> <modifier>*</modifier></type><name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><call><name><name>Val</name><operator>-&gt;</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>const_pointer</name></type> <name>toPointer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>wrap</name> <operator>*</operator><name>Val</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>&amp;</operator><call><name><name>Val</name><operator>-&gt;</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>storage_type</name> <modifier>*</modifier></type><name>getStorage</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>HasError</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot get value when an error exists!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>storage_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>TStorage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>storage_type</name> <operator>*</operator><macro><name>getStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>HasError</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot get value when an error exists!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>storage_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>TStorage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>error_type</name> <modifier>*</modifier></type><name>getErrorStorage</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>HasError</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot get error when a value exists!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>error_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ErrorStorage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>error_type</name> <operator>*</operator><macro><name>getErrorStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasError</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot get error when a value exists!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>error_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ErrorStorage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>assertIsChecked</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ORC_RT_UNLIKELY</name><argument_list>(<argument><expr><name>Unchecked</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Expected&lt;T&gt; must be checked before access or destruction.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<union>union <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>aligned_union_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>storage_type</name></expr></argument>&gt;</argument_list></name> <name>TStorage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>aligned_union_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error_type</name></expr></argument>&gt;</argument_list></name> <name>ErrorStorage</name></expr>;</expr_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>HasError</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Unchecked</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
};


<function><type><specifier>inline</specifier> <name>void</name></type> <name>consumeError</name><parameter_list>(<parameter><decl><type><name>Error</name></type> <name>Err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>error_cast</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>void</name></type> <name>cantFail</name><parameter_list>(<parameter><decl><type><name>Error</name></type> <name>Err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Err</name> <operator>&amp;&amp;</operator> <literal type="string">"cantFail called on failure value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consumeError</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>cantFail</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>E</name> <operator>&amp;&amp;</operator> <literal type="string">"cantFail called on failure value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consumeError</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>&amp;</modifier></type><name>cantFail</name><parameter_list>(<parameter><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>E</name> <operator>&amp;&amp;</operator> <literal type="string">"cantFail called on failure value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consumeError</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>E</name></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>(<argument>Error Err</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>EIB</name> <init>= <expr><call><name><name>error_cast</name><argument_list type="generic">&lt;<argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>EIB</name><operator>-&gt;</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><block>{}</block></expr>;</return>
}

class <label><name>StringError</name> :</label> <decl_stmt><decl><type><name>public</name></type> <name><name>RTTIExtends</name><argument_list type="generic">&lt;<argument><expr><name>StringError</name></expr></argument>, <argument><expr><name>ErrorInfoBase</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>StringError</name><argument_list>(<argument>std::string ErrMsg</argument>)</argument_list></macro> : <macro><name>ErrMsg</name><argument_list>(<argument>std::move(ErrMsg)</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ErrMsg</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ErrMsg</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
