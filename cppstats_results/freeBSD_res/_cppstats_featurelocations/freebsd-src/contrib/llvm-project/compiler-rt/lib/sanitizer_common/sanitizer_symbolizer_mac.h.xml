<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_mac.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SYMBOLIZER_MAC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SYMBOLIZER_MAC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_symbolizer_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>DlAddrSymbolizer</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SymbolizerTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>SymbolizePC</name><argument_list>(<argument>uptr addr</argument>, <argument>SymbolizedStack *stack</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>SymbolizeData</name><argument_list>(<argument>uptr addr</argument>, <argument>DataInfo *info</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AtosSymbolizerProcess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>AtosSymbolizer</name></type> <name>final</name> <range>: <expr><name>public</name> <name>SymbolizerTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>AtosSymbolizer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>LowLevelAllocator</name> <operator>*</operator><name>allocator</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>SymbolizePC</name><argument_list>(<argument>uptr addr</argument>, <argument>SymbolizedStack *stack</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>SymbolizeData</name><argument_list>(<argument>uptr addr</argument>, <argument>DataInfo *info</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>LateInitialize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>AtosSymbolizerProcess</name> <operator>*</operator><name>process_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
