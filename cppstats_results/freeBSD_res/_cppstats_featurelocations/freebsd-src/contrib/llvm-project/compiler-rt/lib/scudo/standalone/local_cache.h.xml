<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/local_cache.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_LOCAL_CACHE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_LOCAL_CACHE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"report.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stats.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>SizeClassAllocator</name><operator>&gt;</operator> struct <name>SizeClassAllocatorLocalCache</name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>SizeClassAllocator</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>SizeClassAllocator</name><operator>::</operator><name>CompactPtrT</name> <name>CompactPtrT</name></expr>;</expr_stmt></typedef>

<struct>struct <name>TransferBatch</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCached</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>MaxNumCachedHint</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>setFromArray</name><parameter_list>(<parameter><decl><type><name>CompactPtrT</name> <modifier>*</modifier></type><name>Array</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>MaxNumCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Count</name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Batch</name></expr></argument>, <argument><expr><name>Array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>Batch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>CompactPtrT</name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>MaxNumCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Batch</name><index>[<expr><name>Count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>void</name></type> <name>copyToArray</name><argument_list>(<argument><expr><name>CompactPtrT</name> <operator>*</operator><name>Array</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Array</name></expr></argument>, <argument><expr><name>Batch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>Batch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>u32</name> <macro><name>getCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Count</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name>get</name><argument_list>(<argument><expr><name>u32</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Batch</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>getMaxCached</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Min</name><argument_list>(<argument><expr><name>MaxNumCached</name></expr></argument>, <argument><expr><name>SizeClassMap</name><operator>::</operator><call><name>getMaxCachedHint</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>u32</name></type> <name>Count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name><name>Batch</name><index>[<expr><name>MaxNumCached</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>GlobalStats</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>SizeClassAllocator</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>S</name><operator>-&gt;</operator><name>link</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Allocator</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>GlobalStats</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>drain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>S</name><operator>-&gt;</operator><name>unlink</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>NumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>C</name> <init>= <expr><operator>&amp;</operator><name><name>PerClassArray</name><index>[<expr><name>ClassId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>refill</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>ClassSize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>ClassSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name>CompactP</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><operator>--</operator><name><name>C</name><operator>-&gt;</operator><name>Count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>ClassSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>ClassSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>decompactPtr</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>CompactP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>NumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>C</name> <init>= <expr><operator>&amp;</operator><name><name>PerClassArray</name><index>[<expr><name>ClassId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>initCacheMaybe</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name> <operator>==</operator> <name><name>C</name><operator>-&gt;</operator><name>MaxCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>ClassSize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>ClassSize</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<call><name><name>Allocator</name><operator>-&gt;</operator><name>compactPtr</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>ClassSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>ClassSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>PerClassArray</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>drain</name><parameter_list>()</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>PerClassArray</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PerClassArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<while>while <condition>(<expr><name><name>PerClassArray</name><index>[<expr><name>BatchClassId</name></expr>]</index></name><operator>.</operator><name>Count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PerClassArray</name><index>[<expr><name>BatchClassId</name></expr>]</index></name></expr></argument>, <argument><expr><name>BatchClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TransferBatch</name> <modifier>*</modifier></type><name>createBatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ClassId</name> <operator>!=</operator> <name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>allocate</name><argument_list>(<argument><expr><name>BatchClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>TransferBatch</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LocalStats</name> <modifier>&amp;</modifier></type><name>getStats</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Stats</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>NumClasses</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>BatchClassId</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>BatchClassId</name></expr></init></decl>;</decl_stmt>
<struct>struct <name>PerClass</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>Count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>MaxCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>ClassSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompactPtrT</name></type> <name><name>Chunks</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>TransferBatch</name><operator>::</operator><name>MaxNumCached</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>PerClass</name></type> <name><name>PerClassArray</name><index>[<expr><name>NumClasses</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LocalStats</name></type> <name>Stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SizeClassAllocator</name> <modifier>*</modifier></type><name>Allocator</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>initCacheMaybe</name><parameter_list>(<parameter><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>MaxCount</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>initCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>MaxCount</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>void</name></type> <name>initCache</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>P</name> <init>= <expr><operator>&amp;</operator><name><name>PerClassArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Size</name> <init>= <expr><name>SizeClassAllocator</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>MaxCount</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>TransferBatch</name><operator>::</operator><call><name>getMaxCached</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <name>BatchClassId</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>ClassSize</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>ClassSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyBatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ClassId</name> <operator>!=</operator> <name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deallocate</name><argument_list>(<argument><expr><name>BatchClassId</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>bool</name></type> <name>refill</name><parameter_list>(<parameter><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initCacheMaybe</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>popBatch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name> <operator>=</operator> <call><name><name>B</name><operator>-&gt;</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>copyToArray</name></name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroyBatch</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>void</name></type> <name>drain</name><parameter_list>(<parameter><decl><type><name>PerClass</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>Count</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>MaxCount</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TransferBatch</name> <modifier>*</modifier></type><name>B</name> <init>=
<expr><call><name>createBatch</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>decompactPtr</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportOutOfMemory</name><argument_list>(<argument><expr><name>SizeClassAllocator</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>BatchClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>-&gt;</operator><name>setFromArray</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Count</name></name> <operator>-=</operator> <name>Count</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name><name>C</name><operator>-&gt;</operator><name>Count</name></name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>Chunks</name><index>[<expr><name>I</name> <operator>+</operator> <name>Count</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>pushBatch</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
