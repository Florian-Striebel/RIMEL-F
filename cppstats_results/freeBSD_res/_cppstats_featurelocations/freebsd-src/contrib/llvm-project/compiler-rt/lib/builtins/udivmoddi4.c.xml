<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/udivmoddi4.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4724</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>COMPILER_RT_ABI</name> <name>du_int</name></type> <name>__udivmoddi4</name><parameter_list>(<parameter><decl><type><name>du_int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>du_int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>du_int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>n_uword_bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>su_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>n_udword_bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>du_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>n</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>udwords</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>%</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>/</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>%</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>/</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>%</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>/</operator> <name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <call><name>__builtin_ctz</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>&gt;</operator> <name>n_uword_bits</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>sr</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>n</name><operator>.</operator><name>all</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>__builtin_ctz</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name><name>q</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>sr</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>n_uword_bits</name> <operator>+</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>==</operator> <name>n_uword_bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sr</name> <operator>&lt;</operator> <name>n_uword_bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>sr</name> <operator>-</operator> <name>n_uword_bits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>sr</name> <operator>-</operator> <name>n_uword_bits</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>clzsi</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>&gt;</operator> <name>n_uword_bits</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>sr</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>==</operator> <name>n_uword_bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <name>sr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<decl_stmt><decl><type><name>su_int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>sr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>sr</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_uword_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>carry</name></expr>;</expr_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>di_int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>di_int</name><operator>)</operator><operator>(</operator><name><name>d</name><operator>.</operator><name>all</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>all</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>n_udword_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>all</name></name> <operator>-=</operator> <name><name>d</name><operator>.</operator><name>all</name></name> <operator>&amp;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>all</name></name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>all</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>carry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>all</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>q</name><operator>.</operator><name>all</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
