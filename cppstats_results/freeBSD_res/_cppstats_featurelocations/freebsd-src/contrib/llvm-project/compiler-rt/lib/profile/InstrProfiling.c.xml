<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfiling.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingInternal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_PROF_DATA</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint64_t</name></type> <name>__llvm_profile_get_magic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><operator>(</operator><name>INSTR_PROF_RAW_MAGIC_64</name><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name>INSTR_PROF_RAW_MAGIC_32</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>__llvm_profile_set_dumped</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>lprofSetProfileDumped</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint8_t</name></type>
<name>__llvm_profile_get_num_padding_bytes</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>SizeInBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">7</literal> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>SizeInBytes</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>uint64_t</name></type> <name>__llvm_profile_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__llvm_profile_raw_version</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name> <name>void</name></type> <name>__llvm_profile_reset_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><call><name>__llvm_profile_begin_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>E</name> <init>= <expr><call><name>__llvm_profile_end_counters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>E</name> <operator>-</operator> <name>I</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataBegin</name> <init>= <expr><call><name>__llvm_profile_begin_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DataEnd</name> <init>= <expr><call><name>__llvm_profile_end_data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>DI</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>DI</name> <operator>=</operator> <name>DataBegin</name></expr>;</init> <condition><expr><name>DI</name> <operator>&lt;</operator> <name>DataEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>DI</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>CurrentVSiteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>VKI</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>DI</name><operator>-&gt;</operator><name>Values</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>ValueCounters</name> <init>= <expr><operator>(</operator><name>ValueProfNode</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>DI</name><operator>-&gt;</operator><name>Values</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>VKI</name> <operator>=</operator> <name>IPVK_First</name></expr>;</init> <condition><expr><name>VKI</name> <operator>&lt;=</operator> <name>IPVK_Last</name></expr>;</condition> <incr><expr><operator>++</operator><name>VKI</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>CurrentVSiteCount</name> <operator>+=</operator> <name><name>DI</name><operator>-&gt;</operator><name>NumValueSites</name><index>[<expr><name>VKI</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CurrentVSiteCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>CurrentVNode</name> <init>= <expr><name><name>ValueCounters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>CurrentVNode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>CurrentVNode</name><operator>-&gt;</operator><name>Count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>CurrentVNode</name> <operator>=</operator> <name><name>CurrentVNode</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>lprofSetProfileDumped</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
