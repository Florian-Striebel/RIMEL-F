<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/floattitf.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<function_decl><type><name>long</name> <name>double</name></type> <name>__floatditf</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> <name>__floatunditf</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function><type><name>long</name> <name>double</name></type> <name>__floattitf</name><parameter_list>(<parameter><decl><type><name>__int128_t</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ArgHiPart</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ArgLoPart</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ConvertedHiPart</name> <init>= <expr><call><name>__floatditf</name><argument_list>(<argument><expr><name>ArgHiPart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ConvertedLoPart</name> <init>= <expr><call><name>__floatunditf</name><argument_list>(<argument><expr><name>ArgLoPart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<return>return <expr><operator>(</operator><operator>(</operator><name>ConvertedHiPart</name> <operator>*</operator> <literal type="number">0x1</literal><literal type="number">.0p64</literal><operator>)</operator> <operator>+</operator> <name>ConvertedLoPart</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
