<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_persistent_allocator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_PERSISTENT_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_PERSISTENT_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PersistentAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tryAlloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>StaticSpinMutex</name></type> <name>mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>region_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>region_end</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>void</name> <operator>*</operator><name>PersistentAllocator</name><operator>::</operator><macro><name>tryAlloc</name><argument_list>(<argument>uptr size</argument>)</argument_list></macro> <block>{

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>cmp</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_pos</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_end</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cmp</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><name>cmp</name> <operator>+</operator> <name>size</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
}

<namespace><specifier>inline</specifier> void *<name>PersistentAllocator</name>::<name>alloc</name>(<name>uptr</name> <name>size</name></namespace></block></for>) <block>{

<expr><name>void</name> <operator>*</operator><name>s</name> <operator>=</operator> <call><name>tryAlloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<name>SpinMutexLock</name> <call><name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tryAlloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>allocsz</name> <init>= <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>allocsz</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>allocsz</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>mem</name> <init>= <expr><operator>(</operator><name>uptr</name><operator>)</operator><call><name>MmapOrDie</name><argument_list>(<argument><expr><name>allocsz</name></expr></argument>, <argument><expr><literal type="string">"stack depot"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_end</name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>allocsz</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_pos</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PersistentAllocator</name></type> <name>thePersistentAllocator</name></decl>;</decl_stmt>
<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>PersistentAlloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>thePersistentAllocator</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
