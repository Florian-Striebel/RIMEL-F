<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>PrimaryAllocator</name></expr></argument>,
<argument><expr><name>class</name> <name>LargeMmapAllocatorPtrArray</name> <operator>=</operator> <name>DefaultLargeMmapAllocatorPtrArray</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CombinedAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>AllocatorCache</name> <init>= <expr><name>typename</name> <name>PrimaryAllocator</name><operator>::</operator><name>AllocatorCache</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SecondaryAllocator</name> <init>=
<expr><name><name>LargeMmapAllocator</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>PrimaryAllocator</name><operator>::</operator><name>MapUnmapCallback</name></expr></argument>,
<argument><expr><name>LargeMmapAllocatorPtrArray</name></expr></argument>,
<argument><expr><name>typename</name> <name>PrimaryAllocator</name><operator>::</operator><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>InitLinkerInitialized</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>stats_</name><operator>.</operator><name>InitLinkerInitialized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>release_to_os_interval_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>InitLinkerInitialized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>heap_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>stats_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>release_to_os_interval_ms</name></expr></argument>, <argument><expr><name>heap_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>alignment</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Report</name><argument_list>(<argument><expr><literal type="string">"WARNING: %s: CombinedAllocator allocation overflow: "</literal>
<literal type="string">"0x%zx bytes with 0x%zx alignment requested\n"</literal></expr></argument>,
<argument><expr><name>SanitizerToolName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>original_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>RoundUpTo</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>CanAllocate</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>Allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>primary_</name></expr></argument>, <argument><expr><call><name><name>primary_</name><operator>.</operator><name>ClassID</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>secondary_</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_</name></expr></argument>, <argument><expr><name>original_size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>alignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>s32</name> <macro><name>ReleaseToOSIntervalMs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>ReleaseToOSIntervalMs</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetReleaseToOSIntervalMs</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>release_to_os_interval_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>SetReleaseToOSIntervalMs</name></name><argument_list>(<argument><expr><name>release_to_os_interval_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceReleaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>ForceReleaseToOS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>Deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>primary_</name></expr></argument>, <argument><expr><call><name><name>primary_</name><operator>.</operator><name>GetSizeClass</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>Deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Reallocate</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Allocate</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Deallocate</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>PointerIsMine</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>old_size</name> <init>= <expr><call><name>GetActuallyAllocatedSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>memcpy_size</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_p</name> <init>= <expr><call><name>Allocate</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>new_p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>memcpy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Deallocate</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PointerIsMine</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secondary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>FromPrimary</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetMetaData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>GetMetaData</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secondary_</name><operator>.</operator><name>GetMetaData</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>GetBlockBegin</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secondary_</name><operator>.</operator><name>GetBlockBegin</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name> <modifier>*</modifier></type><name>GetBlockBeginFastLocked</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>GetBlockBegin</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secondary_</name><operator>.</operator><name>GetBlockBeginFastLocked</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>GetActuallyAllocatedSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>primary_</name><operator>.</operator><name>PointerIsMine</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>GetActuallyAllocatedSize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secondary_</name><operator>.</operator><name>GetActuallyAllocatedSize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>TotalMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>primary_</name><operator>.</operator><name>TotalMemoryUsed</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>secondary_</name><operator>.</operator><name>TotalMemoryUsed</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TestOnlyUnmap</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>TestOnlyUnmap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>InitCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>Init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>Destroy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>primary_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SwallowCache</name><parameter_list>(<parameter><decl><type><name>AllocatorCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>Drain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>primary_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>GetStats</name><argument_list>(<argument><expr><name>AllocatorStatCounters</name> <name>s</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>stats_</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>PrintStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>PrintStats</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>PrintStats</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForceLock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>ForceLock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>ForceLock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForceUnlock</name><parameter_list>()</parameter_list> NO_THREAD_SAFETY_ANALYSIS <block>{<block_content>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>ForceUnlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>ForceUnlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><name>ForEachChunkCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>primary_</name><operator>.</operator><name>ForEachChunk</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>secondary_</name><operator>.</operator><name>ForEachChunk</name></name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>PrimaryAllocator</name></type> <name>primary_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecondaryAllocator</name></type> <name>secondary_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatorGlobalStats</name></type> <name>stats_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</unit>
