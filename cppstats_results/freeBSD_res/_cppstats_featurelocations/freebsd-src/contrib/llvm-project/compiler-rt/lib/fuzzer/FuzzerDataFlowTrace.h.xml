<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDataFlowTrace.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_DATA_FLOW_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_DATA_FLOW_TRACE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerIO.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>CollectDataFlow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>DFTBinary</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>DirPath</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CorporaFiles</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BlockCoverage</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>AppendCoverage</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>istream</name> <operator>&amp;</operator><name>IN</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>AppendCoverage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>NumCoveredFunctions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Functions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>uint32_t</name></type> <name>GetCounter</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>FunctionId</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>BasicBlockId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>Functions</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FunctionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>==</operator> <call><name><name>Functions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Counters</name> <init>= <expr><name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BasicBlockId</name> <operator>&lt;</operator> <call><name><name>Counters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Counters</name><index>[<expr><name>BasicBlockId</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetNumberOfBlocks</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>FunctionId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>Functions</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FunctionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>==</operator> <call><name><name>Functions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Counters</name> <init>= <expr><name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Counters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetNumberOfCoveredBlocks</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>FunctionId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>Functions</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FunctionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>==</operator> <call><name><name>Functions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Counters</name> <init>= <expr><name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>Cnt</name><range>: <expr><name>Counters</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>Cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Result</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>FunctionWeights</name><argument_list>(<argument><expr><name>size_t</name> <name>NumFunctions</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Functions</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<typedef>typedef <type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>CoverageVector</name>;</typedef>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>NumberOfCoveredBlocks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoverageVector</name> <operator>&amp;</operator><name>Counters</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>Cnt</name> <range>: <expr><name>Counters</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>Cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Res</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>NumberOfUncoveredBlocks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoverageVector</name> <operator>&amp;</operator><name>Counters</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Counters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>NumberOfCoveredBlocks</name><argument_list>(<argument><expr><name>Counters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>SmallestNonZeroCounter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoverageVector</name> <operator>&amp;</operator><name>Counters</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Counters</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Res</name> <init>= <expr><name><name>Counters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>Cnt</name> <range>: <expr><name>Counters</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>Cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Res</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>Res</name></expr></argument>, <argument><expr><name>Cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>CoverageVector</name></expr></argument>&gt;</argument_list></name> <name>Functions</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>FunctionsWithDFT</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DataFlowTrace</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>ReadCoverage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>DirPath</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Init</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>DirPath</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>FocusFunction</name></expr></argument>,
<argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CorporaFiles</name></expr></argument>, <argument><expr><name>Random</name> <operator>&amp;</operator><name>Rand</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Traces</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>InputSha1</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>Traces</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>InputSha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>!=</operator> <call><name><name>Traces</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>Traces</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BlockCoverage</name></type> <name>Coverage</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CorporaHashes</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
