<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_lfstack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_local_address_space_view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_procmaps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_type_traits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrimaryAllocatorName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SecondaryAllocatorName</name></decl>;</decl_stmt>




<function_decl><type><name>bool</name></type> <name>AllocatorMayReturnNull</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetAllocatorMayReturnNull</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>may_return_null</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>IsAllocatorOutOfMemory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAllocatorOutOfMemory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintHintAllocatorCannotReturnNull</name><parameter_list>()</parameter_list>;</function_decl>


<struct>struct <name>NoOpMapUnmapCallback</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>OnMap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const <block>{<block_content> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>OnUnmap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const <block>{<block_content> </block_content>}</block></decl></decl_stmt>
}</block>;</struct>


<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ForEachChunkCallback</name>)<parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>chunk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>Rand</name><parameter_list>(<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>state</name> <operator>=</operator> <operator>*</operator><name>state</name> <operator>*</operator> <literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>u32</name></type> <name>RandN</name><parameter_list>(<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Rand</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>n</name></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>RandomShuffle</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>rand_state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>state</name> <init>= <expr><operator>*</operator><name>rand_state</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><call><name>RandN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>rand_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_size_class_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_primary64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_bytemap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_primary32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_local_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_secondary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_allocator_combined.h"</cpp:file></cpp:include>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
