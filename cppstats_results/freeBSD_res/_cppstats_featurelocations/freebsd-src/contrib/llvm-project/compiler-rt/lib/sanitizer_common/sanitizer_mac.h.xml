<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_mac.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_MAC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_MAC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_posix.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>MemoryMappingLayoutData</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>current_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>current_magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>current_filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleArch</name></type> <name>current_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name><name>current_uuid</name><index>[<expr><name>kModuleUUIDSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_load_cmd_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_load_cmd_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>current_instrumented</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>VersionType</name><operator>&gt;</operator>
struct <name>VersionBase</name> <block>{
<expr><name>u16</name> <name>major</name></expr>;
<expr><name>u16</name> <name>minor</name></expr>;

<macro><name>VersionBase</name><argument_list>(<argument>u16 major</argument>, <argument>u16 minor</argument>)</argument_list></macro> <operator>:</operator> <expr><call><name>major</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>, <macro><name>minor</name><argument_list>(<argument>minor</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>VersionType</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>major</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>major</name></name> <operator>&amp;&amp;</operator> <name>minor</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>minor</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>VersionType</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>major</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>major</name></name> <operator>||</operator>
<operator>(</operator><name>major</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>major</name></name> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <name><name>other</name><operator>.</operator><name>minor</name></name><operator>)</operator></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>VersionType</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&gt;=</operator> <name>other</name><operator>)</operator></expr>;</return> }</block>
}</expr>;

struct <expr><name>MacosVersion</name> <operator>:</operator> <name><name>VersionBase</name><argument_list type="generic">&lt;<argument><expr><name>MacosVersion</name></expr></argument>&gt;</argument_list></name> <block>{
<macro><name>MacosVersion</name><argument_list>(<argument>u16 major</argument>, <argument>u16 minor</argument>)</argument_list></macro> <operator>:</operator> <macro><name>VersionBase</name><argument_list>(<argument>major</argument>, <argument>minor</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;

struct <expr><name>DarwinKernelVersion</name> <operator>:</operator> <name><name>VersionBase</name><argument_list type="generic">&lt;<argument><expr><name>DarwinKernelVersion</name></expr></argument>&gt;</argument_list></name> <block>{
<macro><name>DarwinKernelVersion</name><argument_list>(<argument>u16 major</argument>, <argument>u16 minor</argument>)</argument_list></macro> <operator>:</operator> <macro><name>VersionBase</name><argument_list>(<argument>major</argument>, <argument>minor</argument>)</argument_list></macro> <expr><block>{}</block></expr>
}</block></expr>;

<expr><name>MacosVersion</name> <call><name>GetMacosAlignedVersion</name><argument_list>()</argument_list></call></expr>;
<expr><name>DarwinKernelVersion</name> <call><name>GetDarwinKernelVersion</name><argument_list>()</argument_list></call></expr>;

<expr><name>char</name> <operator>*</operator><operator>*</operator><call><name>GetEnviron</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>RestrictMemoryToMaxAddress</name><argument_list>(<argument>uptr max_address</argument>)</argument_list></macro></expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
