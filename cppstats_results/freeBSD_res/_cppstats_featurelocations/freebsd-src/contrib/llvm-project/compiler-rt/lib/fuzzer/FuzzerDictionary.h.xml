<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDictionary.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_DICTIONARY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_DICTIONARY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerIO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>kMaxSizeT</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>FixedWord</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kMaxSize</name> <init>= <expr><name>kMaxSizeT</name></expr></init></decl>;</decl_stmt>
<macro><name>FixedWord</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>FixedWord</name><argument_list>(<argument>const uint8_t *B</argument>, <argument>size_t S</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Set</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<function><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>kMaxSizeT</name> <operator>&lt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"FixedWord::kMaxSizeT cannot fit in a uint8_t."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>S</name> <operator>&lt;=</operator> <name>kMaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>FixedWord</name><argument_list type="generic">&lt;<argument><expr><name>kMaxSize</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>w</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Size</name> <operator>==</operator> <name><name>w</name><operator>.</operator><name>Size</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name><name>w</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>GetMaxSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>kMaxSize</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>uint8_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Data</name><index>[<expr><name>kMaxSize</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>FixedWord</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></type> <name>Word</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>DictionaryEntry</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>DictionaryEntry</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>DictionaryEntry</name><argument_list>(<argument>Word W</argument>)</argument_list></macro> : <macro><name>W</name><argument_list>(<argument>W</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>DictionaryEntry</name><argument_list>(<argument>Word W</argument>, <argument>size_t PositionHint</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>W</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>PositionHint</name><argument_list>(<argument>PositionHint</argument>)</argument_list></macro> <expr><block>{}</block>
<specifier>const</specifier> <name>Word</name> <operator>&amp;</operator><macro><name>GetW</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>W</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>HasPositionHint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PositionHint</name> <operator>!=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>GetPositionHint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>HasPositionHint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>PositionHint</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>IncUseCount</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>UseCount</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>IncSuccessCount</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>SuccessCount</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>size_t</name> <macro><name>GetUseCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UseCount</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>GetSuccessCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>SuccessCount</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PrintAfter</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>PrintASCII</name><argument_list>(<argument><expr><call><name><name>W</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>W</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HasPositionHint</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"@%zd"</literal></expr></argument>, <argument><expr><call><name>GetPositionHint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>PrintAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Word</name></type> <name>W</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>PositionHint</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>UseCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>SuccessCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kMaxDictSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ContainsWord</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Word</name> <operator>&amp;</operator><name>W</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>any_of</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>DictionaryEntry</name> <operator>&amp;</operator><name>DE</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>DE</name><operator>.</operator><name>GetW</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>W</name></expr>;</return>
}</block></expr></argument></argument_list></call></expr></return>)</block_content></block></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>DictionaryEntry</name> <operator>*</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>&amp;</operator><name><name>DE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>DictionaryEntry</name> <operator>*</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>begin</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>DictionaryEntry</name> <modifier>&amp;</modifier></type> <name>operator</name>[] <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DE</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>DictionaryEntry</name></type> <name>DE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;</operator> <name>kMaxDictSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>DE</name><index>[<expr><name>Size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>DictionaryEntry</name></type> <name><name>DE</name><index>[<expr><name>kMaxDictSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ParseOneDictionaryEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Str</name></expr></argument>, <argument><expr><name>Unit</name> <operator>*</operator><name>U</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ParseDictionaryFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Text</name></expr></argument>, <argument><expr><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>Unit</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Units</name></expr></argument>)</argument_list></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
