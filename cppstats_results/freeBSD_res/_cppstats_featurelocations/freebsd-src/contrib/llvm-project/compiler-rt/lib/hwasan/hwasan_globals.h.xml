<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_globals.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_GLOBALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_GLOBALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;link.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>


<struct>struct <name>hwasan_global</name> <block>{


<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>info</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>addr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>gv_relptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>u8</name> <macro><name>tag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>info</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</return> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>s32</name></type> <name>gv_relptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>info</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>hwasan_global</name></expr></argument>&gt;</argument_list></name></type> <name>HwasanGlobalsFor</name><argument_list>(<argument><expr><macro><name>ElfW</name><argument_list>(<argument>Addr</argument>)</argument_list></macro> <name>base</name></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>ElfW</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>phdr</name></expr></argument>,
<argument><expr><macro><name>ElfW</name><argument_list>(<argument>Half</argument>)</argument_list></macro> <name>phnum</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
