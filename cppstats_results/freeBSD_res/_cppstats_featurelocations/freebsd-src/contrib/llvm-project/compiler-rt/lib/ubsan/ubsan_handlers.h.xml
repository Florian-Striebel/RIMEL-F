<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/ubsan/ubsan_handlers.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UBSAN_HANDLERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBSAN_HANDLERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubsan_value.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__ubsan</name> <block>{<block_content>

<struct>struct <name>TypeMismatchData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>LogAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>TypeCheckKind</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNRECOVERABLE</name><parameter_list>(<parameter><type><name>checkname</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" SANITIZER_INTERFACE_ATTRIBUTE NORETURN void __ubsan_handle_ ##checkname( __VA_ARGS__ );</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVERABLE</name><parameter_list>(<parameter><type><name>checkname</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern "C" SANITIZER_INTERFACE_ATTRIBUTE void __ubsan_handle_ ##checkname( __VA_ARGS__ ); extern "C" SANITIZER_INTERFACE_ATTRIBUTE NORETURN void __ubsan_handle_ ##checkname ##_abort( __VA_ARGS__ );</cpp:value></cpp:define>








<macro><name>RECOVERABLE</name><argument_list>(<argument>type_mismatch_v1</argument>, <argument>TypeMismatchData *Data</argument>, <argument>ValueHandle Pointer</argument>)</argument_list></macro>

<struct>struct <name>AlignmentAssumptionData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>AssumptionLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>RECOVERABLE</name><argument_list>(<argument>alignment_assumption</argument>, <argument>AlignmentAssumptionData *Data</argument>,
<argument>ValueHandle Pointer</argument>, <argument>ValueHandle Alignment</argument>, <argument>ValueHandle Offset</argument>)</argument_list></macro>

<struct>struct <name>OverflowData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>add_overflow</argument>, <argument>OverflowData *Data</argument>, <argument>ValueHandle LHS</argument>, <argument>ValueHandle RHS</argument>)</argument_list></macro>


<macro><name>RECOVERABLE</name><argument_list>(<argument>sub_overflow</argument>, <argument>OverflowData *Data</argument>, <argument>ValueHandle LHS</argument>, <argument>ValueHandle RHS</argument>)</argument_list></macro>


<macro><name>RECOVERABLE</name><argument_list>(<argument>mul_overflow</argument>, <argument>OverflowData *Data</argument>, <argument>ValueHandle LHS</argument>, <argument>ValueHandle RHS</argument>)</argument_list></macro>


<macro><name>RECOVERABLE</name><argument_list>(<argument>negate_overflow</argument>, <argument>OverflowData *Data</argument>, <argument>ValueHandle OldVal</argument>)</argument_list></macro>


<macro><name>RECOVERABLE</name><argument_list>(<argument>divrem_overflow</argument>, <argument>OverflowData *Data</argument>,
<argument>ValueHandle LHS</argument>, <argument>ValueHandle RHS</argument>)</argument_list></macro>

<struct>struct <name>ShiftOutOfBoundsData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>LHSType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>RHSType</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>RECOVERABLE</name><argument_list>(<argument>shift_out_of_bounds</argument>, <argument>ShiftOutOfBoundsData *Data</argument>,
<argument>ValueHandle LHS</argument>, <argument>ValueHandle RHS</argument>)</argument_list></macro>

<struct>struct <name>OutOfBoundsData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>ArrayType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>IndexType</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>out_of_bounds</argument>, <argument>OutOfBoundsData *Data</argument>, <argument>ValueHandle Index</argument>)</argument_list></macro>

<struct>struct <name>UnreachableData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>UNRECOVERABLE</name><argument_list>(<argument>builtin_unreachable</argument>, <argument>UnreachableData *Data</argument>)</argument_list></macro>

<macro><name>UNRECOVERABLE</name><argument_list>(<argument>missing_return</argument>, <argument>UnreachableData *Data</argument>)</argument_list></macro>

<struct>struct <name>VLABoundData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>vla_bound_not_positive</argument>, <argument>VLABoundData *Data</argument>, <argument>ValueHandle Bound</argument>)</argument_list></macro>



<struct>struct <name>FloatCastOverflowData</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>FromType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>ToType</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FloatCastOverflowDataV2</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>FromType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>ToType</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>RECOVERABLE</name><argument_list>(<argument>float_cast_overflow</argument>, <argument>void *Data</argument>, <argument>ValueHandle From</argument>)</argument_list></macro>

<struct>struct <name>InvalidValueData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>load_invalid_value</argument>, <argument>InvalidValueData *Data</argument>, <argument>ValueHandle Val</argument>)</argument_list></macro>



<enum>enum <name>ImplicitConversionCheckKind</name> : <type><name>unsigned</name> <name>char</name></type> <block>{
<decl><name>ICCK_IntegerTruncation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ICCK_UnsignedIntegerTruncation</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>ICCK_SignedIntegerTruncation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>ICCK_IntegerSignChange</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>ICCK_SignedIntegerTruncationOrSignChange</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>ImplicitConversionData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>FromType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>ToType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Kind</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>implicit_conversion</argument>, <argument>ImplicitConversionData *Data</argument>, <argument>ValueHandle Src</argument>,
<argument>ValueHandle Dst</argument>)</argument_list></macro>



<enum>enum <name>BuiltinCheckKind</name> : <type><name>unsigned</name> <name>char</name></type> <block>{
<decl><name>BCK_CTZPassedZero</name></decl>,
<decl><name>BCK_CLZPassedZero</name></decl>,
}</block>;</enum>

<struct>struct <name>InvalidBuiltinData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Kind</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>invalid_builtin</argument>, <argument>InvalidBuiltinData *Data</argument>)</argument_list></macro>

<struct>struct <name>InvalidObjCCast</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>ExpectedType</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>invalid_objc_cast</argument>, <argument>InvalidObjCCast *Data</argument>, <argument>ValueHandle Pointer</argument>)</argument_list></macro>

<struct>struct <name>NonNullReturnData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>AttrLoc</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>RECOVERABLE</name><argument_list>(<argument>nonnull_return_v1</argument>, <argument>NonNullReturnData *Data</argument>, <argument>SourceLocation *Loc</argument>)</argument_list></macro>
<macro><name>RECOVERABLE</name><argument_list>(<argument>nullability_return_v1</argument>, <argument>NonNullReturnData *Data</argument>, <argument>SourceLocation *Loc</argument>)</argument_list></macro>

<struct>struct <name>NonNullArgData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>AttrLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ArgIndex</name></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>RECOVERABLE</name><argument_list>(<argument>nonnull_arg</argument>, <argument>NonNullArgData *Data</argument>)</argument_list></macro>
<macro><name>RECOVERABLE</name><argument_list>(<argument>nullability_arg</argument>, <argument>NonNullArgData *Data</argument>)</argument_list></macro>

<struct>struct <name>PointerOverflowData</name> <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>RECOVERABLE</name><argument_list>(<argument>pointer_overflow</argument>, <argument>PointerOverflowData *Data</argument>, <argument>ValueHandle Base</argument>,
<argument>ValueHandle Result</argument>)</argument_list></macro>



<enum>enum <name>CFITypeCheckKind</name> : <type><name>unsigned</name> <name>char</name></type> <block>{
<decl><name>CFITCK_VCall</name></decl>,
<decl><name>CFITCK_NVCall</name></decl>,
<decl><name>CFITCK_DerivedCast</name></decl>,
<decl><name>CFITCK_UnrelatedCast</name></decl>,
<decl><name>CFITCK_ICall</name></decl>,
<decl><name>CFITCK_NVMFCall</name></decl>,
<decl><name>CFITCK_VMFCall</name></decl>,
}</block>;</enum>

<struct>struct <name>CFICheckFailData</name> <block>{
<decl_stmt><decl><type><name>CFITypeCheckKind</name></type> <name>CheckKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeDescriptor</name> <modifier>&amp;</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>


<macro><name>RECOVERABLE</name><argument_list>(<argument>cfi_check_fail</argument>, <argument>CFICheckFailData *Data</argument>, <argument>ValueHandle Function</argument>,
<argument>uptr VtableIsValid</argument>)</argument_list></macro>

<struct_decl>struct <name>ReportOptions</name>;</struct_decl>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__ubsan_handle_cfi_bad_type</name><parameter_list>(
<parameter><decl><type><name>CFICheckFailData</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>ValueHandle</name></type> <name>Vtable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ValidVtable</name></decl></parameter>,
<parameter><decl><type><name>ReportOptions</name></type> <name>Opts</name></decl></parameter>)</parameter_list>;</function_decl></extern>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
