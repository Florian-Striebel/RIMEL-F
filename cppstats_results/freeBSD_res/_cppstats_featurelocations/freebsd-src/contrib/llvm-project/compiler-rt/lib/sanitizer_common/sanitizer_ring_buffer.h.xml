<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_ring_buffer.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_RING_BUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_RING_BUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>RingBuffer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>RingBuffer</name> <modifier>*</modifier></type><name>New</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name>MmapOrDie</name><argument_list>(<argument><expr><call><name>SizeInBytes</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"RingBuffer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>RB</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>RingBuffer</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>End</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SizeInBytes</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>RB</name><operator>-&gt;</operator><name>last_</name></name> <operator>=</operator> <name><name>RB</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>End</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RB</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>Delete</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>UnmapOrDie</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>SizeInBytes</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>last_</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>SizeInBytes</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>SizeInBytes</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>SizeInBytes</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>next_</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_</name> <operator>&lt;=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_</name> <operator>=</operator> <name>last_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>T</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>uptr</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sptr</name></type> <name>IdxNext</name> <init>= <expr><name>Idx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>IdxNext</name> <operator>&gt;</operator> <name>last_</name> <operator>-</operator> <name>next_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IdxNext</name> <operator>-=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>next_</name><index>[<expr><name>IdxNext</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<macro><name>RingBuffer</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>RingBuffer</name><argument_list>()</argument_list></macro> <block>{}</block>
<call><name>RingBuffer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RingBuffer</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>







<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>last_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>next_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name><name>data_</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CompactRingBuffer</name> <block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>kPageSizeBits</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>kSizeShift</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uptr</name></type> <name>kNextMask</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kSizeShift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>GetStorageSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>long_</name> <operator>&gt;&gt;</operator> <name>kSizeShift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>kPageSizeBits</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>CompactRingBuffer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>IsPowerOfTwo</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kPageSizeBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <name>kPageSizeBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><operator>(</operator><name>uptr</name><operator>)</operator><name>storage</name> <operator>%</operator> <operator>(</operator><name>size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>long_</name> <operator>=</operator> <operator>(</operator><name>uptr</name><operator>)</operator><name>storage</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <name>kPageSizeBits</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>kSizeShift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>long_</name> <operator>=</operator> <operator>(</operator><name>long_</name> <operator>&amp;</operator> <operator>~</operator><name>kNextMask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uptr</name><operator>)</operator><name>next</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<macro><name>CompactRingBuffer</name><argument_list>(<argument>void *storage</argument>, <argument>uptr size</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>CompactRingBuffer</name><argument_list>(<argument>const CompactRingBuffer &amp;other</argument>, <argument>void *storage</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>GetStorageSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>internal_memcpy</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>StartOfStorage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Idx</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>Next</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>T</name> <operator>*</operator><operator>)</operator><call><name><name>other</name><operator>.</operator><name>StartOfStorage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetNext</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>*</operator><operator>)</operator><name>storage</name> <operator>+</operator> <name>Idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>T</name> <operator>*</operator><macro><name>Next</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long_</name> <operator>&amp;</operator> <name>kNextMask</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>StartOfStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><call><name>Next</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><call><name>GetStorageSize</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>EndOfStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><call><name>StartOfStorage</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>GetStorageSize</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetStorageSize</name><argument_list>()</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>Next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>T</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>next</name> <operator>&amp;</operator> <operator>~</operator><call><name>GetStorageSize</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetNext</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>uptr</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>Begin</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>T</name> <operator>*</operator><operator>)</operator><call><name>StartOfStorage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sptr</name></type> <name>StorageIdx</name> <init>= <expr><call><name>Next</name><argument_list>()</argument_list></call> <operator>-</operator> <name>Begin</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>StorageIdx</name> <operator>-=</operator> <operator>(</operator><name>sptr</name><operator>)</operator><operator>(</operator><name>Idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>StorageIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>StorageIdx</name> <operator>+=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>Begin</name><index>[<expr><name>StorageIdx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>CompactRingBuffer</name><argument_list>()</argument_list></macro> <block>{}</block>
<call><name>CompactRingBuffer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompactRingBuffer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>long_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
