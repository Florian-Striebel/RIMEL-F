<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/DD.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILERRT_DD_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILERRT_DD_HEADER</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../int_lib.h"</cpp:file></cpp:include>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lo</name></decl>;</decl_stmt>
}</block> <decl><name>s</name></decl>;</struct>
}</block></union></type> <name>DD</name>;</typedef>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>
}</block></union></type> <name>doublebits</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWORDER</name><parameter_list>(<parameter><type><name>xy</name></type></parameter>, <parameter><type><name>xHi</name></type></parameter>, <parameter><type><name>xLo</name></type></parameter>, <parameter><type><name>yHi</name></type></parameter>, <parameter><type><name>yLo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((xHi) * (yHi) - (xy)) + (xHi) * (yLo)) + (xLo) * (yHi)) + (xLo) * (yLo))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>__inline</name> <name>ALWAYS_INLINE</name> <name>double</name></type> <name>local_fabs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>doublebits</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>&amp;=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x7fffffffffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>result</name><operator>.</operator><name>d</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>ALWAYS_INLINE</name> <name>double</name></type> <name>high26bits</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>doublebits</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>&amp;=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xfffffffff8000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>result</name><operator>.</operator><name>d</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>ALWAYS_INLINE</name> <name>int</name></type> <name>different_sign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>doublebits</name></type> <name>xsignbit</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>x</name></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>ysignbit</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>y</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>xsignbit</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ysignbit</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>long</name> <name>double</name></type> <name>__gcc_qadd</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> <name>__gcc_qsub</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> <name>__gcc_qmul</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name> <name>double</name></type> <name>__gcc_qdiv</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
