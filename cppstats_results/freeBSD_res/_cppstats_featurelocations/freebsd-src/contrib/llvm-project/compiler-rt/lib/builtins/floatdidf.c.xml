<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/floatdidf.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"int_lib.h"</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SOFTFP__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>COMPILER_RT_ABI</name> <name>double</name></type> <name>__floatdidf</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>twop52</name> <init>= <expr><literal type="number">4503599627370496.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>twop32</name> <init>= <expr><literal type="number">4294967296.0</literal></expr></init></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block> <decl><name>low</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name>twop52</name></expr>}</block></expr></init></decl>;</union>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>high</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name>twop32</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>low</name><operator>.</operator><name>x</name></name> <operator>|=</operator> <name>a</name> <operator>&amp;</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x00000000ffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>high</name> <operator>-</operator> <name>twop52</name><operator>)</operator> <operator>+</operator> <name><name>low</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><name>COMPILER_RT_ABI</name> <name>double</name></type> <name>__floatdidf</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>N</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>di_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>di_int</name></type> <name>s</name> <init>= <expr><name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sd</name> <init>= <expr><name>N</name> <operator>-</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>sd</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&gt;</operator> <name>DBL_MANT_DIG</name></expr>)</condition> <block>{<block_content>







<switch>switch <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DBL_MANT_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DBL_MANT_DIG</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>du_int</name><operator>)</operator><name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>sd</name> <operator>-</operator> <operator>(</operator><name>DBL_MANT_DIG</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>du_int</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>N</name> <operator>+</operator> <name>DBL_MANT_DIG</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>sd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>du_int</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>DBL_MANT_DIG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>DBL_MANT_DIG</name> <operator>-</operator> <name>sd</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>double_bits</name></type> <name>fb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fb</name><operator>.</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>high</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>su_int</name><operator>)</operator><name>s</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>su_int</name><operator>)</operator><operator>(</operator><name>e</name> <operator>+</operator> <literal type="number">1023</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>su_int</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000FFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name><operator>.</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name>su_int</name><operator>)</operator><name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>fb</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_RT_ARMHF_TARGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AEABI_RTABI</name> <name>double</name></type> <name>__aeabi_l2d</name><parameter_list>(<parameter><decl><type><name>di_int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__floatdidf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>COMPILER_RT_ALIAS</name><argument_list>(<argument>__floatdidf</argument>, <argument>__aeabi_l2d</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
