<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/checksum.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_CHECKSUM_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_CHECKSUM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal_defs.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smmintrin.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_INTRINSIC</name></cpp:macro> <cpp:value>FIRST_32_SECOND_64(_mm_crc32_u32, _mm_crc32_u64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm_acle.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32_INTRINSIC</name></cpp:macro> <cpp:value>FIRST_32_SECOND_64(__crc32cw, __crc32cd)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Checksum</name> <range>: <expr><name>u8</name> <block>{
<expr><name>BSD</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>HardwareCRC32</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>





<function><type><specifier>inline</specifier> <name>u16</name></type> <name>computeBSDChecksum</name><parameter_list>(<parameter><decl><type><name>u16</name></type> <name>Sum</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>u8</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>Sum</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u16</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>Sum</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Sum</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Sum</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u16</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Sum</name> <operator>+</operator> <operator>(</operator><name>Data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Data</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>Sum</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>hasHardwareCRC32</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>WEAK</name> <name>u32</name></type> <name>computeHardwareCRC32</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Crc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Data</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
