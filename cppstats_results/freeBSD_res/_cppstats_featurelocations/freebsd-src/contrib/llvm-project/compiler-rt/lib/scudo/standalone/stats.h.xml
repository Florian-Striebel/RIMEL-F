<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/stats.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_STATS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_STATS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>


<enum>enum <name>StatType</name> <block>{ <decl><name>StatAllocated</name></decl>, <decl><name>StatFree</name></decl>, <decl><name>StatMapped</name></decl>, <decl><name>StatCount</name></decl> }</block>;</enum>

<typedef>typedef <type><name>uptr</name></type> <name><name>StatCounters</name><index>[<expr><name>StatCount</name></expr>]</index></name>;</typedef>






<decl_stmt><decl><type><name>class</name></type> <name>LocalStats</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>StatCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StatType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>StatType</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>V</name> <operator>+=</operator> <call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>StatType</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>StatType</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>uptr</name></type> <name>get</name><argument_list>(<argument><expr><name>StatType</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>StatsArray</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>LocalStats</name> <modifier>*</modifier></type><name>Next</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LocalStats</name> <modifier>*</modifier></type><name>Prev</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name><name>StatsArray</name><index>[<expr><name>StatCount</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>GlobalStats</name> <range>: <expr><name>public</name> <name>LocalStats</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>init</name><argument_list>()</argument_list></macro> <block>{ <expr><name>LocalStats</name><operator>::</operator><call><name>init</name><argument_list>()</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>link</name><argument_list>(<argument>LocalStats *S</argument>)</argument_list></macro> <block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>StatsList</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>unlink</name><argument_list>(<argument>LocalStats *S</argument>)</argument_list></macro> <block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>StatsList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>StatCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StatType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StatType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>

<name>void</name> <macro><name>get</name><argument_list>(<argument>uptr *S</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>StatCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <name>LocalStats</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StatType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Stats</name> <range>: <expr><name>StatsList</name></expr></range></decl></init>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>StatCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>I</name></expr>]</index></name> <operator>+=</operator> <call><name><name>Stats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StatType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt/>}</block_content>

for (uptr I = 0</block><empty_stmt>;</empty_stmt></for> <name>I</name> <operator>&lt;</operator> <name>StatCount</name></block></expr></range></decl>;</decl_stmt> <expr_stmt><expr><name>I</name><operator>++</operator></expr></expr_stmt>)</block_content>
S[I] = static_cast&lt;sptr&gt;(S[I]</block></decl>) &gt;= 0 ? S[I] : 0;</decl_stmt>
}

void <macro><name>lock</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<function><type><name>void</name></type> <name>unlock</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>mutable</name> <name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>DoublyLinkedList</name><argument_list type="generic">&lt;<argument><expr><name>LocalStats</name></expr></argument>&gt;</argument_list></name></type> <name>StatsList</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
