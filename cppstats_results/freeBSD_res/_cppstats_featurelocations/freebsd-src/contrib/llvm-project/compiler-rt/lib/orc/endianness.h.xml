<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/endianness.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_ENDIAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__Fuchsia__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/machine.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN</name></cpp:macro> <cpp:value>4321</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE_ENDIAN</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>BIG_ENDIAN</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_ENDIAN</name></cpp:macro> <cpp:value>4321</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE_ENDIAN</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>BIG_ENDIAN</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/endian.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>



<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>ByteSwap_16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<return>return <expr><call><name>_byteswap_ushort</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Hi</name> <init>= <expr><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Lo</name> <init>= <expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>Hi</name> <operator>|</operator> <name>Lo</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>ByteSwap_32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__llvm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ICC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>_byteswap_ulong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Byte0</name> <init>= <expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x000000FF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Byte1</name> <init>= <expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x0000FF00</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Byte2</name> <init>= <expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x00FF0000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Byte3</name> <init>= <expr><name>value</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>Byte0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Byte3</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>ByteSwap_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__llvm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ICC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>_byteswap_uint64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Hi</name> <init>= <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Lo</name> <init>= <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>Hi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>Lo</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYTE_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BIG_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>BYTE_ORDER</name> <operator>==</operator> <name>BIG_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>constexpr</name> <name>bool</name></type> <name>IsBigEndianHost</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>constexpr</name> <name>bool</name></type> <name>IsBigEndianHost</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>IsLittleEndianHost</name> <init>= <expr><operator>!</operator><name>IsBigEndianHost</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>unsigned</name> <name>char</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>C</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>signed</name> <name>char</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>C</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>char</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>C</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name> <name>short</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ByteSwap_16</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>signed</name> <name>short</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>short</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ByteSwap_16</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>signed</name> <name>int</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>int</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>C</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>ByteSwap_64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>C</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>signed</name> <name>long</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><call><name>ByteSwap_32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>C</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>ByteSwap_64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>C</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ByteSwap_64</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>signed</name> <name>long</name> <name>long</name></type> <name>getSwappedBytes</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ByteSwap_64</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_enum</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getSwappedBytes</name><argument_list>(<argument>T C</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>getSwappedBytes</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>underlying_type_t</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>void</name></type> <name>swapByteOrder</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Value</name> <operator>=</operator> <call><name>getSwappedBytes</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
