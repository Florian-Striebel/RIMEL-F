<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_bvgraph.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_BVGRAPH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_BVGRAPH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_bitvector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>BV</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BVGraph</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>SizeEnum</name> : <type><name>uptr</name></type> <block>{ <decl><name>kSize</name> <init>= <expr><name>BV</name><operator>::</operator><name>kSize</name></expr></init></decl> }</block>;</enum>
<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>bool</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>uptr</name></type> <name>addEdges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name><name>added_edges</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>max_added_edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>node</name> <init>= <expr><call><name><name>t1</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>node</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>max_added_edges</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>added_edges</name><index>[<expr><name>res</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>hasEdge</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>bool</name></type> <name>removeEdge</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>clearBit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>removeEdgesTo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>setDifference</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>removeEdgesFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name><name>t1</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeEdgesFrom</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>hasEdge</name><argument_list>(<argument><expr><name>uptr</name> <name>from</name></expr></argument>, <argument><expr><name>uptr</name> <name>to</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>bool</name></type> <name>isReachable</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>targets</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>BV</name> <modifier>&amp;</modifier></type><name>to_visit</name> <init>= <expr><name>t1</name></expr></init></decl>,
<decl><type ref="prev"><modifier>&amp;</modifier></type><name>visited</name> <init>= <expr><name>t2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>to_visit</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>to_visit</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name><name>to_visit</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>visited</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>to_visit</name><operator>.</operator><name>setUnion</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name><name>targets</name><operator>.</operator><name>intersectsWith</name></name><argument_list>(<argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>uptr</name></type> <name>findPath</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>targets</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>path_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>targets</name><operator>.</operator><name>getBit</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>typename</name> <name>BV</name><operator>::</operator><name>Iterator</name> <call><name>it</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><call><name>findPath</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>uptr</name></type> <name>findShortestPath</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>targets</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>path_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>path_size</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>findPath</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>check</name><argument_list>(<argument><expr><name>uptr</name> <name>idx1</name></expr></argument>, <argument><expr><name>uptr</name> <name>idx2</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx1</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx2</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>BV</name></type> <name><name>v</name><index>[<expr><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BV</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
