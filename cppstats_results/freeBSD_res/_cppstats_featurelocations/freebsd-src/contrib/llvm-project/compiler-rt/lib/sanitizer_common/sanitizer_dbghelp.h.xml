<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_dbghelp.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_SYMBOLIZER_WIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_SYMBOLIZER_WIN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_WINDOWS</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"sanitizer_dbghelp.h is a Windows-only header"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbghelp.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<extern>extern decltype(::StackWalk64</extern>)</block_content> *StackWalk64</block></decl>;</decl_stmt>
<extern>extern decltype(::SymCleanup</extern>) <expr_stmt><expr><operator>*</operator><name>SymCleanup</name></expr>;</expr_stmt>
<extern>extern decltype(::SymFromAddr</extern>) <expr_stmt><expr><operator>*</operator><name>SymFromAddr</name></expr>;</expr_stmt>
<extern>extern decltype(::SymFunctionTableAccess64</extern>) <expr_stmt><expr><operator>*</operator><name>SymFunctionTableAccess64</name></expr>;</expr_stmt>
<extern>extern decltype(::SymGetLineFromAddr64</extern>) <expr_stmt><expr><operator>*</operator><name>SymGetLineFromAddr64</name></expr>;</expr_stmt>
<extern>extern decltype(::SymGetModuleBase64</extern>) <expr_stmt><expr><operator>*</operator><name>SymGetModuleBase64</name></expr>;</expr_stmt>
<extern>extern decltype(::SymGetSearchPathW</extern>) <expr_stmt><expr><operator>*</operator><name>SymGetSearchPathW</name></expr>;</expr_stmt>
<extern>extern decltype(::SymInitialize</extern>) <expr_stmt><expr><operator>*</operator><name>SymInitialize</name></expr>;</expr_stmt>
<extern>extern decltype(::SymSetOptions</extern>) <expr_stmt><expr><operator>*</operator><name>SymSetOptions</name></expr>;</expr_stmt>
<extern>extern decltype(::SymSetSearchPathW</extern>) <expr_stmt><expr><operator>*</operator><name>SymSetSearchPathW</name></expr>;</expr_stmt>
<extern>extern decltype(::UnDecorateSymbolName</extern>) <expr_stmt><expr><operator>*</operator><name>UnDecorateSymbolName</name></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
