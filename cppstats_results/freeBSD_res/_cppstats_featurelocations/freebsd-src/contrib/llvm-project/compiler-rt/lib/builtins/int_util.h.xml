<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/int_util.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INT_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_UTIL_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compilerrt_abort</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__compilerrt_abort_impl(__FILE__, __LINE__, __func__)</cpp:value></cpp:define>

<function_decl><type><name>NORETURN</name> <name>void</name></type> <name>__compilerrt_abort_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TIME_ASSERT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILE_TIME_ASSERT1(expr, __COUNTER__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TIME_ASSERT1</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>cnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMPILE_TIME_ASSERT2(expr, cnt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TIME_ASSERT2</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>cnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef char ct_assert_##cnt[(expr) ? 1 : -1] UNUSED</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_0_TIMES</name><parameter_list>(<parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_1_TIMES</name><parameter_list>(<parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code_to_repeat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_2_TIMES</name><parameter_list>(<parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPEAT_1_TIMES(code_to_repeat) code_to_repeat</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_3_TIMES</name><parameter_list>(<parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPEAT_2_TIMES(code_to_repeat) code_to_repeat</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_4_TIMES</name><parameter_list>(<parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPEAT_3_TIMES(code_to_repeat) code_to_repeat</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_N_TIMES_</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPEAT_##N##_TIMES(code_to_repeat)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_N_TIMES</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>code_to_repeat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPEAT_N_TIMES_(N, code_to_repeat)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
