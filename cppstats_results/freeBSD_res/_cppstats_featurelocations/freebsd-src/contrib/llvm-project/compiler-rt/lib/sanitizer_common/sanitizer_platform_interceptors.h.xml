<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_platform_interceptors.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_PLATFORM_INTERCEPTORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_PLATFORM_INTERCEPTORS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_glibc_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_POSIX</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_POSIX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_POSIX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_WINDOWS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_WINDOWS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_WINDOWS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SI_WINDOWS</name> <operator>&amp;&amp;</operator> <name>SI_POSIX</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Windows is not POSIX!"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SI_POSIX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_freebsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_netbsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_posix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_solaris.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_ANDROID</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX_NOT_ANDROID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX_NOT_ANDROID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_GLIBC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_GLIBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_GLIBC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_ANDROID</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_ANDROID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_ANDROID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FREEBSD</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_FREEBSD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_FREEBSD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NETBSD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NETBSD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NOT_MAC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NOT_MAC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_IOS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_IOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_IOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_IOSSIM</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_IOSSIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_IOSSIM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WATCHOS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_WATCHOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_WATCHOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_TVOS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_TVOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_TVOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NOT_FUCHSIA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NOT_FUCHSIA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_SOLARIS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_SOLARIS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_SOLARIS32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_SOLARIS32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_SOLARIS32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_POSIX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_POSIX_NOT_MAC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_POSIX_NOT_MAC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_FREEBSD</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX_NOT_FREEBSD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_LINUX_NOT_FREEBSD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRLEN</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRNLEN</name></cpp:macro> <cpp:value>(SI_NOT_MAC &amp;&amp; SI_NOT_FUCHSIA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRCMP</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRSTR</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRCASESTR</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRTOK</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRCHR</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRCHRNUL</name></cpp:macro> <cpp:value>SI_POSIX_NOT_MAC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRRCHR</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRSPN</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRPBRK</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TEXTDOMAIN</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRCASECMP</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMMOVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMCPY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMCMP</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_BCMP</name></cpp:macro> <cpp:value>SANITIZER_INTERCEPT_MEMCMP &amp;&amp; ((SI_POSIX &amp;&amp; _GNU_SOURCE) || SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRNDUP</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___STRNDUP</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&lt;</operator> <literal type="number">1070</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC_DEPLOYMENT_BELOW_10_7</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC_DEPLOYMENT_BELOW_10_7</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMMEM</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_MAC_DEPLOYMENT_BELOW_10_7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMCHR</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMRCHR</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX || SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READ</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PREAD</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WRITE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PWRITE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FREAD</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FWRITE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FGETS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FPUTS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PUTS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PREAD64</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PWRITE64</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READV</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WRITEV</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PREADV</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PWRITEV</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PREADV64</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PWRITEV64</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PRCTL</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LOCALTIME_AND_FRIENDS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRPTIME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SCANF</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ISOC99_SCANF</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_INTERCEPT_PRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PRINTF</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PRINTF_L</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ISOC99_PRINTF</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___PRINTF_CHK</name></cpp:macro> <cpp:value>(SANITIZER_INTERCEPT_PRINTF &amp;&amp; SI_GLIBC)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FREXP</name></cpp:macro> <cpp:value>SI_NOT_FUCHSIA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FREXPF_FREXPL</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPWNAM_AND_FRIENDS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPWNAM_R_AND_FRIENDS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPWENT</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FGETGRENT_R</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FGETPWENT</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPWENT_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FGETPWENT_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SETPWENT</name></cpp:macro> <cpp:value>(SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CLOCK_GETTIME</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CLOCK_GETCPUCLOCKID</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETITIMER</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TIME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GLOB</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GLOB64</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WAIT</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_INET</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_GETSCHEDPARAM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETADDRINFO</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETNAMEINFO</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETSOCKNAME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTBYNAME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTBYNAME2</name></cpp:macro> <cpp:value>SI_POSIX &amp;&amp; !SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTBYNAME_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTBYNAME2_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTBYADDR_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETHOSTENT_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETSOCKOPT</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ACCEPT</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ACCEPT4</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PACCEPT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MODF</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RECVMSG</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SENDMSG</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RECVMMSG</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SENDMMSG</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SYSMSG</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPEERNAME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_IOCTL</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_INET_ATON</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SYSINFO</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READDIR</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READDIR64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS32</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SI_LINUX_NOT_ANDROID</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SANITIZER_RISCV64</name><operator>)</operator></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTRACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SETLOCALE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETCWD</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GET_CURRENT_DIR_NAME</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRTOIMAX</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MBSTOWCS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MBSNRTOWCS</name></cpp:macro> <cpp:value>(SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCSTOMBS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRXFRM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___STRXFRM_L</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCSXFRM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___WCSXFRM_L</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCSNRTOMBS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCRTOMB</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCTOMB</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TCGETATTR</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REALPATH</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CANONICALIZE_FILE_NAME</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CONFSTR</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SCHED_GETAFFINITY</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SCHED_GETPARAM</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRERROR</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRERROR_R</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_XPG_STRERROR_R</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SCANDIR</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SCANDIR64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETGROUPS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_POLL</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PPOLL</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WORDEXP</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || (SI_MAC &amp;&amp; !SI_IOS) || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGWAIT</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGWAITINFO</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGTIMEDWAIT</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGSETOPS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGSET_LOGICOPS</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGPENDING</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGPROCMASK</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_SIGMASK</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_BACKTRACE</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETMNTENT</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETMNTENT_R</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STATFS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STATFS64</name></cpp:macro> <cpp:value>(((SI_MAC &amp;&amp; !TARGET_CPU_ARM64) &amp;&amp; !SI_IOS) || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STATVFS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STATVFS64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_INITGROUPS</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ETHER_NTOA_ATON</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ETHER_HOST</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ETHER_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX_NOT_ANDROID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SHMCTL</name></cpp:macro> <cpp:value>(((SI_FREEBSD || SI_LINUX_NOT_ANDROID) &amp;&amp; SANITIZER_WORDSIZE == 64) || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RANDOM_R</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_ATTR_GET</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_ATTR_GETINHERITSCHED</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_ATTR_GETAFFINITY_NP</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_ATTR_GET_SCHED</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPSHARED</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETTYPE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPROTOCOL</name></cpp:macro> <cpp:value>(SI_MAC || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPRIOCEILING</name></cpp:macro> <cpp:value>(SI_MAC || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST_NP</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETPSHARED</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETKIND_NP</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETPSHARED</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETCLOCK</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_BARRIERATTR_GETPSHARED</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_THR_EXIT</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TMPNAM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TMPNAM_R</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTSNAME</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTSNAME_R</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TTYNAME</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TTYNAME_R</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TEMPNAM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SINCOS</name></cpp:macro> <cpp:value>SI_LINUX || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REMQUO</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REMQUOL</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LGAMMA</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LGAMMAL</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LGAMMA_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_LINUX || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LGAMMAL_R</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID || SI_SOLARIS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_DRAND48_R</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RAND_R</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ICONV</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TIMES</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETLINE</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT__EXIT</name></cpp:macro> <cpp:value>(SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_MUTEX</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___PTHREAD_MUTEX</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___LIBC_MUTEX</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_SETNAME_NP</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_GETNAME_NP</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TLS_GET_ADDR</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LISTXATTR</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETXATTR</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETRESID</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETIFADDRS</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_IF_INDEXTONAME</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CAPGET</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SI_LINUX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_AEABI_MEM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_AEABI_MEM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___BZERO</name></cpp:macro> <cpp:value>SI_MAC || SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_BZERO</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FTIME</name></cpp:macro> <cpp:value>(!SI_FREEBSD &amp;&amp; !SI_NETBSD &amp;&amp; SI_POSIX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_XDR</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_XDRREC</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TSEARCH</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LIBIO_INTERNALS</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FOPEN</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FOPEN64</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_SOLARIS32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_OPEN_MEMSTREAM</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_OBSTACK</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FFLUSH</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FCLOSE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_INTERCEPT_DLOPEN_DLCLOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_DLOPEN_DLCLOSE</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETPASS</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TIMERFD</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MLOCKX</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FOPENCOOKIE</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SEM</name></cpp:macro> <cpp:value>(SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_SETCANCEL</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MINCORE</name></cpp:macro> <cpp:value>(SI_LINUX || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PROCESS_VM_READV</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CTERMID</name></cpp:macro> <cpp:value>(SI_LINUX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CTERMID_R</name></cpp:macro> <cpp:value>(SI_MAC || SI_FREEBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPTOR_HOOKS</name></cpp:macro> <cpp:value>(SI_LINUX || SI_MAC || SI_WINDOWS || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RECV_RECVFROM</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SEND_SENDTO</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_EVENTFD_READ_WRITE</name></cpp:macro> <cpp:value>SI_LINUX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STAT</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_MAC || SI_ANDROID || SI_NETBSD || SI_SOLARIS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_LSTAT</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___XSTAT</name></cpp:macro> <cpp:value>(!SANITIZER_INTERCEPT_STAT &amp;&amp; SI_POSIX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___XSTAT64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___LXSTAT</name></cpp:macro> <cpp:value>SANITIZER_INTERCEPT___XSTAT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___LXSTAT64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_UTMP</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_MAC &amp;&amp; !SI_FREEBSD &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_UTMPX</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETLOADAVG</name></cpp:macro> <cpp:value>(SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MMAP</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MMAP64</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MALLOPT_AND_MALLINFO</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_ANDROID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MEMALIGN</name></cpp:macro> <cpp:value>(!SI_FREEBSD &amp;&amp; !SI_MAC &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___LIBC_MEMALIGN</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PVALLOC</name></cpp:macro> <cpp:value>(SI_GLIBC || SI_ANDROID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CFREE</name></cpp:macro> <cpp:value>(SI_GLIBC &amp;&amp; !SANITIZER_RISCV64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REALLOCARRAY</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ALIGNED_ALLOC</name></cpp:macro> <cpp:value>(!SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MALLOC_USABLE_SIZE</name></cpp:macro> <cpp:value>(!SI_MAC &amp;&amp; !SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MCHECK_MPROBE</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCSCAT</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_WCSDUP</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGNAL_AND_SIGACTION</name></cpp:macro> <cpp:value>(!SI_WINDOWS &amp;&amp; SI_NOT_FUCHSIA)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_BSD_SIGNAL</name></cpp:macro> <cpp:value>SI_ANDROID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ACCT</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_USER_FROM_UID</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_UID_FROM_USER</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GROUP_FROM_GID</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GID_FROM_GROUP</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ACCESS</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FACCESSAT</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETGROUPLIST</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRLCPY</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_MAC || SI_ANDROID)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT</name></cpp:macro> <cpp:value>SI_LINUX_NOT_ANDROID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READLINK</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name> <operator>&lt;</operator> <literal type="number">101000</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC_DEPLOYMENT_BELOW_10_10</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_MAC_DEPLOYMENT_BELOW_10_10</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_READLINKAT</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_MAC_DEPLOYMENT_BELOW_10_10)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_DEVNAME</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_DEVNAME_R</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FGETLN</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRMODE</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_TTYENT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PROTOENT</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_LINUX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PROTOENT_R</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_NETENT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SETVBUF</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_MAC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETMNTINFO</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MI_VECTOR_HASH</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETVFSSTAT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REGEX</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_LINUX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_REGEXSUB</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FTS</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SYSCTL</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ASYSCTL</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SYSCTLGETMIBINFO</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_NL_LANGINFO</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD || SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MODCTL</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CAPSICUM</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRTONUM</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FPARSELN</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STATVFS1</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_STRTOI</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CAPSICUM</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SHA1</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MD4</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_RMD160</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MD5</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FSEEK</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_MD2</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SHA2</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CDB</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_VIS</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_POPEN</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_POPENVE</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PCLOSE</name></cpp:macro> <cpp:value>SI_POSIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FUNOPEN</name></cpp:macro> <cpp:value>(SI_NETBSD || SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FUNOPEN2</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETFSENT</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ARC4RANDOM</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD || SI_MAC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FDEVNAME</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETUSERSHELL</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_ANDROID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SL_INIT</name></cpp:macro> <cpp:value>(SI_FREEBSD || SI_NETBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CRYPT</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_ANDROID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_CRYPT_R</name></cpp:macro> <cpp:value>(SI_LINUX &amp;&amp; !SI_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETRANDOM</name></cpp:macro> <cpp:value>((SI_LINUX &amp;&amp; __GLIBC_PREREQ(2, 25)) || SI_FREEBSD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___CXA_ATEXIT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_ATEXIT</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_PTHREAD_ATFORK</name></cpp:macro> <cpp:value>SI_NETBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_GETENTROPY</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_QSORT</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_IOSSIM &amp;&amp; !SI_WATCHOS &amp;&amp; !SI_TVOS &amp;&amp; !SI_ANDROID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_QSORT_R</name></cpp:macro> <cpp:value>SI_GLIBC</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_SIGALTSTACK</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !(SANITIZER_MAC &amp;&amp; SANITIZER_I386))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_UNAME</name></cpp:macro> <cpp:value>(SI_POSIX &amp;&amp; !SI_FREEBSD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT___XUNAME</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_INTERCEPT_FLOPEN</name></cpp:macro> <cpp:value>SI_FREEBSD</cpp:value></cpp:define>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_OVERRIDE_INTERCEPTORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sanitizer_intercept_overriders.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
