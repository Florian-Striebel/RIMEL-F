<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_list.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_LIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_LIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>







<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Item</name><operator>&gt;</operator>
struct <name>IntrusiveList</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Iterator</name></expr>;

<expr><name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name>first_</name> <operator>=</operator> <name>last_</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>size_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block>

<name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block>
<name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block>

<name>void</name> <macro><name>push_back</name><argument_list>(<argument>Item *x</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_</name> <operator>=</operator> <name>last_</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

void push_front(Item *x</block></block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_</name> <operator>=</operator> <name>last_</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

void pop_front(</block></block></if></if_stmt>) <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>first_</name> <operator>=</operator> <name><name>first_</name><operator>-&gt;</operator><name>next</name></name></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>size_</name><operator>--</operator></block></block></block></expr>;
}</block>

<name>void</name> <macro><name>extract</name><argument_list>(<argument>Item *prev</argument>, <argument>Item *x</argument>)</argument_list></macro> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>next</name></name></expr>;
<if_stmt><if>if <condition>(<expr><name>last_</name> <operator>==</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>size_</name><operator>--</operator></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>Item</name> <modifier>*</modifier></type><name>front</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>first_</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Item</name> <operator>*</operator><macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>first_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Item</name> <modifier>*</modifier></type><name>back</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>last_</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Item</name> <operator>*</operator><macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>last_</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>append_front</name><parameter_list>(<parameter><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>Item</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>l</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>last_</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>first_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name> <operator>+=</operator> <call><name><name>l</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>l</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_back</name><parameter_list>(<parameter><decl><type><name><name>IntrusiveList</name><argument_list type="generic">&lt;<argument><expr><name>Item</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>last_</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>first_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>last_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_</name> <operator>+=</operator> <call><name><name>l</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>l</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CheckConsistency</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>first_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>last_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>Item</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name>first_</name></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last_</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>last_</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>ItemTy</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>IteratorBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>IteratorBase</name><argument_list>(<argument><expr><name>ItemTy</name> <operator>*</operator><name>current</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>current_</name><argument_list>(<argument>current</argument>)</argument_list></macro> <block>{}</block>
<name>IteratorBase</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><name>current_</name> <operator>=</operator> <name><name>current_</name><operator>-&gt;</operator><name>next</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>IteratorBase</name> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>current_</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>current_</name></name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>ItemTy</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><name>current_</name></expr>;</return>
</block_content>}</block></function>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ItemTy</name> <modifier>*</modifier></type><name>current_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>IteratorBase</name><argument_list type="generic">&lt;<argument><expr><name>Item</name></expr></argument>&gt;</argument_list></name></type> <name>Iterator</name>;</typedef>
<typedef>typedef <type><name><name>IteratorBase</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Item</name></expr></argument>&gt;</argument_list></name></type> <name>ConstIterator</name>;</typedef>

<function><type><name>Iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Iterator</name><argument_list>(<argument><expr><name>first_</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>Iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Iterator</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>ConstIterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ConstIterator</name><argument_list>(<argument><expr><name>first_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ConstIterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ConstIterator</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>size_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Item</name> <modifier>*</modifier></type><name>first_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Item</name> <modifier>*</modifier></type><name>last_</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
