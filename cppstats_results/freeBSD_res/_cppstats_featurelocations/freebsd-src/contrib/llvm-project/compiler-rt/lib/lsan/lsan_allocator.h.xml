<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/lsan/lsan_allocator.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LSAN_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSAN_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>cleared</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>Reallocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>GetMallocUsableSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callable</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ForEachChunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Callable</name> <modifier>&amp;</modifier></type><name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>GetAllocatorCacheRange</name><parameter_list>(<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AllocatorThreadFinish</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeAllocator</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>kAlwaysClearMemory</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>ChunkMetadata</name> <block>{
<decl_stmt><decl><type><name>u8</name></type> <name>allocated</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChunkTag</name></type> <name>tag</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<decl_stmt><decl><type><name>uptr</name></type> <name>requested_size</name> <range>: <expr><literal type="number">54</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uptr</name></type> <name>requested_size</name> <range>: <expr><literal type="number">32</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>padding</name> <range>: <expr><literal type="number">22</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>u32</name></type> <name>stack_trace_id</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>SANITIZER_RISCV64</name></expr></cpp:if>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>AddressSpaceViewTy</name><operator>&gt;</operator>
struct <name>AP32</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceBeg</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>u64</name> <name>kSpaceSize</name> <operator>=</operator> <name>SANITIZER_MMAP_RANGE_SIZE</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kMetadataSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChunkMetadata</name></expr></argument>)</argument_list></sizeof></expr>;
<typedef>typedef <expr_stmt><expr><name>__sanitizer</name><operator>::</operator><name>CompactSizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kRegionSizeLog</name> <operator>=</operator> <literal type="number">20</literal></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>NoOpMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>PrimaryAllocatorASVT</name> <init>= <expr><name><name>SizeClassAllocator32</name><argument_list type="generic">&lt;<argument><expr><name><name>AP32</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><operator>~</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0xa0000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x20000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0x600000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>AddressSpaceViewTy</name><operator>&gt;</operator>
struct <name>AP64</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceBeg</name> <operator>=</operator> <name>kAllocatorSpace</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceSize</name> <operator>=</operator> <name>kAllocatorSize</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kMetadataSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChunkMetadata</name></expr></argument>)</argument_list></sizeof></expr>;
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>NoOpMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>PrimaryAllocatorASVT</name> <init>= <expr><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name><name>AP64</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>AllocatorASVT</name> <init>= <expr><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>Allocator</name> <init>= <expr><name><name>AllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AllocatorCache</name> <init>= <expr><name>Allocator</name><operator>::</operator><name>AllocatorCache</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Allocator</name><operator>::</operator><name>AllocatorCache</name> <operator>*</operator><call><name>GetAllocatorCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>lsan_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>lsan_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lsan_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StackTrace</name> <modifier>&amp;</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>lsan_mz_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
