<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubsan/ubsan_platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_CONTAINS_UBSAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_CONTAINS_UBSAN</name></cpp:macro> <cpp:value>CAN_SANITIZE_UB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_WITH_INTERCEPTORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_WITH_INTERCEPTORS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_REPLACE_OPERATORS_NEW_AND_DELETE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_REPLACE_OPERATORS_NEW_AND_DELETE</name></cpp:macro> <cpp:value>HWASAN_WITH_INTERCEPTORS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>u8</name></type> <name>tag_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_ALIASING_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Aliasing mode is only supported on x86_64</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kAddressTagShift</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kTagBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kTaggableRegionCheckShift</name> <init>=
<expr><name>__sanitizer</name><operator>::</operator><call><name>Max</name><argument_list>(<argument><expr><name>kAddressTagShift</name> <operator>+</operator> <name>kTagBits</name> <operator>+</operator> <literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">44U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kAddressTagShift</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kTagBits</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kAddressTagShift</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>unsigned</name></type> <name>kTagBits</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kTagMask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>kTagBits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kAddressTagMask</name> <init>= <expr><name>kTagMask</name> <operator>&lt;&lt;</operator> <name>kAddressTagShift</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kShadowBaseAlignment</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kRecordAddrBaseTagShift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kRecordFPShift</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kRecordFPLShift</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>kRecordFPModulus</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>kRecordFPShift</name> <operator>+</operator> <name>kRecordFPLShift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tag_t</name></type> <name>GetTagFromPointer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <name>kAddressTagShift</name><operator>)</operator> <operator>&amp;</operator> <name>kTagMask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uptr</name></type> <name>UntagAddr</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>tagged_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>tagged_addr</name> <operator>&amp;</operator> <operator>~</operator><name>kAddressTagMask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>UntagPtr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tagged_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>UntagAddr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>tagged_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uptr</name></type> <name>AddTagToPointer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>tag_t</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <operator>~</operator><name>kAddressTagMask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>tag</name> <operator>&lt;&lt;</operator> <name>kAddressTagShift</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hwasan_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>hwasan_init_is_running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hwasan_report_count</name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>InitShadow</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeOsSupport</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitThreads</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializeInterceptors</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HwasanAllocatorInit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>hwasan_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>hwasan_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hwasan_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>StackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>InstallAtExitHandler</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MALLOC_STACK_TRACE</name></cpp:macro> <cpp:value>BufferedStackTrace stack; if (hwasan_inited) stack.Unwind(StackTrace::GetCurrentPc(), GET_CURRENT_FRAME(), nullptr, common_flags()-&gt;fast_unwind_on_malloc, common_flags()-&gt;malloc_context_size)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FATAL_STACK_TRACE_PC_BP</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>bp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BufferedStackTrace stack; if (hwasan_inited) stack.Unwind(pc, bp, nullptr, common_flags()-&gt;fast_unwind_on_fatal)</cpp:value></cpp:define>




<function_decl><type><name>void</name></type> <name>HwasanTSDInit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>HwasanTSDThreadInit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>HwasanAtExit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HwasanOnDeadlySignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateMemoryUsage</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AppendToErrorMessageBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AndroidTestTlsSlot</name><parameter_list>()</parameter_list>;</function_decl>



<struct>struct <name>AccessInfo</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>recover</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>void</name></type> <name>HandleTagMismatch</name><parameter_list>(<parameter><decl><type><name>AccessInfo</name></type> <name>ai</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>registers_frame</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>HwasanTagMismatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>access_info</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>registers_frame</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>outsize</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_MALLOC_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_malloc_hook) { __sanitizer_malloc_hook(ptr, size); } RunMallocHooks(ptr, size); } while (false)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_FREE_HOOK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (&amp;__sanitizer_free_hook) { __sanitizer_free_hook(ptr); } RunFreeHooks(ptr); } while (false)</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HWASAN_WITH_INTERCEPTORS</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>__hw_sigset_t</name>;</typedef>



<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>__hw_register_buf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name>;</typedef>
<struct>struct <name>__hw_jmp_buf_struct</name> <block>{




<decl_stmt><decl><type><name>__hw_register_buf</name></type> <name>__jmpbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>__mask_was_saved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__hw_sigset_t</name></type> <name>__saved_mask</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>__hw_jmp_buf_struct</name></name></type> <name><name>__hw_jmp_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>__hw_jmp_buf_struct</name></name></type> <name><name>__hw_sigjmp_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENSURE_HWASAN_INITED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { CHECK(!hwasan_init_is_running); if (!hwasan_inited) { __hwasan_init(); } } while (0)</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
