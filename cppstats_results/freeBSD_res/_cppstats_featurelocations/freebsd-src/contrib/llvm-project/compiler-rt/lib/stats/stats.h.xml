<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/stats/stats.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_STATS_STATS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STATS_STATS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>




<enum>enum <block>{ <decl><name>kKindBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>

<struct>struct <name>StatInfo</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>StatModule</name> <block>{
<decl_stmt><decl><type><name>StatModule</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StatInfo</name></type> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>CountFromData</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>kKindBits</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
