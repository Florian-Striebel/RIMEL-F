<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_fdr_log_records.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_XRAY_FDR_LOG_RECORDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_XRAY_FDR_LOG_RECORDS_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__xray</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RecordType</name> <range>: <expr><name>uint8_t</name> <block>{ <expr><name>Function</name></expr>, <expr><name>Metadata</name></expr> }</block></expr></range></decl>;</decl_stmt>



<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <name>MetadataRecord</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>Type</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RecordKinds</name> <range>: <expr><name>uint8_t</name> <block>{
<expr><name>NewBuffer</name></expr>,
<expr><name>EndOfBuffer</name></expr>,
<expr><name>NewCPUId</name></expr>,
<expr><name>TSCWrap</name></expr>,
<expr><name>WalltimeMarker</name></expr>,
<expr><name>CustomEventMarker</name></expr>,
<expr><name>CallArgument</name></expr>,
<expr><name>BufferExtents</name></expr>,
<expr><name>TypedEventMarker</name></expr>,
<expr><name>Pid</name></expr>,
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>RecordKind</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Data</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MetadataRecord</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Wrong size for MetadataRecord."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <macro><name>alignas</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <name>FunctionRecord</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>Type</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RecordKinds</name> <block>{<block_content>
<expr_stmt><expr><name>FunctionEnter</name> <operator>=</operator> <literal type="number">0x00</literal></expr><operator>,</operator>
<expr><name>FunctionExit</name> <operator>=</operator> <literal type="number">0x01</literal></expr><operator>,</operator>
<expr><name>FunctionTailExit</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>RecordKind</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>FuncId</name> <range>: <expr><literal type="number">28</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint32_t</name></type> <name>TSCDelta</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionRecord</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Wrong size for FunctionRecord."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
