<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_MEMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MEMINTRIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interception/interception.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_mapping.h"</cpp:file></cpp:include>

<macro><name>DECLARE_REAL</name><argument_list>(<argument>void *</argument>, <argument>memcpy</argument>, <argument>void *to</argument>, <argument>const void *from</argument>, <argument>uptr size</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>void *</argument>, <argument>memset</argument>, <argument>void *block</argument>, <argument>int c</argument>, <argument>uptr size</argument>)</argument_list></macro>

<decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_MEMORY_RANGE</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __memprof_record_access_range(offset, size); } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MEMCPY_IMPL</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(!memprof_inited)) return internal_memcpy(to, from, size); if (memprof_init_is_running) { return REAL(memcpy)(to, from, size); } ENSURE_MEMPROF_INITED(); MEMPROF_READ_RANGE(from, size); MEMPROF_WRITE_RANGE(to, size); return REAL(memcpy)(to, from, size); } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MEMSET_IMPL</name><parameter_list>(<parameter><type><name>block</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(!memprof_inited)) return internal_memset(block, c, size); if (memprof_init_is_running) { return REAL(memset)(block, c, size); } ENSURE_MEMPROF_INITED(); MEMPROF_WRITE_RANGE(block, size); return REAL(memset)(block, c, size); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_MEMMOVE_IMPL</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (UNLIKELY(!memprof_inited)) return internal_memmove(to, from, size); ENSURE_MEMPROF_INITED(); MEMPROF_READ_RANGE(from, size); MEMPROF_WRITE_RANGE(to, size); return internal_memmove(to, from, size); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_READ_RANGE</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ACCESS_MEMORY_RANGE(offset, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_WRITE_RANGE</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ACCESS_MEMORY_RANGE(offset, size)</cpp:value></cpp:define>

</block_content>}</block></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
