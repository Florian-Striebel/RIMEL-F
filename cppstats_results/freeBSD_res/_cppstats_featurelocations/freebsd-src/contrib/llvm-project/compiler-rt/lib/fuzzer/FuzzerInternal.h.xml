<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerInternal.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_FUZZER_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_FUZZER_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDataFlowTrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerExtFunctions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerSHA1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FuzzerValueBitMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>fuzzer</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>namespace</name> <name>std</name><operator>::</operator><name>chrono</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Fuzzer</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>Fuzzer</name><argument_list>(<argument>UserCallback CB</argument>, <argument>InputCorpus &amp;Corpus</argument>, <argument>MutationDispatcher &amp;MD</argument>,
<argument>FuzzingOptions Options</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Fuzzer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Loop</name><parameter_list>(<parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>CorporaFiles</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReadAndExecuteSeedCorpora</name><parameter_list>(<parameter><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>SizedFile</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>CorporaFiles</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MinimizeCrashLoop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RereadOutputCorpus</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>MaxSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>size_t</name></type> <name>secondsSinceProcessStartUp</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>system_clock</name><operator>::</operator><call><name>now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ProcessStartTime</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TimedOut</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>Options</name><operator>.</operator><name>MaxTotalTimeSec</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>secondsSinceProcessStartUp</name><argument_list>()</argument_list></call> <operator>&gt;</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Options</name><operator>.</operator><name>MaxTotalTimeSec</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>execPerSec</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Seconds</name> <init>= <expr><call><name>secondsSinceProcessStartUp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>Seconds</name></expr> ?</condition><then> <expr><name>TotalNumberOfRuns</name> <operator>/</operator> <name>Seconds</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>getTotalNumberOfRuns</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>TotalNumberOfRuns</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticAlarmCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticCrashSignalCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticExitCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticInterruptCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticFileSizeExceedCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticGracefulExitCallback</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ExecuteCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>RunOne</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>MayDeleteFile</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>InputInfo</name> <modifier>*</modifier></type><name>II</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ForceAddToCorpus</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>FoundUniqFeatures</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>TPCUpdateObservedPCs</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>Merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Corpora</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>CrashResistantMergeInternalStep</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ControlFilePath</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>MutationDispatcher</name> <modifier>&amp;</modifier></type><name>GetMD</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MD</name></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>void</name></type> <name>PrintFinalStats</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetMaxInputLen</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>MaxInputLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetMaxMutationLen</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>MaxMutationLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RssLimitCallback</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>InFuzzingThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsMyThread</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>GetCurrentUnitInFuzzingThead</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><name>Data</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>TryDetectingAMemoryLeak</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>DuringInitialCorpusExecution</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>HandleMalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MaybeExitGracefully</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>WriteToOutputCorpus</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Unit</name> <operator>&amp;</operator><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>AlarmCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CrashCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ExitCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CrashOnOverwrittenData</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InterruptCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MutateAndTestOne</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PurgeAllocator</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportNewCoverage</name><parameter_list>(<parameter><decl><type><name>InputInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintPulseAndReportSlowInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>WriteUnitToFileWithPrefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintStats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Where</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>End</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Units</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>Features</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintStatusForNewUnit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unit</name> <modifier>&amp;</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CheckExitOnSrcPosOrItem</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StaticDeathCallback</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DumpCurrentUnit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DeathCallback</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AllocateCurrentUnitData</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>CurrentUnitData</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>CurrentUnitSize</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>BaseSha1</name><index>[<expr><name>kSHA1NumBytes</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GracefulExitRequested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>TotalNumberOfRuns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NumberOfNewUnitsAdded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>LastCorpusUpdateRun</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HasMoreMallocsThanFrees</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NumberOfLeakDetectionAttempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>system_clock</name><operator>::</operator><name>time_point</name> <name>LastAllocatorPurgeAttemptTime</name> <operator>=</operator> <name>system_clock</name><operator>::</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UserCallback</name></type> <name>CB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InputCorpus</name> <modifier>&amp;</modifier></type><name>Corpus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutationDispatcher</name> <modifier>&amp;</modifier></type><name>MD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FuzzingOptions</name></type> <name>Options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataFlowTrace</name></type> <name>DFT</name></decl>;</decl_stmt>

<expr_stmt><expr><name>system_clock</name><operator>::</operator><name>time_point</name> <name>ProcessStartTime</name> <operator>=</operator> <name>system_clock</name><operator>::</operator><call><name>now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>system_clock</name><operator>::</operator><name>time_point</name> <name>UnitStartTime</name></expr><operator>,</operator> <expr><name>UnitStopTime</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>TimeOfLongestUnitInSeconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>EpochOfLastReadOfOutputCorpus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>MaxInputLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>MaxMutationLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>TmpMaxMutationLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>UniqFeatureSetTmp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>thread_local</name> <name>bool</name></type> <name>IsMyThread</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ScopedEnableMsanInterceptorChecks</name> <block>{
<macro><name>ScopedEnableMsanInterceptorChecks</name><argument_list>()</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_enable_interceptor_checks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_enable_interceptor_checks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedEnableMsanInterceptorChecks</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_disable_interceptor_checks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_disable_interceptor_checks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>ScopedDisableMsanInterceptorChecks</name> <block>{
<macro><name>ScopedDisableMsanInterceptorChecks</name><argument_list>()</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_disable_interceptor_checks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_disable_interceptor_checks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>ScopedDisableMsanInterceptorChecks</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_enable_interceptor_checks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>EF</name><operator>-&gt;</operator><name>__msan_scoped_enable_interceptor_checks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
