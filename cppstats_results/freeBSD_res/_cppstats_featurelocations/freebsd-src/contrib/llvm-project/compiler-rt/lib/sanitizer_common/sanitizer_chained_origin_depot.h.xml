<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_chained_origin_depot.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_CHAINED_ORIGIN_DEPOT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CHAINED_ORIGIN_DEPOT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_stackdepotbase.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ChainedOriginDepot</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ChainedOriginDepot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>StackDepotStats</name> <modifier>*</modifier></type><name>GetStats</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>here_id</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>prev_id</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>new_id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>u32</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>LockAll</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnlockAll</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<struct>struct <name>ChainedOriginDepotDesc</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>here_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>prev_id</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ChainedOriginDepotNode</name> <block>{
<decl_stmt><decl><type><name>ChainedOriginDepotNode</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>here_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>prev_id</name></decl>;</decl_stmt>

<typedef>typedef <type><name>ChainedOriginDepotDesc</name></type> <name>args_type</name>;</typedef>

<decl_stmt><decl><type><name>bool</name></type> <name>eq</name><argument_list>(<argument><expr><name>u32</name> <name>hash</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>args_type</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>uptr</name></type> <name>storage_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>args_type</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>u32</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>args_type</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>args_type</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>args_type</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>other_hash</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>args_type</name></macro> <macro><name>load</name><argument_list>()</argument_list></macro> <decl_stmt><decl><type><specifier>const</specifier></type></decl>;</decl_stmt>

<struct>struct <name>Handle</name> <block>{
<decl_stmt><decl><type><name>ChainedOriginDepotNode</name> <modifier>*</modifier></type><name>node_</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Handle</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>node_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>Handle</name><argument_list>(<argument><expr><name>ChainedOriginDepotNode</name> <operator>*</operator><name>node</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>node_</name><argument_list>(<argument>node</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>valid</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>node_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>u32</name></type> <name>id</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>node_</name><operator>-&gt;</operator><name>id</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>here_id</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>node_</name><operator>-&gt;</operator><name>here_id</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>prev_id</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>node_</name><operator>-&gt;</operator><name>prev_id</name></name></expr>;</return> </block_content>}</block></function>
}</block>;</struct>

<function_decl><type><name>Handle</name></type> <name>get_handle</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <type><name>Handle</name></type> <name>handle_type</name>;</typedef>
}</block>;</struct>

<decl_stmt><decl><type><name><name>StackDepotBase</name><argument_list type="generic">&lt;<argument><expr><name>ChainedOriginDepotNode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>&gt;</argument_list></name></type> <name>depot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ChainedOriginDepot</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ChainedOriginDepot</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ChainedOriginDepot</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
