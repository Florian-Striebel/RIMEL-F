<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_fake_stack.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_FAKE_STACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_FAKE_STACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>


<struct>struct <name>FakeFrame</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>real_stack</name></decl>;</decl_stmt>
}</block>;</struct>




























<decl_stmt><decl><type><name>class</name></type> <name>FakeStack</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMinStackFrameSizeLog</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxStackFrameSizeLog</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumberOfSizeClasses</name> <init>=
<expr><name>kMaxStackFrameSizeLog</name> <operator>-</operator> <name>kMinStackFrameSizeLog</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>FakeStack</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>SizeRequiredForFlags</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>stack_size_log</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>kMinStackFrameSizeLog</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>SizeRequiredForFrames</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>stack_size_log</name><operator>)</operator> <operator>*</operator> <name>kNumberOfSizeClasses</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>RequiredSize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>kFlagsOffset</name> <operator>+</operator> <call><name>SizeRequiredForFlags</name><argument_list>(<argument><expr><name>stack_size_log</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>SizeRequiredForFrames</name><argument_list>(<argument><expr><name>stack_size_log</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>uptr</name></type> <name>FlagsOffset</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>t</name> <init>= <expr><name>kNumberOfSizeClasses</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>class_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>all_ones</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>kNumberOfSizeClasses</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>all_ones</name> <operator>&gt;&gt;</operator> <name>t</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>t</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>stack_size_log</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>NumberOfFrames</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>stack_size_log</name> <operator>-</operator> <name>kMinStackFrameSizeLog</name> <operator>-</operator> <name>class_id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>ModuloNumberOfFrames</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>n</name> <operator>&amp;</operator> <operator>(</operator><call><name>NumberOfFrames</name><argument_list>(<argument><expr><name>stack_size_log</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>u8</name> <modifier>*</modifier></type><name>GetFlags</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>kFlagsOffset</name> <operator>+</operator>
<call><name>FlagsOffset</name><argument_list>(<argument><expr><name>stack_size_log</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>u8</name> <modifier>*</modifier></type><name>GetFrame</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>kFlagsOffset</name> <operator>+</operator>
<call><name>SizeRequiredForFlags</name><argument_list>(<argument><expr><name>stack_size_log</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>stack_size_log</name><operator>)</operator> <operator>*</operator> <name>class_id</name> <operator>+</operator>
<call><name>BytesInSizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>pos</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>FakeFrame</name> <modifier>*</modifier></type><name>Allocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>stack_size_log</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>real_stack</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Deallocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>*</operator><call><name>SavedFlagPtr</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>PoisonAll</name><parameter_list>(<parameter><decl><type><name>u8</name></type> <name>magic</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>AddrIsInFakeStack</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>frame_beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>frame_end</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>USED</name> <name>uptr</name></type> <name>AddrIsInFakeStack</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<return>return <expr><call><name>AddrIsInFakeStack</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>uptr</name></type> <name>BytesInSizeClass</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>class_id</name> <operator>+</operator> <name>kMinStackFrameSizeLog</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>SavedFlagPtr</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>class_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <call><name>BytesInSizeClass</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>stack_size_log</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>stack_size_log_</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>HandleNoReturn</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GC</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>real_stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ForEachFakeFrame</name><parameter_list>(<parameter><decl><type><name>RangeIteratorCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<macro><name>FakeStack</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlagsOffset</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>COMPILER_CHECK</name><argument_list>(<argument><expr><name>kNumberOfSizeClasses</name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kMaxStackMallocSize</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>kMaxStackFrameSizeLog</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name><name>hint_position_</name><index>[<expr><name>kNumberOfSizeClasses</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>stack_size_log_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>needs_gc_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>GetTLSFakeStack</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetTLSFakeStack</name><parameter_list>(<parameter><decl><type><name>FakeStack</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
