<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_STACKTRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STACKTRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct_decl>struct <name>BufferedStackTrace</name>;</struct_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>kStackTraceMax</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_FAST_UNWIND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_FAST_UNWIND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_FAST_UNWIND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_MAC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_SLOW_UNWIND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CAN_SLOW_UNWIND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>StackTrace</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name> <modifier>*</modifier></type><name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>TAG_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>TAG_ALLOC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>TAG_DEALLOC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>TAG_CUSTOM</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StackTrace</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>trace</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>tag</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>StackTrace</name><argument_list>(<argument>const uptr *trace</argument>, <argument>u32 size</argument>)</argument_list></macro> <operator>:</operator> <call><name>trace</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>tag</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>StackTrace</name><argument_list>(<argument>const uptr *trace</argument>, <argument>u32 size</argument>, <argument>u32 tag</argument>)</argument_list></macro>
<operator>:</operator> <call><name>trace</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>tag</name><argument_list>(<argument>tag</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <macro><name>Print</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>InternalScopedString</name> <operator>*</operator><name>output</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>uptr</name></type> <name>PrintTo</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>out_buf</name></expr></argument>, <argument><expr><name>uptr</name> <name>out_buf_size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>WillUseFastUnwind</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>request_fast_unwind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SANITIZER_CAN_FAST_UNWIND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SANITIZER_CAN_SLOW_UNWIND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>request_fast_unwind</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>uptr</name></type> <name>GetCurrentPc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uptr</name></type> <name>GetPreviousInstructionPc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uptr</name></type> <name>GetNextInstructionPc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<expr_stmt><expr><name>ALWAYS_INLINE</name>
<name>uptr</name> <name>StackTrace</name><operator>::</operator><macro><name>GetPreviousInstructionPc</name><argument_list>(<argument>uptr pc</argument>)</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<return>return <expr><operator>(</operator><name>pc</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block></expr></expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><name>pc</name> <operator>-</operator> <literal type="number">4</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><name>pc</name> <operator>-</operator> <literal type="number">8</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_RISCV64</name></expr></cpp:elif>






<return>return <expr><name>pc</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>pc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>BufferedStackTrace</name></name></type> <range>: <expr><name>public</name> <name>StackTrace</name> <block>{
<expr><name>uptr</name> <name><name>trace_buffer</name><index>[<expr><name>kStackTraceMax</name></expr>]</index></name></expr>;
<expr><name>uptr</name> <name>top_frame_bp</name></expr>;

<expr><call><name>BufferedStackTrace</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>StackTrace</name><argument_list>(<argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>top_frame_bp</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>Init</name><argument_list>(<argument>const uptr *pcs</argument>, <argument>uptr cnt</argument>, <argument>uptr extra_top_pc = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;




<expr><name>void</name> <macro><name>Unwind</name><argument_list>(<argument>uptr pc</argument>, <argument>uptr bp</argument>, <argument>void *context</argument>, <argument>bool request_fast</argument>,
<argument>u32 max_depth = kStackTraceMax</argument>)</argument_list></macro> <block>{
<expr><name>top_frame_bp</name> <operator>=</operator> <operator>(</operator><name>max_depth</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>?</operator> <name>bp</name> <operator>:</operator> <literal type="number">0</literal></expr>;

<if_stmt><if>if <condition>(<expr><name>max_depth</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trace_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>max_depth</name></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/>}</block_content>
UnwindImpl(pc</block><operator>,</operator> <expr_stmt><expr><name>bp</name></expr><operator>,</operator> <expr><name>context</name></expr><operator>,</operator> <expr><name>request_fast</name></expr><operator>,</operator> <expr><name>max_depth</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>

<name>void</name> <macro><name>Unwind</name><argument_list>(<argument>u32 max_depth</argument>, <argument>uptr pc</argument>, <argument>uptr bp</argument>, <argument>void *context</argument>, <argument>uptr stack_top</argument>,
<argument>uptr stack_bottom</argument>, <argument>bool request_fast_unwind</argument>)</argument_list></macro></expr></range></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>StackTrace</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>StackTrace</name><argument_list>(<argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top_frame_bp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>UnwindImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>request_fast</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>UnwindFast</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_top</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_bottom</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnwindSlow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnwindSlow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PopStackFrames</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>LocatePcInTrace</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>BufferedStackTrace</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BufferedStackTrace</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BufferedStackTrace</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FastUnwindTest</name></decl>;</decl_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFrameSize</name> <init>= <expr><literal type="number">160</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFrameSize</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFrameSize</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uhwptr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsValidFrame</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_top</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>stack_bottom</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>frame</name> <operator>&gt;</operator> <name>stack_bottom</name> <operator>&amp;&amp;</operator> <name>frame</name> <operator>&lt;</operator> <name>stack_top</name> <operator>-</operator> <name>kFrameSize</name></expr>;</return>
</block_content>}</block></function>

}



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC_BP</name></cpp:macro> <cpp:value>uptr bp = GET_CURRENT_FRAME(); uptr pc = GET_CALLER_PC();</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CALLER_PC_BP_SP</name></cpp:macro> <cpp:value>GET_CALLER_PC_BP; uptr local_stack; uptr sp = (uptr)&amp;local_stack</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_PC_BP</name></cpp:macro> <cpp:value>uptr bp = GET_CURRENT_FRAME(); uptr pc = StackTrace::GetCurrentPc()</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_PC_BP_SP</name></cpp:macro> <cpp:value>GET_CURRENT_PC_BP; uptr local_stack; uptr sp = (uptr)&amp;local_stack</cpp:value></cpp:define>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>({ uptr pc; asm("lea 0(%%rip), %0" : "=r"(pc)); pc; })</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CURRENT_PC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>StackTrace::GetCurrentPc()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
