<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfilingUtil.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROFILE_INSTRPROFILINGUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_INSTRPROFILINGUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>


<function_decl><type><name>void</name></type> <name>__llvm_profile_recursive_mkdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Pathname</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__llvm_profile_set_dir_mode</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Mode</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name></type> <name>__llvm_profile_get_dir_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>lprofLockFd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lprofUnlockFd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lprofLockFileHandle</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lprofUnlockFileHandle</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>lprofOpenFileEx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ORBIS__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overwrite</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>pid_t</name></type> <name>fork</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lprofGetPathPrefix</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>PrefixStrip</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>PrefixLen</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>lprofApplyPathPrefix</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PathStr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Prefix</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>PrefixLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>PrefixStrip</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lprofFindFirstDirSeparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Path</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lprofFindLastDirSeparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>lprofGetHostName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>lprofBoolCmpXchg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>OldV</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NewV</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>lprofPtrFetchAdd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>Mem</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ByteIncr</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>lprofSuspendSigKill</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>lprofRestoreSigKill</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>lprofRoundUpTo</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>lprofRoundDownTo</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>lprofReleaseMemoryPagesToOS</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Begin</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>End</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
