<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/xray/xray_interface_internal.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XRAY_INTERFACE_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XRAY_INTERFACE_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xray/xray_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<struct>struct <name>XRaySledEntry</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>AlwaysInstrument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>Padding</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>uint64_t</name> <macro><name>function</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Function</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Function</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>Function</name></expr>;</return>
}</block>
<decl><name>uint64_t</name> <name>address</name><argument_list>()</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Address</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Address</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>Address</name></expr>;</return>
</block_content>}</block></decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_WORDSIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<decl><name>uint32_t</name> <name>Address</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>AlwaysInstrument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>Padding</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>uint32_t</name> <macro><name>function</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Function</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Function</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>Function</name></expr>;</return>
</block_content>}</block></extern>
<expr_stmt><expr><name>uint32_t</name> <macro><name>address</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Address</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Address</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>Address</name></expr>;</return>
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported word size."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}<empty_stmt>;</empty_stmt>

<struct>struct <name>XRayFunctionSledIndex</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>*</modifier></type><name>Begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>*</modifier></type><name>End</name></decl>;</decl_stmt>
}</block>;</struct>
}

namespace <macro><name>__xray</name></macro> <block>{<block_content>

<struct>struct <name>XRaySledMap</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>*</modifier></type><name>Sleds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>XRayFunctionSledIndex</name> <modifier>*</modifier></type><name>SledsIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Functions</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>patchFunctionEntry</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>&amp;</modifier></type><name>Sled</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>Trampoline</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>patchFunctionExit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>&amp;</modifier></type><name>Sled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>patchFunctionTailExit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FuncId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>&amp;</modifier></type><name>Sled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>patchCustomEvent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>&amp;</modifier></type><name>Sled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>patchTypedEvent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>FuncId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>XRaySledEntry</name> <modifier>&amp;</modifier></type><name>Sled</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_FunctionEntry</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_FunctionExit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_FunctionTailExit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_ArgLoggerEntry</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_CustomEvent</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>__xray_TypedEvent</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
