<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/dfsan/dfsan_thread.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFSAN_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFSAN_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dfsan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__dfsan</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DFsanThread</name> <block>{<block_content>
<label><name>public</name>:</label>



<function_decl><type><specifier>static</specifier> <name>DFsanThread</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start_routine_trampoline</name></decl></parameter>,
<parameter><decl><type><name>thread_callback_t</name></type> <name>start_routine</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>track_origins</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>thread_return_t</name></type> <name>ThreadStart</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>stack_top</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>stack_bottom</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><name>uptr</name></type> <name>tls_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_begin_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>uptr</name></type> <name>tls_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tls_end_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>IsMainThread</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>start_routine_</name> <operator>==</operator> <name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>InSignalHandler</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>in_signal_handler_</name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>EnterSignalHandler</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>in_signal_handler_</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>LeaveSignalHandler</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>in_signal_handler_</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>DFsanThreadLocalMallocStorage</name> <modifier>&amp;</modifier></type><name>malloc_storage</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>malloc_storage_</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>destructor_iterations_</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>SetThreadStackAndTls</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ClearShadowForThreadStackAndTLS</name><parameter_list>()</parameter_list>;</function_decl>
<struct>struct <name>StackBounds</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>top</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><name>StackBounds</name> <macro><name>GetStackBounds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>AddrIsInStack</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>start_routine_trampoline_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>thread_callback_t</name></type> <name>start_routine_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>track_origins_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StackBounds</name></type> <name>stack_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>tls_begin_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tls_end_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>in_signal_handler_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DFsanThreadLocalMallocStorage</name></type> <name>malloc_storage_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>DFsanThread</name> <modifier>*</modifier></type><name>GetCurrentThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetCurrentThread</name><parameter_list>(<parameter><decl><type><name>DFsanThread</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DFsanTSDInit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DFsanTSDDtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
