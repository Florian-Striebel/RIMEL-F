<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/bytemap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_BYTEMAP_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_BYTEMAP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>uptr</name> <name>Size</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>FlatByteMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>Map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Index</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Index</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><name><name>Map</name><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Map</name><index>[<expr><name>Index</name></expr>]</index></name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>u8</name></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>Index</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Map</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>u8</name></type> <name><name>Map</name><index>[<expr><name>Size</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
