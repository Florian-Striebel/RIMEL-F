<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/WindowsMMap.c">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WindowsMMap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfiling.h"</cpp:file></cpp:include>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name> <modifier>*</modifier></type><name>mmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name> <operator>|</operator> <name>PROT_EXEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAP_FAILED</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MAP_ANON</name><operator>)</operator> <operator>||</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAP_FAILED</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MAP_ANON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAP_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flProtect</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_WRITE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_EXECUTE_READWRITE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_READWRITE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_EXECUTE_READ</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_READONLY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>end</name> <init>= <expr><name>length</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mmap_fd</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mmap_fd</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mmap_fd</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>mmap_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flProtect</name></expr></argument>, <argument><expr><call><name>DWORD_HI</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DWORD_LO</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAP_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dwDesiredAccess</name> <operator>=</operator> <name>FILE_MAP_WRITE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwDesiredAccess</name> <operator>=</operator> <name>FILE_MAP_READ</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dwDesiredAccess</name> <operator>|=</operator> <name>FILE_MAP_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MAP_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dwDesiredAccess</name> <operator>|=</operator> <name>FILE_MAP_COPY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>dwDesiredAccess</name></expr></argument>, <argument><expr><call><name>DWORD_HI</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DWORD_LO</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MAP_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>void</name></type> <name>munmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>int</name></type> <name>msync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MS_INVALIDATE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>MS_ASYNC</name> <operator>|</operator> <name>MS_SYNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MS_SYNC</name></expr>:</case>
<case>case <expr><name>MS_ASYNC</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FlushViewOfFile</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MS_SYNC</name></expr>)</condition> <block>{<block_content>





</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>int</name></type> <name>madvise</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>advice</name> <operator>!=</operator> <name>MADV_DONTNEED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualUnlock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>int</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>lockType</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>blocking</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>lockType</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blocking</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOCKFILE_FAIL_IMMEDIATELY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OVERLAPPED</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXDWORD</name></expr></argument>, <argument><expr><name>MAXDWORD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dw</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blocking</name> <operator>&amp;&amp;</operator> <name>dw</name> <operator>==</operator> <name>ERROR_LOCK_VIOLATION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>dw</name> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNumBytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwNumBytes</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>COMPILER_RT_VISIBILITY</name>
<name>int</name></type> <name>flock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>blocking</name> <init>= <expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>LOCK_NB</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name>operation</name> <operator>&amp;</operator> <operator>~</operator><name>LOCK_NB</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOCK_EX</name></expr>:</case>
<return>return <expr><call><name>lock</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>LOCKFILE_EXCLUSIVE_LOCK</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCK_SH</name></expr>:</case>
<return>return <expr><call><name>lock</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>LOCK_UN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UnlockFile</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXDWORD</name></expr></argument>, <argument><expr><name>MAXDWORD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DWORD_HI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DWORD_LO</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
