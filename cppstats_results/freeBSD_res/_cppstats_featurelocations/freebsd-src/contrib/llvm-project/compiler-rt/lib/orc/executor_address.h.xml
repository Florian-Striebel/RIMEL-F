<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/executor_address.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_EXECUTOR_ADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_EXECUTOR_ADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_packed_serialization.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>ExecutorAddrDiff</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExecutorAddrDiff</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>ExecutorAddrDiff</name><argument_list>(<argument>uint64_t Value</argument>)</argument_list></macro> : <macro><name>Value</name><argument_list>(<argument>Value</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Value</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int64_t</name></type> <name>Value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ExecutorAddress</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExecutorAddress</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>ExecutorAddress</name><argument_list>(<argument>uint64_t Addr</argument>)</argument_list></macro> : <macro><name>Addr</name><argument_list>(<argument>Addr</argument>)</argument_list></macro> <block>{<block_content/>}</block>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>ExecutorAddress</name></type> <name>fromPtr</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ExecutorAddress</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <macro><name>toPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_pointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"T must be a pointer type"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>uintptr_t</name> <name>IntPtr</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>IntPtr</name> <operator>==</operator> <name>Addr</name> <operator>&amp;&amp;</operator>
<literal type="string">"JITTargetAddress value out of range for uintptr_t"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>IntPtr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Addr</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>Addr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Addr</name></name> <operator>=</operator> <name>Addr</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Addr</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>&lt;=</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>&gt;</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Addr</name></name> <operator>&gt;=</operator> <name><name>RHS</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ExecutorAddress</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><operator>++</operator><name>Addr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ExecutorAddress</name> <operator>&amp;</operator><name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{
<expr><operator>--</operator><name>Addr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ExecutorAddress</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <return>return <expr><call><name>ExecutorAddress</name><argument_list>(<argument><expr><name>Addr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ExecutorAddress</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <return>return <expr><call><name>ExecutorAddress</name><argument_list>(<argument><expr><name>Addr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>ExecutorAddress</name> <operator>&amp;</operator><name>operator</name><operator>+=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddrDiff</name> <name>Delta</name><operator>)</operator> <block>{
<expr><name>Addr</name> <operator>+=</operator> <call><name><name>Delta</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ExecutorAddress</name> <operator>&amp;</operator><name>operator</name><operator>-=</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddrDiff</name> <name>Delta</name><operator>)</operator> <block>{
<expr><name>Addr</name> <operator>-=</operator> <call><name><name>Delta</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>ExecutorAddrDiff</name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name>ExecutorAddrDiff</name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>RHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>ExecutorAddress</name> <name>operator</name><operator>+</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddrDiff</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name>ExecutorAddress</name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>RHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>ExecutorAddress</name> <name>operator</name><operator>+</operator><operator>(</operator><specifier>const</specifier> <name>ExecutorAddrDiff</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ExecutorAddress</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><call><name>ExecutorAddress</name><argument_list>(<argument><expr><call><name><name>LHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>RHS</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<struct>struct <name>ExecutorAddressRange</name> <block>{
<expr_stmt><expr><call><name>ExecutorAddressRange</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>ExecutorAddressRange</name><argument_list>(<argument>ExecutorAddress StartAddress</argument>, <argument>ExecutorAddress EndAddress</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>StartAddress</name><argument_list>(<argument><expr><name>StartAddress</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>EndAddress</name><argument_list>(<argument>EndAddress</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StartAddress</name> <operator>==</operator> <name>EndAddress</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ExecutorAddrDiff</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EndAddress</name> <operator>-</operator> <name>StartAddress</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name><name>span</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>toSpan</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<literal type="string">"AddressRange is not a multiple of sizeof(T)"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>span</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>StartAddress</name><operator>.</operator><name>toPtr</name></name><operator>&lt;</operator><name>T</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>ExecutorAddress</name></type> <name>StartAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExecutorAddress</name></type> <name>EndAddress</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> <name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>ExecutorAddress</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutorAddress</name> <modifier>&amp;</modifier></type><name>EA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><call><name><name>EA</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>BOB</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExecutorAddress</name> <modifier>&amp;</modifier></type><name>EA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(<argument><expr><name>BOB</name></expr></argument>, <argument><expr><call><name><name>EA</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>BIB</name></decl></parameter>, <parameter><decl><type><name>ExecutorAddress</name> <modifier>&amp;</modifier></type><name>EA</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>BIB</name></expr></argument>, <argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>EA</name> <operator>=</operator> <call><name>ExecutorAddress</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSExecutorAddressRange</name> <init>=
<expr><name><name>SPSTuple</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name></type> <name><name>SPSSerializationTraits</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddressRange</name></expr></argument>, <argument><expr><name>ExecutorAddressRange</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutorAddressRange</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>size</name><argument_list>(
<argument><expr><name><name>Value</name><operator>.</operator><name>StartAddress</name></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>EndAddress</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>SPSOutputBuffer</name> <modifier>&amp;</modifier></type><name>BOB</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExecutorAddressRange</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>serialize</name><argument_list>(
<argument><expr><name>BOB</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>StartAddress</name></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>EndAddress</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>SPSInputBuffer</name> <modifier>&amp;</modifier></type><name>BIB</name></decl></parameter>, <parameter><decl><type><name>ExecutorAddressRange</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>SPSArgList</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddress</name></expr></argument>, <argument><expr><name>SPSExecutorAddress</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deserialize</name><argument_list>(
<argument><expr><name>BIB</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>StartAddress</name></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>EndAddress</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SPSExecutorAddressRangeSequence</name> <init>= <expr><name><name>SPSSequence</name><argument_list type="generic">&lt;<argument><expr><name>SPSExecutorAddressRange</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
