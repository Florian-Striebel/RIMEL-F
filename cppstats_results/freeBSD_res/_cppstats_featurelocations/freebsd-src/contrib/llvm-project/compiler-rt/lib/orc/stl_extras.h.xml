<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/stl_extras.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_STL_EXTRAS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_STL_EXTRAS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__orc_rt</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>Tuple</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name><modifier>...</modifier> <name>I</name></expr></argument>&gt;</argument_list></name></type>
<name>decltype</name><parameter_list>(<parameter><decl><type><name>auto</name></type></decl></parameter>)</parameter_list> apply_tuple_impl<parameter_list>(<parameter><decl/></parameter></parameter_list>F &amp;&amp;f<operator>,</operator> Tuple &amp;&amp;t<operator>,</operator> std::index_sequence&lt;I...&gt;</function>)</block_content> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>F</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>






<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>, <argument><expr><name>typename</name> <name>Tuple</name></expr></argument>&gt;</argument_list></name></type>
<name>decltype</name><parameter_list>(<parameter><decl><type><name>auto</name></type></decl></parameter>)</parameter_list> apply_tuple<parameter_list>(<parameter><decl/></parameter></parameter_list>F &amp;&amp;f<operator>,</operator> Tuple &amp;&amp;t</function>) <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>Indices</name> <init>= <expr><name>std</name><operator>::</operator><name><name>make_index_sequence</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>detail</name><operator>::</operator><macro><name>apply_tuple_impl</name><argument_list>(<argument>std::forward&lt;F&gt;(f)</argument>, <argument>std::forward&lt;Tuple&gt;(t)</argument>,
<argument>Indices{}</argument>)</argument_list></macro></expr>;</return>
</block_content>}</block>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
