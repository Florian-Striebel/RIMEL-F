<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/tsan/rtl/tsan_trace.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TSAN_TRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSAN_TRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_stack_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsan_mutexset.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__tsan</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kTracePartSizeBits</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kTracePartSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kTracePartSizeBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kTraceParts</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <name>kTracePartSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kTraceSize</name> <init>= <expr><name>kTracePartSize</name> <operator>*</operator> <name>kTraceParts</name></expr></init></decl>;</decl_stmt>


<enum>enum <name>EventType</name> <block>{
<decl><name>EventTypeMop</name></decl>,
<decl><name>EventTypeFuncEnter</name></decl>,
<decl><name>EventTypeFuncExit</name></decl>,
<decl><name>EventTypeLock</name></decl>,
<decl><name>EventTypeUnlock</name></decl>,
<decl><name>EventTypeRLock</name></decl>,
<decl><name>EventTypeRUnlock</name></decl>
}</block>;</enum>




<typedef>typedef <type><name>u64</name></type> <name>Event</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>kEventPCBits</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>TraceHeader</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>
<decl_stmt><decl><type><name>BufferedStackTrace</name></type> <name>stack0</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VarSizeStackTrace</name></type> <name>stack0</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>u64</name></type> <name>epoch0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutexSet</name></type> <name>mset0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TraceHeader</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>stack0</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>epoch0</name><argument_list>()</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>Trace</name> <block>{
<decl_stmt><decl><type><name>Mutex</name></type> <name>mtx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>


<decl_stmt><decl><type><name>uptr</name></type> <name><name>shadow_stack</name><index>[<expr><name>kShadowStackSize</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>TraceHeader</name></type> <name><name>headers</name><index>[<expr><name>kTraceParts</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Trace</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>mtx</name><argument_list>(<argument>MutexTypeTrace</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
