<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/stack_depot.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_STACK_DEPOT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_STACK_DEPOT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MurMur2HashBuilder</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>M</name> <init>= <expr><literal type="number">0x5bd1e995</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>Seed</name> <init>= <expr><literal type="number">0x9747b28c</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>R</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>H</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name>explicit</name></type> <name>MurMur2HashBuilder</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>Init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>H</name> <operator>=</operator> <name>Seed</name> <operator>^</operator> <name>Init</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>K</name> <operator>*=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>K</name> <operator>^=</operator> <name>K</name> <operator>&gt;&gt;</operator> <name>R</name></expr>;</expr_stmt>
<expr_stmt><expr><name>K</name> <operator>*=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>*=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>^=</operator> <name>K</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>u32</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>X</name> <init>= <expr><name>H</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>X</name> <operator>^=</operator> <name>X</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>*=</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>^=</operator> <name>X</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<return>return <expr><name>X</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StackDepot</name> <block>{<block_content>
<decl_stmt><decl><type><name>HybridMutex</name></type> <name>RingEndMu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>RingEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>TabBits</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>TabBits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>TabSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TabBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>TabMask</name> <init>= <expr><name>TabSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name><name>Tab</name><index>[<expr><name>TabSize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>RingBits</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>RingBits</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>RingSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RingBits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>RingMask</name> <init>= <expr><name>RingSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u64</name></type> <name><name>Ring</name><index>[<expr><name>RingSize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>


<function><type><name>u32</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>Begin</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MurMur2HashBuilder</name></type> <name>B</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>Begin</name></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>End</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>B</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>u32</name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<decl_stmt><decl><type><name>u32</name></type> <name>Hash</name> <init>= <expr><call><name><name>B</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>Pos</name> <init>= <expr><name>Hash</name> <operator>&amp;</operator> <name>TabMask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>RingPos</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tab</name><index>[<expr><name>Pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>Entry</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>Id</name> <init>= <expr><operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>End</name> <operator>-</operator> <name>Begin</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">33</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>Hash</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Entry</name> <operator>==</operator> <name>Id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Hash</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ScopedLock</name></type> <name>Lock</name><argument_list>(<argument><expr><name>RingEndMu</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>RingPos</name> <operator>=</operator> <name>RingEnd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tab</name><index>[<expr><name>Pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>RingPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>Id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>Begin</name></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>End</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RingPos</name> <operator>=</operator> <operator>(</operator><name>RingPos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RingMask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>RingEnd</name> <operator>=</operator> <operator>(</operator><name>RingPos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RingMask</name></expr>;</expr_stmt>
<return>return <expr><name>Hash</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><name>bool</name></type> <name>find</name><argument_list>(<argument><expr><name>u32</name> <name>Hash</name></expr></argument>, <argument><expr><name>uptr</name> <operator>*</operator><name>RingPosPtr</name></expr></argument>, <argument><expr><name>uptr</name> <operator>*</operator><name>SizePtr</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>Pos</name> <init>= <expr><name>Hash</name> <operator>&amp;</operator> <name>TabMask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>RingPos</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Tab</name><index>[<expr><name>Pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>RingPos</name> <operator>&gt;=</operator> <name>RingSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>Entry</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>HashWithTagBit</name> <init>= <expr><operator>(</operator><call><name>u64</name><argument_list>(<argument><expr><name>Hash</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Entry</name> <operator>&amp;</operator> <literal type="number">0x1ffffffff</literal><operator>)</operator> <operator>!=</operator> <name>HashWithTagBit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>Size</name> <init>= <expr><call><name>u32</name><argument_list>(<argument><expr><name>Entry</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&gt;=</operator> <name>RingSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>RingPosPtr</name> <operator>=</operator> <operator>(</operator><name>RingPos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RingMask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>SizePtr</name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MurMur2HashBuilder</name></type> <name>B</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>Size</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RingPos</name> <operator>=</operator> <operator>(</operator><name>RingPos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RingMask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>B</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>u32</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name><name>B</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Hash</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>u64</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>uptr</name> <name>RingPos</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Ring</name><index>[<expr><name>RingPos</name> <operator>&amp;</operator> <name>RingMask</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
