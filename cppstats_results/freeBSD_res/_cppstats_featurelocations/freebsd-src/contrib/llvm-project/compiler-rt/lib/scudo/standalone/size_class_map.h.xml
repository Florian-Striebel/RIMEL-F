<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/size_class_map.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_SIZE_CLASS_MAP_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_SIZE_CLASS_MAP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>uptr</name></type> <name>scaledLog2</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ZeroLog</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>LogBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>L</name> <init>= <expr><call><name>getMostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>LBits</name> <init>= <expr><operator>(</operator><name>Size</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>L</name> <operator>-</operator> <name>LogBits</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LogBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>HBits</name> <init>= <expr><operator>(</operator><name>L</name> <operator>-</operator> <name>ZeroLog</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>LogBits</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>LBits</name> <operator>+</operator> <name>HBits</name></expr>;</return>
</block_content>}</block></function>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Config</name><operator>&gt;</operator> struct <name>SizeClassMapBase</name> <block>{
<expr><specifier>static</specifier> <name>u32</name> <macro><name>getMaxCachedHint</name><argument_list>(<argument>uptr Size</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>u32</name> <name>N</name></expr>;

<if_stmt><if>if <condition>(<expr><name>Config</name><operator>::</operator><name>MaxBytesCachedLog</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <name>Config</name><operator>::</operator><name>MaxSizeLog</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>N</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MaxBytesCachedLog</name><operator>)</operator> <operator>/</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>N</name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MaxBytesCachedLog</name><operator>)</operator> <operator>/</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>
<return>return <expr><call><name>Max</name><argument_list>(<argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>MaxNumCachedHint</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>FixedSizeClassMap</name> <range>: <expr><name>public</name> <name><name>SizeClassMapBase</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name><name>SizeClassMapBase</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name></type> <name>Base</name>;</typedef>

<specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>MinSize</name> <operator>=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MinSizeLog</name></block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSize</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MidSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidClass</name> <init>= <expr><name>MidSize</name> <operator>/</operator> <name>MinSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name>S</name> <init>= <expr><name>Config</name><operator>::</operator><name>NumBits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>M</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><name>Config</name><operator>::</operator><name>MaxNumCachedHint</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSize</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MaxSizeLog</name><operator>)</operator> <operator>+</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumClasses</name> <init>=
<expr><name>MidClass</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Config</name><operator>::</operator><name>MaxSizeLog</name> <operator>-</operator> <name>Config</name><operator>::</operator><name>MidSizeLog</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>NumClasses</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>LargestClassId</name> <init>= <expr><name>NumClasses</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>BatchClassId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getSizeByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>BatchClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ClassId</name> <operator>&lt;=</operator> <name>MidClass</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ClassId</name> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MinSizeLog</name><operator>)</operator> <operator>+</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ClassId</name> <operator>-=</operator> <name>MidClass</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>T</name> <init>= <expr><name>MidSize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ClassId</name> <operator>&gt;&gt;</operator> <name>S</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>T</name> <operator>+</operator> <operator>(</operator><name>T</name> <operator>&gt;&gt;</operator> <name>S</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ClassId</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>+</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u8</name></type> <name>getSizeLSBByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>u8</name><argument_list>(<argument><expr><call><name>getLeastSignificantSetBitIndex</name><argument_list>(<argument><expr><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>usesCompressedLSBFormat</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getClassIdBySize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MinSizeLog</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Size</name> <operator>-=</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <name>MidSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>Size</name> <operator>+</operator> <name>MinSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>Config</name><operator>::</operator><name>MinSizeLog</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>MidClass</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>scaledLog2</name><argument_list>(<argument><expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Config</name><operator>::</operator><name>MidSizeLog</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u32</name></type> <name>getMaxCachedHint</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Base</name><operator>::</operator><call><name>getMaxCachedHint</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TableSizeClassMap</name> <range>: <expr><name>public</name> <name><name>SizeClassMapBase</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name><name>SizeClassMapBase</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name></type> <name>Base</name>;</typedef>

<specifier>static</specifier> <specifier>const</specifier> <name>u8</name> <name>S</name> <operator>=</operator> <name>Config</name><operator>::</operator><name>NumBits</name> <operator>-</operator> <literal type="number">1</literal></block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>M</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>S</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>ClassesSize</name> <init>=
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>Classes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<struct>struct <name>SizeTable</name> <block>{
<function><type><name>constexpr</name></type> <name>SizeTable</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>Pos</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MidSizeLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Inc</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>Config</name><operator>::</operator><name>MidSizeLog</name> <operator>-</operator> <name>S</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name>getTableSize</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>Pos</name> <operator>+=</operator> <name>Inc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Pos</name> <operator>&amp;</operator> <operator>(</operator><name>Pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Inc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>Tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>computeClassId</name><argument_list>(<argument><expr><name>Pos</name> <operator>+</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>u8</name></type> <name>computeClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>ClassesSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>uptr</name></type> <name>getTableSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Config</name><operator>::</operator><name>MaxSizeLog</name> <operator>-</operator> <name>Config</name><operator>::</operator><name>MidSizeLog</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>S</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>u8</name></type> <name><name>Tab</name><index>[<expr><call><name>getTableSize</name><argument_list>()</argument_list></call></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>SizeTable</name></type> <name>SzTable</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>LSBTable</name> <block>{
<function><type><name>constexpr</name></type> <name>LSBTable</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>Min</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>, <decl><type ref="prev"/><name>Max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>ClassesSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>u8</name></type> <name>Bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>Bit</name> <operator>!=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>Bit</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><name>I</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Bit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Tab</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <name>Bit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Bit</name> <operator>&lt;</operator> <name>Min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Min</name> <operator>=</operator> <name>Bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Bit</name> <operator>&gt;</operator> <name>Max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Max</name> <operator>=</operator> <name>Bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>Max</name> <operator>-</operator> <name>Min</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>ClassesSize</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>UseCompressedFormat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CompressedMin</name> <operator>=</operator> <name>Min</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>ClassesSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>CompressedValue</name> <operator>|=</operator> <call><name>u64</name><argument_list>(<argument><expr><name><name>Tab</name><index>[<expr><name>I</name></expr>]</index></name> <operator>-</operator> <name>Min</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>I</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>u8</name></type> <name><name>Tab</name><index>[<expr><name>ClassesSize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>UseCompressedFormat</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>CompressedMin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>CompressedValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>LSBTable</name></type> <name>LTable</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><name>Config</name><operator>::</operator><name>MaxNumCachedHint</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumClasses</name> <init>= <expr><name>ClassesSize</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>NumClasses</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>LargestClassId</name> <init>= <expr><name>NumClasses</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>BatchClassId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSize</name> <init>= <expr><name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><name>LargestClassId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getSizeByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><name>ClassId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u8</name></type> <name>getSizeLSBByClassId</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>LTable</name><operator>.</operator><name>UseCompressedFormat</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>LTable</name><operator>.</operator><name>CompressedValue</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>ClassId</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator>
<name><name>LTable</name><operator>.</operator><name>CompressedMin</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>LTable</name><operator>.</operator><name>Tab</name><index>[<expr><name>ClassId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>usesCompressedLSBFormat</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>LTable</name><operator>.</operator><name>UseCompressedFormat</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getClassIdBySize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <name>Config</name><operator>::</operator><name><name>Classes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Size</name> <operator>-=</operator> <name>Config</name><operator>::</operator><name>SizeDelta</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Config</name><operator>::</operator><name>MidSizeLog</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>Config</name><operator>::</operator><name>MinSizeLog</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>SzTable</name><operator>.</operator><name>Tab</name><index>[<expr><call><name>scaledLog2</name><argument_list>(<argument><expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Config</name><operator>::</operator><name>MidSizeLog</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u32</name></type> <name>getMaxCachedHint</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Base</name><operator>::</operator><call><name>getMaxCachedHint</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<struct>struct <name>DefaultSizeClassConfig</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>FixedSizeClassMap</name><argument_list type="generic">&lt;<argument><expr><name>DefaultSizeClassConfig</name></expr></argument>&gt;</argument_list></name></type> <name>DefaultSizeClassMap</name>;</typedef>

<struct>struct <name>FuchsiaSizeClassConfig</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>FixedSizeClassMap</name><argument_list type="generic">&lt;<argument><expr><name>FuchsiaSizeClassConfig</name></expr></argument>&gt;</argument_list></name></type> <name>FuchsiaSizeClassMap</name>;</typedef>

<struct>struct <name>AndroidSizeClassConfig</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_WORDSIZE</name> <operator>==</operator> <literal type="number">64U</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u32</name></type> <name><name>Classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00020</literal></expr>, <expr><literal type="number">0x00030</literal></expr>, <expr><literal type="number">0x00040</literal></expr>, <expr><literal type="number">0x00050</literal></expr>, <expr><literal type="number">0x00060</literal></expr>, <expr><literal type="number">0x00070</literal></expr>, <expr><literal type="number">0x00090</literal></expr>, <expr><literal type="number">0x000b0</literal></expr>,
<expr><literal type="number">0x000c0</literal></expr>, <expr><literal type="number">0x000e0</literal></expr>, <expr><literal type="number">0x00120</literal></expr>, <expr><literal type="number">0x00160</literal></expr>, <expr><literal type="number">0x001c0</literal></expr>, <expr><literal type="number">0x00250</literal></expr>, <expr><literal type="number">0x00320</literal></expr>, <expr><literal type="number">0x00450</literal></expr>,
<expr><literal type="number">0x00670</literal></expr>, <expr><literal type="number">0x00830</literal></expr>, <expr><literal type="number">0x00a10</literal></expr>, <expr><literal type="number">0x00c30</literal></expr>, <expr><literal type="number">0x01010</literal></expr>, <expr><literal type="number">0x01210</literal></expr>, <expr><literal type="number">0x01bd0</literal></expr>, <expr><literal type="number">0x02210</literal></expr>,
<expr><literal type="number">0x02d90</literal></expr>, <expr><literal type="number">0x03790</literal></expr>, <expr><literal type="number">0x04010</literal></expr>, <expr><literal type="number">0x04810</literal></expr>, <expr><literal type="number">0x05a10</literal></expr>, <expr><literal type="number">0x07310</literal></expr>, <expr><literal type="number">0x08210</literal></expr>, <expr><literal type="number">0x10010</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u32</name></type> <name><name>Classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00020</literal></expr>, <expr><literal type="number">0x00030</literal></expr>, <expr><literal type="number">0x00040</literal></expr>, <expr><literal type="number">0x00050</literal></expr>, <expr><literal type="number">0x00060</literal></expr>, <expr><literal type="number">0x00070</literal></expr>, <expr><literal type="number">0x00080</literal></expr>, <expr><literal type="number">0x00090</literal></expr>,
<expr><literal type="number">0x000a0</literal></expr>, <expr><literal type="number">0x000b0</literal></expr>, <expr><literal type="number">0x000c0</literal></expr>, <expr><literal type="number">0x000e0</literal></expr>, <expr><literal type="number">0x000f0</literal></expr>, <expr><literal type="number">0x00110</literal></expr>, <expr><literal type="number">0x00120</literal></expr>, <expr><literal type="number">0x00130</literal></expr>,
<expr><literal type="number">0x00150</literal></expr>, <expr><literal type="number">0x00160</literal></expr>, <expr><literal type="number">0x00170</literal></expr>, <expr><literal type="number">0x00190</literal></expr>, <expr><literal type="number">0x001d0</literal></expr>, <expr><literal type="number">0x00210</literal></expr>, <expr><literal type="number">0x00240</literal></expr>, <expr><literal type="number">0x002a0</literal></expr>,
<expr><literal type="number">0x00330</literal></expr>, <expr><literal type="number">0x00370</literal></expr>, <expr><literal type="number">0x003a0</literal></expr>, <expr><literal type="number">0x00400</literal></expr>, <expr><literal type="number">0x00430</literal></expr>, <expr><literal type="number">0x004a0</literal></expr>, <expr><literal type="number">0x00530</literal></expr>, <expr><literal type="number">0x00610</literal></expr>,
<expr><literal type="number">0x00730</literal></expr>, <expr><literal type="number">0x00840</literal></expr>, <expr><literal type="number">0x00910</literal></expr>, <expr><literal type="number">0x009c0</literal></expr>, <expr><literal type="number">0x00a60</literal></expr>, <expr><literal type="number">0x00b10</literal></expr>, <expr><literal type="number">0x00ca0</literal></expr>, <expr><literal type="number">0x00e00</literal></expr>,
<expr><literal type="number">0x00fb0</literal></expr>, <expr><literal type="number">0x01030</literal></expr>, <expr><literal type="number">0x01130</literal></expr>, <expr><literal type="number">0x011f0</literal></expr>, <expr><literal type="number">0x01490</literal></expr>, <expr><literal type="number">0x01650</literal></expr>, <expr><literal type="number">0x01930</literal></expr>, <expr><literal type="number">0x02010</literal></expr>,
<expr><literal type="number">0x02190</literal></expr>, <expr><literal type="number">0x02490</literal></expr>, <expr><literal type="number">0x02850</literal></expr>, <expr><literal type="number">0x02d50</literal></expr>, <expr><literal type="number">0x03010</literal></expr>, <expr><literal type="number">0x03210</literal></expr>, <expr><literal type="number">0x03c90</literal></expr>, <expr><literal type="number">0x04090</literal></expr>,
<expr><literal type="number">0x04510</literal></expr>, <expr><literal type="number">0x04810</literal></expr>, <expr><literal type="number">0x05c10</literal></expr>, <expr><literal type="number">0x06f10</literal></expr>, <expr><literal type="number">0x07310</literal></expr>, <expr><literal type="number">0x08010</literal></expr>, <expr><literal type="number">0x0c010</literal></expr>, <expr><literal type="number">0x10010</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<typedef>typedef <type><name><name>TableSizeClassMap</name><argument_list type="generic">&lt;<argument><expr><name>AndroidSizeClassConfig</name></expr></argument>&gt;</argument_list></name></type> <name>AndroidSizeClassMap</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_WORDSIZE</name> <operator>==</operator> <literal type="number">64U</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AndroidSizeClassMap</name><operator>::</operator><call><name>usesCompressedLSBFormat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>SvelteSizeClassConfig</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_WORDSIZE</name> <operator>==</operator> <literal type="number">64U</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<typedef>typedef <type><name><name>FixedSizeClassMap</name><argument_list type="generic">&lt;<argument><expr><name>SvelteSizeClassConfig</name></expr></argument>&gt;</argument_list></name></type> <name>SvelteSizeClassMap</name>;</typedef>



<struct>struct <name>TrustySizeClassConfig</name> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumBits</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinSizeLog</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MidSizeLog</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeLog</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>MaxNumCachedHint</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxBytesCachedLog</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>SizeDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>FixedSizeClassMap</name><argument_list type="generic">&lt;<argument><expr><name>TrustySizeClassConfig</name></expr></argument>&gt;</argument_list></name></type> <name>TrustySizeClassMap</name>;</typedef>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SCMap</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>void</name></type> <name>printMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedString</name></type> <name>Buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>PrevS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>TotalCached</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>SCMap</name><operator>::</operator><name>NumClasses</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>SCMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>S</name> <init>= <expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>D</name> <init>= <expr><name>S</name> <operator>-</operator> <name>PrevS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>P</name> <init>= <expr><ternary><condition><expr><name>PrevS</name></expr> ?</condition><then> <expr><operator>(</operator><name>D</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>PrevS</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>L</name> <init>= <expr><ternary><condition><expr><name>S</name></expr> ?</condition><then> <expr><call><name>getMostSignificantSetBitIndex</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Cached</name> <init>= <expr><name>SCMap</name><operator>::</operator><call><name>getMaxCachedHint</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>S</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Buffer</name><operator>.</operator><name>append</name></name><argument_list>(
<argument><expr><literal type="string">"C%02zu =&gt; S: %zu diff: +%zu %02zu%% L %zu Cached: %zu %zu; id %zu\n"</literal></expr></argument>,
<argument><expr><name>I</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>SCMap</name><operator>::</operator><call><name>getMaxCachedHint</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Cached</name></expr></argument>,
<argument><expr><name>SCMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TotalCached</name> <operator>+=</operator> <name>Cached</name></expr>;</expr_stmt>
<expr_stmt><expr><name>PrevS</name> <operator>=</operator> <name>S</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>Buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Total Cached: %zu\n"</literal></expr></argument>, <argument><expr><name>TotalCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Buffer</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>SCMap</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>void</name></type> <name>validateMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>C</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>C</name> <operator>&lt;</operator> <name>SCMap</name><operator>::</operator><name>NumClasses</name></expr>;</condition> <incr><expr><name>C</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>SCMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>S</name> <init>= <expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>C</name> <operator>&lt;</operator> <name>SCMap</name><operator>::</operator><name>LargestClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>S</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>S</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>C</name> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <name>SCMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_GT</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>C</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>SCMap</name><operator>::</operator><name>MaxSize</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>S</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>S</name> <operator>&lt;=</operator> <name>SCMap</name><operator>::</operator><name>MaxSize</name></expr>;</condition> <incr><expr><name>S</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>C</name> <init>= <expr><name>SCMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>SCMap</name><operator>::</operator><name>NumClasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>C</name> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <name>SCMap</name><operator>::</operator><name>BatchClassId</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>SCMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>C</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
