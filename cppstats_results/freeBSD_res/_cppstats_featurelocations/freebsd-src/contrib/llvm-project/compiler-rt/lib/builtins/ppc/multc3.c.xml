<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/multc3.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../int_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DD.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makeFinite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (x).s.hi = crt_copysign(crt_isinf((x).s.hi) ? 1.0 : 0.0, (x).s.hi); (x).s.lo = 0.0; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zeroNaN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (crt_isnan((x).s.hi)) { (x).s.hi = crt_copysign(0.0, (x).s.hi); (x).s.lo = 0.0; } }</cpp:value></cpp:define>







<function><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__multc3</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ac</name> <init>= <expr><call><name>__gcc_qmul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>bd</name> <init>= <expr><call><name>__gcc_qmul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ad</name> <init>= <expr><call><name>__gcc_qmul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>bc</name> <init>= <expr><call><name>__gcc_qmul</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DD</name></type> <name>real</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <macro><name>__gcc_qsub</name><argument_list>(<argument>ac</argument>, <argument>bd</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>imag</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <macro><name>__gcc_qadd</name><argument_list>(<argument>ad</argument>, <argument>bc</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>crt_isnan</name><argument_list>(<argument><expr><name><name>real</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>crt_isnan</name><argument_list>(<argument><expr><name><name>imag</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>recalc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DD</name></type> <name>aDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>a</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>bDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>b</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>cDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>dDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>d</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>aDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>bDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>makeFinite</name><argument_list>(<argument><expr><name>aDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>makeFinite</name><argument_list>(<argument><expr><name>bDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>cDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>dDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>cDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>dDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>makeFinite</name><argument_list>(<argument><expr><name>cDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>makeFinite</name><argument_list>(<argument><expr><name>dDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>aDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>bDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recalc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DD</name></type> <name>acDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>ac</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>bdDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>bd</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>adDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>ad</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DD</name></type> <name>bcDD</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>bc</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>acDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>bdDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>adDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>crt_isinf</name><argument_list>(<argument><expr><name><name>bcDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>aDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>bDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>cDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeroNaN</name><argument_list>(<argument><expr><name>dDD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recalc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>real</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>CRT_INFINITY</name> <operator>*</operator> <operator>(</operator><name><name>aDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>*</operator> <name><name>cDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>-</operator> <name><name>bDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>*</operator> <name><name>dDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>real</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imag</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>CRT_INFINITY</name> <operator>*</operator> <operator>(</operator><name><name>aDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>*</operator> <name><name>dDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>+</operator> <name><name>bDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name> <operator>*</operator> <name><name>cDD</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imag</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__real__</name></type> <name>z</name> <init>= <expr><name><name>real</name><operator>.</operator><name>ld</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__imag__</name></type> <name>z</name> <init>= <expr><name><name>imag</name><operator>.</operator><name>ld</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>
</unit>
