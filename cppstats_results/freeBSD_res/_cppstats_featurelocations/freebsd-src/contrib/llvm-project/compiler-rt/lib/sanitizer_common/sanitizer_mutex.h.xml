<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_MUTEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_MUTEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_thread_safety.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>StaticSpinMutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> ACQUIRE<parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>TryLock</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LockSlow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TryLock</name><parameter_list>()</parameter_list> TRY_ACQUIRE<parameter_list>(<parameter><decl><type><name>true</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> RELEASE<parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>CheckLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>atomic_uint8_t</name> <name>state_</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>LockSlow</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>SpinMutex</name> <range>: <expr><name>public</name> <name>StaticSpinMutex</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SpinMutex</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;
}</block>

<call><name>SpinMutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SpinMutex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>SpinMutex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Semaphore</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>constexpr</name></type> <name>Semaphore</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<expr_stmt><expr><call><name>Semaphore</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Semaphore</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Semaphore</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Wait</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Post</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>atomic_uint32_t</name></type> <name>state_</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>int</name></type> <name>MutexType</name>;</typedef>

<enum>enum <block>{


<decl><name>MutexInvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MutexThreadRegistry</name></decl>,

<decl><name>MutexLastCommon</name></decl>,

<decl><name>MutexUnchecked</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,



<decl><name>MutexLeaf</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>MutexMulti</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_CHECK_DEADLOCKS</name></cpp:macro> <cpp:value>(SANITIZER_DEBUG &amp;&amp; !SANITIZER_GO)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
<struct>struct <name>MutexMeta</name> <block>{
<decl_stmt><decl><type><name>MutexType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>MutexType</name></type> <name><name>can_lock</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>CheckedMutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>constexpr</name></macro> <macro><name>CheckedMutex</name><argument_list>(<argument>MutexType type</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
: <macro><name>type_</name><argument_list>(<argument>type</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
</block_content>}</block>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
<expr_stmt><expr><call><name>LockImpl</name><argument_list>(<argument><expr><call><name>GET_CALLER_PC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
<expr_stmt><expr><call><name>UnlockImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckNoLocks</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
<expr_stmt><expr><call><name>CheckNoLocksImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_CHECK_DEADLOCKS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>MutexType</name></type> <name>type_</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>LockImpl</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnlockImpl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckNoLocksImpl</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>Mutex</name> <range>: <expr><name>CheckedMutex</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>constexpr</name> <macro><name>Mutex</name><argument_list>(<argument>MutexType type = MutexUnchecked</argument>)</argument_list></macro> <operator>:</operator> <macro><name>CheckedMutex</name><argument_list>(<argument>type</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>Lock</name><argument_list>()</argument_list></macro> <macro><name>ACQUIRE</name><argument_list>()</argument_list></macro> <block>{
<expr><name>CheckedMutex</name><operator>::</operator><call><name>Lock</name><argument_list>()</argument_list></call></expr>;
<expr><name>u64</name> <name>reset_mask</name> <operator>=</operator> <operator>~</operator><literal type="number">0ull</literal></expr>;
<expr><name>u64</name> <name>state</name> <operator>=</operator> <call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>uptr</name> <name>kMaxSpinIters</name> <operator>=</operator> <literal type="number">1500</literal></expr>;
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>spin_iters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>spin_iters</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>locked</name> <init>= <expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>kWriterLock</name> <operator>|</operator> <name>kReaderLockMask</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>locked</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>|</operator> <name>kWriterLock</name><operator>)</operator> <operator>&amp;</operator> <name>reset_mask</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (spin_iters &gt; kMaxSpinIters</block></if></if_stmt>)</block_content> <block>{<block_content>


<expr_stmt><expr><name>new_state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>+</operator> <name>kWaitingWriterInc</name><operator>)</operator> <operator>&amp;</operator> <name>reset_mask</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if ((state &amp; kWriterSpinWait</block></block></for>) <operator>==</operator> <literal type="number">0</literal>)</block> <block>{


<expr><name>new_state</name> <operator>=</operator> <name>state</name> <operator>|</operator> <name>kWriterSpinWait</name></expr>;
}</block></expr> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<expr_stmt/>}</block_content>
if (UNLIKELY(!atomic_compare_exchange_weak(&amp;state_</block><operator>,</operator> <expr_stmt><expr><operator>&amp;</operator><name>state</name></expr><operator>,</operator> <expr><name>new_state</name></expr><operator>,</operator>
<expr><name>memory_order_acquire</name></expr></expr_stmt></else></if_stmt>))</block></expr>)</range>
continue</decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>locked</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>spin_iters</name> <operator>&gt;</operator> <name>kMaxSpinIters</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>writers_</name><operator>.</operator><name>Wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spin_iters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>kWriterSpinWait</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>reset_mask</name> <operator>=</operator> <operator>~</operator><name>kWriterSpinWait</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}

void <macro><name>Unlock</name><argument_list>()</argument_list></macro> <macro><name>RELEASE</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>CheckedMutex</name><operator>::</operator><call><name>Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wake_writer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>wake_readers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>state</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>kWriterLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>kReaderLockMask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>state</name> <operator>&amp;</operator> <operator>~</operator><name>kWriterLock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wake_writer</name> <operator>=</operator>
<operator>(</operator><name>state</name> <operator>&amp;</operator> <name>kWriterSpinWait</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>kWaitingWriterMask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wake_writer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <operator>(</operator><name>new_state</name> <operator>-</operator> <name>kWaitingWriterInc</name><operator>)</operator> <operator>|</operator> <name>kWriterSpinWait</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wake_readers</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>kWriterSpinWait</name> <operator>|</operator> <name>kWaitingWriterMask</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>kWaitingReaderMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>kWaitingReaderShift</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wake_readers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <operator>(</operator><name>new_state</name> <operator>&amp;</operator> <operator>~</operator><name>kWaitingReaderMask</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>wake_readers</name> <operator>&lt;&lt;</operator> <name>kReaderLockShift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>wake_writer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>writers_</name><operator>.</operator><name>Post</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>wake_readers</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>readers_</name><operator>.</operator><name>Post</name></name><argument_list>(<argument><expr><name>wake_readers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>ReadLock</name><parameter_list>()</parameter_list> ACQUIRE_SHARED<parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CheckedMutex</name><operator>::</operator><call><name>Lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>locked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>state</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>locked</name> <operator>=</operator>
<operator>(</operator><name>state</name> <operator>&amp;</operator> <name>kReaderLockMask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>kWriterLock</name> <operator>|</operator> <name>kWriterSpinWait</name> <operator>|</operator> <name>kWaitingWriterMask</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>locked</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>state</name> <operator>+</operator> <name>kReaderLockInc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>state</name> <operator>+</operator> <name>kWaitingReaderInc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>readers_</name><operator>.</operator><name>Wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>kWriterLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>kReaderLockMask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReadUnlock</name><parameter_list>()</parameter_list> RELEASE_SHARED<parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CheckedMutex</name><operator>::</operator><call><name>Unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>state</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>kReaderLockMask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>kWaitingReaderMask</name> <operator>|</operator> <name>kWriterLock</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>state</name> <operator>-</operator> <name>kReaderLockInc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wake</name> <operator>=</operator> <operator>(</operator><name>new_state</name> <operator>&amp;</operator> <operator>(</operator><name>kReaderLockMask</name> <operator>|</operator> <name>kWriterSpinWait</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>new_state</name> <operator>&amp;</operator> <name>kWaitingWriterMask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wake</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_state</name> <operator>=</operator> <operator>(</operator><name>new_state</name> <operator>-</operator> <name>kWaitingWriterInc</name><operator>)</operator> <operator>|</operator> <name>kWriterSpinWait</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>wake</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>writers_</name><operator>.</operator><name>Post</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<expr_stmt><expr><name>void</name> <macro><name>CheckWriteLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>kWriterLock</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>CheckLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>CheckWriteLocked</name><argument_list>()</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>CheckReadLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>kReaderLockMask</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>atomic_uint64_t</name> <name>state_</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Semaphore</name></type> <name>writers_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Semaphore</name></type> <name>readers_</name></decl>;</decl_stmt>
























<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kCounterWidth</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kReaderLockShift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kReaderLockInc</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kReaderLockShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kReaderLockMask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kCounterWidth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>kReaderLockShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingReaderShift</name> <init>= <expr><name>kCounterWidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingReaderInc</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kWaitingReaderShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingReaderMask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kCounterWidth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>kWaitingReaderShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingWriterShift</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>kCounterWidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingWriterInc</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kWaitingWriterShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWaitingWriterMask</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>kCounterWidth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>kWaitingWriterShift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWriterLock</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>kCounterWidth</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>u64</name></type> <name>kWriterSpinWait</name> <init>= <expr><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>kCounterWidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Mutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Mutex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Mutex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<function_decl><type><name>void</name></type> <name>FutexWait</name><parameter_list>(<parameter><decl><type><name>atomic_uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>cmp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FutexWake</name><parameter_list>(<parameter><decl><type><name>atomic_uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>BlockingMutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>constexpr</name></macro> <expr_stmt><expr><call><name>BlockingMutex</name><argument_list>(<argument><expr><name>LinkerInitialized</name></expr></argument>)</argument_list></call>
<operator>:</operator> <name>opaque_storage_</name> <block>{<expr><literal type="number">0</literal></expr>, }</block></expr><operator>,</operator> <expr><name>owner_</name> <block>{<expr><literal type="number">0</literal></expr>}</block> <block>{}</block>
<call><name>BlockingMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list> ACQUIRE<parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> RELEASE<parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><name>void</name> <macro><name>CheckLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <call><name>CHECK_LOCKED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>

<macro><name>ALIGNED</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>uptr</name></type> <name><name>opaque_storage_</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>owner_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>MUTEX</name></type> <name>RWMutex</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>RWMutex</name><argument_list>()</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>kUnlocked</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><operator>~</operator><macro><name>RWMutex</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kUnlocked</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Lock</name><argument_list>()</argument_list></macro> <macro><name>ACQUIRE</name><argument_list>()</argument_list></macro> <block>{
<expr><name>u32</name> <name>cmp</name> <operator>=</operator> <name>kUnlocked</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><name>kWriteLock</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<call><name>LockSlow</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list> RELEASE<parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>kWriteLock</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>prev</name> <operator>&amp;</operator> <name>kWriteLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReadLock</name><parameter_list>()</parameter_list> ACQUIRE_SHARED<parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>kReadLock</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;</operator> <name>kWriteLock</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ReadLockSlow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReadUnlock</name><parameter_list>()</parameter_list> RELEASE_SHARED<parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>kReadLock</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>prev</name> <operator>&amp;</operator> <name>kWriteLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>prev</name> <operator>&amp;</operator> <operator>~</operator><name>kWriteLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>CheckLocked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>CHECK_LOCKED</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>CHECK_NE</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kUnlocked</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>atomic_uint32_t</name> <name>state_</name></expr>;</expr_stmt>

<enum>enum <block>{
<decl><name>kUnlocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>kWriteLock</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kReadLock</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>LockSlow</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>proc_yield</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>cmp</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <name>kUnlocked</name> <operator>&amp;&amp;</operator>
<call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><name>kWriteLock</name></expr></argument>,
<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name> <name>NOINLINE</name></type> <name>ReadLockSlow</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>proc_yield</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state_</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;</operator> <name>kWriteLock</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><call><name>RWMutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RWMutex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RWMutex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MutexType</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>SCOPED_LOCK</name></type> <name>GenericScopedLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>GenericScopedLock</name><argument_list>(<argument>MutexType *mu</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ACQUIRE</name><argument_list>(<argument><expr><name>mu</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>mu_</name><argument_list>(<argument>mu</argument>)</argument_list></macro> <block>{
<expr><call><name><name>mu_</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>GenericScopedLock</name><argument_list>()</argument_list></macro> <macro><name>RELEASE</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mu_</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>MutexType</name> <operator>*</operator><name>mu_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GenericScopedLock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GenericScopedLock</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>GenericScopedLock</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MutexType</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>SCOPED_LOCK</name></type> <name>GenericScopedReadLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>GenericScopedReadLock</name><argument_list>(<argument>MutexType *mu</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ACQUIRE</name><argument_list>(<argument><expr><name>mu</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>mu_</name><argument_list>(<argument>mu</argument>)</argument_list></macro> <block>{
<expr><call><name><name>mu_</name><operator>-&gt;</operator><name>ReadLock</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>GenericScopedReadLock</name><argument_list>()</argument_list></macro> <macro><name>RELEASE</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>mu_</name><operator>-&gt;</operator><name>ReadUnlock</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>MutexType</name> <operator>*</operator><name>mu_</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GenericScopedReadLock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GenericScopedReadLock</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>GenericScopedReadLock</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>GenericScopedLock</name><argument_list type="generic">&lt;<argument><expr><name>StaticSpinMutex</name></expr></argument>&gt;</argument_list></name></type> <name>SpinMutexLock</name>;</typedef>
<typedef>typedef <type><name><name>GenericScopedLock</name><argument_list type="generic">&lt;<argument><expr><name>BlockingMutex</name></expr></argument>&gt;</argument_list></name></type> <name>BlockingMutexLock</name>;</typedef>
<typedef>typedef <type><name><name>GenericScopedLock</name><argument_list type="generic">&lt;<argument><expr><name>RWMutex</name></expr></argument>&gt;</argument_list></name></type> <name>RWMutexLock</name>;</typedef>
<typedef>typedef <type><name><name>GenericScopedReadLock</name><argument_list type="generic">&lt;<argument><expr><name>RWMutex</name></expr></argument>&gt;</argument_list></name></type> <name>RWMutexReadLock</name>;</typedef>
<typedef>typedef <type><name><name>GenericScopedLock</name><argument_list type="generic">&lt;<argument><expr><name>Mutex</name></expr></argument>&gt;</argument_list></name></type> <name>Lock</name>;</typedef>
<typedef>typedef <type><name><name>GenericScopedReadLock</name><argument_list type="generic">&lt;<argument><expr><name>Mutex</name></expr></argument>&gt;</argument_list></name></type> <name>ReadLock</name>;</typedef>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
