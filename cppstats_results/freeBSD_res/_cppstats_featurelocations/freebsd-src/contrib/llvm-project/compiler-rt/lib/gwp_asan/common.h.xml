<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/common.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_COMMON_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_COMMON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/definitions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Error</name> <block>{<block_content>
<expr_stmt><expr><name>UNKNOWN</name></expr><operator>,</operator>
<expr><name>USE_AFTER_FREE</name></expr><operator>,</operator>
<expr><name>DOUBLE_FREE</name></expr><operator>,</operator>
<expr><name>INVALID_FREE</name></expr><operator>,</operator>
<expr><name>BUFFER_OVERFLOW</name></expr><operator>,</operator>
<expr><name>BUFFER_UNDERFLOW</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ErrorToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Error</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>kInvalidThreadID</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>


<function_decl><type><name>uint64_t</name></type> <name>getThreadID</name><parameter_list>()</parameter_list>;</function_decl>



<struct>struct <name>AllocationMetadata</name> <block>{



<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>kStackFrameStorageBytes</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>kMaxTraceLengthToCollect</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>RecordAllocation</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>Addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>RequestedSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RecordDeallocation</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>CallSiteInfo</name> <block>{

<decl_stmt><decl><type><name>void</name></type> <name>RecordBacktrace</name><argument_list>(<argument><expr><name>options</name><operator>::</operator><name>Backtrace_t</name> <name>Backtrace</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>CompressedTrace</name><index>[<expr><name>kStackFrameStorageBytes</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ThreadID</name> <init>= <expr><name>kInvalidThreadID</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>TraceSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>uintptr_t</name></type> <name>Addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>RequestedSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CallSiteInfo</name></type> <name>AllocationTrace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CallSiteInfo</name></type> <name>DeallocationTrace</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsDeallocated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>AllocatorState</name> <block>{
<function><type><name>constexpr</name></type> <name>AllocatorState</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>



<decl_stmt><decl><type><name>GWP_ASAN_ALWAYS_INLINE</name> <name>bool</name></type> <name>pointerIsMine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>P</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>P</name> <operator>&lt;</operator> <name>GuardedPagePoolEnd</name> <operator>&amp;&amp;</operator> <name>GuardedPagePool</name> <operator>&lt;=</operator> <name>P</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>uintptr_t</name></type> <name>slotToAddr</name><argument_list>(<argument><expr><name>size_t</name> <name>N</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>maximumAllocationSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>getNearestSlot</name><argument_list>(<argument><expr><name>uintptr_t</name> <name>Ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isGuardPage</name><argument_list>(<argument><expr><name>uintptr_t</name> <name>Ptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>MaxSimultaneousAllocations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uintptr_t</name></type> <name>GuardedPagePool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>GuardedPagePoolEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>PageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Error</name></type> <name>FailureType</name> <init>= <expr><name>Error</name><operator>::</operator><name>UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>FailureAddress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
