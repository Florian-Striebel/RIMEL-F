<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/interception/interception_win.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_WINDOWS</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDED_FROM_INTERCEPTION_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"interception_win.h should be included from interception library only"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INTERCEPTION_WIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPTION_WIN_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__interception</name> <block>{<block_content>




<function_decl><type><name>bool</name></type> <name>OverrideFunction</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>old_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>OverrideFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>InternalGetProcAddress</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>OverrideImportedFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_to_patch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>imported_module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function_name</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_function</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_WINDOWS64</name></expr></cpp:if>

<function_decl><type><name>bool</name></type> <name>OverrideFunctionWithDetour</name><parameter_list>(
<parameter><decl><type><name>uptr</name></type> <name>old_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>bool</name></type> <name>OverrideFunctionWithRedirectJump</name><parameter_list>(
<parameter><decl><type><name>uptr</name></type> <name>old_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>OverrideFunctionWithHotPatch</name><parameter_list>(
<parameter><decl><type><name>uptr</name></type> <name>old_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>OverrideFunctionWithTrampoline</name><parameter_list>(
<parameter><decl><type><name>uptr</name></type> <name>old_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_func</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>orig_old_func</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>TestOnlyReleaseTrampolineRegions</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INTERCEPTION_DYNAMIC_CRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_WIN</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::__interception::OverrideFunction(#func, (::__interception::uptr)WRAP(func), (::__interception::uptr *)&amp;REAL(func))</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_WIN</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::__interception::OverrideFunction((::__interception::uptr)func, (::__interception::uptr)WRAP(func), (::__interception::uptr *)&amp;REAL(func))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_VER_WIN</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>symver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INTERCEPT_FUNCTION_WIN(func)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERCEPT_FUNCTION_DLLIMPORT</name><parameter_list>(<parameter><type><name>user_dll</name></type></parameter>, <parameter><type><name>provider_dll</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::__interception::OverrideImportedFunction( user_dll, provider_dll, #func, (::__interception::uptr)WRAP(func), (::__interception::uptr *)&amp;REAL(func))</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
