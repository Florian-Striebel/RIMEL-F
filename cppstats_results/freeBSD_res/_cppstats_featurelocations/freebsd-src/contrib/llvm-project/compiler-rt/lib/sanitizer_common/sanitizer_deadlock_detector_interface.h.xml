<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector_interface.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_DEADLOCK_DETECTOR_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_DEADLOCK_DETECTOR_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_DEADLOCK_DETECTOR_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_DEADLOCK_DETECTOR_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>





<struct_decl>struct <name>DDPhysicalThread</name>;</struct_decl>
<struct_decl>struct <name>DDLogicalThread</name>;</struct_decl>

<struct>struct <name>DDMutex</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_DEADLOCK_DETECTOR_VERSION</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>uptr</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stk</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_DEADLOCK_DETECTOR_VERSION</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>recursion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>owner</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"BAD SANITIZER_DEADLOCK_DETECTOR_VERSION"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>u64</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>DDFlags</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>second_deadlock_stack</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>DDReport</name> <block>{
<enum>enum <block>{ <decl><name>kMaxLoopSize</name> <init>= <expr><literal type="number">20</literal></expr></init></decl> }</block>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>u64</name></type> <name>thr_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mtx_ctx0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>mtx_ctx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name><name>stk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>loop</name><index>[<expr><name>kMaxLoopSize</name></expr>]</index></name></decl>;</struct>
}</block>;</struct>

<struct>struct <name>DDCallback</name> <block>{
<decl_stmt><decl><type><name>DDPhysicalThread</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DDLogicalThread</name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>

<function><type><name>virtual</name> <name>u32</name></type> <name>Unwind</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>int</name></type> <name>UniqueTid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>DDCallback</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>DDetector</name> <block>{
<function_decl><type><specifier>static</specifier> <name>DDetector</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DDFlags</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>DDPhysicalThread</name><modifier>*</modifier></type> <name>CreatePhysicalThread</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>DestroyPhysicalThread</name><parameter_list>(<parameter><decl><type><name>DDPhysicalThread</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>DDLogicalThread</name><modifier>*</modifier></type> <name>CreateLogicalThread</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>DestroyLogicalThread</name><parameter_list>(<parameter><decl><type><name>DDLogicalThread</name> <modifier>*</modifier></type><name>lt</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>MutexInit</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>DDMutex</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>MutexBeforeLock</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>DDMutex</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wlock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>MutexAfterLock</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>DDMutex</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wlock</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>trylock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>MutexBeforeUnlock</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>DDMutex</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wlock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>MutexDestroy</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>DDMutex</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>DDReport</name> <modifier>*</modifier></type><name>GetReport</name><parameter_list>(<parameter><decl><type><name>DDCallback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><macro><name>DDetector</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
