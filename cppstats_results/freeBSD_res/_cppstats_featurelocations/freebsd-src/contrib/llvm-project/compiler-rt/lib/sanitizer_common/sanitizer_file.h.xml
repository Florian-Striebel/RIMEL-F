<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_file.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_interface_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_libc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_mutex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>ReportFile</name> <block>{
<function_decl><type><name>void</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SupportsColors</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetReportPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetReportPath</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>StaticSpinMutex</name> <modifier>*</modifier></type><name>mu</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>fd_t</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path_prefix</name><index>[<expr><name>kMaxPathLength</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>full_path</name><index>[<expr><name>kMaxPathLength</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>fd_pid</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>ReopenIfNecessary</name><parameter_list>()</parameter_list>;</function_decl>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ReportFile</name></type> <name>report_file</name></decl>;</decl_stmt>

<enum>enum <name>FileAccessMode</name> <block>{
<decl><name>RdOnly</name></decl>,
<decl><name>WrOnly</name></decl>,
<decl><name>RdWr</name></decl>
}</block>;</enum>


<function_decl><type><name>fd_t</name></type> <name>OpenFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FileAccessMode</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>error_t</name> <modifier>*</modifier></type><name>errno_p</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CloseFile</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>ReadFromFile</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>buff_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>bytes_read</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>, <parameter><decl><type><name>error_t</name> <modifier>*</modifier></type><name>error_p</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>WriteToFile</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>buff_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>bytes_written</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>, <parameter><decl><type><name>error_t</name> <modifier>*</modifier></type><name>error_p</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>FileCloser</name> <block>{
<macro><name>explicit</name></macro> <macro><name>FileCloser</name><argument_list>(<argument>fd_t fd</argument>)</argument_list></macro> : <macro><name>fd</name><argument_list>(<argument>fd</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>FileCloser</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>fd_t</name> <name>fd</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>SupportsColoredOutput</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPwd</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>FileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>FindPathToBinary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsPathSeparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsAbsolutePath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>pid_t</name></type> <name>StartSubprocess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>envp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>stdin_fd</name> <init>= <expr><name>kInvalidFd</name></expr></init></decl></parameter>,
<parameter><decl><type><name>fd_t</name></type> <name>stdout_fd</name> <init>= <expr><name>kInvalidFd</name></expr></init></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>stderr_fd</name> <init>= <expr><name>kInvalidFd</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsProcessRunning</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>WaitForProcess</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name> <modifier>*</modifier></type><name>MapFileToMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>buff_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>MapWritableFileToMemory</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>OFF_T</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
