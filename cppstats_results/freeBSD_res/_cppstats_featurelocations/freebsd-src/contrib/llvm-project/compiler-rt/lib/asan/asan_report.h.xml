<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/asan/asan_report.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASAN_REPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASAN_REPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asan_thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__asan</name> <block>{<block_content>

<struct>struct <name>StackVarDescr</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>int</name></type> <name>GetGlobalsForAddress</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>__asan_global</name> <modifier>*</modifier></type><name>globals</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>reg_sites</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_globals</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MaybeDemangleGlobalName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintGlobalNameIfASCII</name><parameter_list>(<parameter><decl><type><name>InternalScopedString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__asan_global</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintGlobalLocation</name><parameter_list>(<parameter><decl><type><name>InternalScopedString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__asan_global</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintMemoryByte</name><parameter_list>(<parameter><decl><type><name>InternalScopedString</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>before</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>byte</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>in_shadow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>after</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>ParseFrameDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frame_descr</name></decl></parameter>,
<parameter><decl><type><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>StackVarDescr</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>vars</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ReportGenericError</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_write</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>access_size</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fatal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportDeadlySignal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SignalContext</name> <modifier>&amp;</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportNewDeleteTypeMismatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>delete_size</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>delete_alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>free_stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportDoubleFree</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>free_stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportFreeNotMalloced</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>free_stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportAllocTypeMismatch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>free_stack</name></decl></parameter>,
<parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>,
<parameter><decl><type><name>AllocType</name></type> <name>dealloc_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportMallocUsableSizeNotOwned</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportSanitizerGetAllocatedSizeNotOwned</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportCallocOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportReallocArrayOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportPvallocOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportInvalidAllocationAlignment</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportInvalidAlignedAllocAlignment</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportInvalidPosixMemalignAlignment</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportAllocationSizeTooBig</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>user_size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>total_size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>max_size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportRssLimitExceeded</name><parameter_list>(<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportOutOfMemory</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>requested_size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportStringFunctionMemoryRangesOverlap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset1</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>offset2</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length2</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportStringFunctionSizeOverflow</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportBadParamsToAnnotateContiguousContainer</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>old_mid</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_mid</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReportODRViolation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__asan_global</name> <modifier>*</modifier></type><name>g1</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stack_id1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__asan_global</name> <modifier>*</modifier></type><name>g2</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stack_id2</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ReportMacMzReallocUnknown</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>zone_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zone_name</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReportMacCfReallocUnknown</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>zone_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zone_name</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
