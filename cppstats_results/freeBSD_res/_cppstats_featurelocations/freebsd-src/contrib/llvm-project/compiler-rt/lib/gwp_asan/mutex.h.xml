<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/gwp_asan/mutex.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_MUTEX_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWP_ASAN_MUTEX_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/platform_specific/mutex_fuchsia.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/platform_specific/mutex_posix.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gwp_asan</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>Mutex</name></type> <name>final</name> <range>: <expr><name>PlatformMutex</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>constexpr</name> <call><name>Mutex</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><operator>~</operator><call><name>Mutex</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>Mutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Mutex</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>Mutex</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Mutex</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;

<expr><name>void</name> <call><name>lock</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>tryLock</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>unlock</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>ScopedLock</name><argument_list>(<argument><expr><name>Mutex</name> <operator>&amp;</operator><name>Mx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Mu</name><argument_list>(<argument>Mx</argument>)</argument_list></macro> <block>{ <expr><call><name><name>Mu</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>; }</block>
<operator>~</operator><macro><name>ScopedLock</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>Mu</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>
<call><name>ScopedLock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScopedLock</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ScopedLock</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScopedLock</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Mutex</name> <modifier>&amp;</modifier></type><name>Mu</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
