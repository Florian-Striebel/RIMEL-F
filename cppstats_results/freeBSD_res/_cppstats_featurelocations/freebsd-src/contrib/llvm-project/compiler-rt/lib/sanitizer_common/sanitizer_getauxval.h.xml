<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_getauxval.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_GETAUXVAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_GETAUXVAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_glibc_version.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name> <operator>||</operator> <name>SANITIZER_FUCHSIA</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>__GLIBC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>SANITIZER_ANDROID</name> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&gt;=</operator> <literal type="number">21</literal><operator>)</operator> <operator>||</operator> <name>SANITIZER_FUCHSIA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>SANITIZER_GO</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_USE_GETAUXVAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_USE_GETAUXVAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_USE_GETAUXVAL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/auxv.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>SANITIZER_WEAK_ATTRIBUTE</name> <name>unsigned</name> <name>long</name></type> <name>getauxval</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_USE_GETAUXVAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;elf.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>decltype</name><argument_list>(<argument>AuxInfo::a_v</argument>)</argument_list></macro> <macro><name>getauxval</name><argument_list>(<argument>decltype(AuxInfo::a_type) type</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>AuxInfo</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>AuxInfo</name> <operator>*</operator><operator>)</operator><call><name>_dlauxinfo</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>aux</name><operator>-&gt;</operator><name>a_type</name></name> <operator>!=</operator> <name>AT_NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>aux</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>aux</name><operator>-&gt;</operator><name>a_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>aux</name><operator>-&gt;</operator><name>a_v</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
