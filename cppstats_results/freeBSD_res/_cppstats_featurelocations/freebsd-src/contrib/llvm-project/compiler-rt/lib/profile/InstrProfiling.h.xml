<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/profile/InstrProfiling.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROFILE_INSTRPROFILING_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_INSTRPROFILING_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InstrProfilingPort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VISIBILITY</name></cpp:macro> <cpp:value>COMPILER_RT_VISIBILITY</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>

<enum>enum <name>ValueKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_PROF_KIND</name><parameter_list>(<parameter><type><name>Enumerator</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>, <parameter><type><name>Descr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Enumerator = Value,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>
}</block>;</enum>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>IntPtrT</name>;</typedef>
<typedef>typedef <type><struct>struct <macro><name>COMPILER_RT_ALIGNAS</name><argument_list>(<argument>INSTR_PROF_DATA_ALIGNMENT</argument>)</argument_list></macro>
<name>__llvm_profile_data</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_DATA</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>LLVMType</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Initializer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>
}</block></struct></type> <name>__llvm_profile_data</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__llvm_profile_header</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_RAW_HEADER</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Initializer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>
}</block></struct></type> <name>__llvm_profile_header</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ValueProfNode</name></name> <modifier>*</modifier></type> <name>PtrToNodeT</name>;</typedef>
<typedef>typedef <type><struct>struct <name>ValueProfNode</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_PROF_VALUE_NODE</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>LLVMType</name></type></parameter>, <parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Initializer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Type Name;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>
}</block></struct></type> <name>ValueProfNode</name>;</typedef>






<function_decl><type><name>int</name></type> <name>__llvm_profile_is_continuous_mode_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>__llvm_profile_enable_continuous_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>__llvm_profile_set_page_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>PageSize</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>uint8_t</name></type> <name>__llvm_profile_get_num_padding_bytes</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>SizeInBytes</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>uint64_t</name></type> <name>__llvm_profile_get_size_for_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>__llvm_profile_write_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_begin_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>__llvm_profile_end_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_begin_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_end_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>__llvm_profile_end_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_begin_vnodes</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>ValueProfNode</name> <modifier>*</modifier></type><name>__llvm_profile_end_vnodes</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>__llvm_profile_begin_orderfile</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>__llvm_profile_reset_counters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>__llvm_profile_merge_from_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Profile</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>__llvm_profile_check_compatibility</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Profile</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>INSTR_PROF_VALUE_PROF_FUNC</name><parameter_list>(
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_PROF_FUNC_PARAM</name><parameter_list>(<parameter><type><name>ArgType</name></type></parameter>, <parameter><type><name>ArgName</name></type></parameter>, <parameter><type><name>ArgLLVMType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ArgType ArgName</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profile/InstrProfData.inc"</cpp:file></cpp:include>
)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>__llvm_profile_instrument_target_value</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>TargetValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>CounterIndex</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>CounterValue</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>__llvm_profile_write_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__llvm_orderfile_write_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>int</name></type> <name>__llvm_profile_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>__llvm_orderfile_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>void</name></type> <name>__llvm_profile_set_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>)</parameter_list>;</function_decl>



























<function_decl><type><name>void</name></type> <name>__llvm_profile_set_file_object</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>File</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>EnableMerge</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>__llvm_profile_register_write_file_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__llvm_profile_initialize_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>__llvm_profile_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_get_path_prefix</name><parameter_list>()</parameter_list>;</function_decl>












<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__llvm_profile_get_filename</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>uint64_t</name></type> <name>__llvm_profile_get_magic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint64_t</name></type> <name>__llvm_profile_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uint64_t</name></type> <name>__llvm_profile_get_data_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>Begin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>__llvm_profile_data</name> <modifier>*</modifier></type><name>End</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>__llvm_profile_get_padding_sizes_for_counters</name><parameter_list>(
<parameter><decl><type><name>uint64_t</name></type> <name>DataSize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>CountersSize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>NamesSize</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesBeforeCounters</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesAfterCounters</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>PaddingBytesAfterNames</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>__llvm_profile_set_dumped</name><parameter_list>()</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>COMPILER_RT_VISIBILITY</name> <specifier>extern</specifier> <name>int</name></type> <name>INSTR_PROF_PROFILE_RUNTIME_VAR</name></decl>;</decl_stmt>











<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>INSTR_PROF_RAW_VERSION_VAR</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>INSTR_PROF_PROFILE_NAME_VAR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
