<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/tsd_shared.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_TSD_SHARED_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_TSD_SHARED_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsd.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_HAS_PLATFORM_TLS_SLOT</name></expr></cpp:if>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo_platform_tls_slot.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>Allocator</name></expr><operator>,</operator> <expr><name>u32</name> <name>TSDsArraySize</name></expr><operator>,</operator> <expr><name>u32</name> <name>DefaultTSDCount</name><operator>&gt;</operator>
struct <name>TSDRegistrySharedT</name> <block>{
<expr><name>void</name> <macro><name>init</name><argument_list>(<argument>Allocator *Instance</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><name>Initialized</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Instance</name><operator>-&gt;</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>TSDsArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>TSDs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<specifier>const</specifier> <name>u32</name> <name>NumberOfCPUs</name> <operator>=</operator> <call><name>getNumberOfCPUs</name><argument_list>()</argument_list></call></block></expr>;
<expr><call><name>setNumberOfTSDs</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>NumberOfCPUs</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>DefaultTSDCount</name></expr>
</then><else>: <expr><call><name>Min</name><argument_list>(<argument><expr><name>NumberOfCPUs</name></expr></argument>, <argument><expr><name>DefaultTSDCount</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;
<expr><name>Initialized</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>void</name> <macro><name>initOnceMaybe</name><argument_list>(<argument>Allocator *Instance</argument>)</argument_list></macro> <block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>Initialized</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<call><name>init</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>(<parameter><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>TSDsArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>TSDs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><call><name>commitBack</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TSDs</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>setCurrentTSD</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>initThreadMaybe</name><parameter_list>(<parameter><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name></decl></parameter>,
<parameter><decl><type><name>UNUSED</name> <name>bool</name></type> <name>MinimalInit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>getCurrentTSD</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>initThread</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>getTSDAndLock</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>UnlockRequired</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>TSD</name> <init>= <expr><call><name>getCurrentTSD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>TSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>UnlockRequired</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>TSD</name><operator>-&gt;</operator><name>tryLock</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TSD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>TSDsArraySize</name> <operator>==</operator> <literal type="number">1U</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TSD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>getTSDAndLockSlow</name><argument_list>(<argument><expr><name>TSD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>TSDsArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>TSDs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>s32</name></type> <name>I</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>s32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TSDsArraySize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>I</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>TSDs</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxTSDsCount</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>setNumberOfTSDs</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>ThreadDisableMemInit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setDisableMemInit</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>getDisableMemInit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>ALWAYS_INLINE</name> <name>uptr</name> <operator>*</operator><macro><name>getTlsPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SCUDO_HAS_PLATFORM_TLS_SLOT</name></expr></cpp:if>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPlatformAllocatorTlsSlot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <name>thread_local</name> <name>uptr</name> <name>ThreadTSD</name></block></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>ThreadTSD</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

static_assert<expr_stmt><expr><operator>(</operator><call><name>alignof</name><argument_list>(<argument><expr><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal><operator>,</operator> <literal type="string">""</literal><operator>)</operator></expr>;</expr_stmt>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>setCurrentTSD</name><parameter_list>(<parameter><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>CurrentTSD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>|=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CurrentTSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>getCurrentTSD</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setNumberOfTSDs</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>MutexTSDs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;</operator> <name>NumberOfTSDs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <name>TSDsArraySize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>N</name> <operator>=</operator> <name>TSDsArraySize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>NumberOfTSDs</name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumberOfCoPrimes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>A</name> <init>= <expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>B</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>B</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>T</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name>T</name> <operator>%</operator> <name>B</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>CoPrimes</name><index>[<expr><name>NumberOfCoPrimes</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>I</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setDisableMemInit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>getTlsPtr</name><argument_list>()</argument_list></call> <operator>|=</operator> <name>B</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>void</name></type> <name>initThread</name><parameter_list>(<parameter><decl><type><name>Allocator</name> <modifier>*</modifier></type><name>Instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initOnceMaybe</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>Index</name> <init>= <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CurrentIndex</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setCurrentTSD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TSDs</name><index>[<expr><name>Index</name> <operator>%</operator> <name>NumberOfTSDs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Instance</name><operator>-&gt;</operator><name>callPostInitCallback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>getTSDAndLockSlow</name><parameter_list>(<parameter><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>CurrentTSD</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>R</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>CurrentTSD</name><operator>-&gt;</operator><name>getPrecedence</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>Inc</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>MutexTSDs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>N</name> <operator>=</operator> <name>NumberOfTSDs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>NumberOfCoPrimes</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Inc</name> <operator>=</operator> <name><name>CoPrimes</name><index>[<expr><name>R</name> <operator>%</operator> <name>NumberOfCoPrimes</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>Index</name> <init>= <expr><name>R</name> <operator>%</operator> <name>N</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>LowestPrecedence</name> <init>= <expr><name>UINTPTR_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>CandidateTSD</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <call><name>Min</name><argument_list>(<argument><expr><literal type="number">4U</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>TSDs</name><index>[<expr><name>Index</name></expr>]</index></name><operator>.</operator><call><name>tryLock</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setCurrentTSD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TSDs</name><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>TSDs</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Precedence</name> <init>= <expr><name><name>TSDs</name><index>[<expr><name>Index</name></expr>]</index></name><operator>.</operator><call><name>getPrecedence</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Precedence</name> <operator>&amp;&amp;</operator> <name>Precedence</name> <operator>&lt;</operator> <name>LowestPrecedence</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CandidateTSD</name> <operator>=</operator> <operator>&amp;</operator><name><name>TSDs</name><index>[<expr><name>Index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>LowestPrecedence</name> <operator>=</operator> <name>Precedence</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Index</name> <operator>+=</operator> <name>Inc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Index</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Index</name> <operator>-=</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>CandidateTSD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>CandidateTSD</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setCurrentTSD</name><argument_list>(<argument><expr><name>CandidateTSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CandidateTSD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>CurrentTSD</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CurrentTSD</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>atomic_u32</name></type> <name>CurrentIndex</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfTSDs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfCoPrimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name><name>CoPrimes</name><index>[<expr><name>TSDsArraySize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HybridMutex</name></type> <name>MutexTSDs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></type> <name><name>TSDs</name><index>[<expr><name>TSDsArraySize</name></expr>]</index></name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
