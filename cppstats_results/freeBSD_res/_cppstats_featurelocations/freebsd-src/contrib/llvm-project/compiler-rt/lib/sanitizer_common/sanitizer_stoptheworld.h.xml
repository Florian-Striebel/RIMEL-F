<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_STOPTHEWORLD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_STOPTHEWORLD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<enum>enum <name>PtraceRegistersStatus</name> <block>{
<decl><name>REGISTERS_UNAVAILABLE_FATAL</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>REGISTERS_UNAVAILABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REGISTERS_AVAILABLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>SuspendedThreadsList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SuspendedThreadsList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>PtraceRegistersStatus</name></type> <name>GetRegistersAndSP</name><argument_list>(
<argument><expr><name>uptr</name> <name>index</name></expr></argument>, <argument><expr><name><name>InternalMmapVector</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><name>uptr</name> <operator>*</operator><name>sp</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>uptr</name> <macro><name>ThreadCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>; }</block>
<name>virtual</name> <name>tid_t</name> <macro><name>GetThreadID</name><argument_list>(<argument>uptr index</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>UNIMPLEMENTED</name><argument_list>()</argument_list></call></expr>; }</block>

<name>protected</name><operator>:</operator>
<operator>~</operator><macro><name>SuspendedThreadsList</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>

<call><name>SuspendedThreadsList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SuspendedThreadsList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SuspendedThreadsList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>StopTheWorldCallback</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>SuspendedThreadsList</name> <modifier>&amp;</modifier></type><name>suspended_threads_list</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argument</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<function_decl><type><name>void</name></type> <name>StopTheWorld</name><parameter_list>(<parameter><decl><type><name>StopTheWorldCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argument</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
