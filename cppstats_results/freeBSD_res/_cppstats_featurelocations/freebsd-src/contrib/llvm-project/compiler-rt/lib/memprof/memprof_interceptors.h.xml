<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_interceptors.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_INTERCEPTORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERCEPTORS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interception/interception.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_interceptors_memintrinsics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_platform_interceptors.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<function_decl><type><name>void</name></type> <name>InitializeMemprofInterceptors</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InitializePlatformInterceptors</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENSURE_MEMPROF_INITED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { CHECK(!memprof_init_is_running); if (UNLIKELY(!memprof_inited)) { MemprofInitFromRtl(); } } while (0)</cpp:value></cpp:define>







</block_content>}</block></decl></decl_stmt>

<macro><name>DECLARE_REAL</name><argument_list>(<argument>int</argument>, <argument>memcmp</argument>, <argument>const void *a1</argument>, <argument>const void *a2</argument>, <argument>uptr size</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>char *</argument>, <argument>strchr</argument>, <argument>const char *str</argument>, <argument>int c</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>SIZE_T</argument>, <argument>strlen</argument>, <argument>const char *s</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>char *</argument>, <argument>strncpy</argument>, <argument>char *to</argument>, <argument>const char *from</argument>, <argument>uptr size</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>uptr</argument>, <argument>strnlen</argument>, <argument>const char *s</argument>, <argument>uptr maxlen</argument>)</argument_list></macro>
<macro><name>DECLARE_REAL</name><argument_list>(<argument>char *</argument>, <argument>strstr</argument>, <argument>const char *s1</argument>, <argument>const char *s2</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERCEPT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!INTERCEPT_FUNCTION(name)) VReport(1, "MemProfiler: failed to intercept '%s'\n'", #name); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERCEPT_FUNC_VER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!INTERCEPT_FUNCTION_VER(name, ver)) VReport(1, "MemProfiler: failed to intercept '%s@@%s'\n", #name, #ver); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_INTERCEPT_FUNC_VER_UNVERSIONED_FALLBACK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ver</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!INTERCEPT_FUNCTION_VER(name, ver) &amp;&amp; !INTERCEPT_FUNCTION(name)) VReport(1, "MemProfiler: failed to intercept '%s@@%s' or '%s'\n", #name, #ver, #name); } while (0)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
