<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_TLS_GET_ADDR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_TLS_GET_ADDR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<struct>struct <name>DTLS</name> <block>{


<struct>struct <name>DTV</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>DTVBlock</name> <block>{
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DTV</name></type> <name><name>dtvs</name><index>[<expr><operator>(</operator><literal type="number">4096UL</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DTLS</name><operator>::</operator><name>DTV</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DTVBlock</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <literal type="number">4096UL</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>dtv_block</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uptr</name></type> <name>last_memalign_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>last_memalign_ptr</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ForEachDVT</name><parameter_list>(<parameter><decl><type><name>DTLS</name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Fn</name> <modifier>&amp;</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>DTLS</name><operator>::</operator><name>DTVBlock</name> <operator>*</operator><name>block</name> <operator>=</operator>
<operator>(</operator><name>DTLS</name><operator>::</operator><name>DTVBlock</name> <operator>*</operator><operator>)</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtls</name><operator>-&gt;</operator><name>dtv_block</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>d</name> <operator>:</operator> <name><name>block</name><operator>-&gt;</operator><name>dtvs</name></name></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>id</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>(</operator><name>DTLS</name><operator>::</operator><name>DTVBlock</name> <operator>*</operator><operator>)</operator><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<expr_stmt><expr><name>DTLS</name><operator>::</operator><name>DTV</name> <operator>*</operator><macro><name>DTLS_on_tls_get_addr</name><argument_list>(<argument>void *arg</argument>, <argument>void *res</argument>, <argument>uptr static_tls_begin</argument>,
<argument>uptr static_tls_end</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>DTLS_on_libc_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DTLS</name> <modifier>*</modifier></type><name>DTLS_Get</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DTLS_Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DTLSInDestruction</name><parameter_list>(<parameter><decl><type><name>DTLS</name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
