<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/cpu_model.c">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INIT_PRIORITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSTRUCTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((__constructor__ 101))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>__constructor__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSTRUCTOR_ATTRIBUTE</name></cpp:macro> <cpp:value>__attribute__((__constructor__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSTRUCTOR_ATTRIBUTE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bool</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_attribute</name><parameter_list>(<parameter><type><name>attr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>VendorSignatures</name> <block>{
<decl><name>SIG_INTEL</name> <init>= <expr><literal type="number">0x756e6547</literal></expr></init></decl>,
<decl><name>SIG_AMD</name> <init>= <expr><literal type="number">0x68747541</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>ProcessorVendors</name> <block>{
<decl><name>VENDOR_INTEL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VENDOR_AMD</name></decl>,
<decl><name>VENDOR_OTHER</name></decl>,
<decl><name>VENDOR_MAX</name></decl>
}</block>;</enum>

<enum>enum <name>ProcessorTypes</name> <block>{
<decl><name>INTEL_BONNELL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>INTEL_CORE2</name></decl>,
<decl><name>INTEL_COREI7</name></decl>,
<decl><name>AMDFAM10H</name></decl>,
<decl><name>AMDFAM15H</name></decl>,
<decl><name>INTEL_SILVERMONT</name></decl>,
<decl><name>INTEL_KNL</name></decl>,
<decl><name>AMD_BTVER1</name></decl>,
<decl><name>AMD_BTVER2</name></decl>,
<decl><name>AMDFAM17H</name></decl>,
<decl><name>INTEL_KNM</name></decl>,
<decl><name>INTEL_GOLDMONT</name></decl>,
<decl><name>INTEL_GOLDMONT_PLUS</name></decl>,
<decl><name>INTEL_TREMONT</name></decl>,
<decl><name>AMDFAM19H</name></decl>,
<decl><name>CPU_TYPE_MAX</name></decl>
}</block>;</enum>

<enum>enum <name>ProcessorSubtypes</name> <block>{
<decl><name>INTEL_COREI7_NEHALEM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>INTEL_COREI7_WESTMERE</name></decl>,
<decl><name>INTEL_COREI7_SANDYBRIDGE</name></decl>,
<decl><name>AMDFAM10H_BARCELONA</name></decl>,
<decl><name>AMDFAM10H_SHANGHAI</name></decl>,
<decl><name>AMDFAM10H_ISTANBUL</name></decl>,
<decl><name>AMDFAM15H_BDVER1</name></decl>,
<decl><name>AMDFAM15H_BDVER2</name></decl>,
<decl><name>AMDFAM15H_BDVER3</name></decl>,
<decl><name>AMDFAM15H_BDVER4</name></decl>,
<decl><name>AMDFAM17H_ZNVER1</name></decl>,
<decl><name>INTEL_COREI7_IVYBRIDGE</name></decl>,
<decl><name>INTEL_COREI7_HASWELL</name></decl>,
<decl><name>INTEL_COREI7_BROADWELL</name></decl>,
<decl><name>INTEL_COREI7_SKYLAKE</name></decl>,
<decl><name>INTEL_COREI7_SKYLAKE_AVX512</name></decl>,
<decl><name>INTEL_COREI7_CANNONLAKE</name></decl>,
<decl><name>INTEL_COREI7_ICELAKE_CLIENT</name></decl>,
<decl><name>INTEL_COREI7_ICELAKE_SERVER</name></decl>,
<decl><name>AMDFAM17H_ZNVER2</name></decl>,
<decl><name>INTEL_COREI7_CASCADELAKE</name></decl>,
<decl><name>INTEL_COREI7_TIGERLAKE</name></decl>,
<decl><name>INTEL_COREI7_COOPERLAKE</name></decl>,
<decl><name>INTEL_COREI7_SAPPHIRERAPIDS</name></decl>,
<decl><name>INTEL_COREI7_ALDERLAKE</name></decl>,
<decl><name>AMDFAM19H_ZNVER3</name></decl>,
<decl><name>INTEL_COREI7_ROCKETLAKE</name></decl>,
<decl><name>CPU_SUBTYPE_MAX</name></decl>
}</block>;</enum>

<enum>enum <name>ProcessorFeatures</name> <block>{
<decl><name>FEATURE_CMOV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FEATURE_MMX</name></decl>,
<decl><name>FEATURE_POPCNT</name></decl>,
<decl><name>FEATURE_SSE</name></decl>,
<decl><name>FEATURE_SSE2</name></decl>,
<decl><name>FEATURE_SSE3</name></decl>,
<decl><name>FEATURE_SSSE3</name></decl>,
<decl><name>FEATURE_SSE4_1</name></decl>,
<decl><name>FEATURE_SSE4_2</name></decl>,
<decl><name>FEATURE_AVX</name></decl>,
<decl><name>FEATURE_AVX2</name></decl>,
<decl><name>FEATURE_SSE4_A</name></decl>,
<decl><name>FEATURE_FMA4</name></decl>,
<decl><name>FEATURE_XOP</name></decl>,
<decl><name>FEATURE_FMA</name></decl>,
<decl><name>FEATURE_AVX512F</name></decl>,
<decl><name>FEATURE_BMI</name></decl>,
<decl><name>FEATURE_BMI2</name></decl>,
<decl><name>FEATURE_AES</name></decl>,
<decl><name>FEATURE_PCLMUL</name></decl>,
<decl><name>FEATURE_AVX512VL</name></decl>,
<decl><name>FEATURE_AVX512BW</name></decl>,
<decl><name>FEATURE_AVX512DQ</name></decl>,
<decl><name>FEATURE_AVX512CD</name></decl>,
<decl><name>FEATURE_AVX512ER</name></decl>,
<decl><name>FEATURE_AVX512PF</name></decl>,
<decl><name>FEATURE_AVX512VBMI</name></decl>,
<decl><name>FEATURE_AVX512IFMA</name></decl>,
<decl><name>FEATURE_AVX5124VNNIW</name></decl>,
<decl><name>FEATURE_AVX5124FMAPS</name></decl>,
<decl><name>FEATURE_AVX512VPOPCNTDQ</name></decl>,
<decl><name>FEATURE_AVX512VBMI2</name></decl>,
<decl><name>FEATURE_GFNI</name></decl>,
<decl><name>FEATURE_VPCLMULQDQ</name></decl>,
<decl><name>FEATURE_AVX512VNNI</name></decl>,
<decl><name>FEATURE_AVX512BITALG</name></decl>,
<decl><name>FEATURE_AVX512BF16</name></decl>,
<decl><name>FEATURE_AVX512VP2INTERSECT</name></decl>,
<decl><name>CPU_FEATURE_MAX</name></decl>
}</block>;</enum>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCpuIdSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>__cpuid_supported</name></decl>;</decl_stmt>
<asm>__asm__(" pushfl\n"
" popl %%eax\n"
" movl %%eax,%%ecx\n"
" xorl $0x00200000,%%eax\n"
" pushl %%eax\n"
" popfl\n"
" pushfl\n"
" popl %%eax\n"
" movl $0,%0\n"
" cmpl %%eax,%%ecx\n"
" je 1f\n"
" movl $1,%0\n"
"1:"
: "=r"(__cpuid_supported)
:
: "eax", "ecx");</asm>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__cpuid_supported</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>getX86CpuIDAndInfo</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEAX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEBX</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rECX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEDX</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<asm>__asm__("movq\t%%rbx, %%rsi\n\t"
"cpuid\n\t"
"xchgq\t%%rbx, %%rsi\n\t"
: "=a"(*rEAX), "=S"(*rEBX), "=c"(*rECX), "=d"(*rEDX)
: "a"(value));</asm>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__("movl\t%%ebx, %%esi\n\t"
"cpuid\n\t"
"xchgl\t%%ebx, %%esi\n\t"
: "=a"(*rEAX), "=S"(*rEBX), "=c"(*rECX), "=d"(*rEDX)
: "a"(value));</asm>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>int</name></type> <name><name>registers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEAX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEBX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rECX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEDX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>getX86CpuIDAndInfoEx</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>subleaf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEAX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEBX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rECX</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEDX</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<asm>__asm__("movq\t%%rbx, %%rsi\n\t"
"cpuid\n\t"
"xchgq\t%%rbx, %%rsi\n\t"
: "=a"(*rEAX), "=S"(*rEBX), "=c"(*rECX), "=d"(*rEDX)
: "a"(value), "c"(subleaf));</asm>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm__("movl\t%%ebx, %%esi\n\t"
"cpuid\n\t"
"xchgl\t%%ebx, %%esi\n\t"
: "=a"(*rEAX), "=S"(*rEBX), "=c"(*rECX), "=d"(*rEDX)
: "a"(value), "c"(subleaf));</asm>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name><name>registers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__cpuidex</name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>subleaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEAX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEBX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rECX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEDX</name> <operator>=</operator> <name><name>registers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>getX86XCR0</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEAX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rEDX</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<asm>__asm__(".byte 0x0f, 0x01, 0xd0" : "=a"(*rEAX), "=d"(*rEDX) : "c"(0));</asm>
<return>return <expr><name>false</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_FULL_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_XCR_XFEATURE_ENABLED_MASK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>Result</name> <init>= <expr><call><name>_xgetbv</name><argument_list>(<argument><expr><name>_XCR_XFEATURE_ENABLED_MASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>rEAX</name> <operator>=</operator> <name>Result</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rEDX</name> <operator>=</operator> <name>Result</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detectX86FamilyModel</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>EAX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Family</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Model</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Family</name> <operator>=</operator> <operator>(</operator><name>EAX</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Model</name> <operator>=</operator> <operator>(</operator><name>EAX</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Family</name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <operator>*</operator><name>Family</name> <operator>==</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Family</name> <operator>==</operator> <literal type="number">0xf</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>Family</name> <operator>+=</operator> <operator>(</operator><name>EAX</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>Model</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>EAX</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getIntelProcessorTypeAndSubtype</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Family</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Model</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>Features</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Subtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testFeature</name><parameter_list>(<parameter><type><name>F</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(Features[F / 32] &amp; (1 &lt;&lt; (F % 32))) != 0</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CPU</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>Family</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch <condition>(<expr><name>Model</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0f</literal></expr>:</case>




<case>case <expr><literal type="number">0x16</literal></expr>:</case>

<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"core2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_CORE2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x17</literal></expr>:</case>



<case>case <expr><literal type="number">0x1d</literal></expr>:</case>

<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"penryn"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_CORE2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1a</literal></expr>:</case>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case>
<case>case <expr><literal type="number">0x2e</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"nehalem"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_NEHALEM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x25</literal></expr>:</case>
<case>case <expr><literal type="number">0x2c</literal></expr>:</case>

<case>case <expr><literal type="number">0x2f</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"westmere"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_WESTMERE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2a</literal></expr>:</case>

<case>case <expr><literal type="number">0x2d</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"sandybridge"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_SANDYBRIDGE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3a</literal></expr>:</case>
<case>case <expr><literal type="number">0x3e</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"ivybridge"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_IVYBRIDGE</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x3c</literal></expr>:</case>
<case>case <expr><literal type="number">0x3f</literal></expr>:</case>
<case>case <expr><literal type="number">0x45</literal></expr>:</case>
<case>case <expr><literal type="number">0x46</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"haswell"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_HASWELL</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x3d</literal></expr>:</case>
<case>case <expr><literal type="number">0x47</literal></expr>:</case>
<case>case <expr><literal type="number">0x4f</literal></expr>:</case>
<case>case <expr><literal type="number">0x56</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"broadwell"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_BROADWELL</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x4e</literal></expr>:</case>
<case>case <expr><literal type="number">0x5e</literal></expr>:</case>
<case>case <expr><literal type="number">0x8e</literal></expr>:</case>
<case>case <expr><literal type="number">0x9e</literal></expr>:</case>
<case>case <expr><literal type="number">0xa5</literal></expr>:</case>
<case>case <expr><literal type="number">0xa6</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"skylake"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_SKYLAKE</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0xa7</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"rocketlake"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_ROCKETLAKE</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x55</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>testFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512BF16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"cooperlake"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_COOPERLAKE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>testFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VNNI</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"cascadelake"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_CASCADELAKE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"skylake-avx512"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_SKYLAKE_AVX512</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x66</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"cannonlake"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_CANNONLAKE</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x7d</literal></expr>:</case>
<case>case <expr><literal type="number">0x7e</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"icelake-client"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_ICELAKE_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x6a</literal></expr>:</case>
<case>case <expr><literal type="number">0x6c</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"icelake-server"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_ICELAKE_SERVER</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x8f</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"sapphirerapids"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_COREI7</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>INTEL_COREI7_SAPPHIRERAPIDS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case>
<case>case <expr><literal type="number">0x26</literal></expr>:</case>
<case>case <expr><literal type="number">0x27</literal></expr>:</case>
<case>case <expr><literal type="number">0x35</literal></expr>:</case>
<case>case <expr><literal type="number">0x36</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"bonnell"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_BONNELL</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0x37</literal></expr>:</case>
<case>case <expr><literal type="number">0x4a</literal></expr>:</case>
<case>case <expr><literal type="number">0x4d</literal></expr>:</case>
<case>case <expr><literal type="number">0x5a</literal></expr>:</case>
<case>case <expr><literal type="number">0x5d</literal></expr>:</case>
<case>case <expr><literal type="number">0x4c</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"silvermont"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_SILVERMONT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x5c</literal></expr>:</case>
<case>case <expr><literal type="number">0x5f</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"goldmont"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_GOLDMONT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7a</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"goldmont-plus"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_GOLDMONT_PLUS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x86</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"tremont"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_TREMONT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x57</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"knl"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_KNL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"knm"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>INTEL_KNM</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>CPU</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getAMDProcessorTypeAndSubtype</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Family</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Model</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>Features</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Subtype</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CPU</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>Family</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"amdfam10"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMDFAM10H</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>Model</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM10H_BARCELONA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM10H_SHANGHAI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM10H_ISTANBUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"btver1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMD_BTVER1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"bdver1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMDFAM15H</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Model</name> <operator>&gt;=</operator> <literal type="number">0x60</literal> <operator>&amp;&amp;</operator> <name>Model</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"bdver4"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM15H_BDVER4</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Model</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>Model</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"bdver3"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM15H_BDVER3</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Model</name> <operator>&gt;=</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name>Model</name> <operator>&lt;=</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>||</operator> <name>Model</name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"bdver2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM15H_BDVER2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Model</name> <operator>&lt;=</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM15H_BDVER1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"btver2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMD_BTVER2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"znver1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMDFAM17H</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Model</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>Model</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>||</operator> <name>Model</name> <operator>==</operator> <literal type="number">0x71</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"znver2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM17H_ZNVER2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Model</name> <operator>&lt;=</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM17H_ZNVER1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <literal type="string">"znver3"</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Type</name> <operator>=</operator> <name>AMDFAM19H</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Model</name> <operator>&lt;=</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Subtype</name> <operator>=</operator> <name>AMDFAM19H_ZNVER3</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>CPU</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getAvailableFeatures</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ECX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>EDX</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>MaxLeaf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Features</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EAX</name></decl>, <decl><type ref="prev"/><name>EBX</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setFeature</name><parameter_list>(<parameter><type><name>F</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Features[F / 32] |= 1U &lt;&lt; (F % 32)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_CMOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_MMX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_PCLMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSSE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_FMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE4_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE4_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_POPCNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>AVXBits</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasAVX</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ECX</name> <operator>&amp;</operator> <name>AVXBits</name><operator>)</operator> <operator>==</operator> <name>AVXBits</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getX86XCR0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>EAX</name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>bool</name></type> <name>HasAVX512Save</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>bool</name></type> <name>HasAVX512Save</name> <init>= <expr><name>HasAVX</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EAX</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>HasAVX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HasLeaf7</name> <init>=
<expr><name>MaxLeaf</name> <operator>&gt;=</operator> <literal type="number">0x7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getX86CpuIDAndInfoEx</name><argument_list>(<argument><expr><literal type="number">0x7</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_BMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_BMI2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512DQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512IFMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512PF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512ER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512CD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512BW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EBX</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VBMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VBMI2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_GFNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_VPCLMULQDQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VNNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512BITALG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VPOPCNTDQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX5124VNNIW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX5124FMAPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EDX</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512VP2INTERSECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HasLeaf7Subleaf1</name> <init>=
<expr><name>MaxLeaf</name> <operator>&gt;=</operator> <literal type="number">0x7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getX86CpuIDAndInfoEx</name><argument_list>(<argument><expr><literal type="number">0x7</literal></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>HasLeaf7Subleaf1</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>EAX</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>HasAVX512Save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_AVX512BF16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxExtLevel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getX86CpuIDAndInfo</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>MaxExtLevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HasExtLeaf1</name> <init>= <expr><name>MaxExtLevel</name> <operator>&gt;=</operator> <literal type="number">0x80000001</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>getX86CpuIDAndInfo</name><argument_list>(<argument><expr><literal type="number">0x80000001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>HasExtLeaf1</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_SSE4_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasExtLeaf1</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_XOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HasExtLeaf1</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ECX</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name>FEATURE_FMA4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setFeature</name></cpp:undef>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(visibility(<literal type="string">"hidden"</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>__cpu_indicator_init</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>CONSTRUCTOR_ATTRIBUTE</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(visibility(<literal type="string">"hidden"</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>__processor_model</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__cpu_vendor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__cpu_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__cpu_subtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>__cpu_features</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__cpu_model</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(visibility(<literal type="string">"hidden"</literal>))</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__cpu_features2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







<function><type><name>int</name> <name>CONSTRUCTOR_ATTRIBUTE</name></type> <name>__cpu_indicator_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EAX</name></decl>, <decl><type ref="prev"/><name>EBX</name></decl>, <decl><type ref="prev"/><name>ECX</name></decl>, <decl><type ref="prev"/><name>EDX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxLeaf</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Vendor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Model</name></decl>, <decl><type ref="prev"/><name>Family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>Features</name><index>[<expr><operator>(</operator><name>CPU_FEATURE_MAX</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isCpuIdSupported</name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name>getX86CpuIDAndInfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>MaxLeaf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Vendor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>MaxLeaf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name> <operator>=</operator> <name>VENDOR_OTHER</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>getX86CpuIDAndInfo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>detectX86FamilyModel</name><argument_list>(<argument><expr><name>EAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>getAvailableFeatures</name><argument_list>(<argument><expr><name>ECX</name></expr></argument>, <argument><expr><name>EDX</name></expr></argument>, <argument><expr><name>MaxLeaf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Features</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>Features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>__cpu_features2</name> <operator>=</operator> <name><name>Features</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Vendor</name> <operator>==</operator> <name>SIG_INTEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getIntelProcessorTypeAndSubtype</name><argument_list>(<argument><expr><name>Family</name></expr></argument>, <argument><expr><name>Model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>__cpu_model</name><operator>.</operator><name>__cpu_type</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>__cpu_model</name><operator>.</operator><name>__cpu_subtype</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name> <operator>=</operator> <name>VENDOR_INTEL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Vendor</name> <operator>==</operator> <name>SIG_AMD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getAMDProcessorTypeAndSubtype</name><argument_list>(<argument><expr><name>Family</name></expr></argument>, <argument><expr><name>Model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>__cpu_model</name><operator>.</operator><name>__cpu_type</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>__cpu_model</name><operator>.</operator><name>__cpu_subtype</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name> <operator>=</operator> <name>VENDOR_AMD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name> <operator>=</operator> <name>VENDOR_OTHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_vendor</name></name> <operator>&lt;</operator> <name>VENDOR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_type</name></name> <operator>&lt;</operator> <name>CPU_TYPE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>__cpu_model</name><operator>.</operator><name>__cpu_subtype</name></name> <operator>&lt;</operator> <name>CPU_SUBTYPE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>_Bool</name> <name>__aarch64_have_lse_atomics</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>visibility</name><argument_list>(<argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call><operator>,</operator> <name>nocommon</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_include</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_include</name><argument_list>(<argument><expr><operator>&lt;</operator><name>sys</name><operator>/</operator><name><name>auxv</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/auxv.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AT_HWCAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_HWCAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWCAP_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWCAP_ATOMICS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name> <name>CONSTRUCTOR_ATTRIBUTE</name></type> <name>init_have_lse_atomics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hwcap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>elf_aux_info</name><argument_list>(<argument><expr><name>AT_HWCAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hwcap</name></expr></argument>, <argument><expr><sizeof>sizeof <name>hwcap</name></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__aarch64_have_lse_atomics</name> <operator>=</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>hwcap</name> <operator>&amp;</operator> <name>HWCAP_ATOMICS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hwcap</name> <init>= <expr><call><name>getauxval</name><argument_list>(<argument><expr><name>AT_HWCAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__aarch64_have_lse_atomics</name> <operator>=</operator> <operator>(</operator><name>hwcap</name> <operator>&amp;</operator> <name>HWCAP_ATOMICS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
