<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/combined.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_COMBINED_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_COMBINED_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flags_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"local_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memtag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quarantine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"report.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secondary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stack_depot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scudo/interface.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/guarded_pool_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/optional/backtrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gwp_asan/optional/segv_handler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<extern>extern <literal type="string">"C"</literal> <function><type><specifier>inline</specifier> <name>void</name></type> <name>EmptyCallback</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function></extern>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ANDROID_UNSAFE_FRAME_POINTER_CHASE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<extern>extern <literal type="string">"C"</literal> <decl_stmt><decl><type><name>size_t</name></type> <name>android_unsafe_frame_pointer_chase</name><argument_list>(<argument><expr><name>scudo</name><operator>::</operator><name>uptr</name> <operator>*</operator><name>buf</name></expr></argument>,
<argument><expr><name>size_t</name> <name>num_entries</name></expr></argument>)</argument_list></decl>;</decl_stmt></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Params</name></expr></argument>, <argument><expr><name>void</name> <operator>(</operator><operator>*</operator><name>PostInitCallback</name><operator>)</operator><operator>(</operator><name>void</name><operator>)</operator> <operator>=</operator> <name>EmptyCallback</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Allocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryT</name> <init>= <expr><name>typename</name> <name>Params</name><operator>::</operator><name>Primary</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>CacheT</name> <init>= <expr><name>typename</name> <name>PrimaryT</name><operator>::</operator><name>CacheT</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>Allocator</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>, <argument><expr><name>PostInitCallback</name></expr></argument>&gt;</argument_list></name></type> <name>ThisT</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>Params</name><operator>::</operator><name>template</name> <name><name>TSDRegistryT</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name> <name>TSDRegistryT</name></expr>;</expr_stmt></typedef>

<function><type><name>void</name></type> <name>callPostInitCallback</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PostInitNonce</name></expr></argument>, <argument><expr><name>PostInitCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>QuarantineCallback</name> <block>{
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>QuarantineCallback</name><argument_list>(<argument><expr><name>ThisT</name> <operator>&amp;</operator><name>Instance</name></expr></argument>, <argument><expr><name>CacheT</name> <operator>&amp;</operator><name>LocalCache</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Allocator</name><argument_list>(<argument><expr><name>Instance</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Cache</name><argument_list>(<argument>LocalCache</argument>)</argument_list></macro> <expr><block>{}</block>



<name>void</name> <macro><name>recycle</name><argument_list>(<argument>void *Ptr</argument>)</argument_list></macro> <block>{
<expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;
<expr><name>Chunk</name><operator>::</operator><call><name>loadHeader</name><argument_list>(<argument><expr><name><name>Allocator</name><operator>.</operator><name>Cookie</name></name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Quarantined</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportInvalidChunkState</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Recycling</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>NewHeader</name> <operator>=</operator> <name>Header</name></block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Available</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>compareExchangeHeader</name><argument_list>(<argument><expr><name><name>Allocator</name><operator>.</operator><name>Cookie</name></name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>BlockBegin</name> <init>= <expr><name>Allocator</name><operator>::</operator><call><name>getBlockBegin</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name></expr></argument>, <argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>




<decl><name>void</name> <modifier>*</modifier><name>allocate</name><argument_list>(<argument><expr><name>UNUSED</name> <name>uptr</name> <name>Size</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>QuarantineClassId</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name><name>Cache</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>QuarantineClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportOutOfMemory</name><argument_list>(<argument><expr><name>SizeClassMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>QuarantineClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>ClassId</name></name> <operator>=</operator> <name>QuarantineClassId</name> <operator>&amp;</operator> <name>Chunk</name><operator>::</operator><name>ClassIdMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>storeHeader</name><argument_list>(<argument><expr><name><name>Allocator</name><operator>.</operator><name>Cookie</name></name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Allocator</name><operator>.</operator><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>Ptr</name></expr>;</return>
</block_content>}</block></decl>

<decl><name>void</name> <name>deallocate</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>QuarantineClassId</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>loadHeader</name><argument_list>(<argument><expr><name><name>Allocator</name><operator>.</operator><name>Cookie</name></name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportInvalidChunkState</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Deallocating</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>ClassId</name></name></expr></argument>, <argument><expr><name>QuarantineClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>Offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QuarantineBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>NewHeader</name> <operator>=</operator> <name>Header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Available</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>compareExchangeHeader</name><argument_list>(<argument><expr><name><name>Allocator</name><operator>.</operator><name>Cookie</name></name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>QuarantineClassId</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator>
<name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl>

<decl><name>private</name><range>:
<expr><name>ThisT</name> <operator>&amp;</operator><name>Allocator</name></expr></range></decl>;</struct>
<decl_stmt><decl><type><name>CacheT</name> <modifier>&amp;</modifier></type><name>Cache</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>GlobalQuarantine</name><argument_list type="generic">&lt;<argument><expr><name>QuarantineCallback</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name></type> <name>QuarantineT</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>QuarantineT</name><operator>::</operator><name>CacheT</name> <name>QuarantineCacheT</name></expr>;</expr_stmt></typedef>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>performSanityChecks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>computeHardwareCRC32</name> <operator>&amp;&amp;</operator> <call><name>hasHardwareCRC32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HashAlgorithm</name> <operator>=</operator> <name>Checksum</name><operator>::</operator><name>HardwareCRC32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>getRandom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Cookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Cookie</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getMonotonicTime</name><argument_list>()</argument_list></call> <operator>^</operator>
<operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>initFlags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reportUnrecognizedFlags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>may_return_null</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>zero_contents</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>setFillContentsMode</name></name><argument_list>(<argument><expr><name>ZeroFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>pattern_fill_contents</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>setFillContentsMode</name></name><argument_list>(<argument><expr><name>PatternOrZeroFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>dealloc_type_mismatch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>DeallocTypeMismatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>delete_size_mismatch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>DeleteSizeMismatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>systemSupportsMemoryTagging</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseMemoryTagging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseOddEvenTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>QuarantineMaxChunkSize</name> <operator>=</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>quarantine_max_chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>s32</name></type> <name>ReleaseToOsIntervalMs</name> <init>= <expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>release_to_os_interval_ms</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>, <argument><expr><name>ReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>init</name></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>quarantine_size_kb</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>thread_local_quarantine_size_kb</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>initGwpAsan</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>options</name><operator>::</operator><name>Options</name> <name>Opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>Enabled</name></name> <operator>=</operator> <call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>GWP_ASAN_Enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>MaxSimultaneousAllocations</name></name> <operator>=</operator>
<call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>GWP_ASAN_MaxSimultaneousAllocations</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>SampleRate</name></name> <operator>=</operator> <call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>GWP_ASAN_SampleRate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>InstallSignalHandlers</name></name> <operator>=</operator> <call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>GWP_ASAN_InstallSignalHandlers</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>InstallForkHandlers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Opt</name><operator>.</operator><name>Backtrace</name></name> <operator>=</operator> <name>gwp_asan</name><operator>::</operator><name>backtrace</name><operator>::</operator><call><name>getBacktraceFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>Opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Opt</name><operator>.</operator><name>InstallSignalHandlers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>segv_handler</name><operator>::</operator><call><name>installSignalHandlers</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>GuardedAlloc</name></expr></argument>, <argument><expr><name>Printf</name></expr></argument>,
<argument><expr><name>gwp_asan</name><operator>::</operator><name>backtrace</name><operator>::</operator><call><name>getPrintBacktraceFunction</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>gwp_asan</name><operator>::</operator><name>backtrace</name><operator>::</operator><call><name>getSegvBacktraceFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>GuardedAllocSlotSize</name> <operator>=</operator>
<call><name><name>GuardedAlloc</name><operator>.</operator><name>getAllocatorState</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>maximumAllocationSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Opt</name><operator>.</operator><name>MaxSimultaneousAllocations</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>void</name></type> <name>initThreadMaybe</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>MinimalInit</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>initThreadMaybe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>MinimalInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>unmapTestOnly</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>unmapTestOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>unmapTestOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>getFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>GWP_ASAN_InstallSignalHandlers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>segv_handler</name><operator>::</operator><call><name>uninstallSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>uninitTestOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>TSDRegistryT</name> <modifier>*</modifier></type><name>getTSDRegistry</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>TSDRegistry</name></expr>;</return> </block_content>}</block></function>


<function><type><name>void</name></type> <name>initCache</name><parameter_list>(<parameter><decl><type><name>CacheT</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Cache</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>






<function><type><name>void</name></type> <name>commitBack</name><parameter_list>(<parameter><decl><type><name><name>TSD</name><argument_list type="generic">&lt;<argument><expr><name>ThisT</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>TSD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>drain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TSD</name><operator>-&gt;</operator><name>QuarantineCache</name></name></expr></argument>,
<argument><expr><call><name>QuarantineCallback</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type><name>getHeaderTaggedPointer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Ptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>UntaggedPtr</name> <init>= <expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>UntaggedPtr</name> <operator>!=</operator> <name>Ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UntaggedPtr</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>uptr</name></type> <name>addHeaderTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Ptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>addFixedTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ALWAYS_INLINE</name> <name>void</name> <modifier>*</modifier></type><name>addHeaderTag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>addHeaderTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NOINLINE</name> <name>u32</name></type> <name>collectStackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ANDROID_UNSAFE_FRAME_POINTER_CHASE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>DiscardFrames</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>Stack</name><index>[<expr><name>MaxTraceSize</name> <operator>+</operator> <name>DiscardFrames</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Size</name> <init>=
<expr><call><name>android_unsafe_frame_pointer_chase</name><argument_list>(<argument><expr><name>Stack</name></expr></argument>, <argument><expr><name>MaxTraceSize</name> <operator>+</operator> <name>DiscardFrames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <call><name><name>Min</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MaxTraceSize</name> <operator>+</operator> <name>DiscardFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Depot</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Stack</name> <operator>+</operator> <call><name><name>Min</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DiscardFrames</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Stack</name> <operator>+</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>computeOddEvenMaskForPointerMaybe</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>ClassId</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseOddEvenTags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<return>return <expr><literal type="number">0x5555U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>Ptr</name> <operator>&gt;&gt;</operator> <name>SizeClassMap</name><operator>::</operator><call><name>getSizeLSBByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>NOINLINE</name> <name>void</name> <modifier>*</modifier></type><name>allocate</name><argument_list>(<argument><expr><name>uptr</name> <name>Size</name></expr></argument>, <argument><expr><name>Chunk</name><operator>::</operator><name>Origin</name> <name>Origin</name></expr></argument>,
<argument><expr><name>uptr</name> <name>Alignment</name> <operator>=</operator> <name>MinAlignment</name></expr></argument>,
<argument><expr><name>bool</name> <name>ZeroContents</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name></type> <name>Options</name> <init>= <expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>Alignment</name> <operator>&gt;</operator> <name>MaxAlignment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reportAlignmentTooBig</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>, <argument><expr><name>MaxAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Alignment</name> <operator>&lt;</operator> <name>MinAlignment</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Alignment</name> <operator>=</operator> <name>MinAlignment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>shouldSample</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__scudo_allocate_hook</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__scudo_allocate_hook</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Ptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>FillContentsMode</name></type> <name>FillContents</name> <init>= <expr><ternary><condition><expr><name>ZeroContents</name></expr> ?</condition><then> <expr><name>ZeroFill</name></expr>
</then><else>: <expr><ternary><condition><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>getDisableMemInit</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><name>NoFill</name></expr>
</then><else>: <expr><call><name><name>Options</name><operator>.</operator><name>getFillContentsMode</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NeededSize</name> <init>=
<expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>Alignment</name> <operator>&gt;</operator> <name>MinAlignment</name><operator>)</operator></expr> ?</condition><then> <expr><name>Alignment</name></expr> </then><else>: <expr><name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>MaxAllowedMallocSize</name> <operator>&lt;</operator> <name>UINTPTR_MAX</name> <operator>-</operator> <name>MaxAlignment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>Size</name> <operator>&gt;=</operator> <name>MaxAllowedMallocSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reportAllocationSizeTooBig</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>NeededSize</name></expr></argument>, <argument><expr><name>MaxAllowedMallocSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>NeededSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Block</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ClassId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>SecondaryBlockEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>PrimaryT</name><operator>::</operator><call><name>canAllocate</name><argument_list>(<argument><expr><name>NeededSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ClassId</name> <operator>=</operator> <name>SizeClassMap</name><operator>::</operator><call><name>getClassIdBySize</name><argument_list>(<argument><expr><name>NeededSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>UnlockRequired</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>TSD</name> <operator>=</operator> <call><name><name>TSDRegistry</name><operator>.</operator><name>getTSDAndLock</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnlockRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Block</name> <operator>=</operator> <call><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>ClassId</name> <operator>&lt;</operator> <name>SizeClassMap</name><operator>::</operator><name>LargestClassId</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Block</name> <operator>=</operator> <call><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>++</operator><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ClassId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UnlockRequired</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>ClassId</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Block</name> <operator>=</operator> <call><name><name>Secondary</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SecondaryBlockEnd</name></expr></argument>,
<argument><expr><name>FillContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reportOutOfMemory</name><argument_list>(<argument><expr><name>NeededSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockUptr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>UnalignedUserPtr</name> <init>= <expr><name>BlockUptr</name> <operator>+</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>UserPtr</name> <init>= <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>UnalignedUserPtr</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UserPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>TaggedPtr</name> <init>= <expr><name>Ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>











<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>PrevUserPtr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockSize</name> <init>= <expr><name>PrimaryT</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockEnd</name> <init>= <expr><name>BlockUptr</name> <operator>+</operator> <name>BlockSize</name></expr></init></decl>;</decl_stmt>

































<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedUserPtr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getChunkFromBlock</name><argument_list>(<argument><expr><name>BlockUptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PrevUserPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>PrevUserPtr</name> <operator>==</operator> <name>UserPtr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>TaggedUserPtr</name> <operator>=</operator> <call><name>loadTag</name><argument_list>(<argument><expr><name>UserPtr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>UserPtr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>PrevEnd</name> <init>= <expr><name>TaggedUserPtr</name> <operator>+</operator> <name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NextPage</name> <init>= <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>TaggedUserPtr</name></expr></argument>, <argument><expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NextPage</name> <operator>&lt;</operator> <name>PrevEnd</name> <operator>&amp;&amp;</operator> <call><name>loadTag</name><argument_list>(<argument><expr><name>NextPage</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NextPage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>PrevEnd</name> <operator>=</operator> <name>NextPage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>TaggedPtr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TaggedUserPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resizeTaggedChunk</name><argument_list>(<argument><expr><name>PrevEnd</name></expr></argument>, <argument><expr><name>TaggedUserPtr</name> <operator>+</operator> <name>Size</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>FillContents</name> <operator>!=</operator> <name>NoFill</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>Header</name><operator>.</operator><name>OriginOrWasZeroed</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>TaggedPtr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>PrevEnd</name> <operator>-</operator> <name>TaggedUserPtr</name></expr></argument>,
<argument><expr><call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Size</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>TaggedPtr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>OddEvenMask</name> <init>=
<expr><call><name>computeOddEvenMaskForPointerMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>BlockUptr</name></expr></argument>, <argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>TaggedPtr</name> <operator>=</operator> <call><name>prepareTaggedChunk</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>OddEvenMask</name></expr></argument>, <argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>storePrimaryAllocationStackMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Block</name> <operator>=</operator> <call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>FillContents</name> <operator>!=</operator> <name>NoFill</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>Block</name></expr></argument>, <argument><expr><ternary><condition><expr><name>FillContents</name> <operator>==</operator> <name>ZeroFill</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>PatternFillByte</name></expr></else></ternary></expr></argument>,
<argument><expr><name>PrimaryT</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Block</name> <operator>=</operator> <call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>storeSecondaryAllocationStackMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>UnalignedUserPtr</name> <operator>!=</operator> <name>UserPtr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Offset</name> <init>= <expr><name>UserPtr</name> <operator>-</operator> <name>UnalignedUserPtr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>BlockMarker</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>Offset</name> <operator>&gt;&gt;</operator> <name>MinAlignmentLog</name><operator>)</operator> <operator>&amp;</operator> <name>Chunk</name><operator>::</operator><name>OffsetMask</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>ClassId</name></name> <operator>=</operator> <name>ClassId</name> <operator>&amp;</operator> <name>Chunk</name><operator>::</operator><name>ClassIdMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>OriginOrWasZeroed</name></name> <operator>=</operator> <name>Origin</name> <operator>&amp;</operator> <name>Chunk</name><operator>::</operator><name>OriginMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><name>ClassId</name></expr> ?</condition><then> <expr><name>Size</name></expr> </then><else>: <expr><name>SecondaryBlockEnd</name> <operator>-</operator> <operator>(</operator><name>UserPtr</name> <operator>+</operator> <name>Size</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&amp;</operator>
<name>Chunk</name><operator>::</operator><name>SizeOrUnusedBytesMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>storeHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__scudo_allocate_hook</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__scudo_allocate_hook</name><argument_list>(<argument><expr><name>TaggedPtr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TaggedPtr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>NOINLINE</name> <name>void</name></type> <name>deallocate</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><name>Chunk</name><operator>::</operator><name>Origin</name> <name>Origin</name></expr></argument>, <argument><expr><name>uptr</name> <name>DeleteSize</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>UNUSED</name> <name>uptr</name> <name>Alignment</name> <operator>=</operator> <name>MinAlignment</name></expr></argument>)</argument_list> <block>{<block_content>






<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__scudo_deallocate_hook</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__scudo_deallocate_hook</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>pointerIsMine</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportMisalignedPointer</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Deallocating</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>TaggedPtr</name> <init>= <expr><name>Ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>getHeaderTaggedPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>loadHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportInvalidChunkState</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Deallocating</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name></type> <name>Options</name> <init>= <expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>DeallocTypeMismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>OriginOrWasZeroed</name></name> <operator>!=</operator> <name>Origin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>Header</name><operator>.</operator><name>OriginOrWasZeroed</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Memalign</name> <operator>||</operator>
<name>Origin</name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Malloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportDeallocTypeMismatch</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Deallocating</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>,
<argument><expr><name><name>Header</name><operator>.</operator><name>OriginOrWasZeroed</name></name></expr></argument>, <argument><expr><name>Origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Size</name> <init>= <expr><call><name>getSize</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>DeleteSize</name> <operator>&amp;&amp;</operator> <call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>DeleteSizeMismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>DeleteSize</name> <operator>!=</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportDeleteSizeMismatch</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>DeleteSize</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>quarantineOrDeallocateChunk</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>TaggedPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>reallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>OldPtr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>NewSize</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Alignment</name> <init>= <expr><name>MinAlignment</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Options</name></type> <name>Options</name> <init>= <expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>NewSize</name> <operator>&gt;=</operator> <name>MaxAllowedMallocSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reportAllocationSizeTooBig</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MaxAllowedMallocSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_NE</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>pointerIsMine</name></name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>OldSize</name> <init>= <expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>NewPtr</name> <init>= <expr><call><name>allocate</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Malloc</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>NewPtr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>NewPtr</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>NewSize</name> <operator>&lt;</operator> <name>OldSize</name><operator>)</operator></expr> ?</condition><then> <expr><name>NewSize</name></expr> </then><else>: <expr><name>OldSize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatFree</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>GuardedAllocSlotSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NewPtr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>OldTaggedPtr</name> <init>= <expr><name>OldPtr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>OldPtr</name> <operator>=</operator> <call><name>getHeaderTaggedPointer</name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportMisalignedPointer</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Reallocating</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>OldHeader</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>loadHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OldHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>OldHeader</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportInvalidChunkState</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Reallocating</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>DeallocTypeMismatch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>OldHeader</name><operator>.</operator><name>OriginOrWasZeroed</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Malloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportDeallocTypeMismatch</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Reallocating</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>,
<argument><expr><name><name>OldHeader</name><operator>.</operator><name>OriginOrWasZeroed</name></name></expr></argument>,
<argument><expr><name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>BlockBegin</name> <init>= <expr><call><name>getBlockBegin</name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OldHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>BlockEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>OldSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>ClassId</name> <init>= <expr><name><name>OldHeader</name><operator>.</operator><name>ClassId</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>BlockEnd</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>SizeClassMap</name><operator>::</operator><call><name>getSizeByClassId</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>OldSize</name> <operator>=</operator> <name><name>OldHeader</name><operator>.</operator><name>SizeOrUnusedBytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>BlockEnd</name> <operator>=</operator> <name>SecondaryT</name><operator>::</operator><call><name>getBlockEnd</name><argument_list>(<argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>OldSize</name> <operator>=</operator> <name>BlockEnd</name> <operator>-</operator> <operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>OldHeader</name><operator>.</operator><name>SizeOrUnusedBytes</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>NewSize</name> <operator>&lt;=</operator> <name>BlockEnd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NewSize</name> <operator>&gt;</operator> <name>OldSize</name> <operator>||</operator> <operator>(</operator><name>OldSize</name> <operator>-</operator> <name>NewSize</name><operator>)</operator> <operator>&lt;</operator> <call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>NewHeader</name> <operator>=</operator> <name>OldHeader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>SizeOrUnusedBytes</name></name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><name>ClassId</name></expr> ?</condition><then> <expr><name>NewSize</name></expr>
</then><else>: <expr><name>BlockEnd</name> <operator>-</operator>
<operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>NewSize</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&amp;</operator>
<name>Chunk</name><operator>::</operator><name>SizeOrUnusedBytesMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>compareExchangeHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OldHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ClassId</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resizeTaggedChunk</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>OldSize</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OldTaggedPtr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>NewSize</name></expr></argument>,
<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>storePrimaryAllocationStackMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>storeSecondaryAllocationStackMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><name>NewSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OldTaggedPtr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>NewPtr</name> <init>= <expr><call><name>allocate</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><name>Chunk</name><operator>::</operator><name>Origin</name><operator>::</operator><name>Malloc</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>NewPtr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>NewPtr</name></expr></argument>, <argument><expr><name>OldTaggedPtr</name></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>, <argument><expr><name>OldSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quarantineOrDeallocateChunk</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>OldTaggedPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OldHeader</name></expr></argument>, <argument><expr><name>OldSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NewPtr</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>uptr</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedString</name></type> <name>Str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>disable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>Length</name> <init>= <expr><call><name>getStats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Length</name> <operator>&lt;</operator> <name>Size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>Length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Buffer</name> <operator>&amp;&amp;</operator> <name>Size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><call><name><name>Str</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Buffer</name><index>[<expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Length</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printStats</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedString</name></type> <name>Str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>disable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getStats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Str</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>releaseToOS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>releaseToOS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>iterateOverChunks</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>iterate_callback</name></type> <name>Callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archSupportsMemoryTagging</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Base</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>From</name> <init>= <expr><name>Base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>To</name> <init>= <expr><name>Base</name> <operator>+</operator> <name>Size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MayHaveTaggedPrimary</name> <init>= <expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>systemSupportsMemoryTagging</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Lambda</name> <init>= <expr><index>[<expr><name>this</name></expr><operator>,</operator> <name>From</name><operator>,</operator> <name>To</name><operator>,</operator> <name>MayHaveTaggedPrimary</name><operator>,</operator> <name>Callback</name><operator>,</operator>
<name>Arg</name>]</index><operator>(</operator><name>uptr</name> <name>Block</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>Block</name> <operator>&lt;</operator> <name>From</name> <operator>||</operator> <name>Block</name> <operator>&gt;=</operator> <name>To</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<name>uptr</name> <name>Chunk</name></block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>MayHaveTaggedPrimary</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>ScopedDisableMemoryTagChecks</name></type> <name>x</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getChunkFromBlock</name><argument_list>(<argument><expr><name>Block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>getChunkFromBlock</name><argument_list>(<argument><expr><call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>Chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getChunkFromBlock</name><argument_list>(<argument><expr><call><name>addHeaderTag</name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>Chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>==</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedChunk</name> <init>= <expr><name>Chunk</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TaggedChunk</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>TaggedChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TaggedChunk</name> <operator>=</operator> <call><name>loadTag</name><argument_list>(<argument><expr><name>Chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Callback</name><argument_list>(<argument><expr><name>TaggedChunk</name></expr></argument>, <argument><expr><call><name>getSize</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Chunk</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>iterateOverBlocks</name></name><argument_list>(<argument><expr><name>Lambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>iterateOverBlocks</name></name><argument_list>(<argument><expr><name>Lambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>iterate</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Callback</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>canReturnNull</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>MayReturnNull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MemtagTuning</name></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>Value</name> <operator>==</operator> <name>M_MEMTAG_TUNING_BUFFER_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseOddEvenTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Value</name> <operator>==</operator> <name>M_MEMTAG_TUNING_UAF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseOddEvenTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>PrimaryResult</name> <init>= <expr><call><name><name>Primary</name><operator>.</operator><name>setOption</name></name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>SecondaryResult</name> <init>= <expr><call><name><name>Secondary</name><operator>.</operator><name>setOption</name></name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>RegistryResult</name> <init>= <expr><call><name><name>TSDRegistry</name><operator>.</operator><name>setOption</name></name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>PrimaryResult</name> <operator>&amp;&amp;</operator> <name>SecondaryResult</name> <operator>&amp;&amp;</operator> <name>RegistryResult</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uptr</name></type> <name>getUsableSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>pointerIsMine</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>getHeaderTaggedPointer</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>loadHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportInvalidChunkState</name><argument_list>(<argument><expr><name>AllocatorAction</name><operator>::</operator><name>Sizing</name></expr></argument>, <argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>getSize</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><name>StatCounters</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>isOwned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name><name>GuardedAlloc</name><operator>.</operator><name>pointerIsMine</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Ptr</name> <operator>||</operator> <operator>!</operator><call><name>isAligned</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MinAlignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>getHeaderTaggedPointer</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<return>return <expr><name>Chunk</name><operator>::</operator><call><name>isValid</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>Header</name><operator>.</operator><name>State</name></name> <operator>==</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>useMemoryTaggingTestOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>disableMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content>






<expr_stmt><expr><call><name><name>TSDRegistry</name><operator>.</operator><name>initOnceMaybe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>disableMemoryTagging</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>UseMemoryTagging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setTrackAllocationStacks</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Track</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Track</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>TrackAllocationStacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>TrackAllocationStacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setFillContents</name><parameter_list>(<parameter><decl><type><name>FillContentsMode</name></type> <name>FillContents</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>setFillContentsMode</name></name><argument_list>(<argument><expr><name>FillContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setAddLargeAllocationSlack</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>AddSlack</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>initThreadMaybe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>AddSlack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>AddLargeAllocationSlack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>Options</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>AddLargeAllocationSlack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStackDepotAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Depot</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getRegionInfoArrayAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Primary</name><operator>.</operator><name>getRegionInfoArrayAddress</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getRegionInfoArraySize</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>PrimaryT</name><operator>::</operator><call><name>getRegionInfoArraySize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getRingBufferAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RingBuffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getRingBufferSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>RingBuffer</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxTraceSize</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>collectTraceMaybe</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StackDepot</name> <operator>*</operator><name>Depot</name></expr></argument>,
<argument><expr><call><name>uintptr_t</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Trace</name></expr></argument>)</argument_list></call><index>[<expr><name>MaxTraceSize</name></expr>]</index></expr></argument>, <argument><expr><name>u32</name> <name>Hash</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>RingPos</name></decl>, <decl><type ref="prev"/><name>Size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Depot</name><operator>-&gt;</operator><name>find</name></name><argument_list>(<argument><expr><name>Hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RingPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>Size</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>!=</operator> <name>MaxTraceSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Trace</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Depot</name><operator>)</operator><index>[<expr><name>RingPos</name> <operator>+</operator> <name>I</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getErrorInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>scudo_error_info</name></name> <modifier>*</modifier></type><name>ErrorInfo</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>FaultAddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DepotPtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RegionInfoPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RingBufferPtr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Memory</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MemoryTags</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>MemoryAddr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MemorySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ErrorInfo</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>||</operator>
<name>MemoryAddr</name> <operator>+</operator> <name>MemorySize</name> <operator>&lt;</operator> <name>MemoryAddr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Depot</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>StackDepot</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>DepotPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NextErrorReport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>extractTag</name><argument_list>(<argument><expr><name>FaultAddr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getInlineErrorInfo</name><argument_list>(<argument><expr><name>ErrorInfo</name></expr></argument>, <argument><expr><name>NextErrorReport</name></expr></argument>, <argument><expr><name>FaultAddr</name></expr></argument>, <argument><expr><name>Depot</name></expr></argument>,
<argument><expr><name>RegionInfoPtr</name></expr></argument>, <argument><expr><name>Memory</name></expr></argument>, <argument><expr><name>MemoryTags</name></expr></argument>, <argument><expr><name>MemoryAddr</name></expr></argument>,
<argument><expr><name>MemorySize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>getRingBufferErrorInfo</name><argument_list>(<argument><expr><name>ErrorInfo</name></expr></argument>, <argument><expr><name>NextErrorReport</name></expr></argument>, <argument><expr><name>FaultAddr</name></expr></argument>, <argument><expr><name>Depot</name></expr></argument>,
<argument><expr><name>RingBufferPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>extractTag</name><argument_list>(<argument><expr><name>FaultAddr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getInlineErrorInfo</name><argument_list>(<argument><expr><name>ErrorInfo</name></expr></argument>, <argument><expr><name>NextErrorReport</name></expr></argument>, <argument><expr><name>FaultAddr</name></expr></argument>, <argument><expr><name>Depot</name></expr></argument>,
<argument><expr><name>RegionInfoPtr</name></expr></argument>, <argument><expr><name>Memory</name></expr></argument>, <argument><expr><name>MemoryTags</name></expr></argument>, <argument><expr><name>MemoryAddr</name></expr></argument>,
<argument><expr><name>MemorySize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>SecondaryT</name> <init>= <expr><name><name>MapAllocator</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>PrimaryT</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinAlignmentLog</name> <init>= <expr><name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxAlignmentLog</name> <init>= <expr><literal type="number">24U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MinAlignment</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>MinAlignmentLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxAlignment</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>MaxAlignmentLog</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxAllowedMallocSize</name> <init>=
<expr><call><name>FIRST_32_SECOND_64</name><argument_list>(<argument><expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>MinAlignment</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Chunk</name><operator>::</operator><name>PackedHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Minimal alignment must at least cover a chunk header."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>||</operator>
<name>MinAlignment</name> <operator>&gt;=</operator> <call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>BlockMarker</name> <init>= <expr><literal type="number">0x44554353U</literal></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sptr</name></type> <name>MemTagAllocationTraceIndex</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sptr</name></type> <name>MemTagAllocationTidIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>Cookie</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>QuarantineMaxChunkSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GlobalStats</name></type> <name>Stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PrimaryT</name></type> <name>Primary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecondaryT</name></type> <name>Secondary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QuarantineT</name></type> <name>Quarantine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSDRegistryT</name></type> <name>TSDRegistry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_once_t</name></type> <name>PostInitNonce</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GWP_ASAN_HOOKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gwp_asan</name><operator>::</operator><name>GuardedPoolAllocator</name> <name>GuardedAlloc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>GuardedAllocSlotSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>StackDepot</name></type> <name>Depot</name></decl>;</decl_stmt>

<struct>struct <name>AllocationRingBuffer</name> <block>{
<struct>struct <name>Entry</name> <block>{
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>Ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>AllocationSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>AllocationTrace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>AllocationTid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>DeallocationTrace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>DeallocationTid</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>Pos</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumEntries</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>NumEntries</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Entry</name></type> <name><name>Entries</name><index>[<expr><name>NumEntries</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>AllocationRingBuffer</name></type> <name>RingBuffer</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>


<function><type><name>NOINLINE</name> <name>void</name></type> <name>performSanityChecks</name><parameter_list>()</parameter_list> <block>{<block_content>








<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxPrimaryAlignment</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <call><name>getMostSignificantSetBitIndex</name><argument_list>(
<argument><expr><name>SizeClassMap</name><operator>::</operator><name>MaxSize</name> <operator>-</operator> <name>MinAlignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxOffset</name> <init>=
<expr><operator>(</operator><name>MaxPrimaryAlignment</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <name>MinAlignmentLog</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name>MaxOffset</name> <operator>&amp;</operator> <name>Chunk</name><operator>::</operator><name>OffsetMask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>Offset</name></name> <operator>!=</operator> <name>MaxOffset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportSanityCheckError</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxSizeOrUnusedBytes</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>MaxSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name> <operator>=</operator> <name>MaxSizeOrUnusedBytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name> <operator>!=</operator> <name>MaxSizeOrUnusedBytes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportSanityCheckError</name><argument_list>(<argument><expr><literal type="string">"size (or unused bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>LargestClassId</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>LargestClassId</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Header</name><operator>.</operator><name>ClassId</name></name> <operator>=</operator> <name>LargestClassId</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>.</operator><name>ClassId</name></name> <operator>!=</operator> <name>LargestClassId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reportSanityCheckError</name><argument_list>(<argument><expr><literal type="string">"class ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>getBlockBegin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>,
<argument><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator><name>Header</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call> <operator>-</operator>
<operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Header</name><operator>-&gt;</operator><name>Offset</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>MinAlignmentLog</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>inline</specifier> <name>uptr</name></type> <name>getSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator><name>Header</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>SizeOrUnusedBytes</name> <init>= <expr><name><name>Header</name><operator>-&gt;</operator><name>SizeOrUnusedBytes</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name><name>Header</name><operator>-&gt;</operator><name>ClassId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SizeOrUnusedBytes</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>SecondaryT</name><operator>::</operator><call><name>getBlockEnd</name><argument_list>(<argument><expr><call><name>getBlockBegin</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SizeOrUnusedBytes</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>quarantineOrDeallocateChunk</name><argument_list>(<argument><expr><name>Options</name> <name>Options</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>TaggedPtr</name></expr></argument>,
<argument><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator><name>Header</name></expr></argument>, <argument><expr><name>uptr</name> <name>Size</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name>getHeaderTaggedPointer</name><argument_list>(<argument><expr><name>TaggedPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>NewHeader</name> <operator>=</operator> <operator>*</operator><name>Header</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>BypassQuarantine</name> <init>= <expr><operator>!</operator><call><name><name>Quarantine</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>QuarantineMaxChunkSize</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BypassQuarantine</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Available</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>State</name></name> <operator>=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Quarantined</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>NewHeader</name><operator>.</operator><name>OriginOrWasZeroed</name></name> <operator>=</operator> <call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>TSDRegistry</name><operator>.</operator><name>getDisableMemInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><call><name>compareExchangeHeader</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>, <argument><expr><name>Header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>PrevTag</name> <init>= <expr><call><name>extractTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TaggedPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>storeDeallocationStackMaybe</name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>PrevTag</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TSDRegistry</name><operator>.</operator><name>getDisableMemInit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedBegin</name></decl>, <decl><type ref="prev"/><name>TaggedEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>OddEvenMask</name> <init>= <expr><call><name>computeOddEvenMaskForPointerMaybe</name><argument_list>(
<argument><expr><name>Options</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getBlockBegin</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>setRandomTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>OddEvenMask</name> <operator>|</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>PrevTag</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaggedBegin</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>TaggedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>BypassQuarantine</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>BlockBegin</name> <init>= <expr><call><name>getBlockBegin</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>ClassId</name> <init>= <expr><name><name>NewHeader</name><operator>.</operator><name>ClassId</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>UnlockRequired</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>TSD</name> <operator>=</operator> <call><name><name>TSDRegistry</name><operator>.</operator><name>getTSDAndLock</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnlockRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>ClassId</name></expr></argument>, <argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>UnlockRequired</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Params</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>UnlockRequired</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>TSD</name> <operator>=</operator> <call><name><name>TSDRegistry</name><operator>.</operator><name>getTSDAndLock</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnlockRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TSD</name><operator>-&gt;</operator><name>QuarantineCache</name></name></expr></argument>,
<argument><expr><call><name>QuarantineCallback</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name><name>TSD</name><operator>-&gt;</operator><name>Cache</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>UnlockRequired</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>TSD</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>getChunkFromBlock</name><argument_list>(<argument><expr><name>uptr</name> <name>Block</name></expr></argument>, <argument><expr><name>uptr</name> <operator>*</operator><name>Chunk</name></expr></argument>,
<argument><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator><name>Header</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>Chunk</name> <operator>=</operator>
<name>Block</name> <operator>+</operator> <call><name>getChunkOffsetFromBlock</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Chunk</name><operator>::</operator><call><name>isValid</name><argument_list>(<argument><expr><name>Cookie</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>Chunk</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getChunkOffsetFromBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u32</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>BlockMarker</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Offset</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Offset</name> <operator>+</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>storeEndMarker</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>End</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>BlockEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>BlockEnd</name></expr></argument>, <argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>UntaggedEnd</name> <init>= <expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>UntaggedEnd</name> <operator>!=</operator> <name>BlockEnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>storeTag</name><argument_list>(<argument><expr><name>UntaggedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UntaggedEnd</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>extractTag</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>prepareTaggedChunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ExcludeMask</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>BlockEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>storeTag</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>TaggedBegin</name></decl>, <decl><type ref="prev"/><name>TaggedEnd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setRandomTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>ExcludeMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaggedBegin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaggedEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>storeEndMarker</name><argument_list>(<argument><expr><name>TaggedEnd</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>TaggedBegin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resizeTaggedChunk</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>OldPtr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>NewPtr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>NewSize</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>BlockEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>RoundOldPtr</name> <init>= <expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>OldPtr</name></expr></argument>, <argument><expr><call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RoundNewPtr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>RoundOldPtr</name> <operator>&gt;=</operator> <name>NewPtr</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>RoundNewPtr</name> <operator>=</operator> <call><name>roundUpTo</name><argument_list>(<argument><expr><name>NewPtr</name></expr></argument>, <argument><expr><call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>RoundNewPtr</name> <operator>=</operator> <call><name>storeTags</name><argument_list>(<argument><expr><name>RoundOldPtr</name></expr></argument>, <argument><expr><name>NewPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>storeEndMarker</name><argument_list>(<argument><expr><name>RoundNewPtr</name></expr></argument>, <argument><expr><name>NewSize</name></expr></argument>, <argument><expr><name>BlockEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>storePrimaryAllocationStackMaybe</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>TrackAllocationStacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Ptr32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTraceIndex</name></expr>]</index></name> <operator>=</operator> <call><name>collectStackTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTidIndex</name></expr>]</index></name> <operator>=</operator> <call><name>getThreadID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>storeRingBufferEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>AllocationTrace</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>AllocationTid</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>AllocationSize</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>DeallocationTrace</name></decl></parameter>,
<parameter><decl><type><name>u32</name></type> <name>DeallocationTid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>Pos</name> <init>= <expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RingBuffer</name><operator>.</operator><name>Pos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>typename</name> <name>AllocationRingBuffer</name><operator>::</operator><name>Entry</name> <operator>*</operator><name>Entry</name> <operator>=</operator>
<operator>&amp;</operator><name><name>RingBuffer</name><operator>.</operator><name>Entries</name><index>[<expr><name>Pos</name> <operator>%</operator> <name>AllocationRingBuffer</name><operator>::</operator><name>NumEntries</name></expr>]</index></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>Ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__atomic_signal_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationTrace</name></name></expr></argument>, <argument><expr><name>AllocationTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationTid</name></name></expr></argument>, <argument><expr><name>AllocationTid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationSize</name></name></expr></argument>, <argument><expr><name>AllocationSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>DeallocationTrace</name></name></expr></argument>, <argument><expr><name>DeallocationTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>DeallocationTid</name></name></expr></argument>, <argument><expr><name>DeallocationTid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__atomic_signal_fence</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>Ptr</name></name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>storeSecondaryAllocationStackMaybe</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>TrackAllocationStacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>Trace</name> <init>= <expr><call><name>collectStackTrace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>Tid</name> <init>= <expr><call><name>getThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Ptr32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTraceIndex</name></expr>]</index></name> <operator>=</operator> <name>Trace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTidIndex</name></expr>]</index></name> <operator>=</operator> <name>Tid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>storeRingBufferEntry</name><argument_list>(<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Trace</name></expr></argument>, <argument><expr><name>Tid</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>storeDeallocationStackMaybe</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>PrevTag</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UNLIKELY</name><argument_list>(<argument><expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>TrackAllocationStacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Ptr32</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>AllocationTrace</name> <init>= <expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTraceIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>AllocationTid</name> <init>= <expr><name><name>Ptr32</name><index>[<expr><name>MemTagAllocationTidIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>DeallocationTrace</name> <init>= <expr><call><name>collectStackTrace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>DeallocationTid</name> <init>= <expr><call><name>getThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>storeRingBufferEntry</name><argument_list>(<argument><expr><call><name>addFixedTag</name><argument_list>(<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PrevTag</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>AllocationTrace</name></expr></argument>, <argument><expr><name>AllocationTid</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>,
<argument><expr><name>DeallocationTrace</name></expr></argument>, <argument><expr><name>DeallocationTid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>NumErrorReports</name> <init>=
<expr><sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>scudo_error_info</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>-&gt;</operator><name>reports</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>scudo_error_info</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>-&gt;</operator><name><name>reports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getInlineErrorInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>scudo_error_info</name></name> <modifier>*</modifier></type><name>ErrorInfo</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>&amp;</modifier></type><name>NextErrorReport</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>FaultAddr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackDepot</name> <modifier>*</modifier></type><name>Depot</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RegionInfoPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Memory</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MemoryTags</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>MemoryAddr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MemorySize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>MinDistance</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>MaxDistance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>UntaggedFaultAddr</name> <init>= <expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>FaultAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name>FaultAddrTag</name> <init>= <expr><call><name>extractTag</name><argument_list>(<argument><expr><name>FaultAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockInfo</name></type> <name>Info</name> <init>=
<expr><name>PrimaryT</name><operator>::</operator><call><name>findNearestBlock</name><argument_list>(<argument><expr><name>RegionInfoPtr</name></expr></argument>, <argument><expr><name>UntaggedFaultAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>GetGranule</name> <init>= <expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><name>uptr</name> <name>Addr</name>, <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>Data</name>, <name>uint8_t</name> <operator>*</operator><name>Tag</name><operator>)</operator> <operator>-&gt;</operator> <name>bool</name> <block>{
<if_stmt><if>if <condition>(<expr><name><name>Addr</name> <argument_list type="generic">&lt; <argument><expr><name>MemoryAddr</name> <operator>||</operator> <name>Addr</name> <operator>+</operator> <name>archMemoryTagGranuleSize</name><operator>(</operator><operator>)</operator> <operator>&lt;</operator> <name>Addr</name> <operator>||</operator>
<name>Addr</name> <operator>+</operator> <name>archMemoryTagGranuleSize</name><operator>(</operator><operator>)</operator></expr></argument> &gt;</argument_list></name> <name>MemoryAddr</name> <operator>+</operator> <name>MemorySize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<operator>*</operator><name>Data</name> <operator>=</operator> <operator>&amp;</operator><name><name>Memory</name><index>[<expr><name>Addr</name> <operator>-</operator> <name>MemoryAddr</name></expr>]</index></name></block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>Tag</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>MemoryTags</name><index>[<expr><operator>(</operator><name>Addr</name> <operator>-</operator> <name>MemoryAddr</name><operator>)</operator> <operator>/</operator> <call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>ReadBlock</name> <init>= <expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><name>uptr</name> <name>Addr</name>, <name>uptr</name> <operator>*</operator><name>ChunkAddr</name>,
<name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator><name>Header</name>, <specifier>const</specifier> <name>u32</name> <operator>*</operator><operator>*</operator><name>Data</name>,
<name>u8</name> <operator>*</operator><name>Tag</name><operator>)</operator> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BlockBegin</name></expr>;
<expr><name>u8</name> <name>BlockBeginTag</name></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetGranule</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BlockBegin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BlockBeginTag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<name>uptr</name> <name>ChunkOffset</name> <operator>=</operator> <call><name>getChunkOffsetFromBlock</name><argument_list>(<argument><expr><name>BlockBegin</name></expr></argument>)</argument_list></call></block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ChunkAddr</name> <operator>=</operator> <name>Addr</name> <operator>+</operator> <name>ChunkOffset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ChunkBegin</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetGranule</name><argument_list>(<argument><expr><operator>*</operator><name>ChunkAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ChunkBegin</name></expr></argument>, <argument><expr><name>Tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>Header</name> <operator>=</operator> <operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>ChunkBegin</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Data</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>u32</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ChunkBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>Header</name><operator>-&gt;</operator><name>SizeOrUnusedBytes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Tag</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u8</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>ChunkBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
};

<if_stmt><if>if <condition>(<expr><name>NextErrorReport</name> <operator>==</operator> <name>NumErrorReports</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>CheckOOB</name> <init>= <expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><name>uptr</name> <name>BlockAddr</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>BlockAddr</name> <operator>&lt;</operator> <name><name>Info</name><operator>.</operator><name>RegionBegin</name></name> <operator>||</operator> <name>BlockAddr</name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>RegionEnd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<name>uptr</name> <name>ChunkAddr</name></block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Chunk</name><operator>::</operator><name>UnpackedHeader</name> <name>Header</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>Tag</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadBlock</name><argument_list>(<argument><expr><name>BlockAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ChunkAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tag</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>Header</name><operator>.</operator><name>State</name></name> <operator>!=</operator> <name>Chunk</name><operator>::</operator><name>State</name><operator>::</operator><name>Allocated</name> <operator>||</operator> <name>Tag</name> <operator>!=</operator> <name>FaultAddrTag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>R</name> <operator>=</operator> <operator>&amp;</operator><name><name>ErrorInfo</name><operator>-&gt;</operator><name>reports</name><index>[<expr><name>NextErrorReport</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>error_type</name></name> <operator>=</operator>
<ternary><condition><expr><name>UntaggedFaultAddr</name> <operator>&lt;</operator> <name>ChunkAddr</name></expr> ?</condition><then> <expr><name>BUFFER_UNDERFLOW</name></expr> </then><else>: <expr><name>BUFFER_OVERFLOW</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_address</name></name> <operator>=</operator> <name>ChunkAddr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_size</name></name> <operator>=</operator> <name><name>Header</name><operator>.</operator><name>SizeOrUnusedBytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>collectTraceMaybe</name><argument_list>(<argument><expr><name>Depot</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_trace</name></name></expr></argument>,
<argument><expr><name><name>Data</name><index>[<expr><name>MemTagAllocationTraceIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_tid</name></name> <operator>=</operator> <name><name>Data</name><index>[<expr><name>MemTagAllocationTidIndex</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>NextErrorReport</name> <operator>==</operator> <name>NumErrorReports</name></expr>;</return>
};

<if_stmt><if>if <condition>(<expr><name>MinDistance</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>CheckOOB</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>BlockBegin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>I</name> <init>= <expr><call><name><name>Max</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MinDistance</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>MaxDistance</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>CheckOOB</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>BlockBegin</name></name> <operator>+</operator> <name>I</name> <operator>*</operator> <name><name>Info</name><operator>.</operator><name>BlockSize</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>CheckOOB</name><argument_list>(<argument><expr><name><name>Info</name><operator>.</operator><name>BlockBegin</name></name> <operator>-</operator> <name>I</name> <operator>*</operator> <name><name>Info</name><operator>.</operator><name>BlockSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
}

static <function><type><name>void</name></type> <name>getRingBufferErrorInfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>scudo_error_info</name></name> <modifier>*</modifier></type><name>ErrorInfo</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>&amp;</modifier></type><name>NextErrorReport</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>FaultAddr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackDepot</name> <modifier>*</modifier></type><name>Depot</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RingBufferPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>RingBuffer</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>AllocationRingBuffer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RingBufferPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Pos</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RingBuffer</name><operator>-&gt;</operator><name>Pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><name>Pos</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>Pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>AllocationRingBuffer</name><operator>::</operator><name>NumEntries</name> <operator>&amp;&amp;</operator>
<name>NextErrorReport</name> <operator>!=</operator> <name>NumErrorReports</name></expr>;</condition>
<incr><expr><operator>--</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>RingBuffer</name><operator>-&gt;</operator><name>Entries</name><index>[<expr><name>I</name> <operator>%</operator> <name>AllocationRingBuffer</name><operator>::</operator><name>NumEntries</name></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>EntryPtr</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>Ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EntryPtr</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>UntaggedEntryPtr</name> <init>= <expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>EntryPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>EntrySize</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>AllocationTrace</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationTrace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>AllocationTid</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>AllocationTid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>DeallocationTrace</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>DeallocationTrace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>DeallocationTid</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>-&gt;</operator><name>DeallocationTid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>DeallocationTid</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>FaultAddr</name> <operator>&lt;</operator> <name>EntryPtr</name> <operator>||</operator> <name>FaultAddr</name> <operator>&gt;=</operator> <name>EntryPtr</name> <operator>+</operator> <name>EntrySize</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>FaultAddr</name> <operator>&lt;</operator> <name>EntryPtr</name> <operator>-</operator> <call><name>getPageSizeCached</name><argument_list>()</argument_list></call> <operator>||</operator>
<name>FaultAddr</name> <operator>&gt;=</operator> <name>EntryPtr</name> <operator>+</operator> <name>EntrySize</name> <operator>+</operator> <call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>Found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>J</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>J</name> <operator>!=</operator> <name>NextErrorReport</name></expr>;</condition> <incr><expr><operator>++</operator><name>J</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ErrorInfo</name><operator>-&gt;</operator><name>reports</name><index>[<expr><name>J</name></expr>]</index></name><operator>.</operator><name>allocation_address</name> <operator>==</operator> <name>UntaggedEntryPtr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>Found</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>R</name> <operator>=</operator> <operator>&amp;</operator><name><name>ErrorInfo</name><operator>-&gt;</operator><name>reports</name><index>[<expr><name>NextErrorReport</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>DeallocationTid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>error_type</name></name> <operator>=</operator> <name>USE_AFTER_FREE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>FaultAddr</name> <operator>&lt;</operator> <name>EntryPtr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>error_type</name></name> <operator>=</operator> <name>BUFFER_UNDERFLOW</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>error_type</name></name> <operator>=</operator> <name>BUFFER_OVERFLOW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_address</name></name> <operator>=</operator> <name>UntaggedEntryPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_size</name></name> <operator>=</operator> <name>EntrySize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>collectTraceMaybe</name><argument_list>(<argument><expr><name>Depot</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_trace</name></name></expr></argument>, <argument><expr><name>AllocationTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>allocation_tid</name></name> <operator>=</operator> <name>AllocationTid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>collectTraceMaybe</name><argument_list>(<argument><expr><name>Depot</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>deallocation_trace</name></name></expr></argument>, <argument><expr><name>DeallocationTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>deallocation_tid</name></name> <operator>=</operator> <name>DeallocationTid</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>uptr</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><name>ScopedString</name> <modifier>*</modifier></type><name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Primary</name><operator>.</operator><name>getStats</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Secondary</name><operator>.</operator><name>getStats</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Quarantine</name><operator>.</operator><name>getStats</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Str</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
