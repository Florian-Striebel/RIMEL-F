<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_BITVECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_BITVECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>basic_int_t</name> <operator>=</operator> <name>uptr</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BasicBitVector</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>SizeEnum</name> : <type><name>uptr</name></type> <block>{ <decl><name>kSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>basic_int_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl> }</block>;</enum>

<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>bits_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setAll</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>bits_</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>basic_int_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>bits_</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>bool</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>old</name> <init>= <expr><name>bits_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_</name> <operator>|=</operator> <call><name>mask</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bits_</name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>clearBit</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>old</name> <init>= <expr><name>bits_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_</name> <operator>&amp;=</operator> <operator>~</operator><call><name>mask</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bits_</name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>getBit</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>(</operator><name>bits_</name> <operator>&amp;</operator> <call><name>mask</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>getAndClearFirstOne</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name>LeastSignificantSetBitIndex</name><argument_list>(<argument><expr><name>bits_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clearBit</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setUnion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BasicBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>old</name> <init>= <expr><name>bits_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_</name> <operator>|=</operator> <name><name>v</name><operator>.</operator><name>bits_</name></name></expr>;</expr_stmt>
<return>return <expr><name>bits_</name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setIntersection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BasicBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>old</name> <init>= <expr><name>bits_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_</name> <operator>&amp;=</operator> <name><name>v</name><operator>.</operator><name>bits_</name></name></expr>;</expr_stmt>
<return>return <expr><name>bits_</name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setDifference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BasicBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>old</name> <init>= <expr><name>bits_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_</name> <operator>&amp;=</operator> <operator>~</operator><name><name>v</name><operator>.</operator><name>bits_</name></name></expr>;</expr_stmt>
<return>return <expr><name>bits_</name> <operator>!=</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BasicBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>bits_</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>bits_</name></name></expr>;</expr_stmt> </block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>intersectsWith</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BasicBitVector</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><name>bits_</name> <operator>&amp;</operator> <name><name>v</name><operator>.</operator><name>bits_</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Iterator</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Iterator</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BasicBitVector</name> <operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>bv_</name><argument_list>(<argument>bv</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>hasNext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>bv_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>uptr</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>bv_</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>bv_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>BasicBitVector</name></type> <name>bv_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>mask</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>basic_int_t</name><operator>)</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>idx</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>basic_int_t</name></type> <name>bits_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>uptr</name> <name>kLevel1Size</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>class</name> <name>BV</name> <operator>=</operator> <name><name>BasicBitVector</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>class</name></type> <name>TwoLevelBitVector</name> <block>{<block_content>





<label><name>public</name>:</label>
<enum>enum <name>SizeEnum</name> : <type><name>uptr</name></type> <block>{ <decl><name>kSize</name> <init>= <expr><name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <name>kLevel1Size</name></expr></init></decl> }</block>;</enum>


<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kSize</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>setAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <name>BV</name><operator>::</operator><name>kSize</name></expr>;</condition> <incr><expr><name>i1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>setAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l1_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>bool</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><call><name>idx0</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name>idx1</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i2</name> <init>= <expr><call><name>idx2</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>clearBit</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><call><name>idx0</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name>idx1</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i2</name> <init>= <expr><call><name>idx2</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>clearBit</name><argument_list>(<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>clearBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>getBit</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><call><name>idx0</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name>idx1</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i2</name> <init>= <expr><call><name>idx2</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>getAndClearFirstOne</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>getAndClearFirstOne</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i2</name> <init>= <expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>getAndClearFirstOne</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>i0</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>+</operator> <name>i1</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>+</operator> <name>i2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setUnion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TwoLevelBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BV</name></type> <name>t</name> <init>= <expr><name><name>v</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>setBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>setUnion</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setIntersection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TwoLevelBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>setIntersection</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BV</name></type> <name>t</name> <init>= <expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>setIntersection</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>clearBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>setDifference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TwoLevelBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BV</name></type> <name>t</name> <init>= <expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>setDifference</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>clearBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TwoLevelBitVector</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setUnion</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>intersectsWith</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TwoLevelBitVector</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>BV</name></type> <name>t</name> <init>= <expr><name><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>i1</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><call><name>intersectsWith</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>l2_</name><index>[<expr><name>i0</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Iterator</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Iterator</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>Iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TwoLevelBitVector</name> <operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>bv_</name><argument_list>(<argument><expr><name>bv</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>i0_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>i1_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>it1_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>it2_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasNext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>it1_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><name>i0_</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bv_</name><operator>.</operator><name>l1_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>it1_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>it2_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i0_</name> <operator>&lt;</operator> <name>kLevel1Size</name></expr>;</condition> <incr><expr><name>i0_</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bv_</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0_</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>it1_</name> <operator>=</operator> <name>typename</name> <name>BV</name><operator>::</operator><call><name>Iterator</name><argument_list>(<argument><expr><name><name>bv_</name><operator>.</operator><name>l1_</name><index>[<expr><name>i0_</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>it2_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name><name>it1_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i1_</name> <operator>=</operator> <call><name><name>it1_</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it2_</name> <operator>=</operator> <name>typename</name> <name>BV</name><operator>::</operator><call><name>Iterator</name><argument_list>(<argument><expr><name><name>bv_</name><operator>.</operator><name>l2_</name><index>[<expr><name>i0_</name></expr>]</index><index>[<expr><name>i1_</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name><name>it2_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i2</name> <init>= <expr><call><name><name>it2_</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>i0_</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>+</operator> <name>i1_</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name> <operator>+</operator> <name>i2</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>it1_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>it2_</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i0_</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>TwoLevelBitVector</name> <modifier>&amp;</modifier></type><name>bv_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>i0_</name></decl>, <decl><type ref="prev"/><name>i1_</name></decl>;</decl_stmt>
<expr_stmt><expr><name>typename</name> <name>BV</name><operator>::</operator><name>Iterator</name> <name>it1_</name></expr><operator>,</operator> <expr><name>it2_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>check</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>idx0</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>idx</name> <operator>/</operator> <operator>(</operator><name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <name>BV</name><operator>::</operator><name>kSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>kLevel1Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>idx1</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><operator>(</operator><name>idx</name> <operator>/</operator> <name>BV</name><operator>::</operator><name>kSize</name><operator>)</operator> <operator>%</operator> <name>BV</name><operator>::</operator><name>kSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>BV</name><operator>::</operator><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>idx2</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><name>idx</name> <operator>%</operator> <name>BV</name><operator>::</operator><name>kSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_LE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>BV</name><operator>::</operator><name>kSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>BV</name></type> <name><name>l1_</name><index>[<expr><name>kLevel1Size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BV</name></type> <name><name>l2_</name><index>[<expr><name>kLevel1Size</name></expr>]</index><index>[<expr><name>BV</name><operator>::</operator><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
