<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/vector.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_VECTOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_VECTOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>VectorNoCtor</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>InitialCapacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CapacityBytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LocalData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reserve</name><argument_list>(<argument><expr><name>InitialCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Data</name> <operator>!=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>CapacityBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>T</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>uptr</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LT</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Element</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><call><name>capacity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>==</operator> <call><name>capacity</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NewCapacity</name> <init>= <expr><call><name>roundUpToPowerOfTwo</name><argument_list>(<argument><expr><name>Size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>NewCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Data</name><index>[<expr><name>Size</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Element</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>T</name> <modifier>&amp;</modifier></type><name>back</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>pop_back</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>T</name> <modifier>*</modifier></type><name>data</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Data</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>uptr</name> <macro><name>capacity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CapacityBytes</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>NewSize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NewSize</name> <operator>&gt;</operator> <call><name>capacity</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reallocate</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>NewSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>NewSize</name> <operator>&gt;</operator> <name>Size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reserve</name><argument_list>(<argument><expr><name>NewSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Data</name><index>[<expr><name>Size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>NewSize</name> <operator>-</operator> <name>Size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>NewSize</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>data</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>T</name> <modifier>*</modifier></type><name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>data</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>data</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>T</name> <modifier>*</modifier></type><name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>data</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>reallocate</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>NewCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_GT</name><argument_list>(<argument><expr><name>NewCapacity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>NewCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NewCapacity</name> <operator>=</operator> <call><name>roundUpTo</name><argument_list>(<argument><expr><name>NewCapacity</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>NewData</name> <init>=
<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>map</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>NewCapacity</name></expr></argument>, <argument><expr><literal type="string">"scudo:vector"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>NewData</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name>NewData</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CapacityBytes</name> <operator>=</operator> <name>NewCapacity</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name><name>LocalData</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CapacityBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Vector</name> <range>: <expr><name>public</name> <name><name>VectorNoCtor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>Vector</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>VectorNoCtor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>init</name><argument_list>()</argument_list></call></expr>; }</block>
<name>explicit</name> <macro><name>Vector</name><argument_list>(<argument>uptr Count</argument>)</argument_list></macro> <block>{
<expr><name><name>VectorNoCtor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>init</name><argument_list>(<argument><expr><name>Count</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>this</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>Count</name></expr></argument>)</argument_list></call></expr>;
}</block>
<operator>~</operator><macro><name>Vector</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>VectorNoCtor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>destroy</name><argument_list>()</argument_list></call></expr>; }</block>

<call><name>Vector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Vector</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>Vector</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Vector</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
<expr><call><name>Vector</name><argument_list>(<argument><expr><name>Vector</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>Vector</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>Vector</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
