<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/safestack/safestack_util.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SAFESTACK_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFESTACK_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>safestack</name> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFS_CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(a)) { fprintf(stderr, "safestack CHECK failed: %s:%d %s\n", __FILE__, __LINE__, #a); abort(); }; } while (false)</cpp:value></cpp:define>








<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>RoundUpTo</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>boundary</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SFS_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>boundary</name> <operator>&amp;</operator> <operator>(</operator><name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>MutexLock</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>MutexLock</name><argument_list>(<argument><expr><name>pthread_mutex_t</name> <operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>mutex_</name><argument_list>(<argument>&amp;mutex</argument>)</argument_list></macro> <block>{
<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
}</block>
<operator>~</operator><macro><name>MutexLock</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>pthread_mutex_t</name> <operator>*</operator><name>mutex_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
