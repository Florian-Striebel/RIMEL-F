<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/orc/c_api.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ORC_RT_C_API_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_API_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_STRICT_PROTOTYPES_BEGIN</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic push") _Pragma("clang diagnostic error \"-Wstrict-prototypes\"")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_STRICT_PROTOTYPES_END</name></cpp:macro> <cpp:value>_Pragma("clang diagnostic pop")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_STRICT_PROTOTYPES_BEGIN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_STRICT_PROTOTYPES_END</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_EXTERN_C_BEGIN</name></cpp:macro> <cpp:value>extern "C" { ORC_RT_C_STRICT_PROTOTYPES_BEGIN</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_EXTERN_C_END</name></cpp:macro> <cpp:value>ORC_RT_C_STRICT_PROTOTYPES_END }</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_EXTERN_C_BEGIN</name></cpp:macro> <cpp:value>ORC_RT_C_STRICT_PROTOTYPES_BEGIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORC_RT_C_EXTERN_C_END</name></cpp:macro> <cpp:value>ORC_RT_C_STRICT_PROTOTYPES_END</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ORC_RT_C_EXTERN_C_BEGIN</name></macro>

<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ValuePtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Value</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ValuePtr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>__orc_rt_CWrapperFunctionResultDataUnion</name>;</typedef>


















<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>__orc_rt_CWrapperFunctionResultDataUnion</name></type> <name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name></decl>;</decl_stmt>
}</block></struct></type> <name>__orc_rt_CWrapperFunctionResult</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__orc_rt_CSharedOpaqueJITProcessControl</name></name>
<modifier>*</modifier></type><name>__orc_rt_SharedJITProcessControlRef</name>;</typedef>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>__orc_rt_CWrapperFunctionResultInit</name><parameter_list>(<parameter><decl><type><name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__orc_rt_CWrapperFunctionResultAllocate</name><parameter_list>(<parameter><decl><type><name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__orc_rt_CWrapperFunctionResult</name></type>
<name>__orc_rt_CreateCWrapperFunctionResultFromRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>__orc_rt_CWrapperFunctionResult</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <name>Size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>R</name><operator>.</operator><name>Size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Tmp</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>=</operator> <name>Tmp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__orc_rt_CWrapperFunctionResult</name></type>
<name>__orc_rt_CreateCWrapperFunctionResultFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__orc_rt_CreateCWrapperFunctionResultFromRange</name><argument_list>(<argument><expr><name>Source</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>Source</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__orc_rt_CWrapperFunctionResult</name></type>
<name>__orc_rt_CreateCWrapperFunctionResultFromOutOfBandError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ErrMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>__orc_rt_CWrapperFunctionResult</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Tmp</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ErrMsg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>Tmp</name></expr></argument>, <argument><expr><name>ErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>=</operator> <name>Tmp</name></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>__orc_rt_DisposeCWrapperFunctionResult</name><parameter_list>(<parameter><decl><type><name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<operator>(</operator><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__orc_rt_CWrapperFunctionResultData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>==</operator> <name>nullptr</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Cannot get data for out-of-band error value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name></expr> </then><else>: <expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Value</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>__orc_rt_CWrapperFunctionResultSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>==</operator> <name>nullptr</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Cannot get size for out-of-band error value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>__orc_rt_CWrapperFunctionResultEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__orc_rt_CWrapperFunctionResultGetOutOfBandError</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>__orc_rt_CWrapperFunctionResult</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>R</name><operator>-&gt;</operator><name>Size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>R</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>ValuePtr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<expr><name>ORC_RT_C_EXTERN_C_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
