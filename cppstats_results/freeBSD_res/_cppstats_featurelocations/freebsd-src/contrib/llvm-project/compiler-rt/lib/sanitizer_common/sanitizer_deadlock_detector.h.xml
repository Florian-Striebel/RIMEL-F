<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_DEADLOCK_DETECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_DEADLOCK_DETECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_bvgraph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>BV</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DeadlockDetectorTLS</name> <block>{<block_content>
<label><name>public</name>:</label>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>bv_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>epoch_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_recursive_locks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_all_locks_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>bv_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>ensureCurrentEpoch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>current_epoch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>epoch_</name> <operator>==</operator> <name>current_epoch</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>bv_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>epoch_</name> <operator>=</operator> <name>current_epoch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_recursive_locks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_all_locks_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uptr</name> <macro><name>getEpoch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>epoch_</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>bool</name></type> <name>addLock</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>lock_id</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>current_epoch</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>epoch_</name></expr></argument>, <argument><expr><name>current_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bv_</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>lock_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>n_recursive_locks</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>recursive_locks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>recursive_locks</name><index>[<expr><name>n_recursive_locks</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>lock_id</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>n_all_locks_</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>all_locks_with_contexts_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>u32</name></type> <name>lock_id_short</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lock_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LockWithContext</name></type> <name>l</name> <init>= <expr><block>{<expr><name>lock_id_short</name></expr>, <expr><name>stk</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>n_all_locks_</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeLock</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>lock_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_recursive_locks</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>sptr</name></type> <name>i</name> <init>= <expr><name>n_recursive_locks</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>recursive_locks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lock_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_recursive_locks</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Swap</name><argument_list>(<argument><expr><name><name>recursive_locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>recursive_locks</name><index>[<expr><name>n_recursive_locks</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bv_</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>lock_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n_all_locks_</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>sptr</name></type> <name>i</name> <init>= <expr><name>n_all_locks_</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name> <operator>==</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lock_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Swap</name><argument_list>(<argument><expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>n_all_locks_</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_all_locks_</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>u32</name></type> <name>findLockContext</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>lock_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_all_locks_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name> <operator>==</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lock_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stk</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>BV</name> <modifier>&amp;</modifier></type><name>getLocks</name><argument_list>(<argument><expr><name>uptr</name> <name>current_epoch</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>epoch_</name></expr></argument>, <argument><expr><name>current_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bv_</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>getNumLocks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>n_all_locks_</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>getLock</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name><name>all_locks_with_contexts_</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>lock</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>BV</name></type> <name>bv_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>epoch_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>recursive_locks</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_recursive_locks</name></decl>;</decl_stmt>
<struct>struct <name>LockWithContext</name> <block>{
<decl_stmt><decl><type><name>u32</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stk</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>LockWithContext</name></type> <name><name>all_locks_with_contexts_</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_all_locks_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>BV</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DeadlockDetector</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>BV</name></type> <name>BitVector</name>;</typedef>

<expr_stmt><expr><name>uptr</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>g_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>current_epoch_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>available_nodes_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>recycled_nodes_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>g_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_edges_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>uptr</name></type> <name>newNode</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>available_nodes_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getAvailableNode</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>recycled_nodes_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>sptr</name></type> <name>i</name> <init>= <expr><name>n_edges_</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>recycled_nodes_</name><operator>.</operator><name>getBit</name></name><argument_list>(<argument><expr><name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name><name>recycled_nodes_</name><operator>.</operator><name>getBit</name></name><argument_list>(<argument><expr><name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Swap</name><argument_list>(<argument><expr><name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>edges_</name><index>[<expr><name>n_edges_</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_edges_</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name><name>available_nodes_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>g_</name><operator>.</operator><name>removeEdgesTo</name></name><argument_list>(<argument><expr><name>recycled_nodes_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>available_nodes_</name><operator>.</operator><name>setUnion</name></name><argument_list>(<argument><expr><name>recycled_nodes_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>recycled_nodes_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getAvailableNode</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_epoch_</name> <operator>+=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>recycled_nodes_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>available_nodes_</name><operator>.</operator><name>setAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>g_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_edges_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>getAvailableNode</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>uptr</name></type> <name>getData</name><argument_list>(<argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name><name>data_</name><index>[<expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>nodeBelongsToCurrentEpoch</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>node</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>node</name> <operator>/</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name>size</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>current_epoch_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeNode</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>available_nodes_</name><operator>.</operator><name>getBit</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name><name>recycled_nodes_</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>g_</name><operator>.</operator><name>removeEdgesFrom</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ensureCurrentEpoch</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>ensureCurrentEpoch</name></name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>onLockBefore</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ensureCurrentEpoch</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cur_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>g_</name><operator>.</operator><name>isReachable</name></name><argument_list>(<argument><expr><name>cur_idx</name></expr></argument>, <argument><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getLocks</name></name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>u32</name></type> <name>findLockContext</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>dtls</name><operator>-&gt;</operator><name>findLockContext</name></name><argument_list>(<argument><expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>onLockAfter</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ensureCurrentEpoch</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cur_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>addLock</name></name><argument_list>(<argument><expr><name>cur_idx</name></expr></argument>, <argument><expr><name>current_epoch_</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>hasAllEdges</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>local_epoch</name> <init>= <expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getEpoch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_node</name> <operator>&amp;&amp;</operator> <name>local_epoch</name> <operator>==</operator> <name>current_epoch_</name> <operator>&amp;&amp;</operator>
<name>local_epoch</name> <operator>==</operator> <call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>cur_idx</name> <init>= <expr><call><name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getNumLocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>g_</name><operator>.</operator><name>hasEdge</name></name><argument_list>(<argument><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getLock</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cur_idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>uptr</name></type> <name>addEdges</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unique_tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ensureCurrentEpoch</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cur_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>added_edges</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_added_edges</name> <init>= <expr><call><name><name>g_</name><operator>.</operator><name>addEdges</name></name><argument_list>(<argument><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getLocks</name></name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cur_idx</name></expr></argument>,
<argument><expr><name>added_edges</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>added_edges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_added_edges</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_edges_</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>edges_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Edge</name></type> <name>e</name> <init>= <expr><block>{<expr><operator>(</operator><name>u16</name><operator>)</operator><name><name>added_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><operator>(</operator><name>u16</name><operator>)</operator><name>cur_idx</name></expr>,
<expr><call><name><name>dtls</name><operator>-&gt;</operator><name>findLockContext</name></name><argument_list>(<argument><expr><name><name>added_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>stk</name></expr>,
<expr><name>unique_tid</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>edges_</name><index>[<expr><name>n_edges_</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>n_added_edges</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>findEdge</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>from_node</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>to_node</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>stk_from</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>stk_to</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unique_tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>from_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>from_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>to_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>to_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_edges_</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>==</operator> <name>from_idx</name> <operator>&amp;&amp;</operator> <name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>==</operator> <name>to_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>stk_from</name> <operator>=</operator> <name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stk_from</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stk_to</name> <operator>=</operator> <name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stk_to</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>unique_tid</name> <operator>=</operator> <name><name>edges_</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unique_tid</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>onLock</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ensureCurrentEpoch</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_reachable</name> <init>= <expr><operator>!</operator><call><name>isHeld</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>onLockBefore</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>addEdges</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>onLockAfter</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>is_reachable</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>onTryLock</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ensureCurrentEpoch</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>cur_idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>addLock</name></name><argument_list>(<argument><expr><name>cur_idx</name></expr></argument>, <argument><expr><name>current_epoch_</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>onFirstLock</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dtls</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getEpoch</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dtls</name><operator>-&gt;</operator><name>getEpoch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>addLock</name></name><argument_list>(<argument><expr><call><name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>uptr</name></type> <name>findPathToLock</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>cur_node</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>path_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>tmp_bv_</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getLocks</name></name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>tmp_bv_</name><operator>.</operator><name>getBit</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>res</name> <init>= <expr><call><name><name>g_</name><operator>.</operator><name>findShortestPath</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>tmp_bv_</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>res</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>indexToNode</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>onUnlock</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getEpoch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>removeLock</name></name><argument_list>(<argument><expr><call><name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>onLockFast</name><parameter_list>(<parameter><decl><type><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>dtls</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>stk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasAllEdges</name><argument_list>(<argument><expr><name>dtls</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dtls</name><operator>-&gt;</operator><name>addLock</name></name><argument_list>(<argument><expr><call><name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>isHeld</name><argument_list>(<argument><expr><name><name>DeadlockDetectorTLS</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>dtls</name></expr></argument>, <argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>dtls</name><operator>-&gt;</operator><name>getLocks</name></name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBit</name><argument_list>(<argument><expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>uptr</name> <macro><name>testOnlyGetEpoch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>current_epoch_</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>testOnlyHasEdge</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>l2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>g_</name><operator>.</operator><name>hasEdge</name></name><argument_list>(<argument><expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nodeToIndex</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>testOnlyHasEdgeRaw</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>idx1</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>idx2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>g_</name><operator>.</operator><name>hasEdge</name></name><argument_list>(<argument><expr><name>idx1</name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Print</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>to</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>to</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>to</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>g_</name><operator>.</operator><name>hasEdge</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Printf</name><argument_list>(<argument><expr><literal type="string">" %zx =&gt; %zx\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>check_idx</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><call><name>CHECK_LT</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>check_node</name><argument_list>(<argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_GE</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EQ</name><argument_list>(<argument><expr><name>current_epoch_</name></expr></argument>, <argument><expr><call><name>nodeToEpoch</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>indexToNode</name><argument_list>(<argument><expr><name>uptr</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>check_idx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name> <operator>+</operator> <name>current_epoch_</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>node</name> <operator>%</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>nodeToIndex</name><argument_list>(<argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>check_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nodeToIndexUnchecked</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uptr</name></type> <name>nodeToEpoch</name><argument_list>(<argument><expr><name>uptr</name> <name>node</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>node</name> <operator>/</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>getAvailableNode</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>idx</name> <init>= <expr><call><name><name>available_nodes_</name><operator>.</operator><name>getAndClearFirstOne</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data_</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><call><name>indexToNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Edge</name> <block>{
<decl_stmt><decl><type><name>u16</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u16</name></type> <name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stk_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>stk_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unique_tid</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>uptr</name></type> <name>current_epoch_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BV</name></type> <name>available_nodes_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BV</name></type> <name>recycled_nodes_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BV</name></type> <name>tmp_bv_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>BVGraph</name><argument_list type="generic">&lt;<argument><expr><name>BV</name></expr></argument>&gt;</argument_list></name></type> <name>g_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name><name>data_</name><index>[<expr><name>BV</name><operator>::</operator><name>kSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Edge</name></type> <name><name>edges_</name><index>[<expr><name>BV</name><operator>::</operator><name>kSize</name> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>n_edges_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
