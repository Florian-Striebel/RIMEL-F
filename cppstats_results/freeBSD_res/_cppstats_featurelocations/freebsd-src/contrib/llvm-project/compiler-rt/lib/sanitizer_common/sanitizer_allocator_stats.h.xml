<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_allocator_stats.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file must be included inside sanitizer_allocator.h</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <name>AllocatorStat</name> <block>{
<decl><name>AllocatorStatAllocated</name></decl>,
<decl><name>AllocatorStatMapped</name></decl>,
<decl><name>AllocatorStatCount</name></decl>
}</block>;</enum>

<typedef>typedef <type><name>uptr</name></type> <name><name>AllocatorStatCounters</name><index>[<expr><name>AllocatorStatCount</name></expr>]</index></name>;</typedef>


<decl_stmt><decl><type><name>class</name></type> <name>AllocatorStats</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>InitLinkerInitialized</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>AllocatorStat</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Sub</name><parameter_list>(<parameter><decl><type><name>AllocatorStat</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>AllocatorStat</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>uptr</name></type> <name>Get</name><argument_list>(<argument><expr><name>AllocatorStat</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats_</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AllocatorGlobalStats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>next_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllocatorStats</name> <modifier>*</modifier></type><name>prev_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name><name>stats_</name><index>[<expr><name>AllocatorStatCount</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AllocatorGlobalStats</name> <range>: <expr><name>public</name> <name>AllocatorStats</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>InitLinkerInitialized</name><argument_list>()</argument_list></macro> <block>{
<expr><name>next_</name> <operator>=</operator> <name>this</name></expr>;
<expr><name>prev_</name> <operator>=</operator> <name>this</name></expr>;
}</block>
<name>void</name> <macro><name>Init</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><call><name>InitLinkerInitialized</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Register</name><argument_list>(<argument>AllocatorStats *s</argument>)</argument_list></macro> <block>{
<expr><name>SpinMutexLock</name> <call><name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mu_</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>s</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name>next_</name></expr>;
<expr><name><name>s</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name>this</name></expr>;
<expr><name><name>next_</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name>s</name></expr>;
<expr><name>next_</name> <operator>=</operator> <name>s</name></expr>;
}</block>

<name>void</name> <macro><name>Unregister</name><argument_list>(<argument>AllocatorStats *s</argument>)</argument_list></macro> <block>{
<expr><name>SpinMutexLock</name> <call><name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mu_</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>s</name><operator>-&gt;</operator><name>prev_</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_</name></name></expr>;
<expr><name><name>s</name><operator>-&gt;</operator><name>next_</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_</name></name></expr>;
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AllocatorStatCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Add</name><argument_list>(<argument><expr><call><name>AllocatorStat</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><call><name>AllocatorStat</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>

<name>void</name> <macro><name>Get</name><argument_list>(<argument>AllocatorStatCounters s</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>internal_memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AllocatorStatCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><name>SpinMutexLock</name> <call><name>l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mu_</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>AllocatorStats</name> <operator>*</operator><name>stats</name> <operator>=</operator> <name>this</name></expr>;
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AllocatorStatCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name><name>stats</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><call><name>AllocatorStat</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>stats</name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>next_</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stats</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

for (int i = 0</block><empty_stmt>;</empty_stmt></for> <name>i</name> <operator>&lt;</operator> <name>AllocatorStatCount</name></block></expr>; <expr><name>i</name><operator>++</operator></expr>)
<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>sptr</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></block></expr></range></decl>;</decl_stmt>
}

private:
<decl_stmt><decl><type><name>mutable</name> <name>StaticSpinMutex</name></type> <name>mu_</name></decl>;</decl_stmt>
};


</unit>
