<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/ppc/fixunstfdi.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DD.h"</cpp:file></cpp:include>

<function><type><name>uint64_t</name></type> <name>__fixunstfdi</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DD</name></type> <name>x</name> <init>= <expr><block>{<expr><operator>.</operator><name>ld</name> <operator>=</operator> <name>input</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>doublebits</name></type> <name>hibits</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>highWordMinusOne</name> <init>=
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>hibits</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x3ff00000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x04000000</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>highWordMinusOne</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>unbiasedHeadExponent</name> <init>= <expr><name>highWordMinusOne</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name> <init>= <expr><name><name>hibits</name><operator>.</operator><name>x</name></name> <operator>&amp;</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x000fffffffffffff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0010000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>&lt;&lt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0.0</literal> <operator>!=</operator> <name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>doublebits</name></type> <name>lobits</name> <init>= <expr><block>{<expr><operator>.</operator><name>d</name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>lo</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tailMantissa</name> <init>= <expr><name><name>lobits</name><operator>.</operator><name>x</name></name> <operator>&amp;</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x000fffffffffffff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tailMantissa</name> <operator>|=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x0010000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>negationMask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>lobits</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tailMantissa</name> <operator>=</operator> <operator>(</operator><name>tailMantissa</name> <operator>^</operator> <name>negationMask</name><operator>)</operator> <operator>-</operator> <name>negationMask</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>biasedTailExponent</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>lobits</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>tailMantissa</name> <operator>&gt;&gt;=</operator>
<operator>(</operator><name>unbiasedHeadExponent</name> <operator>-</operator> <operator>(</operator><name>biasedTailExponent</name> <operator>-</operator> <operator>(</operator><literal type="number">1023</literal> <operator>-</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>tailMantissa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>unbiasedHeadExponent</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">1.0</literal> <operator>&gt;</operator> <name><name>x</name><operator>.</operator><name>s</name><operator>.</operator><name>hi</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
