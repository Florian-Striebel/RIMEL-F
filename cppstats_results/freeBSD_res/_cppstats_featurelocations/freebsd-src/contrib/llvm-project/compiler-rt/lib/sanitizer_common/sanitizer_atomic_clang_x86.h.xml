<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_atomic_clang_x86.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_ATOMIC_CLANG_X86_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_ATOMIC_CLANG_X86_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>proc_yield</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("pause");</asm></block_content></block></for>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_load</name><argument_list>(
<argument>const volatile T *a</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator> <operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_consume</name>
<operator>|</operator> <name>memory_order_acquire</name> <operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>v</name></expr>;

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (mo == memory_order_consume</block></if></if_stmt>)</block_content> <block>{<block_content>


<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<expr_stmt/>}</block_content> else if (mo == memory_order_acquire</block></block></if></if_stmt>) <block>{
<expr><name>__asm__</name> <specifier>__volatile__</specifier><operator>(</operator><literal type="string">""</literal> <operator>::</operator><operator>:</operator> <literal type="string">"memory"</literal><operator>)</operator></expr>;
<expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;

<expr><name>__asm__</name> <specifier>__volatile__</specifier><operator>(</operator><literal type="string">""</literal> <operator>::</operator><operator>:</operator> <literal type="string">"memory"</literal><operator>)</operator></expr>;
}</block></block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt> <if_stmt><else>else <block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>(
"movq %1, %%mm0;"
"movq %%mm0, %0;"
"emms;"
: "=m" (v)
: "m" (a-&gt;val_dont_use)
:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"mm0", "mm1", "mm2", "mm3", "mm4", "mm5", "mm6", "mm7",
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"memory");</asm>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
<specifier>inline</specifier> <name>void</name> <macro><name>atomic_store</name><argument_list>(<argument>volatile T *a</argument>, <argument>typename T::Type v</argument>, <argument>memory_order mo</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><name>mo</name> <operator>&amp;</operator> <operator>(</operator><name>memory_order_relaxed</name> <operator>|</operator> <name>memory_order_release</name>
<operator>|</operator> <name>memory_order_seq_cst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uptr</name><operator>)</operator><name>a</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_release</name></expr>)</condition> <block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
</block_content>}</block></if> <else>else <block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>("" ::: "memory");</asm>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>val_dont_use</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
} else <block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>(
"movq %1, %%mm0;"
"movq %%mm0, %0;"
"emms;"
: "=m" (a-&gt;val_dont_use)
: "m" (v)
:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"mm0", "mm1", "mm2", "mm3", "mm4", "mm5", "mm6", "mm7",
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"memory");</asm>
<if_stmt><if>if <condition>(<expr><name>mo</name> <operator>==</operator> <name>memory_order_seq_cst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
