<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/builtins/arm/fp_mode.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fp_mode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_TONEAREST</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_UPWARD</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_DOWNWARD</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_TOWARDZERO</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_RMODE_MASK</name></cpp:macro> <cpp:value>(ARM_TONEAREST | ARM_UPWARD | ARM_DOWNWARD | ARM_TOWARDZERO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_RMODE_SHIFT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_INEXACT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>CRT_FE_ROUND_MODE</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>weak</name><operator>)</operator></expr></argument>)</argument_list> <name>__arm_fe_default_rmode</name> <init>=
<expr><name>CRT_FE_TONEAREST</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CRT_FE_ROUND_MODE</name></type> <name>__fe_getround</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpscr</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("vmrs %0, fpscr" : "=r" (fpscr));</asm>
<expr_stmt><expr><name>fpscr</name> <operator>=</operator> <name>fpscr</name> <operator>&gt;&gt;</operator> <name>ARM_RMODE_SHIFT</name> <operator>&amp;</operator> <name>ARM_RMODE_MASK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>fpscr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARM_UPWARD</name></expr>:</case>
<return>return <expr><name>CRT_FE_UPWARD</name></expr>;</return>
<case>case <expr><name>ARM_DOWNWARD</name></expr>:</case>
<return>return <expr><name>CRT_FE_DOWNWARD</name></expr>;</return>
<case>case <expr><name>ARM_TOWARDZERO</name></expr>:</case>
<return>return <expr><name>CRT_FE_TOWARDZERO</name></expr>;</return>
<case>case <expr><name>ARM_TONEAREST</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>CRT_FE_TONEAREST</name></expr>;</return>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>__arm_fe_default_rmode</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>__fe_raise_inexact</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fpscr</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("vmrs %0, fpscr" : "=r" (fpscr));</asm>
<asm>__asm__ <specifier>__volatile__</specifier>("vmsr fpscr, %0" : : "ri" (fpscr | ARM_INEXACT));</asm>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
