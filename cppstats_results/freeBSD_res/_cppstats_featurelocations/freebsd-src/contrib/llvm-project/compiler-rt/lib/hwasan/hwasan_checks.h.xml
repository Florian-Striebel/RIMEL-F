<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/hwasan/hwasan_checks.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWASAN_CHECKS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWASAN_CHECKS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwasan_mapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>__hwasan</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>X</name></expr></argument>&gt;</argument_list></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> static <name>void</name> <name>SigTrap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>register</specifier> <name>uptr</name> <name>x0</name></type> <name>asm</name><argument_list>(<argument><expr><literal type="string">"x0"</literal></expr></argument>)</argument_list> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<asm>asm("brk %1\n\t" ::"r"(x0), "n"(0x900 + X));</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<asm>asm <specifier>volatile</specifier>(
"int3\n"
"nopl %c0(%%rax)\n" ::"n"(0x40 + X),
"D"(p));</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>X</name></expr></argument>&gt;</argument_list></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> static <name>void</name> <name>SigTrap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name>uptr</name> <name>x0</name></type> <name>asm</name><argument_list>(<argument><expr><literal type="string">"x0"</literal></expr></argument>)</argument_list> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uptr</name> <name>x1</name></type> <name>asm</name><argument_list>(<argument><expr><literal type="string">"x1"</literal></expr></argument>)</argument_list> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<asm>asm("brk %2\n\t" ::"r"(x0), "r"(x1), "n"(0x900 + X));</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<asm>asm <specifier>volatile</specifier>(
"int3\n"
"nopl %c0(%%rax)\n" ::"n"(0x40 + X),
"D"(p), "S"(size));</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<macro><name>__attribute__</name><argument_list>(<argument>(always_inline, nodebug)</argument>)</argument_list></macro> <function><type><specifier>static</specifier> <name>bool</name></type> <name>PossiblyShortTagMatches</name><parameter_list>(
<parameter><decl><type><name>tag_t</name></type> <name>mem_tag</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tag_t</name></type> <name>ptr_tag</name> <init>= <expr><call><name>GetTagFromPointer</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr_tag</name> <operator>==</operator> <name>mem_tag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mem_tag</name> <operator>&gt;=</operator> <name>kShadowAlignment</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>&amp;</operator> <operator>(</operator><name>kShadowAlignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>sz</name> <operator>&gt;</operator> <name>mem_tag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>UntagAddr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>*</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>|</operator> <operator>(</operator><name>kShadowAlignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>ptr_tag</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ErrorAction</name> <block>{<block_content> <expr_stmt><expr><name>Abort</name></expr><operator>,</operator> <expr><name>Recover</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>AccessType</name> <block>{<block_content> <expr_stmt><expr><name>Load</name></expr><operator>,</operator> <expr><name>Store</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>ErrorAction</name> <name>EA</name></expr></argument>, <argument><expr><name>AccessType</name> <name>AT</name></expr></argument>, <argument><expr><name>unsigned</name> <name>LogSize</name></expr></argument>&gt;</argument_list></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>,</operator> <name>nodebug</name><operator>)</operator></expr></argument>)</argument_list> static <name>void</name> <name>CheckAddress</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InTaggableRegion</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ptr_raw</name> <init>= <expr><name>p</name> <operator>&amp;</operator> <operator>~</operator><name>kAddressTagMask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tag_t</name></type> <name>mem_tag</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tag_t</name> <operator>*</operator><operator>)</operator><call><name>MemToShadow</name><argument_list>(<argument><expr><name>ptr_raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>PossiblyShortTagMatches</name><argument_list>(<argument><expr><name>mem_tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LogSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>SigTrap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Recover</name><operator>)</operator> <operator>+</operator>
<literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>AT</name> <operator>==</operator> <name>AccessType</name><operator>::</operator><name>Store</name><operator>)</operator> <operator>+</operator> <name>LogSize</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Abort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>ErrorAction</name> <name>EA</name></expr></argument>, <argument><expr><name>AccessType</name> <name>AT</name></expr></argument>&gt;</argument_list></name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>,</operator> <name>nodebug</name><operator>)</operator></expr></argument>)</argument_list> static <name>void</name> <name>CheckAddressSized</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>,
<argument><expr><name>uptr</name> <name>sz</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>InTaggableRegion</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>tag_t</name></type> <name>ptr_tag</name> <init>= <expr><call><name>GetTagFromPointer</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>ptr_raw</name> <init>= <expr><name>p</name> <operator>&amp;</operator> <operator>~</operator><name>kAddressTagMask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tag_t</name> <modifier>*</modifier></type><name>shadow_first</name> <init>= <expr><operator>(</operator><name>tag_t</name> <operator>*</operator><operator>)</operator><call><name>MemToShadow</name><argument_list>(<argument><expr><name>ptr_raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tag_t</name> <modifier>*</modifier></type><name>shadow_last</name> <init>= <expr><operator>(</operator><name>tag_t</name> <operator>*</operator><operator>)</operator><call><name>MemToShadow</name><argument_list>(<argument><expr><name>ptr_raw</name> <operator>+</operator> <name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>tag_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>shadow_first</name></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>shadow_last</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>ptr_tag</name> <operator>!=</operator> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>SigTrap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Recover</name><operator>)</operator> <operator>+</operator>
<literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>AT</name> <operator>==</operator> <name>AccessType</name><operator>::</operator><name>Store</name><operator>)</operator> <operator>+</operator> <literal type="number">0xf</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Abort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<decl_stmt><decl><type><name>uptr</name></type> <name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>tail_sz</name> <init>= <expr><name>end</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>tail_sz</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>PossiblyShortTagMatches</name><argument_list>(
<argument><expr><operator>*</operator><name>shadow_last</name></expr></argument>, <argument><expr><name>end</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>kShadowAlignment</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>tail_sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>SigTrap</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Recover</name><operator>)</operator> <operator>+</operator>
<literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>AT</name> <operator>==</operator> <name>AccessType</name><operator>::</operator><name>Store</name><operator>)</operator> <operator>+</operator> <literal type="number">0xf</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>EA</name> <operator>==</operator> <name>ErrorAction</name><operator>::</operator><name>Abort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
