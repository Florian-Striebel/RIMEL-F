<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/secondary.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_SECONDARY_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_SECONDARY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memtag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>







<decl_stmt><decl><type><name>namespace</name></type> <name>LargeBlock</name> <block>{<block_content>

<struct>struct <macro><name>alignas</name><argument_list>(<argument>Max&lt;uptr&gt;(archSupportsMemoryTagging()
? archMemoryTagGranuleSize()
: <literal type="number">1</literal>,
<literal type="number">1U</literal> &lt;&lt; SCUDO_MIN_ALIGNMENT_LOG)</argument>)</argument_list></macro> <name>Header</name> <block>{
<expr_stmt><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>Prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>Next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommitBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommitSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapSize</name></decl>;</decl_stmt>
<expr_stmt><expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name>MapPlatformData</name> <name>Data</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Header</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>SCUDO_MIN_ALIGNMENT_LOG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>archSupportsMemoryTagging</name><argument_list>()</argument_list></call> <operator>||</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>Header</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <call><name>archMemoryTagGranuleSize</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>constexpr</name> <name>uptr</name></type> <name>getHeaderSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Header</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>uptr</name></type> <name>addHeaderTag</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>addFixedTag</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>Header</name> <modifier>*</modifier></type><name>getHeader</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>addHeaderTag</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>Header</name> <modifier>*</modifier></type><name>getHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>getHeader</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>unmap</name><argument_list>(<argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>MapPlatformData</name></type> <name>Data</name> <init>= <expr><name><name>H</name><operator>-&gt;</operator><name>Data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>MapBase</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name></expr></argument>, <argument><expr><name>UNMAP_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MapAllocatorNoCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>UNUSED</name> <name>s32</name></type> <name>ReleaseToOsInterval</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>retrieve</name><argument_list>(<argument><expr><name>UNUSED</name> <name>Options</name> <name>Options</name></expr></argument>, <argument><expr><name>UNUSED</name> <name>uptr</name> <name>Size</name></expr></argument>, <argument><expr><name>UNUSED</name> <name>uptr</name> <name>Alignment</name></expr></argument>,
<argument><expr><name>UNUSED</name> <name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><operator>*</operator><name>H</name></expr></argument>, <argument><expr><name>UNUSED</name> <name>bool</name> <operator>*</operator><name>Zeroed</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>store</name><argument_list>(<argument><expr><name>UNUSED</name> <name>Options</name> <name>Options</name></expr></argument>, <argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<function><type><name>bool</name></type> <name>canCache</name><parameter_list>(<parameter><decl><type><name>UNUSED</name> <name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>releaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>disableMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>UNUSED</name> <name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>ReleaseInterval</name> <operator>||</operator> <name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxCacheEntriesCount</name> <operator>||</operator>
<name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxCacheEntrySize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>MaxUnusedCachePages</name> <init>= <expr><literal type="number">4U</literal></expr></init></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>mapSecondary</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>CommitBase</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>CommitSize</name></decl></parameter>,
<parameter><decl><type><name>uptr</name></type> <name>AllocPos</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Flags</name></decl></parameter>, <parameter><decl><type><name>MapPlatformData</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MaxUnusedCacheBytes</name> <init>= <expr><name>MaxUnusedCachePages</name> <operator>*</operator> <call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>CommitSize</name> <operator>&gt;</operator> <name>MaxUnusedCacheBytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>UntaggedPos</name> <init>= <expr><call><name>Max</name><argument_list>(<argument><expr><name>AllocPos</name></expr></argument>, <argument><expr><name>CommitBase</name> <operator>+</operator> <name>MaxUnusedCacheBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>map</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CommitBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UntaggedPos</name> <operator>-</operator> <name>CommitBase</name></expr></argument>,
<argument><expr><literal type="string">"scudo:secondary"</literal></expr></argument>, <argument><expr><name>MAP_RESIZABLE</name> <operator>|</operator> <name>MAP_MEMTAG</name> <operator>|</operator> <name>Flags</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>map</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UntaggedPos</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CommitBase</name> <operator>+</operator> <name>CommitSize</name> <operator>-</operator> <name>UntaggedPos</name></expr></argument>, <argument><expr><literal type="string">"scudo:secondary"</literal></expr></argument>,
<argument><expr><name>MAP_RESIZABLE</name> <operator>|</operator> <name>Flags</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>map</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CommitBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommitSize</name></expr></argument>, <argument><expr><literal type="string">"scudo:secondary"</literal></expr></argument>,
<argument><expr><name>MAP_RESIZABLE</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MAP_MEMTAG</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<name>Flags</name></expr></argument>,
<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MapAllocatorCache</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheDefaultMaxEntriesCount</name> <operator>&lt;=</operator>
<name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>s32</name></type> <name>ReleaseToOsInterval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>EntriesCount</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setOption</name><argument_list>(<argument><expr><name>Option</name><operator>::</operator><name>MaxCacheEntriesCount</name></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>sptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheDefaultMaxEntriesCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setOption</name><argument_list>(<argument><expr><name>Option</name><operator>::</operator><name>MaxCacheEntrySize</name></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>sptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheDefaultMaxEntrySize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setOption</name><argument_list>(<argument><expr><name>Option</name><operator>::</operator><name>ReleaseInterval</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>sptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ReleaseToOsInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>store</name><argument_list>(<argument><expr><name>Options</name> <name>Options</name></expr></argument>, <argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canCache</name><argument_list>(<argument><expr><name><name>H</name><operator>-&gt;</operator><name>CommitSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>unmap</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EntryCached</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>EmptyCache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>s32</name></type> <name>Interval</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u64</name></type> <name>Time</name> <init>= <expr><call><name>getMonotonicTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedBlock</name></type> <name>Entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>CommitBase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>CommitSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>MapBase</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>MapBase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>MapSize</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>BlockBegin</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>H</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>Data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>=</operator> <name>Time</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Interval</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>SCUDO_FUCHSIA</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mapSecondary</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr></argument>,
<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><name>MAP_NOACCESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>setMemoryPermission</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr></argument>, <argument><expr><name>MAP_NOACCESS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Interval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>releasePagesToOS</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<function_decl><type><name>ScopedLock</name></type> <name>L</name><parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>QuarantinePos</name> <operator>==</operator> <operator>-</operator><literal type="number">1U</literal></expr>)</condition> <block>{<block_content>




<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Config</name><operator>::</operator><name>SecondaryCacheQuarantineSize</name> <operator>&amp;&amp;</operator>
<call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>QuarantinePos</name> <operator>=</operator>
<operator>(</operator><name>QuarantinePos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name>Max</name><argument_list>(<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheQuarantineSize</name></expr></argument>, <argument><expr><literal type="number">1u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Quarantine</name><index>[<expr><name>QuarantinePos</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>Quarantine</name><index>[<expr><name>QuarantinePos</name></expr>]</index></name> <operator>=</operator> <name>Entry</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>CachedBlock</name></type> <name>PrevEntry</name> <init>= <expr><name><name>Quarantine</name><index>[<expr><name>QuarantinePos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Quarantine</name><index>[<expr><name>QuarantinePos</name></expr>]</index></name> <operator>=</operator> <name>Entry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>OldestTime</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OldestTime</name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>Time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Entry</name> <operator>=</operator> <name>PrevEntry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>EntriesCount</name> <operator>&gt;=</operator> <name>MaxCount</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>IsFullEvents</name><operator>++</operator> <operator>==</operator> <literal type="number">4U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EmptyCache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>MaxCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name> <operator>=</operator> <name><name>Entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>Entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>EntriesCount</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>OldestTime</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OldestTime</name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>Time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>EntryCached</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>EmptyCache</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Interval</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseOlderThan</name><argument_list>(<argument><expr><name>Time</name> <operator>-</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u64</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EntryCached</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>MapBase</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>MapSize</name></name></expr></argument>, <argument><expr><name>UNMAP_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retrieve</name><argument_list>(<argument><expr><name>Options</name> <name>Options</name></expr></argument>, <argument><expr><name>uptr</name> <name>Size</name></expr></argument>, <argument><expr><name>uptr</name> <name>Alignment</name></expr></argument>,
<argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><operator>*</operator><name>H</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>Zeroed</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PageSize</name> <init>= <expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedBlock</name></type> <name>Entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>HeaderPos</name></decl>;</decl_stmt>
<block>{<block_content>
<function_decl><type><name>ScopedLock</name></type> <name>L</name><parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>EntriesCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>MaxCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CommitBase</name> <init>= <expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CommitBase</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CommitSize</name> <init>= <expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocPos</name> <init>=
<expr><call><name>roundDownTo</name><argument_list>(<argument><expr><name>CommitBase</name> <operator>+</operator> <name>CommitSize</name> <operator>-</operator> <name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>HeaderPos</name> <operator>=</operator>
<name>AllocPos</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>HeaderPos</name> <operator>&gt;</operator> <name>CommitBase</name> <operator>+</operator> <name>CommitSize</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>HeaderPos</name> <argument_list type="generic">&lt; <argument><expr><name>CommitBase</name> <operator>||</operator>
<name>AllocPos</name></expr></argument> &gt;</argument_list></name> <name>CommitBase</name> <operator>+</operator> <name>PageSize</name> <operator>*</operator> <name>MaxUnusedCachePages</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Entry</name> <operator>=</operator> <name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>Found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>H</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>LargeBlock</name><operator>::</operator><call><name><name>addHeaderTag</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>HeaderPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Zeroed</name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setMemoryPermission</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>NewBlockBegin</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>H</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Zeroed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><name>LargeBlock</name><operator>::</operator><call><name><name>addHeaderTag</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NewBlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>Entry</name><operator>.</operator><name>BlockBegin</name></name> <operator>&lt;</operator> <name>NewBlockBegin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>BlockBegin</name></name></expr></argument>, <argument><expr><name>NewBlockBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name>NewBlockBegin</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>untagPointer</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>BlockBegin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>H</name><operator>)</operator><operator>-&gt;</operator><name>CommitBase</name></name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>H</name><operator>)</operator><operator>-&gt;</operator><name>CommitSize</name></name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>H</name><operator>)</operator><operator>-&gt;</operator><name>MapBase</name></name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>MapBase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>H</name><operator>)</operator><operator>-&gt;</operator><name>MapSize</name></name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>MapSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>H</name><operator>)</operator><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>Data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>EntriesCount</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Found</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>canCache</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntriesCount</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0U</literal> <operator>&amp;&amp;</operator>
<name>Size</name> <operator>&lt;=</operator> <call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntrySize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>ReleaseInterval</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>s32</name></type> <name>Interval</name> <init>=
<expr><call><name>Max</name><argument_list>(<argument><expr><call><name>Min</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>s32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheMaxReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Config</name><operator>::</operator><name>SecondaryCacheMinReleaseToOsIntervalMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReleaseToOsIntervalMs</name></expr></argument>, <argument><expr><name>Interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxCacheEntriesCount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>u32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>MaxCount</name> <operator>&gt;</operator> <name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntriesCount</name></expr></argument>, <argument><expr><name>MaxCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>O</name> <operator>==</operator> <name>Option</name><operator>::</operator><name>MaxCacheEntrySize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntrySize</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>releaseOlderThan</name><argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>disableMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>Config</name><operator>::</operator><name>SecondaryCacheQuarantineSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapBase</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapSize</name></expr></argument>, <argument><expr><name>UNMAP_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>MaxCount</name> <init>= <expr><call><name>atomic_load_relaxed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MaxEntriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>u32</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>MaxCount</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setMemoryPermission</name><argument_list>(<argument><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr></argument>, <argument><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>QuarantinePos</name> <operator>=</operator> <operator>-</operator><literal type="number">1U</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>MapBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MapPlatformData</name></type> <name>Data</name></decl>;</decl_stmt>
}</block> <decl><name><name>MapInfo</name><index>[<expr><name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>uptr</name></type> <name>N</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>MapInfo</name><index>[<expr><name>N</name></expr>]</index></name><operator>.</operator><name>MapBase</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>MapInfo</name><index>[<expr><name>N</name></expr>]</index></name><operator>.</operator><name>MapSize</name> <operator>=</operator> <name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>MapInfo</name><index>[<expr><name>N</name></expr>]</index></name><operator>.</operator><name>Data</name> <operator>=</operator> <name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>CommitBase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>N</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>EntriesCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>IsFullEvents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><name><name>MapInfo</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapBase</name></expr></argument>, <argument><expr><name><name>MapInfo</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>MapSize</name></expr></argument>, <argument><expr><name>UNMAP_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>MapInfo</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<struct>struct <name>CachedBlock</name> <block>{
<decl_stmt><decl><type><name>uptr</name></type> <name>CommitBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommitSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>BlockBegin</name></decl>;</decl_stmt>
<expr_stmt><expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name>MapPlatformData</name> <name>Data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>Time</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>releaseIfOlderThan</name><parameter_list>(<parameter><decl><type><name>CachedBlock</name> <modifier>&amp;</modifier></type><name>Entry</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>Time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name> <operator>||</operator> <operator>!</operator><name><name>Entry</name><operator>.</operator><name>Time</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>&gt;</operator> <name>Time</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>OldestTime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>&lt;</operator> <name>OldestTime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OldestTime</name> <operator>=</operator> <name><name>Entry</name><operator>.</operator><name>Time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>releasePagesToOS</name><argument_list>(<argument><expr><name><name>Entry</name><operator>.</operator><name>CommitBase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Entry</name><operator>.</operator><name>CommitSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Entry</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Entry</name><operator>.</operator><name>Time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseOlderThan</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>Time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ScopedLock</name></type> <name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EntriesCount</name> <operator>||</operator> <name>OldestTime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>OldestTime</name> <operator>&gt;</operator> <name>Time</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>OldestTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Config</name><operator>::</operator><name>SecondaryCacheQuarantineSize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseIfOlderThan</name><argument_list>(<argument><expr><name><name>Quarantine</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>Time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>uptr</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>releaseIfOlderThan</name><argument_list>(<argument><expr><name><name>Entries</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>, <argument><expr><name>Time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>EntriesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>QuarantinePos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_u32</name></type> <name>MaxEntriesCount</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uptr</name></type> <name>MaxEntrySize</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u64</name></type> <name>OldestTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>IsFullEvents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_s32</name></type> <name>ReleaseToOsIntervalMs</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CachedBlock</name></type> <name><name>Entries</name><index>[<expr><name>Config</name><operator>::</operator><name>SecondaryCacheEntriesArraySize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedBlock</name></type> <name><name>Quarantine</name><index>[<expr><name>Config</name><operator>::</operator><name>SecondaryCacheQuarantineSize</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MapAllocator</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>GlobalStats</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>s32</name></type> <name>ReleaseToOsInterval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>AllocatedBytes</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DCHECK_EQ</name><argument_list>(<argument><expr><name>FreedBytes</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ReleaseToOsInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>S</name><operator>-&gt;</operator><name>link</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>AlignmentHint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>BlockEnd</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>FillContentsMode</name></type> <name>FillContents</name> <init>= <expr><name>NoFill</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>Options</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getBlockEnd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>B</name> <operator>=</operator> <name>LargeBlock</name><operator>::</operator><call><name><name>getHeader</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>B</name><operator>-&gt;</operator><name>CommitBase</name></name> <operator>+</operator> <name><name>B</name><operator>-&gt;</operator><name>CommitSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uptr</name></type> <name>getBlockSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getBlockEnd</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>getStats</name><argument_list>(<argument><expr><name>ScopedString</name> <operator>*</operator><name>Str</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>F</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>iterateOverBlocks</name><argument_list>(<argument><expr><name>F</name> <name>Callback</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>H</name> <range>: <expr><name>InUseBlocks</name></expr></range></decl></init>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uptr</name></type> <name>Ptr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>H</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ptr</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Callback</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uptr</name></type> <name>canCache</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Cache</name><operator>.</operator><name>canCache</name></name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>O</name></decl></parameter>, <parameter><decl><type><name>sptr</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Cache</name><operator>.</operator><name>setOption</name></name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseToOS</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>releaseToOS</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>disableMemoryTagging</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>disableMemoryTagging</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>unmapTestOnly</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Cache</name><operator>.</operator><name>unmapTestOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>typename</name> <name>Config</name><operator>::</operator><name>SecondaryCache</name> <name>Cache</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HybridMutex</name></type> <name>Mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>DoublyLinkedList</name><argument_list type="generic">&lt;<argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name></expr></argument>&gt;</argument_list></name></type> <name>InUseBlocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>AllocatedBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>FreedBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>LargestSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfAllocs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>NumberOfFrees</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LocalStats</name></type> <name>Stats</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>












<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <operator>*</operator><name><name>MapAllocator</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>allocate</name><argument_list>(<argument>Options Options</argument>, <argument>uptr Size</argument>, <argument>uptr Alignment</argument>,
<argument>uptr *BlockEndPtr</argument>,
<argument>FillContentsMode FillContents</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OptionBit</name><operator>::</operator><name>AddLargeAllocationSlack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Size</name> <operator>+=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>SCUDO_MIN_ALIGNMENT_LOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>Alignment</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>, <argument><expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>SCUDO_MIN_ALIGNMENT_LOG</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PageSize</name> <init>= <expr><call><name>getPageSizeCached</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>RoundedSize</name> <init>=
<expr><call><name>roundUpTo</name><argument_list>(<argument><expr><call><name>roundUpTo</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call> <operator>+</operator>
<name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>PageSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Alignment</name> <operator>&gt;</operator> <name>PageSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RoundedSize</name> <operator>+=</operator> <name>Alignment</name> <operator>-</operator> <name>PageSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Alignment</name> <operator>&lt;</operator> <name>PageSize</name> <operator>&amp;&amp;</operator> <call><name><name>Cache</name><operator>.</operator><name>canCache</name></name><argument_list>(<argument><expr><name>RoundedSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Zeroed</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Cache</name><operator>.</operator><name>retrieve</name></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>H</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Zeroed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockEnd</name> <init>= <expr><name><name>H</name><operator>-&gt;</operator><name>CommitBase</name></name> <operator>+</operator> <name><name>H</name><operator>-&gt;</operator><name>CommitSize</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BlockEndPtr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>BlockEndPtr</name> <operator>=</operator> <name>BlockEnd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>HInt</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>allocatorSupportsMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HInt</name> <operator>=</operator> <call><name>untagPointer</name><argument_list>(<argument><expr><name>HInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>PtrInt</name> <init>= <expr><name>HInt</name> <operator>+</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PtrInt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>FillContents</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Zeroed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>FillContents</name> <operator>==</operator> <name>ZeroFill</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>PatternFillByte</name></expr></else></ternary></expr></argument>,
<argument><expr><name>BlockEnd</name> <operator>-</operator> <name>PtrInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>BlockSize</name> <init>= <expr><name>BlockEnd</name> <operator>-</operator> <name>HInt</name></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<function_decl><type><name>ScopedLock</name></type> <name>L</name><parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name><name>InUseBlocks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>AllocatedBytes</name> <operator>+=</operator> <name>BlockSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumberOfAllocs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>BlockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatMapped</name></expr></argument>, <argument><expr><name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>Ptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MapPlatformData</name></type> <name>Data</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>MapSize</name> <init>= <expr><name>RoundedSize</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapBase</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>map</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MapSize</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MAP_NOACCESS</name> <operator>|</operator> <name>MAP_ALLOWNOMEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>MapBase</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>CommitBase</name> <init>= <expr><name>MapBase</name> <operator>+</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uptr</name></type> <name>MapEnd</name> <init>= <expr><name>MapBase</name> <operator>+</operator> <name>MapSize</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>Alignment</name> <operator>&gt;=</operator> <name>PageSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>CommitBase</name> <operator>=</operator> <call><name>roundUpTo</name><argument_list>(<argument><expr><name>MapBase</name> <operator>+</operator> <name>PageSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>PageSize</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NewMapBase</name> <init>= <expr><name>CommitBase</name> <operator>-</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_GE</name><argument_list>(<argument><expr><name>NewMapBase</name></expr></argument>, <argument><expr><name>MapBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>SCUDO_WORDSIZE</name> <operator>==</operator> <literal type="number">32U</literal> <operator>&amp;&amp;</operator> <name>NewMapBase</name> <operator>!=</operator> <name>MapBase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>MapBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NewMapBase</name> <operator>-</operator> <name>MapBase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MapBase</name> <operator>=</operator> <name>NewMapBase</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>NewMapEnd</name> <init>=
<expr><name>CommitBase</name> <operator>+</operator> <name>PageSize</name> <operator>+</operator> <call><name>roundUpTo</name><argument_list>(<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>PageSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PageSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DCHECK_LE</name><argument_list>(<argument><expr><name>NewMapEnd</name></expr></argument>, <argument><expr><name>MapEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SCUDO_WORDSIZE</name> <operator>==</operator> <literal type="number">32U</literal> <operator>&amp;&amp;</operator> <name>NewMapEnd</name> <operator>!=</operator> <name>MapEnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unmap</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NewMapEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MapEnd</name> <operator>-</operator> <name>NewMapEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MapEnd</name> <operator>=</operator> <name>NewMapEnd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>CommitSize</name> <init>= <expr><name>MapEnd</name> <operator>-</operator> <name>PageSize</name> <operator>-</operator> <name>CommitBase</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>AllocPos</name> <init>= <expr><call><name>roundDownTo</name><argument_list>(<argument><expr><name>CommitBase</name> <operator>+</operator> <name>CommitSize</name> <operator>-</operator> <name>Size</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>mapSecondary</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>CommitBase</name></expr></argument>, <argument><expr><name>CommitSize</name></expr></argument>, <argument><expr><name>AllocPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uptr</name></type> <name>HeaderPos</name> <init>=
<expr><name>AllocPos</name> <operator>-</operator> <name>Chunk</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name>LargeBlock</name><operator>::</operator><call><name><name>addHeaderTag</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>HeaderPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>useMemoryTagging</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>storeTags</name><argument_list>(<argument><expr><name>LargeBlock</name><operator>::</operator><call><name><name>addHeaderTag</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CommitBase</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>H</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>MapBase</name></name> <operator>=</operator> <name>MapBase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name> <operator>=</operator> <name>MapEnd</name> <operator>-</operator> <name>MapBase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>CommitBase</name></name> <operator>=</operator> <name>CommitBase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>CommitSize</name></name> <operator>=</operator> <name>CommitSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>H</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name>Data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>BlockEndPtr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>BlockEndPtr</name> <operator>=</operator> <name>CommitBase</name> <operator>+</operator> <name>CommitSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<function_decl><type><name>ScopedLock</name></type> <name>L</name><parameter_list>(<parameter><decl><type><name>Mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name><name>InUseBlocks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>AllocatedBytes</name> <operator>+=</operator> <name>CommitSize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LargestSize</name> <operator>&lt;</operator> <name>CommitSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LargestSize</name> <operator>=</operator> <name>CommitSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>NumberOfAllocs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>CommitSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Stats</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>StatMapped</name></expr></argument>, <argument><expr><name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>HeaderPos</name> <operator>+</operator> <name>LargeBlock</name><operator>::</operator><call><name>getHeaderSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>MapAllocator</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>deallocate</name><argument_list>(<argument>Options Options</argument>, <argument>void *Ptr</argument>)</argument_list></macro> <block>{
<expr><name>LargeBlock</name><operator>::</operator><name>Header</name> <operator>*</operator><name>H</name> <operator>=</operator> <name>LargeBlock</name><operator>::</operator><call><name><name>getHeader</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>uptr</name> <name>CommitSize</name> <operator>=</operator> <name><name>H</name><operator>-&gt;</operator><name>CommitSize</name></name></expr>;
<expr><block>{
<expr><name>ScopedLock</name> <call><name>L</name><argument_list>(<argument><expr><name>Mutex</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>InUseBlocks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;
<expr><name>FreedBytes</name> <operator>+=</operator> <name>CommitSize</name></expr>;
<expr><name>NumberOfFrees</name><operator>++</operator></expr>;
<expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatAllocated</name></expr></argument>, <argument><expr><name>CommitSize</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Stats</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>StatMapped</name></expr></argument>, <argument><expr><name><name>H</name><operator>-&gt;</operator><name>MapSize</name></name></expr></argument>)</argument_list></call></expr>;
}</block>
<call><name><name>Cache</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>Options</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Config</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>MapAllocator</name><argument_list type="generic">&lt;<argument><expr><name>Config</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>getStats</name><argument_list>(<argument>ScopedString *Str</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name><name>Str</name><operator>-&gt;</operator><name>append</name></name><argument_list>(
<argument><expr><literal type="string">"Stats: MapAllocator: allocated %zu times (%zuK), freed %zu times "</literal>
<literal type="string">"(%zuK), remains %zu (%zuK) max %zuM\n"</literal></expr></argument>,
<argument><expr><name>NumberOfAllocs</name></expr></argument>, <argument><expr><name>AllocatedBytes</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>NumberOfFrees</name></expr></argument>, <argument><expr><name>FreedBytes</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><name>NumberOfAllocs</name> <operator>-</operator> <name>NumberOfFrees</name></expr></argument>, <argument><expr><operator>(</operator><name>AllocatedBytes</name> <operator>-</operator> <name>FreedBytes</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>,
<argument><expr><name>LargestSize</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
