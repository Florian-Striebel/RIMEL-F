<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/scudo/standalone/atomic_helpers.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCUDO_ATOMIC_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCUDO_ATOMIC_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>scudo</name> <block>{<block_content>

<enum>enum <name>memory_order</name> <block>{
<decl><name>memory_order_relaxed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>memory_order_consume</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>memory_order_acquire</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>memory_order_release</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>memory_order_acq_rel</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>memory_order_seq_cst</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_relaxed</name> <operator>==</operator> <name>__ATOMIC_RELAXED</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_consume</name> <operator>==</operator> <name>__ATOMIC_CONSUME</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_acquire</name> <operator>==</operator> <name>__ATOMIC_ACQUIRE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_release</name> <operator>==</operator> <name>__ATOMIC_RELEASE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_acq_rel</name> <operator>==</operator> <name>__ATOMIC_ACQ_REL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>memory_order_seq_cst</name> <operator>==</operator> <name>__ATOMIC_SEQ_CST</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>atomic_u8</name> <block>{
<typedef>typedef <type><name>u8</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>ValDoNotUse</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_u16</name> <block>{
<typedef>typedef <type><name>u16</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>ValDoNotUse</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_s32</name> <block>{
<typedef>typedef <type><name>s32</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>ValDoNotUse</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_u32</name> <block>{
<typedef>typedef <type><name>u32</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>ValDoNotUse</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>atomic_u64</name> <block>{
<typedef>typedef <type><name>u64</name></type> <name>Type</name>;</typedef>

<expr_stmt><expr><call><name>alignas</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <specifier>volatile</specifier> <name>Type</name> <name>ValDoNotUse</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>atomic_uptr</name> <block>{
<typedef>typedef <type><name>uptr</name></type> <name>Type</name>;</typedef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>Type</name></type> <name>ValDoNotUse</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_load</name><argument_list>(<argument>const volatile T *A</argument>, <argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>V</name></expr>;
<expr><call><name>__atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>V</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>atomic_store</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>V</name></expr></argument>, <argument><expr><name>memory_order</name> <name>MO</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>atomic_thread_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>__sync_synchronize</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_add</name><argument_list>(<argument>volatile T *A</argument>, <argument>typename T::Type V</argument>,
<argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_sub</name><argument_list>(<argument>volatile T *A</argument>, <argument>typename T::Type V</argument>,
<argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_and</name><argument_list>(<argument>volatile T *A</argument>, <argument>typename T::Type V</argument>,
<argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_fetch_or</name><argument_list>(<argument>volatile T *A</argument>, <argument>typename T::Type V</argument>,
<argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_exchange</name><argument_list>(<argument>volatile T *A</argument>, <argument>typename T::Type V</argument>,
<argument>memory_order MO</argument>)</argument_list></macro> <block>{
<expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uptr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>R</name></expr>;
<expr><call><name>__atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>R</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>bool</name></type> <name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <operator>*</operator><name>Cmp</name></expr></argument>,
<argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>Xchg</name></expr></argument>,
<argument><expr><name>memory_order</name> <name>MO</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__atomic_compare_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>ValDoNotUse</name></name></expr></argument>, <argument><expr><name>Cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Xchg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>MO</name></expr></argument>,
<argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_load_relaxed</name><argument_list>(<argument>const volatile T *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>atomic_store_relaxed</name><argument_list>(<argument><expr><specifier>volatile</specifier> <name>T</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <name>V</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>typename</name> <name>T</name><operator>::</operator><name>Type</name> <macro><name>atomic_compare_exchange</name><argument_list>(<argument>volatile T *A</argument>,
<argument>typename T::Type Cmp</argument>,
<argument>typename T::Type Xchg</argument>)</argument_list></macro> <block>{
<expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cmp</name></expr></argument>, <argument><expr><name>Xchg</name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Cmp</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
