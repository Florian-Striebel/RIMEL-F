<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_posix.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SANITIZER_POSIX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_POSIX_H</name></cpp:macro></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_internal_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_freebsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_netbsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_posix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_platform_limits_solaris.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_POSIX</name></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> This file should only be included on POSIX</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__sanitizer</name> <block>{<block_content>



<function_decl><type><name>uptr</name></type> <name>internal_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_close</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>internal_read</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_write</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>internal_mmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_munmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_LINUX</name></expr></cpp:if>
<function_decl><type><name>uptr</name></type> <name>internal_mremap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>old_address</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>old_size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>new_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_address</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>internal_mprotect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>internal_madvise</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advice</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>internal_filesize</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_fstat</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_dup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oldfd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_dup2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oldfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newfd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_readlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>internal_lseek</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>OFF_T</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_NETBSD</name></expr></cpp:if>
<function_decl><type><name>uptr</name></type> <name>internal_ptrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>uptr</name></type> <name>internal_ptrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>uptr</name></type> <name>internal_waitpid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>internal_fork</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>fd_t</name></type> <name>internal_spawn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>internal_sysctl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>namelen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>,
<parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>internal_sysctlbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>SANITIZER_WEAK_ATTRIBUTE</name>
<name>int</name></type> <name>real_pthread_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SANITIZER_WEAK_ATTRIBUTE</name>
<name>int</name></type> <name>real_pthread_join</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REAL_PTHREAD_FUNCTIONS</name></cpp:macro> <cpp:value>namespace __sanitizer { int real_pthread_create(void *th, void *attr, void *(*callback)(void *), void *param) { return REAL(pthread_create)(th, attr, callback, param); } int real_pthread_join(void *th, void **ret) { return REAL(pthread_join(th, ret)); } }</cpp:value></cpp:define>










<function_decl><type><name>int</name></type> <name>my_pthread_attr_getstack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>internal_sigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldact</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>internal_sigfillset</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>internal_sigemptyset</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>internal_sigismember</name><parameter_list>(<parameter><decl><type><name>__sanitizer_sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uptr</name></type> <name>internal_execve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>envp</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsStateDetached</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>fd_t</name></type> <name>ReserveStandardFds</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ShouldMockFailureToOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>uptr</name></type> <name>MmapNamed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>GetNamedMappingFd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>DecorateMapping</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
