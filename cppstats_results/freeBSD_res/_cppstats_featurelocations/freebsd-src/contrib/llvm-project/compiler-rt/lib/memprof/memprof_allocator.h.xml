<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/memprof/memprof_allocator.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMPROF_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPROF_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_interceptors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memprof_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_list.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Unsupported platform</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SANITIZER_CAN_USE_ALLOCATOR64</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Only 64-bit allocator supported</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>__memprof</name> <block>{<block_content>

<enum>enum <name>AllocType</name> <block>{
<decl><name>FROM_MALLOC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FROM_NEW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FROM_NEW_BR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<function_decl><type><name>void</name></type> <name>InitializeAllocator</name><parameter_list>()</parameter_list>;</function_decl>

<struct>struct <name>MemprofMapUnmapCallback</name> <block>{
<decl_stmt><decl><type><name>void</name></type> <name>OnMap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>OnUnmap</name><argument_list>(<argument><expr><name>uptr</name> <name>p</name></expr></argument>, <argument><expr><name>uptr</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kAllocatorSpace</name> <init>= <expr><literal type="number">0x600000000000ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name>uptr</name></type> <name>kAllocatorSize</name> <init>= <expr><literal type="number">0x40000000000ULL</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>DefaultSizeClassMap</name></type> <name>SizeClassMap</name>;</typedef>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>AddressSpaceViewTy</name><operator>&gt;</operator>
struct <name>AP64</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceBeg</name> <operator>=</operator> <name>kAllocatorSpace</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kSpaceSize</name> <operator>=</operator> <name>kAllocatorSize</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name> <name>kMetadataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<typedef>typedef <expr_stmt><expr><name>__memprof</name><operator>::</operator><name>SizeClassMap</name> <name>SizeClassMap</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>MemprofMapUnmapCallback</name></type> <name>MapUnmapCallback</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddressSpaceView</name> <init>= <expr><name>AddressSpaceViewTy</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>PrimaryAllocatorASVT</name> <init>= <expr><name><name>SizeClassAllocator64</name><argument_list type="generic">&lt;<argument><expr><name><name>AP64</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>PrimaryAllocator</name> <init>= <expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uptr</name></type> <name>kNumberOfSizeClasses</name> <init>= <expr><name>SizeClassMap</name><operator>::</operator><name>kNumClasses</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>MemprofAllocatorASVT</name> <init>=
<expr><name><name>CombinedAllocator</name><argument_list type="generic">&lt;<argument><expr><name><name>PrimaryAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>AddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>MemprofAllocator</name> <init>= <expr><name><name>MemprofAllocatorASVT</name><argument_list type="generic">&lt;<argument><expr><name>LocalAddressSpaceView</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AllocatorCache</name> <init>= <expr><name>MemprofAllocator</name><operator>::</operator><name>AllocatorCache</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>MemprofThreadLocalMallocStorage</name> <block>{
<decl_stmt><decl><type><name>AllocatorCache</name></type> <name>allocator_cache</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>CommitBack</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<macro><name>MemprofThreadLocalMallocStorage</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_memalign</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
<parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>memprof_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>memprof_delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>AllocType</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_malloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_calloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_valloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_pvalloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memprof_aligned_alloc</name><parameter_list>(<parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>memprof_posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>memptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>BufferedStackTrace</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uptr</name></type> <name>memprof_malloc_usable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>uptr</name></type> <name>bp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintInternalAllocatorStats</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MemprofSoftRssLimitExceededCallback</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>exceeded</name></decl></parameter>)</parameter_list>;</function_decl>

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
