<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/compiler-rt/lib/lsan/lsan.h">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_thread.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SANITIZER_POSIX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_posix.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SANITIZER_FUCHSIA</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsan_fuchsia.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sanitizer_common/sanitizer_stacktrace.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE</name><parameter_list>(<parameter><type><name>max_size</name></type></parameter>, <parameter><type><name>fast</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sanitizer::BufferedStackTrace stack; stack.Unwind(StackTrace::GetCurrentPc(), GET_CURRENT_FRAME(), nullptr, fast, max_size);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_FATAL</name></cpp:macro> <cpp:value>GET_STACK_TRACE(kStackTraceMax, common_flags()-&gt;fast_unwind_on_fatal)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_MALLOC</name></cpp:macro> <cpp:value>GET_STACK_TRACE(__sanitizer::common_flags()-&gt;malloc_context_size, common_flags()-&gt;fast_unwind_on_malloc)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STACK_TRACE_THREAD</name></cpp:macro> <cpp:value>GET_STACK_TRACE(kStackTraceMax, true)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>__lsan</name> <block>{<block_content>

<function_decl><type><name>void</name></type> <name>InitializeInterceptors</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ReplaceSystemMalloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>LsanOnDeadlySignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>siginfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENSURE_LSAN_INITED</name></cpp:macro> <cpp:value>do { CHECK(!lsan_init_is_running); if (!lsan_inited) __lsan_init(); } while (0)</cpp:value></cpp:define>





</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>lsan_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>lsan_init_is_running</name></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>SANITIZER_INTERFACE_ATTRIBUTE</name> <name>void</name></type> <name>__lsan_init</name><parameter_list>()</parameter_list>;</function_decl></extern>
</unit>
