<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBCompileUnit.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBCOMPILEUNIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBCOMPILEUNIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBFileSpec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBCompileUnit</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBCompileUnit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBCompileUnit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBCompileUnit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <macro><name>GetFileSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumLineEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBLineEntry</name> <macro><name>GetLineEntryAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>FindLineEntryIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>start_idx</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>*</operator><name>inline_file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>FindLineEntryIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>start_idx</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBFileSpec</name> <operator>*</operator><name>inline_file_spec</name></expr></argument>,
<argument><expr><name>bool</name> <name>exact</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>SBFileSpec</name></type> <name>GetSupportFileAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumSupportFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>FindSupportFileIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>start_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SBFileSpec</name> <modifier>&amp;</modifier></type><name>sb_file</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>full</name></decl></parameter>)</parameter_list>;</function_decl>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <macro><name>GetTypes</name><argument_list>(<argument>uint32_t type_mask = lldb::eTypeClassAny</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <call><name>GetLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBCompileUnit</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSymbolContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SBCompileUnit</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>*</operator><name>lldb_object_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const</block></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>*</operator><name>lldb_object_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>CompileUnit</name> <operator>*</operator><name>m_opaque_ptr</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
