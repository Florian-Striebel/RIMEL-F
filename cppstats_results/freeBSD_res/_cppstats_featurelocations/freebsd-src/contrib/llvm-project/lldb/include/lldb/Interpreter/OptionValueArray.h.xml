<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValueArray.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUEARRAY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUEARRAY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValueArray</name> <range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueArray</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>OptionValueArray</name><argument_list>(<argument>uint32_t type_mask = UINT32_MAX</argument>, <argument>bool raw_value_dump = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_type_mask</name><argument_list>(<argument><expr><name>type_mask</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_values</name><argument_list>()</argument_list></call></expr>, <macro><name>m_raw_value_dump</name><argument_list>(<argument>raw_value_dump</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>OptionValueArray</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;



<expr><name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypeArray</name></expr>;</return> }</block>

<name>void</name> <macro><name>DumpValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>, <argument>Stream &amp;strm</argument>,
<argument>uint32_t dump_mask</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name>
<macro><name>SetValueFromString</name><argument_list>(<argument>llvm::StringRef value</argument>,
<argument>VarSetOperationType op = eVarSetOperationAssign</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>m_values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>m_value_was_set</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>lldb</name><operator>::</operator><name>OptionValueSP</name>
<macro><name>DeepCopy</name><argument_list>(<argument>const lldb::OptionValueSP &amp;new_parent</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsAggregateValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetSubValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>,
<argument>llvm::StringRef name</argument>, <argument>bool will_modify</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>OptionValueSP</name> <name><name>operator</name><index>[]</index></name><operator>(</operator><name>size_t</name> <name>idx</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <name>value_sp</name></expr>;
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value_sp</name> <operator>=</operator> <name><name>m_values</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>value_sp</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <macro><name>GetValueAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name> <name>value_sp</name></expr>;
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value_sp</name> <operator>=</operator> <name><name>m_values</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>value_sp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AppendValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <operator>&amp;</operator><name>value_sp</name></expr></argument>)</argument_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>value_sp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m_type_mask</name> <operator>&amp;</operator> <call><name><name>value_sp</name><operator>-&gt;</operator><name>GetTypeAsMask</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>InsertValue</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <operator>&amp;</operator><name>value_sp</name></expr></argument>)</argument_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>value_sp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m_type_mask</name> <operator>&amp;</operator> <call><name><name>value_sp</name><operator>-&gt;</operator><name>GetTypeAsMask</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_values</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>m_values</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>value_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>m_values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ReplaceValue</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValueSP</name> <operator>&amp;</operator><name>value_sp</name></expr></argument>)</argument_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>value_sp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m_type_mask</name> <operator>&amp;</operator> <call><name><name>value_sp</name><operator>-&gt;</operator><name>GetTypeAsMask</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m_values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>value_sp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>DeleteValue</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_values</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>m_values</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>size_t</name></type> <name>GetArgs</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>Status</name></type> <name>SetArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Args</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>VarSetOperationType</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>OptionValueSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_type_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_raw_value_dump</name></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
