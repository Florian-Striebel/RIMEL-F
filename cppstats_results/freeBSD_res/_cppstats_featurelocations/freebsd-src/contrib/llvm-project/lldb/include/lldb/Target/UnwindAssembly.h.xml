<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/UnwindAssembly.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_UNWINDASSEMBLY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_UNWINDASSEMBLY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>UnwindAssembly</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>UnwindAssembly</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>PluginInterface</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>UnwindAssemblySP</name> <call><name>FindPlugin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type>
<name>GetNonCallSiteUnwindPlanFromAssembly</name><parameter_list>(<parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>AugmentUnwindPlanFromCallSite</name><parameter_list>(<parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetFastUnwindPlan</name><parameter_list>(<parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>thread</name></decl></parameter>,
<parameter><decl><type><name>UnwindPlan</name> <modifier>&amp;</modifier></type><name>unwind_plan</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type>
<name>FirstNonPrologueInsn</name><argument_list>(<argument><expr><name>AddressRange</name> <operator>&amp;</operator><name>func</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>,
<argument><expr><name>Address</name> <operator>&amp;</operator><name>first_non_prologue_insn</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>UnwindAssembly</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ArchSpec</name></type> <name>m_arch</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
