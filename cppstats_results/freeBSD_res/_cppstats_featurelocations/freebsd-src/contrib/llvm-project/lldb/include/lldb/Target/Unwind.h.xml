<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Unwind.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_UNWIND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_UNWIND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Unwind</name> <block>{<block_content>
<label><name>protected</name>:</label>

<expr_stmt><expr><call><name>Unwind</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>m_thread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_unwind_mutex</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>Unwind</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_unwind_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DoClear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetFrameCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_unwind_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DoGetFrameCount</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetFramesUpTo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>end_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cfa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>pc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>behaves_like_zeroth_frame</name> <init>= <expr><operator>(</operator><name>end_idx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>end_idx</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DoGetFrameInfoAtIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>cfa</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>behaves_like_zeroth_frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>GetFrameInfoAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>frame_idx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>cfa</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>behaves_like_zeroth_frame</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_unwind_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DoGetFrameInfoAtIndex</name><argument_list>(<argument><expr><name>frame_idx</name></expr></argument>, <argument><expr><name>cfa</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>behaves_like_zeroth_frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <macro><name>CreateRegisterContextForFrame</name><argument_list>(<argument>StackFrame *frame</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_unwind_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>DoCreateRegisterContextForFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Thread</name> <modifier>&amp;</modifier></type><name>GetThread</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_thread</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>DoClear</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>DoGetFrameCount</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>DoGetFrameInfoAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>frame_idx</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>cfa</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>behaves_like_zeroth_frame</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name>
<call><name>DoCreateRegisterContextForFrame</name><argument_list>(<argument><expr><name>StackFrame</name> <operator>*</operator><name>frame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Thread</name> <modifier>&amp;</modifier></type><name>m_thread</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_unwind_mutex</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Unwind</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Unwind</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Unwind</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Unwind</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
