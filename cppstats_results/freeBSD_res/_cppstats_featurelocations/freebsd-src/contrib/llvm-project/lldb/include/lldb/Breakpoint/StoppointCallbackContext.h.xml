<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/StoppointCallbackContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_STOPPOINTCALLBACKCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_STOPPOINTCALLBACKCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>StoppointCallbackContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StoppointCallbackContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>StoppointCallbackContext</name><argument_list>(<argument>Event *event</argument>, <argument>const ExecutionContext &amp;exe_ctx</argument>,
<argument>bool synchronously = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>Event</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExecutionContextRef</name></type>
<name>exe_ctx_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_synchronous</name> <init>=
<expr><name>false</name></expr></init></decl>;</decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
