<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/IRMemoryMap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_IRMEMORYMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_IRMEMORYMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataBufferHeap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>















<decl_stmt><decl><type><name>class</name></type> <name>IRMemoryMap</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>IRMemoryMap</name><argument_list>(<argument>lldb::TargetSP target_sp</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>IRMemoryMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<enum>enum <name>AllocationPolicy</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>eAllocationPolicyInvalid</name> <init>=
<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eAllocationPolicyHostOnly</name></decl>,



<decl><name>eAllocationPolicyMirror</name></decl>,


<decl><name>eAllocationPolicyProcessOnly</name></decl>

}</block>;</enum>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>Malloc</name><argument_list>(<argument>size_t size</argument>, <argument>uint8_t alignment</argument>, <argument>uint32_t permissions</argument>,
<argument>AllocationPolicy policy</argument>, <argument>bool zero_memory</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Leak</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>Free</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>WriteMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>bytes</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>WriteScalarToMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Scalar</name> <operator>&amp;</operator><name>scalar</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>WritePointerToMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>ReadMemory</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>bytes</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>ReadScalarFromMemory</name><argument_list>(<argument><expr><name>Scalar</name> <operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>ReadPointerFromMemory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>*</operator><name>address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>GetAllocSize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>address</name></expr></argument>, <argument><expr><name>size_t</name> <operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>GetMemoryData</name><argument_list>(<argument><expr><name>DataExtractor</name> <operator>&amp;</operator><name>extractor</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>uint32_t</name></type> <name>GetAddressByteSize</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>ExecutionContextScope</name> <operator>*</operator><macro><name>GetBestExecutionContextScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetTarget</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_target_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <operator>&amp;</operator><macro><name>GetProcessWP</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_process_wp</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<struct>struct <name>Allocation</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<name>m_process_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name>
<name>m_process_start</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataBufferHeap</name></type> <name>m_data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AllocationPolicy</name></type> <name>m_policy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_leak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_permissions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_alignment</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>Allocation</name><argument_list>(<argument>lldb::addr_t process_alloc</argument>, <argument>lldb::addr_t process_start</argument>,
<argument>size_t size</argument>, <argument>uint32_t permissions</argument>, <argument>uint8_t alignment</argument>,
<argument>AllocationPolicy m_policy</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>Allocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Allocation</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Allocation</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Allocation</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Allocation</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator>
<operator>(</operator><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DataBufferHeap</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"IRMemoryMap::Allocation is larger than expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetWP</name> <name>m_target_wp</name></expr>;</expr_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><name>Allocation</name></expr></argument>&gt;</argument_list></name> <name>AllocationMap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>AllocationMap</name></type> <name>m_allocations</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>FindSpace</name><argument_list>(<argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>ContainsHostOnlyAllocations</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>AllocationMap</name><operator>::</operator><name>iterator</name> <macro><name>FindAllocation</name><argument_list>(<argument>lldb::addr_t addr</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IntersectsAllocation</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>AllocationsIntersect</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr1</name></expr></argument>, <argument><expr><name>size_t</name> <name>size1</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr2</name></expr></argument>, <argument><expr><name>size_t</name> <name>size2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
