<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/MappedHash.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_MAPPEDHASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_MAPPEDHASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataExtractor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DJB.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>MappedHash</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>HashFunctionType</name> <block>{
<decl><name>eHashFunctionDJB</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>HashString</name><argument_list>(<argument><expr><name>uint32_t</name> <name>hash_function</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>s</name></expr></argument>)</argument_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>hash_function</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MappedHash</name><operator>::</operator><name>eHashFunctionDJB</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>djbHash</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Invalid hash function index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>HASH_MAGIC</name> <init>= <expr><literal type="number">0x48415348u</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>HASH_CIGAM</name> <init>= <expr><literal type="number">0x48534148u</literal></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>Header</name> <block>{
<typedef>typedef <type><name>T</name></type> <name>HeaderData</name>;</typedef>

<name>uint32_t</name>
<name>magic</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>hash_function</name> <init>=
<expr><name>eHashFunctionDJB</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bucket_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hashes_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_data_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HeaderData</name></type> <name>header_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Header</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>magic</name><argument_list>(<argument><expr><name>HASH_MAGIC</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>header_data_len</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>header_data</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>Header</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetByteSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hash_function</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>bucket_count</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hashes_count</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>header_data_len</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>header_data_len</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetByteSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HeaderData</name> <modifier>&amp;</modifier></type><name>header_data</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>SetHeaderDataByteSize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>header_data_byte_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>header_data_len</name> <operator>=</operator> <name>header_data_byte_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.magic = 0x%8.8x\n"</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.version = 0x%4.4x\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.hash_function = 0x%4.4x\n"</literal></expr></argument>, <argument><expr><name>hash_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.bucket_count = 0x%8.8x %u\n"</literal></expr></argument>, <argument><expr><name>bucket_count</name></expr></argument>,
<argument><expr><name>bucket_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.hashes_count = 0x%8.8x %u\n"</literal></expr></argument>, <argument><expr><name>hashes_count</name></expr></argument>,
<argument><expr><name>hashes_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>Printf</name></name><argument_list>(<argument><expr><literal type="string">"header.header_data_len = 0x%8.8x %u\n"</literal></expr></argument>, <argument><expr><name>header_data_len</name></expr></argument>,
<argument><expr><name>header_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>offset_t</name> <macro><name>Read</name><argument_list>(<argument>lldb_private::DataExtractor &amp;data</argument>,
<argument>lldb::offset_t offset</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>ValidOffsetForDataOfSize</name></name><argument_list>(
<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hash_function</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>bucket_count</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hashes_count</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>header_data_len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>GetU32</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>magic</name> <operator>!=</operator> <name>HASH_MAGIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>magic</name> <operator>==</operator> <name>HASH_CIGAM</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>data</name><operator>.</operator><name>GetByteOrder</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>lldb</name><operator>::</operator><name>eByteOrderBig</name></expr>:</case>
<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>SetByteOrder</name></name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eByteOrderLittle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>lldb</name><operator>::</operator><name>eByteOrderLittle</name></expr>:</case>
<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>SetByteOrder</name></name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>eByteOrderBig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>LLDB_INVALID_OFFSET</name></expr>;</return>
<expr_stmt/>}</block_content>
} else <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>LLDB_INVALID_OFFSET</name></expr>;</return>
<expr_stmt/>}</block_content>
}

version = data.GetU16(&amp;offset</block></block></switch>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LLDB_INVALID_OFFSET</name></expr>;</return>
<expr_stmt/>}</block_content>
hash_function = data.GetU16(&amp;offset</block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_function</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hash_function</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bucket_count</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>GetU32</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashes_count</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>GetU32</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_data_len</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>GetU32</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>offset</name></expr>;</return>
<expr_stmt/>}</block_content>
return LLDB_INVALID_OFFSET</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>






</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__KeyType</name></expr></argument>, <argument><expr><name>class</name> <name>__HeaderType</name></expr></argument>, <argument><expr><name>class</name> <name>__HashData</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MemoryTable</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>__HeaderType</name></type> <name>HeaderType</name>;</typedef>
<typedef>typedef <type><name>__KeyType</name></type> <name>KeyType</name>;</typedef>
<typedef>typedef <type><name>__HashData</name></type> <name>HashData</name>;</typedef>

<enum>enum <name>Result</name> <block>{
<decl><name>eResultKeyMatch</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>,

<decl><name>eResultKeyMismatch</name> <init>=
<expr><literal type="number">1u</literal></expr></init></decl>,
<decl><name>eResultEndOfHashData</name> <init>= <expr><literal type="number">2u</literal></expr></init></decl>,

<decl><name>eResultError</name> <init>= <expr><literal type="number">3u</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>Pair</name> <block>{
<decl_stmt><decl><type><name>KeyType</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashData</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>MemoryTable</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>DataExtractor</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_header</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_hash_indexes</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_hash_values</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_hash_offsets</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{
<expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name> <operator>=</operator> <call><name><name>m_header</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>LLDB_INVALID_OFFSET</name> <operator>&amp;&amp;</operator> <call><name>IsValid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_hash_indexes</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name><name>data</name><operator>.</operator><name>GetData</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>m_header</name><operator>.</operator><name>bucket_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_hash_values</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name><name>data</name><operator>.</operator><name>GetData</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>m_header</name><operator>.</operator><name>hashes_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_hash_offsets</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name><name>data</name><operator>.</operator><name>GetData</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>m_header</name><operator>.</operator><name>hashes_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

virtual ~MemoryTable(</block></if></if_stmt>) <operator>=</operator> default</block></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_header</name><operator>.</operator><name>version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>m_header</name><operator>.</operator><name>hash_function</name></name> <operator>==</operator> <name>eHashFunctionDJB</name> <operator>&amp;&amp;</operator>
<name><name>m_header</name><operator>.</operator><name>bucket_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetHashIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>bucket_idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m_hash_indexes</name> <operator>&amp;&amp;</operator> <name>bucket_idx</name> <operator>&lt;</operator> <name><name>m_header</name><operator>.</operator><name>bucket_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>m_hash_indexes</name> <operator>+</operator> <name>bucket_idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetHashValue</name><argument_list>(<argument><expr><name>uint32_t</name> <name>hash_idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m_hash_values</name> <operator>&amp;&amp;</operator> <name>hash_idx</name> <operator>&lt;</operator> <name><name>m_header</name><operator>.</operator><name>hashes_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>m_hash_values</name> <operator>+</operator> <name>hash_idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetHashDataOffset</name><argument_list>(<argument><expr><name>uint32_t</name> <name>hash_idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m_hash_offsets</name> <operator>&amp;&amp;</operator> <name>hash_idx</name> <operator>&lt;</operator> <name><name>m_header</name><operator>.</operator><name>hashes_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>m_hash_offsets</name> <operator>+</operator> <name>hash_idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Find</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>Pair</name> <operator>&amp;</operator><name>pair</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bucket_count</name> <init>= <expr><name><name>m_header</name><operator>.</operator><name>bucket_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>hash_count</name> <init>= <expr><name><name>m_header</name><operator>.</operator><name>hashes_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>hash_value</name> <init>=
<expr><name>MappedHash</name><operator>::</operator><call><name>HashString</name><argument_list>(<argument><expr><name><name>m_header</name><operator>.</operator><name>hash_function</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bucket_idx</name> <init>= <expr><name>hash_value</name> <operator>%</operator> <name>bucket_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_idx</name> <init>= <expr><call><name>GetHashIndex</name><argument_list>(<argument><expr><name>bucket_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_idx</name> <operator>&lt;</operator> <name>hash_count</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>hash_idx</name> <operator>&lt;</operator> <name>hash_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>hash_idx</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>curr_hash_value</name> <init>= <expr><call><name>GetHashValue</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>curr_hash_value</name> <operator>==</operator> <name>hash_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>hash_data_offset</name> <operator>=</operator> <call><name>GetHashDataOffset</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>hash_data_offset</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>offset_t</name> <name>prev_hash_data_offset</name> <operator>=</operator> <name>hash_data_offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Result</name></type> <name>hash_result</name> <init>=
<expr><call><name>GetHashDataForName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_data_offset</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>hash_result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>eResultKeyMatch</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>eResultKeyMismatch</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>prev_hash_data_offset</name> <operator>==</operator> <name>hash_data_offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>eResultEndOfHashData</name></expr>:</case>


<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>eResultError</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr_hash_value</name> <operator>%</operator> <name>bucket_count</name><operator>)</operator> <operator>!=</operator> <name>bucket_idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetStringForKeyType</name><argument_list>(<argument><expr><name>KeyType</name> <name>key</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ReadHashData</name><argument_list>(<argument><expr><name>uint32_t</name> <name>hash_data_offset</name></expr></argument>,
<argument><expr><name>HashData</name> <operator>&amp;</operator><name>hash_data</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>















<decl_stmt><decl><type><name>virtual</name> <name>Result</name></type> <name>GetHashDataForName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>name</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <operator>*</operator><name>hash_data_offset_ptr</name></expr></argument>,
<argument><expr><name>Pair</name> <operator>&amp;</operator><name>pair</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>HeaderType</name> <modifier>&amp;</modifier></type><name>GetHeader</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_header</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>ForEach</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>HashData</name> <operator>&amp;</operator><name>hash_data</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_hash_offsets</name> <init>= <expr><name><name>m_header</name><operator>.</operator><name>hashes_count</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_hash_offsets</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_data_offset</name> <init>= <expr><call><name>GetHashDataOffset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_data_offset</name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HashData</name></type> <name>hash_data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ReadHashData</name><argument_list>(<argument><expr><name>hash_data_offset</name></expr></argument>, <argument><expr><name>hash_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>callback</name><argument_list>(<argument><expr><name>hash_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>HeaderType</name></type> <name>m_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m_hash_indexes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m_hash_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m_hash_offsets</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
