<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBType.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SBTypeList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBTypeMember</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBTypeMember</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeMember</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeMember</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBTypeMember</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMember</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeMember</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint64_t</name></type> <name>GetOffsetInBytes</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetOffsetInBits</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsBitfield</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetBitfieldSizeInBits</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeMemberImpl</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeMemberImpl</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeMemberImpl</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeMemberImpl</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SBTypeMemberFunction</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBTypeMemberFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeMemberFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeMemberFunction</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBTypeMemberFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMemberFunction</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeMemberFunction</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDemangledName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetMangledName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetReturnType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfArguments</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetArgumentTypeAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>MemberFunctionKind</name> <call><name>GetKind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeMemberFunctionImpl</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeMemberFunctionImpl</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeMemberFunctionImpl</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeMemberFunctionImplSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SBType</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBType</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>uint64_t</name></type> <name>GetByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsPointerType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsReferenceType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsFunctionType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsPolymorphicClass</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsArrayType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsVectorType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsTypedefType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsAnonymousType</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsScopedEnumerationType</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetPointerType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetPointeeType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetReferenceType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetTypedefedType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetDereferencedType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetUnqualifiedType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetArrayElementType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetArrayType</name><argument_list>(<argument>uint64_t size</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetVectorElementType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetCanonicalType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetEnumerationIntegerType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BasicType</name> <call><name>GetBasicType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetBasicType</name><argument_list>(<argument>lldb::BasicType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfFields</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfDirectBaseClasses</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfVirtualBaseClasses</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMember</name> <macro><name>GetFieldAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMember</name> <macro><name>GetDirectBaseClassAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMember</name> <macro><name>GetVirtualBaseClassAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeEnumMemberList</name> <call><name>GetEnumMembers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfTemplateArguments</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetTemplateArgumentType</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TemplateArgumentKind</name> <macro><name>GetTemplateArgumentKind</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetFunctionReturnType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <call><name>GetFunctionArgumentTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumberOfMemberFunctions</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeMemberFunction</name> <macro><name>GetMemberFunctionAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBModule</name> <call><name>GetModule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDisplayTypeName</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeClass</name> <call><name>GetTypeClass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsTypeComplete</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetTypeFlags</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>description_level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>lldb</name><operator>::</operator><name>SBType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>lldb</name><operator>::</operator><name>SBType</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>TypeImpl</name> <operator>&amp;</operator><call><name>ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>TypeImpl</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <call><name>GetSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeImplSP</name> <operator>&amp;</operator><name>type_impl_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeImplSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeEnumMember</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeEnumMemberList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeNameSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeMember</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeMemberFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTypeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SBType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>CompilerType</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SBType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeImplSP</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SBTypeList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBTypeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBTypeList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeList</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBTypeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeList</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBTypeList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Append</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <macro><name>GetTypeAtIndex</name><argument_list>(<argument>uint32_t index</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>TypeListImpl</name></expr></argument>&gt;</argument_list></name> <name>m_opaque_up</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCompileUnit</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
