<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/FileSystem.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_FILESYSTEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_FILESYSTEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/DataBufferLLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Chrono.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileCollector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DEV_NULL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PATH_CONVERSION_ERROR</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FileSystem</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>m_fs</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><call><name>getRealFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_collector</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_home_directory</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<call><name>FileSystem</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>FileCollectorBase</name></expr></argument>&gt;</argument_list></name> <name>collector</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_fs</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><call><name>getRealFileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_collector</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>collector</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_home_directory</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_mapped</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>FileSystem</name><argument_list>(<argument>llvm::IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; fs</argument>,
<argument>bool mapped = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_fs</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_collector</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_home_directory</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<macro><name>m_mapped</name><argument_list>(<argument>mapped</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>FileSystem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSystem</name> <operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FileSystem</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FileSystem</name> <operator>&amp;</operator><name>fs</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>FileSystem</name> <modifier>&amp;</modifier></type><name>Instance</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>FileCollectorBase</name></expr></argument>&gt;</argument_list></name> <name>collector</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <call><name>Initialize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>fs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>Symlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Status</name></type> <name>Readlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Status</name></type> <name>ResolveSymbolicLink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>Fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>Open</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>File::OpenOptions options</argument>,
<argument>uint32_t permissions = lldb::eFilePermissionsFileDefault</argument>,
<argument>bool should_close_fd = true</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>directory_iterator</name> <call><name>DirBegin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>error_code</name> <operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>directory_iterator</name> <call><name>DirBegin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>dir</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>error_code</name> <operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>&gt;</argument_list></name> <macro><name>GetStatus</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>&gt;</argument_list></name> <macro><name>GetStatus</name><argument_list>(<argument>const llvm::Twine &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <macro><name>GetModificationTime</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name><name>TimePoint</name><argument_list type="generic">&lt;&gt;</argument_list></name> <macro><name>GetModificationTime</name><argument_list>(<argument>const llvm::Twine &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetByteSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetByteSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetPermissions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetPermissions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetPermissions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>error_code</name> <operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetPermissions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>error_code</name> <operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Exists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Exists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>Readable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Readable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>MakeAbsolute</name><argument_list>(<argument>llvm::SmallVectorImpl&lt;char&gt; &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>MakeAbsolute</name><argument_list>(<argument>FileSpec &amp;file_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>Resolve</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>Resolve</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DataBufferLLVM</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateDataBuffer</name><argument_list>(<argument>const llvm::Twine &amp;path</argument>,
<argument>uint64_t size = <literal type="number">0</literal></argument>,
<argument>uint64_t offset = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DataBufferLLVM</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateDataBuffer</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>uint64_t size = <literal type="number">0</literal></argument>,
<argument>uint64_t offset = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>ResolveExecutableLocation</name><parameter_list>(<parameter><decl><type><name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>GetHomeDirectory</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>GetHomeDirectory</name><argument_list>(<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<enum>enum <name>EnumerateDirectoryResult</name> <block>{

<decl><name>eEnumerateDirectoryResultNext</name></decl>,


<decl><name>eEnumerateDirectoryResultEnter</name></decl>,

<decl><name>eEnumerateDirectoryResultQuit</name></decl>
}</block>;</enum>

<typedef>typedef <macro><name>EnumerateDirectoryResult</name> <argument_list>(<argument>*EnumerateDirectoryCallbackType</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator>
<name>void</name> <operator>*</operator><name>baton</name><operator>,</operator> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>file_type</name> <name>file_type</name><operator>,</operator> <name>llvm</name><operator>::</operator><name>StringRef</name><operator>)</operator></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>EnumerateDirectoryResult</name><operator>(</operator>
<name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>file_type</name> <name>file_type</name>, <name>llvm</name><operator>::</operator><name>StringRef</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>DirectoryCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>void</name></type> <name>EnumerateDirectory</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Twine</name> <name>path</name></expr></argument>, <argument><expr><name>bool</name> <name>find_directories</name></expr></argument>,
<argument><expr><name>bool</name> <name>find_files</name></expr></argument>, <argument><expr><name>bool</name> <name>find_other</name></expr></argument>,
<argument><expr><name>EnumerateDirectoryCallbackType</name> <name>callback</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>callback_baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>GetRealPath</name><argument_list>(<argument>const llvm::Twine &amp;path</argument>,
<argument>llvm::SmallVectorImpl&lt;char&gt; &amp;output</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetExternalPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetExternalPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <macro><name>GetVirtualFileSystem</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_fs</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>Collect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>file_spec</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>Collect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetHomeDirectory</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>home_directory</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>InstanceImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>m_fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>FileCollectorBase</name></expr></argument>&gt;</argument_list></name> <name>m_collector</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_home_directory</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_mapped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
