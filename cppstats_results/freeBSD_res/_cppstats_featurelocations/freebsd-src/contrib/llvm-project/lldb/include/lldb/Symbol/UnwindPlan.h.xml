<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/UnwindPlan.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_UNWINDPLAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_UNWINDPLAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/AddressRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>































<decl_stmt><decl><type><name>class</name></type> <name>UnwindPlan</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Row</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>RegisterLocation</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>RestoreType</name> <block>{
<decl><name>unspecified</name></decl>,


<decl><name>undefined</name></decl>,
<decl><name>same</name></decl>,
<decl><name>atCFAPlusOffset</name></decl>,
<decl><name>isCFAPlusOffset</name></decl>,
<decl><name>atAFAPlusOffset</name></decl>,
<decl><name>isAFAPlusOffset</name></decl>,
<decl><name>inOtherRegister</name></decl>,
<decl><name>atDWARFExpression</name></decl>,
<decl><name>isDWARFExpression</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>RegisterLocation</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_location</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RegisterLocation</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>RegisterLocation</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetUnspecified</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>unspecified</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetUndefined</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>undefined</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSame</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>same</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsSame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>same</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsUnspecified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>unspecified</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsUndefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>undefined</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsCFAPlusOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>isCFAPlusOffset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAtCFAPlusOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>atCFAPlusOffset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAFAPlusOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>isAFAPlusOffset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAtAFAPlusOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>atAFAPlusOffset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsInOtherRegister</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>inOtherRegister</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsAtDWARFExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>atDWARFExpression</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsDWARFExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetAtCFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>atCFAPlusOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_location</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetIsCFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isCFAPlusOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_location</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetAtAFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>atAFAPlusOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_location</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetIsAFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isAFAPlusOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_location</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetInRegister</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>inOtherRegister</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_location</name><operator>.</operator><name>reg_num</name></name> <operator>=</operator> <name>reg_num</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetRegisterNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>inOtherRegister</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_location</name><operator>.</operator><name>reg_num</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>LLDB_INVALID_REGNUM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>RestoreType</name> <macro><name>GetLocationType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>int32_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch<condition>(<expr><name>m_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>atCFAPlusOffset</name></expr>:</case>
<case>case <expr><name>isCFAPlusOffset</name></expr>:</case>
<case>case <expr><name>atAFAPlusOffset</name></expr>:</case>
<case>case <expr><name>isAFAPlusOffset</name></expr>:</case>
<return>return <expr><name><name>m_location</name><operator>.</operator><name>offset</name></name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/>}</block_content>
}

void GetDWARFExpr(const uint8_t **opcodes</block><operator>,</operator> <expr_stmt><expr><name>uint16_t</name> <operator>&amp;</operator><name>len</name></expr></expr_stmt></switch>) <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>atDWARFExpression</name> <operator>||</operator> <name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>opcodes</name> <operator>=</operator> <name><name>m_location</name><operator>.</operator><name>expr</name><operator>.</operator><name>opcodes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>m_location</name><operator>.</operator><name>expr</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>opcodes</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

void SetAtDWARFExpression(const uint8_t *opcodes</block></block><operator>,</operator> <expr_stmt><expr><name>uint32_t</name> <name>len</name></expr></expr_stmt></if></if_stmt>)</block></block></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetIsDWARFExpression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>opcodes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>GetDWARFExpressionBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>atDWARFExpression</name> <operator>||</operator> <name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_location</name><operator>.</operator><name>expr</name><operator>.</operator><name>opcodes</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetDWARFExpressionLength</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>atDWARFExpression</name> <operator>||</operator> <name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_location</name><operator>.</operator><name>expr</name><operator>.</operator><name>length</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UnwindPlan</name> <operator>*</operator><name>unwind_plan</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>UnwindPlan</name><operator>::</operator><name>Row</name> <operator>*</operator><name>row</name></expr></argument>, <argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>RestoreType</name></type> <name>m_type</name> <init>= <expr><name>unspecified</name></expr></init></decl>;</decl_stmt>
<union>union <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>opcodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block> <decl><name>expr</name></decl>;</struct>
}</block> <decl><name>m_location</name></decl>;</union>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FAValue</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>ValueType</name> <block>{
<decl><name>unspecified</name></decl>,
<decl><name>isRegisterPlusOffset</name></decl>,
<decl><name>isRegisterDereferenced</name></decl>,
<decl><name>isDWARFExpression</name></decl>,
<decl><name>isRaSearch</name></decl>,
}</block>;</enum>

<expr_stmt><expr><call><name>FAValue</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>m_value</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FAValue</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FAValue</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetUnspecified</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>unspecified</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsUnspecified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>unspecified</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetRaSearch</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isRaSearch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>ra_search_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsRegisterPlusOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_type</name> <operator>==</operator> <name>isRegisterPlusOffset</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsRegisterPlusOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isRegisterPlusOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>reg_num</name></name> <operator>=</operator> <name>reg_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsRegisterDereferenced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_type</name> <operator>==</operator> <name>isRegisterDereferenced</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsRegisterDereferenced</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isRegisterDereferenced</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>reg_num</name></name> <operator>=</operator> <name>reg_num</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>IsDWARFExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetIsDWARFExpression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>opcodes</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_type</name> <operator>=</operator> <name>isDWARFExpression</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>opcodes</name></name> <operator>=</operator> <name>opcodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetRegisterNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isRegisterDereferenced</name> <operator>||</operator> <name>m_type</name> <operator>==</operator> <name>isRegisterPlusOffset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>reg_num</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>LLDB_INVALID_REGNUM</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>ValueType</name> <macro><name>GetValueType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>int32_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name>m_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>isRegisterPlusOffset</name></expr>:</case>
<return>return <expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>offset</name></name></expr>;</return>
<case>case <expr><name>isRaSearch</name></expr>:</case>
<return>return <expr><name><name>m_value</name><operator>.</operator><name>ra_search_offset</name></name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/>}</block_content>
}

void IncOffset(int32_t delta</block></switch>) <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isRegisterPlusOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>void</name> <macro><name>SetOffset</name><argument_list>(<argument>int32_t offset</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isRegisterPlusOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m_value</name><operator>.</operator><name>reg</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>void</name> <macro><name>GetDWARFExpr</name><argument_list>(<argument>const uint8_t **opcodes</argument>, <argument>uint16_t &amp;len</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>opcodes</name> <operator>=</operator> <name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>opcodes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>opcodes</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

const uint8_t *GetDWARFExpressionBytes(</block></block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>opcodes</name></name></expr>;</return></block_content></block></if></if_stmt></block></block></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>GetDWARFExpressionLength</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_type</name> <operator>==</operator> <name>isDWARFExpression</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>m_value</name><operator>.</operator><name>expr</name><operator>.</operator><name>length</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UnwindPlan</name> <operator>*</operator><name>unwind_plan</name></expr></argument>, <argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ValueType</name></type> <name>m_type</name> <init>= <expr><name>unspecified</name></expr></init></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{


<decl_stmt><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block> <decl><name>reg</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>opcodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block> <decl><name>expr</name></decl>;</struct>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ra_search_offset</name></decl>;</decl_stmt>
}</block> <decl><name>m_value</name></decl>;</union>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>Row</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Row</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetRegisterInfo</name><argument_list>(<argument><expr><name>uint32_t</name> <name>reg_num</name></expr></argument>,
<argument><expr><name>RegisterLocation</name> <operator>&amp;</operator><name>register_location</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetRegisterInfo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RegisterLocation</name></type> <name>register_location</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RemoveRegisterInfo</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_offset</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOffset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SlideOffset</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>offset</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_offset</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><name>FAValue</name> <modifier>&amp;</modifier></type><name>GetCFAValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_cfa_value</name></expr>;</return> </block_content>}</block></function>

<function><type><name>FAValue</name> <modifier>&amp;</modifier></type><name>GetAFAValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_afa_value</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToAtCFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>can_replace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToIsCFAPlusOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>can_replace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToUndefined</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>can_replace</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>can_replace_only_if_unspecified</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToUnspecified</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>can_replace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToRegister</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>other_reg_num</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>can_replace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetRegisterLocationToSame</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>reg_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>must_replace</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><name>void</name></type> <name>SetUnspecifiedRegistersAreUndefined</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>unspec_is_undef</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_unspecified_registers_are_undefined</name> <operator>=</operator> <name>unspec_is_undef</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetUnspecifiedRegistersAreUndefined</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>m_unspecified_registers_are_undefined</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UnwindPlan</name> <operator>*</operator><name>unwind_plan</name></expr></argument>, <argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>RegisterLocation</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FAValue</name></type> <name>m_cfa_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FAValue</name></type> <name>m_afa_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_register_locations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_unspecified_registers_are_undefined</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
};

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Row</name></expr></argument>&gt;</argument_list></name> <name>RowSP</name></expr>;</expr_stmt></typedef>

<macro><name>UnwindPlan</name><argument_list>(<argument>lldb::RegisterKind reg_kind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_row_list</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_plan_valid_address_range</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_register_kind</name><argument_list>(<argument><expr><name>reg_kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_return_addr_register</name><argument_list>(<argument><expr><name>LLDB_INVALID_REGNUM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_source_name</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_sourced_from_compiler</name><argument_list>(<argument><expr><name>eLazyBoolCalculate</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_valid_at_all_instruction_locations</name><argument_list>(<argument><expr><name>eLazyBoolCalculate</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_for_signal_trap</name><argument_list>(<argument><expr><name>eLazyBoolCalculate</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_lsda_address</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_personality_func_addr</name><argument_list>()</argument_list></macro> <expr><block>{}</block>


<call><name>UnwindPlan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnwindPlan</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_plan_valid_address_range</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_plan_valid_address_range</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_register_kind</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_register_kind</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_return_addr_register</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_return_addr_register</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_source_name</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_source_name</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_sourced_from_compiler</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_plan_is_sourced_from_compiler</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_valid_at_all_instruction_locations</name><argument_list>(
<argument><expr><name><name>rhs</name><operator>.</operator><name>m_plan_is_valid_at_all_instruction_locations</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_plan_is_for_signal_trap</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_plan_is_for_signal_trap</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_lsda_address</name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>m_lsda_address</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_personality_func_addr</name><argument_list>(<argument>rhs.m_personality_func_addr</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>m_row_list</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>rhs</name><operator>.</operator><name>m_row_list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>RowSP</name> <modifier>&amp;</modifier></type><name>row_sp</name> <range>: <expr><name><name>rhs</name><operator>.</operator><name>m_row_list</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<macro><name>m_row_list</name></macro><expr_stmt><expr><operator>.</operator><macro><name>emplace_back</name><argument_list>(<argument>new Row(*row_sp)</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></for>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>UnwindPlan</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>AppendRow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RowSP</name> <modifier>&amp;</modifier></type><name>row_sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>InsertRow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RowSP</name> <modifier>&amp;</modifier></type><name>row_sp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>replace_existing</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>UnwindPlan</name><operator>::</operator><name>RowSP</name> <macro><name>GetRowForFunctionOffset</name><argument_list>(<argument>int offset</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <macro><name>GetRegisterKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_register_kind</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetRegisterKind</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>kind</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>m_register_kind</name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>SetReturnAddressRegister</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>regnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_return_addr_register</name> <operator>=</operator> <name>regnum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetReturnAddressRegister</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>m_return_addr_register</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetInitialCFARegister</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>m_row_list</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LLDB_INVALID_REGNUM</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>m_row_list</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCFAValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetRegisterNumber</name><argument_list>()</argument_list></call></expr>;</return>
}




void <expr_stmt><expr><call><name>SetPlanValidAddressRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AddressRange</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>AddressRange</name> <operator>&amp;</operator><macro><name>GetAddressRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_plan_valid_address_range</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>PlanValidAtAddress</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>IsValidRowIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>UnwindPlan</name><operator>::</operator><name>RowSP</name> <macro><name>GetRowAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>UnwindPlan</name><operator>::</operator><name>RowSP</name> <macro><name>GetLastRow</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>ConstString</name> <macro><name>GetSourceName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetSourceName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <macro><name>GetSourcedFromCompiler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_plan_is_sourced_from_compiler</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>SetSourcedFromCompiler</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>from_compiler</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_plan_is_sourced_from_compiler</name> <operator>=</operator> <name>from_compiler</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <macro><name>GetUnwindPlanValidAtAllInstructions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_plan_is_valid_at_all_instruction_locations</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>SetUnwindPlanValidAtAllInstructions</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>valid_at_all_insn</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_plan_is_valid_at_all_instruction_locations</name> <operator>=</operator> <name>valid_at_all_insn</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <macro><name>GetUnwindPlanForSignalTrap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_plan_is_for_signal_trap</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetUnwindPlanForSignalTrap</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>is_for_signal_trap</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_plan_is_for_signal_trap</name> <operator>=</operator> <name>is_for_signal_trap</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>int</name> <macro><name>GetRowCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_row_list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_plan_valid_address_range</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_register_kind</name> <operator>=</operator> <name>lldb</name><operator>::</operator><name>eRegisterKindDWARF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_source_name</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_plan_is_sourced_from_compiler</name> <operator>=</operator> <name>eLazyBoolCalculate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_plan_is_valid_at_all_instruction_locations</name> <operator>=</operator> <name>eLazyBoolCalculate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_plan_is_for_signal_trap</name> <operator>=</operator> <name>eLazyBoolCalculate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_lsda_address</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_personality_func_addr</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>*</modifier></type><name>GetRegisterInfo</name><argument_list>(<argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>reg_num</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>Address</name> <macro><name>GetLSDAAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_lsda_address</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetLSDAAddress</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>lsda_addr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_lsda_address</name> <operator>=</operator> <name>lsda_addr</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>Address</name> <macro><name>GetPersonalityFunctionPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_personality_func_addr</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetPersonalityFunctionPtr</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>presonality_func_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_personality_func_addr</name> <operator>=</operator> <name>presonality_func_ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>RowSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>collection</name></type> <name>m_row_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddressRange</name></type> <name>m_plan_valid_address_range</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterKind</name> <name>m_register_kind</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_return_addr_register</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>ConstString</name>
<name>m_source_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>m_plan_is_sourced_from_compiler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>m_plan_is_valid_at_all_instruction_locations</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>m_plan_is_for_signal_trap</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Address</name></type> <name>m_lsda_address</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Address</name></type> <name>m_personality_func_addr</name></decl>;</decl_stmt>


};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
