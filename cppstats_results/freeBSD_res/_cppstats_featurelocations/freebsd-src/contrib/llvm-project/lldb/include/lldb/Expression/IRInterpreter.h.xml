<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/IRInterpreter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_IRINTERPRETER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_IRINTERPRETER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Pass.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IRMemoryMap</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>IRInterpreter</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CanInterpret</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>&amp;</operator><name>function</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>bool</name> <name>support_function_calls</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>Interpret</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>&amp;</operator><name>function</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>IRExecutionUnit</name> <operator>&amp;</operator><name>execution_unit</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>stack_frame_bottom</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>stack_frame_top</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>supportsFunction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>&amp;</operator><name>llvm_function</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
