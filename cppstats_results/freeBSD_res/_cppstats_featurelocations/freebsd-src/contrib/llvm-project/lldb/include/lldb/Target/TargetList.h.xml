<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/TargetList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_TARGETLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_TARGETLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Target.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TargetList</name> <range>: <expr><name>public</name> <name>Broadcaster</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>Debugger</name></expr>;








<expr><call><name>TargetList</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>

enum <block>{ <expr><name>eBroadcastBitInterrupt</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> }</block></expr>;



<expr><specifier>static</specifier> <name>ConstString</name> <operator>&amp;</operator><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name><name>LockingAdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name></type>
<name>TargetIterable</name>;</typedef>





































<decl_stmt><decl><type><name>Status</name></type> <name>CreateTarget</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>user_exe_path</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>triple_str</name></expr></argument>,
<argument><expr><name>LoadDependentFiles</name> <name>get_dependent_modules</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>OptionGroupPlatform</name> <operator>*</operator><name>platform_options</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>Status</name></type> <name>CreateTarget</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>user_exe_path</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><name>LoadDependentFiles</name> <name>get_dependent_modules</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>DeleteTarget</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>int</name> <macro><name>GetNumTargets</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetTargetAtIndex</name><argument_list>(<argument>uint32_t index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfTarget</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>FindTargetWithExecutableAndArchitecture</name><argument_list>(
<argument>const FileSpec &amp;exe_file_spec</argument>,
<argument>const ArchSpec *exe_arch_ptr = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>











<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>FindTargetWithProcessID</name><argument_list>(<argument>lldb::pid_t pid</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>FindTargetWithProcess</name><argument_list>(<argument>lldb_private::Process *process</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>GetTargetSP</name><argument_list>(<argument>Target *target</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<decl_stmt><decl><type><name>uint32_t</name></type> <name>SendAsyncInterrupt</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name> <operator>=</operator> <name>LLDB_INVALID_PROCESS_ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>SignalIfRunning</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>int</name> <name>signo</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetSelectedTarget</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetSelectedTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <call><name>GetSelectedTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>TargetIterable</name></type> <name>Targets</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>TargetIterable</name><argument_list>(<argument><expr><name>m_target_list</name></expr></argument>, <argument><expr><name>m_target_list_mutex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>collection</name></type> <name>m_target_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_target_list_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_selected_target_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>CreateTargetInternal</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>user_exe_path</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>triple_str</name></expr></argument>, <argument><expr><name>LoadDependentFiles</name> <name>load_dependent_files</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>OptionGroupPlatform</name> <operator>*</operator><name>platform_options</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>CreateTargetInternal</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>user_exe_path</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><name>LoadDependentFiles</name> <name>get_dependent_modules</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddTargetInternal</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>do_select</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetSelectedTargetInternal</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>TargetList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TargetList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TargetList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TargetList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
