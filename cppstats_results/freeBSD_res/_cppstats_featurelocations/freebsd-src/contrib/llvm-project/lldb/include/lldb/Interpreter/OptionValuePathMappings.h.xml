<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValuePathMappings.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUEPATHMAPPINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUEPATHMAPPINGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/PathMappingList.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValuePathMappings</name>
<range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValuePathMappings</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>OptionValuePathMappings</name><argument_list>(<argument>bool notify_changes</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>m_notify_changes</name><argument_list>(<argument>notify_changes</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>OptionValuePathMappings</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;



<expr><name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypePathMap</name></expr>;</return> }</block>

<name>void</name> <macro><name>DumpValue</name><argument_list>(<argument>const ExecutionContext *exe_ctx</argument>, <argument>Stream &amp;strm</argument>,
<argument>uint32_t dump_mask</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Status</name>
<macro><name>SetValueFromString</name><argument_list>(<argument>llvm::StringRef value</argument>,
<argument>VarSetOperationType op = eVarSetOperationAssign</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>m_path_mappings</name><operator>.</operator><name>Clear</name></name><argument_list>(<argument><expr><name>m_notify_changes</name></expr></argument>)</argument_list></call></expr>;
<expr><name>m_value_was_set</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>bool</name> <macro><name>IsAggregateValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>



<name>PathMappingList</name> <operator>&amp;</operator><macro><name>GetCurrentValue</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_path_mappings</name></expr>;</return> }</block>

<specifier>const</specifier> <name>PathMappingList</name> <operator>&amp;</operator><macro><name>GetCurrentValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_path_mappings</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>PathMappingList</name> <name>m_path_mappings</name></expr>;
<expr><name>bool</name> <name>m_notify_changes</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
