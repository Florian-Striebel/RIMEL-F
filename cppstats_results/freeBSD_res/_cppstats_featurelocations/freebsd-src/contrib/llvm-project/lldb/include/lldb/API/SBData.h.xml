<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBData.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBDATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBDATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ScriptInterpreter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBData</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SBData</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SBData</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SBData</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint8_t</name></type> <name>GetAddressByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAddressByteSize</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>addr_byte_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <call><name>GetByteOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetByteOrder</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>endian</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>GetFloat</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>GetDouble</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>GetLongDouble</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetAddress</name><argument_list>(<argument>lldb::SBError &amp;error</argument>, <argument>lldb::offset_t offset</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>GetUnsignedInt8</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>GetUnsignedInt16</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetUnsignedInt32</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetUnsignedInt64</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>GetSignedInt8</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>GetSignedInt16</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>GetSignedInt32</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetSignedInt64</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetString</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ReadRawData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>offset_t</name> <name>offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>base_addr</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>SetData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ByteOrder</name> <name>endian</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>addr_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBData</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromCString</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>const char *data</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromUInt64Array</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>uint64_t *array</argument>,
<argument>size_t array_len</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromUInt32Array</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>uint32_t *array</argument>,
<argument>size_t array_len</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromSInt64Array</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>int64_t *array</argument>,
<argument>size_t array_len</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromSInt32Array</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>int32_t *array</argument>,
<argument>size_t array_len</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>CreateDataFromDoubleArray</name><argument_list>(<argument>lldb::ByteOrder endian</argument>,
<argument>uint32_t addr_byte_size</argument>,
<argument>double *array</argument>,
<argument>size_t array_len</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetDataFromCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDataFromUInt64Array</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>array_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDataFromUInt32Array</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>array_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDataFromSInt64Array</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>array_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDataFromSInt32Array</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>array_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetDataFromDoubleArray</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>array_len</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>DataExtractor</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>DataExtractor</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const</block></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataExtractorSP</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataExtractorSP</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataExtractorSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetOpaque</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DataExtractorSP</name> <operator>&amp;</operator><name>data_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBInstruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>ScriptInterpreter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DataExtractorSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
