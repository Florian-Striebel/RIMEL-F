<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/TypeCategoryMap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_TYPECATEGORYMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_TYPECATEGORYMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/FormattersContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/DataFormatters/TypeCategory.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TypeCategoryMap</name> <block>{<block_content>
<label><name>private</name>:</label>
<typedef>typedef <type><name>ConstString</name></type> <name>KeyType</name>;</typedef>
<typedef>typedef <type><name>TypeCategoryImpl</name></type> <name>ValueType</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>ValueType</name><operator>::</operator><name>SharedPointer</name> <name>ValueSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name></expr></argument>&gt;</argument_list></name> <name>ActiveCategoriesList</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>ActiveCategoriesList</name><operator>::</operator><name>iterator</name> <name>ActiveCategoriesIterator</name></expr>;</expr_stmt></typedef>

<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>KeyType</name></expr></argument>, <argument><expr><name>ValueSP</name></expr></argument>&gt;</argument_list></name> <name>MapType</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>MapType</name><operator>::</operator><name>iterator</name> <name>MapIterator</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>ValueSP</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>ForEachCallback</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>Position</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Position</name></type> <name>First</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Position</name></type> <name>Default</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Position</name></type> <name>Last</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypeCategoryMap</name><argument_list>(<argument><expr><name>IFormatChangeListener</name> <operator>*</operator><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>KeyType</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>KeyType</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>KeyType</name></type> <name>category_name</name></decl></parameter>, <parameter><decl><type><name>Position</name></type> <name>pos</name> <init>= <expr><name>Default</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Disable</name><parameter_list>(<parameter><decl><type><name>KeyType</name></type> <name>category_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>ValueSP</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><name>Position</name></type> <name>pos</name> <init>= <expr><name>Default</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Disable</name><parameter_list>(<parameter><decl><type><name>ValueSP</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EnableAllCategories</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisableAllCategories</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>KeyType</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>ValueSP</name> <modifier>&amp;</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ForEach</name><parameter_list>(<parameter><decl><type><name>ForEachCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <call><name>GetAtIndex</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>AnyMatches</name><argument_list>(<argument><expr><name>ConstString</name> <name>type_name</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <name>items</name> <operator>=</operator>
<name>TypeCategoryImpl</name><operator>::</operator><name>ALL_ITEM_TYPES</name></expr></argument>,
<argument><expr><name>bool</name> <name>only_enabled</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>matching_category</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>TypeCategoryImpl</name><operator>::</operator><name>FormatCategoryItems</name> <operator>*</operator><name>matching_type</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>uint32_t</name></type> <name>GetCount</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplSP</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>FormattersMatchData</name> <modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>ImplSP</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>delete_matching_categories</name> <block>{<block_content>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <name>ptr</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>delete_matching_categories</name><argument_list>(<argument>lldb::TypeCategoryImplSP p</argument>)</argument_list></macro>
: <macro><name>ptr</name><argument_list>(<argument>std::move(p)</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TypeCategoryImplSP</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>ptr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_map_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IFormatChangeListener</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MapType</name></type> <name>m_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ActiveCategoriesList</name></type> <name>m_active_categories</name></decl>;</decl_stmt>

<function><type><name>MapType</name> <modifier>&amp;</modifier></type><name>map</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_map</name></expr>;</return> </block_content>}</block></function>

<function><type><name>ActiveCategoriesList</name> <modifier>&amp;</modifier></type><name>active_list</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_active_categories</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>mutex</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_map_mutex</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>FormattersContainer</name><argument_list type="generic">&lt;<argument><expr><name>ValueType</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FormatManager</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
