<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBValue.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBVALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBVALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ValueImpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueLocker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBValue</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBValue</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBValue</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>GetError</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <call><name>GetID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTypeName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDisplayTypeName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetByteSize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsInScope</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>Format</name> <call><name>GetFormat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetFormat</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>Format</name> <name>format</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetValue</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int64_t</name></type> <name>GetValueAsSigned</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>int64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>GetValueAsUnsigned</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>fail_value</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>int64_t</name></type> <name>GetValueAsSigned</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>fail_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>GetValueAsUnsigned</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fail_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ValueType</name></type> <name>GetValueType</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>GetValueDidChange</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSummary</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSummary</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>stream</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SBTypeSummaryOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetObjectDescription</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>GetDynamicValue</name><argument_list>(<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>GetStaticValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>GetNonSyntheticValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <call><name>GetPreferDynamicValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetPreferDynamicValue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetPreferSyntheticValue</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetPreferSyntheticValue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_synthetic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsDynamic</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsSynthetic</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsSyntheticChildrenGenerated</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetSyntheticChildrenGenerated</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetLocation</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>SetValueFromCString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_str</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>SetValueFromCString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value_str</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeFormat</name> <call><name>GetTypeFormat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeSummary</name> <call><name>GetTypeSummary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeFilter</name> <call><name>GetTypeFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTypeSynthetic</name> <call><name>GetTypeSynthetic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>CreateChildAtOffset</name><argument_list>(<argument>const char *name</argument>, <argument>uint32_t offset</argument>,
<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>Cast</name><argument_list>(<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>CreateValueFromExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>CreateValueFromExpression</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expression</name></expr></argument>,
<argument><expr><name>SBExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>CreateValueFromAddress</name><argument_list>(<argument>const char *name</argument>, <argument>lldb::addr_t address</argument>,
<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>CreateValueFromData</name><argument_list>(<argument>const char *name</argument>, <argument>lldb::SBData data</argument>,
<argument>lldb::SBType type</argument>)</argument_list></macro></expr>;</expr_stmt>





















































<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>uint32_t idx</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>,
<argument>bool can_create_synthetic</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>uint32_t</name></type> <name>GetIndexOfChildWithName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>GetChildMemberWithName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>GetChildMemberWithName</name><argument_list>(<argument>const char *name</argument>,
<argument>lldb::DynamicValueType use_dynamic</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>GetValueForExpressionPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>expr_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>AddressOf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetLoadAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBAddress</name> <call><name>GetAddress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




















<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBData</name> <macro><name>GetPointeeData</name><argument_list>(<argument>uint32_t item_idx = <literal type="number">0</literal></argument>, <argument>uint32_t item_count = <literal type="number">1</literal></argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBData</name> <call><name>GetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>SetData</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBData</name> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>SBError</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBDeclaration</name> <call><name>GetDeclaration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>















<function_decl><type><name>bool</name></type> <name>MightHaveChildren</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsRuntimeSupportValue</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumChildren</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumChildren</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>GetOpaqueType</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>GetTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBProcess</name> <call><name>GetProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBThread</name> <call><name>GetThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBFrame</name> <call><name>GetFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>Dereference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>TypeIsPointerType</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBType</name> <call><name>GetType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <call><name>Persist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetExpressionPath</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetExpressionPath</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>,
<argument><expr><name>bool</name> <name>qualify_cxx_base_classes</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>EvaluateExpression</name><argument_list>(<argument>const char *expr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>EvaluateExpression</name><argument_list>(<argument>const char *expr</argument>,
<argument>const SBExpressionOptions &amp;options</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBValue</name> <macro><name>EvaluateExpression</name><argument_list>(<argument>const char *expr</argument>,
<argument>const SBExpressionOptions &amp;options</argument>,
<argument>const char *name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>value_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>Watch</name><argument_list>(<argument>bool resolve_location</argument>, <argument>bool read</argument>, <argument>bool write</argument>,
<argument>SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>Watch</name><argument_list>(<argument>bool resolve_location</argument>, <argument>bool read</argument>, <argument>bool write</argument>)</argument_list></macro></expr>;</expr_stmt>

























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBWatchpoint</name> <macro><name>WatchPointee</name><argument_list>(<argument>bool resolve_location</argument>, <argument>bool read</argument>, <argument>bool write</argument>,
<argument>SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBValueList</name></decl>;</decl_stmt>
























<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSP</name><argument_list>(<argument>ValueLocker &amp;value_locker</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>bool</name> <name>use_synthetic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>,
<argument><expr><name>bool</name> <name>use_synthetic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DynamicValueType</name> <name>use_dynamic</name></expr></argument>,
<argument><expr><name>bool</name> <name>use_synthetic</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueImpl</name></expr></argument>&gt;</argument_list></name> <name>ValueImplSP</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>ValueImplSP</name></type> <name>m_opaque_sp</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetSP</name><parameter_list>(<parameter><decl><type><name>ValueImplSP</name></type> <name>impl_sp</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
