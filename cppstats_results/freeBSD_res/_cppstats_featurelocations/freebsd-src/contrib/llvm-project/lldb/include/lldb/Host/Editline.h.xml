<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/Editline.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_EDITLINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_EDITLINE_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_EDITLINE_USE_WCHAR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;codecvt&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;histedit.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;csignal&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/ConnectionFileDescriptor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Predicate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FunctionExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>line_editor</name> <block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_EDITLINE_USE_WCHAR</name></expr></cpp:if>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineStringType</name> <init>= <expr><name>std</name><operator>::</operator><name>wstring</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineStringStreamType</name> <init>= <expr><name>std</name><operator>::</operator><name>wstringstream</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineCharType</name> <init>= <expr><name>wchar_t</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineStringType</name> <init>= <expr><name>std</name><operator>::</operator><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineStringStreamType</name> <init>= <expr><name>std</name><operator>::</operator><name>stringstream</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineCharType</name> <init>= <expr><name>char</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_EDITLINE_USE_WCHAR</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EL_CLIENTDATA</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>LLDB_HAVE_EL_RFUNC_T</name></expr></cpp:if>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineGetCharType</name> <init>= <expr><name>wchar_t</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>using</name></type> <name>EditLineGetCharType</name> <init>= <expr><name>char</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>using</name></type> <name>EditlineGetCharCallbackType</name> <init>= <expr><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>::</operator><name>EditLine</name> <operator>*</operator><name>editline</name></expr></argument>,
<argument><expr><name>EditLineGetCharType</name> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditlineCommandCallbackType</name> <init>= <expr><name>unsigned</name> <macro><name>char</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><operator>::</operator><name>EditLine</name> <operator>*</operator><name>editline</name>,
<name>int</name> <name>ch</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>EditlinePromptCallbackType</name> <init>= <expr><specifier>const</specifier> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><operator>::</operator><name>EditLine</name> <operator>*</operator><name>editline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EditlineHistory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>EditlineHistorySP</name> <init>= <expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>EditlineHistory</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>IsInputCompleteCallbackType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>unique_function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Editline</name> <operator>*</operator>, <name>StringList</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>FixIndentationCallbackType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>unique_function</name><argument_list type="generic">&lt;<argument><expr><name>int</name><operator>(</operator><name>Editline</name> <operator>*</operator>, <name>StringList</name> <operator>&amp;</operator>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SuggestionCallbackType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>unique_function</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>llvm</name><operator>::</operator><name>StringRef</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>CompleteCallbackType</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>unique_function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>CompletionRequest</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>EditorStatus</name> <block>{<block_content>


<expr_stmt><expr><name>Editing</name></expr><operator>,</operator>


<expr><name>Complete</name></expr><operator>,</operator>


<expr><name>EndOfInput</name></expr><operator>,</operator>


<expr><name>Interrupted</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>CursorLocation</name> <block>{<block_content>

<expr_stmt><expr><name>BlockStart</name></expr><operator>,</operator>


<expr><name>EditingPrompt</name></expr><operator>,</operator>



<expr><name>EditingCursor</name></expr><operator>,</operator>



<expr><name>BlockEnd</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>HistoryOperation</name> <block>{<block_content>
<expr_stmt><expr><name>Oldest</name></expr><operator>,</operator>
<expr><name>Older</name></expr><operator>,</operator>
<expr><name>Current</name></expr><operator>,</operator>
<expr><name>Newer</name></expr><operator>,</operator>
<expr><name>Newest</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>line_editor</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Editline</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Editline</name><argument_list>(<argument>const char *editor_name</argument>, <argument>FILE *input_file</argument>, <argument>FILE *output_file</argument>,
<argument>FILE *error_file</argument>, <argument>bool color_prompts</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Editline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>Editline</name> <modifier>*</modifier></type><name>InstanceFor</name><argument_list>(<argument><expr><operator>::</operator><name>EditLine</name> <operator>*</operator><name>editline</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>SetPrompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>SetContinuationPrompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>continuation_prompt</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>TerminalSizeChanged</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPrompt</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>uint32_t</name></type> <name>GetCurrentLine</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>Interrupt</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>Cancel</name><parameter_list>()</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>SetSuggestionCallback</name><parameter_list>(<parameter><decl><type><name>SuggestionCallbackType</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_suggestion_callback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetAutoCompleteCallback</name><parameter_list>(<parameter><decl><type><name>CompleteCallbackType</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_completion_callback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetIsInputCompleteCallback</name><parameter_list>(<parameter><decl><type><name>IsInputCompleteCallbackType</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_is_input_complete_callback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>SetFixIndentationCallback</name><parameter_list>(<parameter><decl><type><name>FixIndentationCallbackType</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indent_chars</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_fix_indentation_callback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_fix_indentation_callback_chars</name> <operator>=</operator> <name>indent_chars</name></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>GetLine</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>interrupted</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>GetLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>first_line_number</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>interrupted</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintAsync</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>



<function_decl><type><name>void</name></type> <name>SetBaseLineNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_number</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>PromptForIndex</name><argument_list>(<argument>int line_index</argument>)</argument_list></macro></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>SetCurrentLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_index</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>GetPromptWidth</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>IsEmacs</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>IsOnlySpaces</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>GetLineIndexForLocation</name><parameter_list>(<parameter><decl><type><name>CursorLocation</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursor_row</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>MoveCursor</name><parameter_list>(<parameter><decl><type><name>CursorLocation</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>CursorLocation</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>DisplayInput</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>CountRowsForLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EditLineStringType</name> <modifier>&amp;</modifier></type><name>content</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>SaveEditedLine</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>StringList</name></type> <name>GetInputAsStringList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_count</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>RecallHistory</name><parameter_list>(<parameter><decl><type><name>HistoryOperation</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>GetCharacter</name><parameter_list>(<parameter><decl><type><name>EditLineGetCharType</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Prompt</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>BreakLineCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>EndOrAddLineCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>DeleteNextCharCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>DeletePreviousCharCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>char</name></type> <name>PreviousLineCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>char</name></type> <name>NextLineCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>char</name></type> <name>PreviousHistoryCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>char</name></type> <name>NextHistoryCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>BufferStartCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>BufferEndCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>char</name></type> <name>TabCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>ApplyAutosuggestCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>TypedCharacter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>FixIndentationCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name> <name>char</name></type> <name>RevertLineCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ConfigureEditor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>multiline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CompleteCharacter</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>EditLineGetCharType</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ApplyTerminalSizeChange</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>AddFunctionToEditLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EditLineCharType</name> <modifier>*</modifier></type><name>command</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EditLineCharType</name> <modifier>*</modifier></type><name>helptext</name></decl></parameter>,
<parameter><decl><type><name>EditlineCommandCallbackType</name></type> <name>callbackFn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetEditLinePromptCallback</name><parameter_list>(<parameter><decl><type><name>EditlinePromptCallbackType</name></type> <name>callbackFn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetGetCharacterFunction</name><parameter_list>(<parameter><decl><type><name>EditlineGetCharCallbackType</name></type> <name>callbackFn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_EDITLINE_USE_WCHAR</name></expr></cpp:if>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>wstring_convert</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>codecvt_utf8</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_utf8conv</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>::</operator><name>EditLine</name> <operator>*</operator><name>m_editline</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EditlineHistorySP</name></type> <name>m_history_sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_in_history</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>EditLineStringType</name></expr></argument>&gt;</argument_list></name> <name>m_live_history_lines</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_multiline_enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>EditLineStringType</name></expr></argument>&gt;</argument_list></name> <name>m_input_lines</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EditorStatus</name></type> <name>m_editor_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_color_prompts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_terminal_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_base_line_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m_current_line_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_current_line_rows</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_revert_cursor_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_line_number_digits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_set_prompt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_set_continuation_prompt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_current_prompt</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_needs_prompt_repaint</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><specifier>volatile</specifier> <name>std</name><operator>::</operator><name>sig_atomic_t</name> <name>m_terminal_size_has_changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_editor_name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>m_input_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>m_output_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>m_error_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnectionFileDescriptor</name></type> <name>m_input_connection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IsInputCompleteCallbackType</name></type> <name>m_is_input_complete_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FixIndentationCallbackType</name></type> <name>m_fix_indentation_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_fix_indentation_callback_chars</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompleteCallbackType</name></type> <name>m_completion_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SuggestionCallbackType</name></type> <name>m_suggestion_callback</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>m_previous_autosuggestion_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_output_mutex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
