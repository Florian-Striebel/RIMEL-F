<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionValueEnumeration.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONVALUEENUMERATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONVALUEENUMERATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UniqueCStringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StreamString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OptionValueEnumeration</name>
<range>: <expr><name>public</name> <name><name>Cloneable</name><argument_list type="generic">&lt;<argument><expr><name>OptionValueEnumeration</name></expr></argument>, <argument><expr><name>OptionValue</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>int64_t</name></type> <name>enum_type</name>;</typedef>
struct <name>EnumeratorInfo</name> <block>{
<expr><name>enum_type</name> <name>value</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr>;
}</block></block></expr></range></decl>;</decl_stmt>
<typedef>typedef <type><name><name>UniqueCStringMap</name><argument_list type="generic">&lt;<argument><expr><name>EnumeratorInfo</name></expr></argument>&gt;</argument_list></name></type> <name>EnumerationMap</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>EnumerationMap</name><operator>::</operator><name>Entry</name> <name>EnumerationMapEntry</name></expr>;</expr_stmt></typedef>

<macro><name>OptionValueEnumeration</name><argument_list>(<argument>const OptionEnumValues &amp;enumerators</argument>, <argument>enum_type value</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>OptionValueEnumeration</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><name>OptionValue</name><operator>::</operator><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>eTypeEnum</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>DumpValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExecutionContext</name> <operator>*</operator><name>exe_ctx</name></expr></argument>, <argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>dump_mask</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type>
<name>SetValueFromString</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>value</name></expr></argument>,
<argument><expr><name>VarSetOperationType</name> <name>op</name> <operator>=</operator> <name>eVarSetOperationAssign</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> override <block>{<block_content>
<expr_stmt><expr><name>m_current_value</name> <operator>=</operator> <name>m_default_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m_value_was_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>AutoComplete</name><argument_list>(<argument><expr><name>CommandInterpreter</name> <operator>&amp;</operator><name>interpreter</name></expr></argument>,
<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>enum_type</name></type> <name>operator</name><init>=<expr><operator>(</operator><name>enum_type</name> <name>value</name><operator>)</operator> <block>{
<expr><name>m_current_value</name> <operator>=</operator> <name>value</name></expr>;
<return>return <expr><name>m_current_value</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><name>enum_type</name> <macro><name>GetCurrentValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_current_value</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>enum_type</name> <macro><name>GetDefaultValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_default_value</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetCurrentValue</name><parameter_list>(<parameter><decl><type><name>enum_type</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_current_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetDefaultValue</name><parameter_list>(<parameter><decl><type><name>enum_type</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_default_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<function_decl><type><name>void</name></type> <name>SetEnumerations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionEnumValues</name> <modifier>&amp;</modifier></type><name>enumerators</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>enum_type</name></type> <name>m_current_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>enum_type</name></type> <name>m_default_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EnumerationMap</name></type> <name>m_enumerations</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
