<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/DataFormatters/TypeSynthetic.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_DATAFORMATTERS_TYPESYNTHETIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_DATAFORMATTERS_TYPESYNTHETIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SyntheticChildrenFrontEnd</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ValueObject</name> <modifier>&amp;</modifier></type><name>m_backend</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>SetValid</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_valid</name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_valid</name></expr>;</return> </block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SyntheticChildrenFrontEnd</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>backend</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>m_backend</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_valid</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>SyntheticChildrenFrontEnd</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>CalculateNumChildren</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>size_t</name></type> <name>CalculateNumChildren</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>count</name> <init>= <expr><call><name>CalculateNumChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>count</name> <operator>&lt;=</operator> <name>max</name></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><name>max</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>size_t</name></type> <name>GetIndexOfChildWithName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>








<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Update</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>MightHaveChildren</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSyntheticValue</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>




<function><type><name>virtual</name> <name>ConstString</name></type> <name>GetSyntheticTypeName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name></expr></argument>&gt;</argument_list></name> <name>AutoPointer</name></expr>;</expr_stmt></typedef>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>CreateValueObjectFromExpression</name><argument_list>(<argument>llvm::StringRef name</argument>,
<argument>llvm::StringRef expression</argument>,
<argument>const ExecutionContext &amp;exe_ctx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name>
<macro><name>CreateValueObjectFromAddress</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>uint64_t address</argument>,
<argument>const ExecutionContext &amp;exe_ctx</argument>,
<argument>CompilerType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>CreateValueObjectFromData</name><argument_list>(<argument>llvm::StringRef name</argument>,
<argument>const DataExtractor &amp;data</argument>,
<argument>const ExecutionContext &amp;exe_ctx</argument>,
<argument>CompilerType type</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_valid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SyntheticChildrenFrontEnd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticChildrenFrontEnd</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SyntheticChildrenFrontEnd</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SyntheticChildrenFrontEnd</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SyntheticValueProviderFrontEnd</name> <range>: <expr><name>public</name> <name>SyntheticChildrenFrontEnd</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SyntheticValueProviderFrontEnd</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>backend</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SyntheticChildrenFrontEnd</name><argument_list>(<argument>backend</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>SyntheticValueProviderFrontEnd</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>

<name>size_t</name> <macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>UINT32_MAX</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>Update</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>MightHaveChildren</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>SyntheticValueProviderFrontEnd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticValueProviderFrontEnd</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<name>delete</name></expr>;
<expr><specifier>const</specifier> <name>SyntheticValueProviderFrontEnd</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>SyntheticValueProviderFrontEnd</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SyntheticChildren</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Flags</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Flags</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>Flags</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>other.m_flags</argument>)</argument_list></macro> <block>{}</block>

<macro><name>Flags</name><argument_list>(<argument>uint32_t value</argument>)</argument_list></macro> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>value</argument>)</argument_list></macro> <block>{}</block>

<name>Flags</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>rhs</name> <operator>!=</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name><name>rhs</name><operator>.</operator><name>m_flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>Flags</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<expr><name>m_flags</name> <operator>=</operator> <name>rhs</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetCascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name><operator>)</operator> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipPointers</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetSkipReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetSkipReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionSkipReferences</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetNonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionNonCacheable</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>GetFrontEndWantsDereference</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>m_flags</name> <operator>&amp;</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionFrontEndWantsDereference</name><operator>)</operator> <operator>==</operator>
<name>lldb</name><operator>::</operator><name>eTypeOptionFrontEndWantsDereference</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>SetFrontEndWantsDereference</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>|=</operator> <name>lldb</name><operator>::</operator><name>eTypeOptionFrontEndWantsDereference</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>lldb</name><operator>::</operator><name>eTypeOptionFrontEndWantsDereference</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_flags</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetValue</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_flags</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_flags</name> <init>= <expr><name>lldb</name><operator>::</operator><name>eTypeOptionCascade</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SyntheticChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_flags</name><argument_list>(<argument>flags</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>SyntheticChildren</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>Cascades</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetCascades</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipPointers</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SkipsReferences</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetSkipReferences</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>NonCacheable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetNonCacheable</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>WantsDereference</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetFrontEndWantsDereference</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetCascades</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetCascades</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsPointers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipPointers</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetSkipsReferences</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetSkipReferences</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetNonCacheable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetNonCacheable</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetOptions</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_flags</name><operator>.</operator><name>GetValue</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetOptions</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_flags</name><operator>.</operator><name>SetValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsScripted</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetDescription</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>SyntheticChildrenFrontEnd</name><operator>::</operator><name>AutoPointer</name>
<call><name>GetFrontEnd</name><argument_list>(<argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>backend</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildren</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<function><type><name>uint32_t</name> <modifier>&amp;</modifier></type><name>GetRevision</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_my_revision</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_my_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>SyntheticChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticChildren</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SyntheticChildren</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SyntheticChildren</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeFilterImpl</name> <range>: <expr><name>public</name> <name>SyntheticChildren</name> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_expression_paths</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>TypeFilterImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticChildren</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SyntheticChildren</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_expression_paths</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<call><name>TypeFilterImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticChildren</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>initializer_list</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>items</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SyntheticChildren</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_expression_paths</name><argument_list>()</argument_list></macro> <expr><block>{
<for>for <control>(<init><decl><type><name>auto</name></type> <name>path</name> <range>: <expr><name>items</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AddExpressionPath</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>

<name>void</name> <macro><name>AddExpressionPath</name><argument_list>(<argument>const char *path</argument>)</argument_list></macro> <block>{
<expr><call><name>AddExpressionPath</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Clear</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>m_expression_paths</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>size_t</name> <macro><name>GetCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_expression_paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetExpressionPathAtIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>m_expression_paths</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>SetExpressionPathAtIndex</name><argument_list>(<argument>size_t i</argument>, <argument>const char *path</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>SetExpressionPathAtIndex</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <call><name>AddExpressionPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>SetExpressionPathAtIndex</name><argument_list>(<argument>size_t i</argument>, <argument>const std::string &amp;path</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>IsScripted</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>class</name> <name>FrontEnd</name> <operator>:</operator> <name>public</name> <name>SyntheticChildrenFrontEnd</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>FrontEnd</name><argument_list>(<argument><expr><name>TypeFilterImpl</name> <operator>*</operator><name>flt</name></expr></argument>, <argument><expr><name>ValueObject</name> <operator>&amp;</operator><name>backend</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SyntheticChildrenFrontEnd</name><argument_list>(<argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>, <macro><name>filter</name><argument_list>(<argument>flt</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>FrontEnd</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>filter</name><operator>-&gt;</operator><name>GetCount</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <call><name><name>filter</name><operator>-&gt;</operator><name>GetCount</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ValueObjectSP</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>m_backend</name><operator>.</operator><name>GetSyntheticExpressionPathChild</name></name><argument_list>(
<argument><expr><call><name><name>filter</name><operator>-&gt;</operator><name>GetExpressionPathAtIndex</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>Update</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>MightHaveChildren</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>filter</name><operator>-&gt;</operator><name>GetCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block>

<name>size_t</name> <macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <name>override</name></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<name>private</name><operator>:</operator>
<name>TypeFilterImpl</name> <operator>*</operator><name>filter</name></block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FrontEnd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FrontEnd</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FrontEnd</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FrontEnd</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<expr_stmt><expr><name>SyntheticChildrenFrontEnd</name><operator>::</operator><name>AutoPointer</name>
<macro><name>GetFrontEnd</name><argument_list>(<argument>ValueObject &amp;backend</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>SyntheticChildrenFrontEnd</name><operator>::</operator><macro><name>AutoPointer</name><argument_list>(<argument>new FrontEnd(this, backend)</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeFilterImpl</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>TypeFilterImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TypeFilterImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypeFilterImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TypeFilterImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>CXXSyntheticChildren</name> <range>: <expr><name>public</name> <name>SyntheticChildren</name> <block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name> <operator>*</operator><operator>(</operator><name>CXXSyntheticChildren</name> <operator>*</operator>,
<name>lldb</name><operator>::</operator><name>ValueObjectSP</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>CreateFrontEndCallback</name></expr>;</expr_stmt></typedef>
<macro><name>CXXSyntheticChildren</name><argument_list>(<argument>const SyntheticChildren::Flags &amp;flags</argument>,
<argument>const char *description</argument>, <argument>CreateFrontEndCallback callback</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SyntheticChildren</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call>, <call><name>m_create_callback</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,
<macro><name>m_description</name><argument_list>(<argument>description ? description : <literal type="string">""</literal></argument>)</argument_list></macro> <block>{}</block></block>

<name>bool</name> <macro><name>IsScripted</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SyntheticChildrenFrontEnd</name><operator>::</operator><name>AutoPointer</name>
<macro><name>GetFrontEnd</name><argument_list>(<argument>ValueObject &amp;backend</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>SyntheticChildrenFrontEnd</name><operator>::</operator><call><name>AutoPointer</name><argument_list>(
<argument><expr><call><name>m_create_callback</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>backend</name><operator>.</operator><name>GetSP</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>CreateFrontEndCallback</name></type> <name>m_create_callback</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_description</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>CXXSyntheticChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXSyntheticChildren</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXSyntheticChildren</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CXXSyntheticChildren</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>ScriptedSyntheticChildren</name> <range>: <expr><name>public</name> <name>SyntheticChildren</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_python_class</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_python_code</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ScriptedSyntheticChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SyntheticChildren</name><operator>::</operator><name>Flags</name> <operator>&amp;</operator><name>flags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>pclass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>pcode</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SyntheticChildren</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_python_class</name><argument_list>()</argument_list></call></expr>, <macro><name>m_python_code</name><argument_list>()</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>pclass</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_python_class</name> <operator>=</operator> <name>pclass</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>pcode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_python_code</name> <operator>=</operator> <name>pcode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPythonClassName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_python_class</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPythonCode</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_python_code</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetPythonClassName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>m_python_class</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_python_code</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetPythonCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>m_python_code</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetDescription</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>IsScripted</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>FrontEnd</name> <range>: <expr><name>public</name> <name>SyntheticChildrenFrontEnd</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>FrontEnd</name><argument_list>(<argument>std::string pclass</argument>, <argument>ValueObject &amp;backend</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>FrontEnd</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <call><name>IsValid</name><argument_list>()</argument_list></call></expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>CalculateNumChildren</name><argument_list>(<argument>uint32_t max</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetChildAtIndex</name><argument_list>(<argument>size_t idx</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>Update</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>MightHaveChildren</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>size_t</name> <macro><name>GetIndexOfChildWithName</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetSyntheticValue</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetSyntheticTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SyntheticChildrenFrontEnd</name></expr></argument>&gt;</argument_list></name> <name>SharedPointer</name></expr>;</expr_stmt></typedef>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_python_class</name></block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_wrapper_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ScriptInterpreter</name> <modifier>*</modifier></type><name>m_interpreter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FrontEnd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FrontEnd</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FrontEnd</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FrontEnd</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<expr_stmt><expr><name>SyntheticChildrenFrontEnd</name><operator>::</operator><name>AutoPointer</name>
<macro><name>GetFrontEnd</name><argument_list>(<argument>ValueObject &amp;backend</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>auto</name> <name>synth_ptr</name> <operator>=</operator> <name>SyntheticChildrenFrontEnd</name><operator>::</operator><macro><name>AutoPointer</name><argument_list>(
<argument>new FrontEnd(m_python_class, backend)</argument>)</argument_list></macro></expr>;
<if_stmt><if>if <condition>(<expr><name>synth_ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>FrontEnd</name> <operator>*</operator><operator>)</operator><call><name><name>synth_ptr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>synth_ptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
}

private:
<expr_stmt><expr><call><name>ScriptedSyntheticChildren</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScriptedSyntheticChildren</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScriptedSyntheticChildren</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ScriptedSyntheticChildren</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
