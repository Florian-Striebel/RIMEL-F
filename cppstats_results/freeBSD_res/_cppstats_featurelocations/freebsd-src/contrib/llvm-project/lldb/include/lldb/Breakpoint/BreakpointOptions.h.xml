<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Baton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>BreakpointOptions</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>BreakpointLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>BreakpointName</name></decl>;</decl_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>BreakpointOptionGroup</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Breakpoint</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>OptionKind</name> <block>{
<decl><name>eCallback</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>eEnabled</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>eOneShot</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>eIgnoreCount</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>eThreadSpec</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>eCondition</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>eAutoContinue</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>eAllOptions</name> <init>= <expr><operator>(</operator><name>eCallback</name> <operator>|</operator> <name>eEnabled</name> <operator>|</operator> <name>eOneShot</name> <operator>|</operator> <name>eIgnoreCount</name> <operator>|</operator> <name>eThreadSpec</name>
<operator>|</operator> <name>eCondition</name> <operator>|</operator> <name>eAutoContinue</name><operator>)</operator></expr></init></decl>
}</block>;</enum>
<struct>struct <name>CommandData</name> <block>{
<expr_stmt><expr><call><name>CommandData</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>user_source</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>script_source</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>CommandData</name><argument_list>(<argument>const StringList &amp;user_source</argument>, <argument>lldb::ScriptLanguage interp</argument>)</argument_list></macro>
<operator>:</operator> <call><name>user_source</name><argument_list>(<argument><expr><name>user_source</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>script_source</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>interpreter</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>stop_on_error</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>CommandData</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"BKPTCMDData"</literal></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <call><name>SerializeToStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>options_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringList</name></type> <name>user_source</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>script_source</name></expr>;</expr_stmt>
enum <expr_stmt><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <name>interpreter</name> <operator>=</operator>
<name>lldb</name><operator>::</operator><name>eScriptLanguageNone</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stop_on_error</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OptionNames</name> <range>: <expr><name>uint32_t</name> <block>{
<expr><name>UserSource</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>Interpreter</name></expr>,
<expr><name>StopOnError</name></expr>,
<expr><name>LastOptionName</name></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
<modifier>*</modifier></type><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>OptionNames</name><operator>::</operator><name>LastOptionName</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetKey</name><parameter_list>(<parameter><decl><type><name>OptionNames</name></type> <name>enum_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>g_option_names</name><index>[<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>enum_value</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>CommandBaton</name> <range>: <expr><name>public</name> <name><name>TypedBaton</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>CommandBaton</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name> <name>Data</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TypedBaton</name><argument_list>(<argument>std::move(Data)</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>llvm::raw_ostream &amp;s</argument>, <argument>lldb::DescriptionLevel level</argument>,
<argument>unsigned indentation</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandBaton</name></expr></argument>&gt;</argument_list></name> <name>CommandBatonSP</name></expr>;</expr_stmt></typedef>





















<macro><name>BreakpointOptions</name><argument_list>(<argument>const char *condition</argument>, <argument>bool enabled = true</argument>,
<argument>int32_t ignore = <literal type="number">0</literal></argument>, <argument>bool one_shot = false</argument>,
<argument>bool auto_continue = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<macro><name>BreakpointOptions</name><argument_list>(<argument>bool all_flags_set</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>BreakpointOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BreakpointOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BreakpointOptions</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateFromStructuredData</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StructuredData</name><operator>::</operator><name>Dictionary</name> <operator>&amp;</operator><name>data_dict</name></expr></argument>,
<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <call><name>SerializeToStructuredData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetSerializationKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"BKPTOptions"</literal></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>BreakpointOptions</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BreakpointOptions</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>CopyOverSetOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BreakpointOptions</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>












































<decl_stmt><decl><type><name>void</name></type> <name>SetCallback</name><argument_list>(<argument><expr><name>BreakpointHitCallback</name> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BatonSP</name> <operator>&amp;</operator><name>baton_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>synchronous</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetCallback</name><argument_list>(<argument><expr><name>BreakpointHitCallback</name> <name>callback</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>BreakpointOptions</name><operator>::</operator><name>CommandBatonSP</name> <operator>&amp;</operator><name>command_baton_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>synchronous</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<function_decl><type><name>bool</name></type> <name>GetCommandLineCallbacks</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>command_list</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ClearCallback</name><parameter_list>()</parameter_list>;</function_decl>






















<decl_stmt><decl><type><name>bool</name></type> <name>InvokeCallback</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>IsCallbackSynchronous</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_callback_is_synchronous</name></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>Baton</name> <modifier>*</modifier></type><name>GetBaton</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><specifier>const</specifier> <name>Baton</name> <operator>*</operator><macro><name>GetBaton</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<function_decl><type><name>void</name></type> <name>SetCondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condition</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetConditionText</name><argument_list>(<argument><expr><name>size_t</name> <operator>*</operator><name>hash</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>IsEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_enabled</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_enabled</name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_flags</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>eEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>IsAutoContinue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_auto_continue</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>SetAutoContinue</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_continue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_auto_continue</name> <operator>=</operator> <name>auto_continue</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_flags</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>eAutoContinue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>IsOneShot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_one_shot</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>SetOneShot</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>one_shot</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_one_shot</name> <operator>=</operator> <name>one_shot</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_flags</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>eOneShot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>SetIgnoreCount</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>m_ignore_count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_set_flags</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>eIgnoreCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIgnoreCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_ignore_count</name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><specifier>const</specifier> <name>ThreadSpec</name> <operator>*</operator><macro><name>GetThreadSpecNoCreate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>ThreadSpec</name> <modifier>*</modifier></type><name>GetThreadSpec</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetThreadID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>tid_t</name> <name>thread_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>HasCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>NullCallback</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>, <argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>SetCommandDataCallback</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CommandData</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cmd_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>AnySet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>m_set_flags</name><operator>.</operator><name>AnySet</name></name><argument_list>(<argument><expr><name>eAllOptions</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>

<function><type><name>bool</name></type> <name>IsOptionSet</name><parameter_list>(<parameter><decl><type><name>OptionKind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>m_set_flags</name><operator>.</operator><name>Test</name></name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OptionNames</name> <block>{<block_content>
<expr_stmt><expr><name>ConditionText</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>IgnoreCount</name></expr><operator>,</operator>
<expr><name>EnabledState</name></expr><operator>,</operator>
<expr><name>OneShotState</name></expr><operator>,</operator>
<expr><name>AutoContinue</name></expr><operator>,</operator>
<expr><name>LastOptionName</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>g_option_names</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>OptionNames</name><operator>::</operator><name>LastOptionName</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetKey</name><parameter_list>(<parameter><decl><type><name>OptionNames</name></type> <name>enum_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>g_option_names</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>enum_value</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>BreakpointOptionsCallbackFunction</name><argument_list>(
<argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>, <argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_id</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <name>break_loc_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetThreadSpec</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadSpec</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>thread_spec_up</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>



<decl_stmt><decl><type><name>BreakpointHitCallback</name></type> <name>m_callback</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BatonSP</name> <name>m_callback_baton_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_baton_is_command_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_callback_is_synchronous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_one_shot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_ignore_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadSpec</name></expr></argument>&gt;</argument_list></name> <name>m_thread_spec_up</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_condition_text</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>m_condition_text_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_inject_condition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_auto_continue</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Flags</name></type> <name>m_set_flags</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
