<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/API/SBDebugger.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_API_SBDEBUGGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_API_SBDEBUGGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBDefines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/API/SBPlatform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBInputReader</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SBInputReader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SBInputReader</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>SBError</name></type> <name>Initialize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name> <operator>&amp;</operator><name>sb_debugger</name></expr></argument>,
<argument><expr><name>unsigned</name> <macro><name>long</name> <argument_list>(<argument>*callback</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>lldb</name><operator>::</operator><name>SBInputReader</name> <operator>*</operator><operator>,</operator>
<name>lldb</name><operator>::</operator><name>InputReaderAction</name><operator>,</operator>
<name>char</name> <specifier>const</specifier> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>InputReaderGranularity</name> <name>b</name></expr></argument>, <argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator><name>c</name></expr></argument>,
<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>bool</name> <name>e</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>SetIsDone</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>IsActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLDB_API</name></type> <name>SBDebugger</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FLAGS_ANONYMOUS_ENUM</name><argument_list>()</argument_list></macro><block>{<block_content><expr><name>eBroadcastBitProgress</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></block_content>}</block><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SBDebugger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBDebugger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBDebugger</name> <operator>&amp;</operator><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBDebugger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <operator>&amp;</operator><name>debugger_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SBDebugger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBBroadcaster</name> <call><name>GetBroadcaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




























<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetProgressFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>progress_id</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>completed</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>total</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>is_debugger_specific</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBDebugger</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBError</name> <call><name>InitializeWithErrorHandling</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBDebugger</name> <call><name>Create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBDebugger</name> <macro><name>Create</name><argument_list>(<argument>bool source_init_files</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBDebugger</name> <macro><name>Create</name><argument_list>(<argument>bool source_init_files</argument>,
<argument>lldb::LogOutputCallback log_callback</argument>,
<argument>void *baton</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBDebugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MemoryPressureDetected</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetAsync</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetAsync</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SkipLLDBInitFiles</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SkipAppInitFiles</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetInputFileHandle</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>transfer_ownership</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetOutputFileHandle</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>transfer_ownership</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetErrorFileHandle</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>transfer_ownership</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetInputFileHandle</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetOutputFileHandle</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetErrorFileHandle</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetInputFile</name><parameter_list>(<parameter><decl><type><name>SBFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetOutputFile</name><parameter_list>(<parameter><decl><type><name>SBFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetErrorFile</name><parameter_list>(<parameter><decl><type><name>SBFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetInputFile</name><parameter_list>(<parameter><decl><type><name>FileSP</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetOutputFile</name><parameter_list>(<parameter><decl><type><name>FileSP</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBError</name></type> <name>SetErrorFile</name><parameter_list>(<parameter><decl><type><name>FileSP</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBFile</name></type> <name>GetInputFile</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBFile</name></type> <name>GetOutputFile</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBFile</name></type> <name>GetErrorFile</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SaveInputTerminalState</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RestoreInputTerminalState</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBCommandInterpreter</name> <call><name>GetCommandInterpreter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>HandleCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBListener</name> <call><name>GetListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleProcessEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>out</name></expr></argument>,
<argument><expr><name>FILE</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleProcessEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>SBFile</name> <name>out</name></expr></argument>, <argument><expr><name>SBFile</name> <name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleProcessEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBProcess</name> <operator>&amp;</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>SBEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>FileSP</name> <name>out</name></expr></argument>, <argument><expr><name>FileSP</name> <name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <macro><name>CreateTarget</name><argument_list>(<argument>const char *filename</argument>, <argument>const char *target_triple</argument>,
<argument>const char *platform_name</argument>,
<argument>bool add_dependent_modules</argument>, <argument>lldb::SBError &amp;error</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>CreateTargetWithFileAndTargetTriple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>target_triple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>CreateTargetWithFileAndArch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>archname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>CreateTarget</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>GetDummyTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DeleteTarget</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <macro><name>GetTargetAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetIndexOfTarget</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <name>target</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <macro><name>FindTargetWithProcessID</name><argument_list>(<argument>pid_t pid</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>FindTargetWithFileAndArch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>uint32_t</name></type> <name>GetNumTargets</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>GetSelectedTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetSelectedTarget</name><parameter_list>(<parameter><decl><type><name>SBTarget</name> <modifier>&amp;</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBPlatform</name> <call><name>GetSelectedPlatform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSelectedPlatform</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBPlatform</name> <operator>&amp;</operator><name>platform</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>uint32_t</name></type> <name>GetNumPlatforms</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBPlatform</name> <macro><name>GetPlatformAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>uint32_t</name></type> <name>GetNumAvailablePlatforms</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBStructuredData</name> <macro><name>GetAvailablePlatformInfoAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBSourceManager</name> <call><name>GetSourceManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SetCurrentPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetCurrentPlatformSDKRoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sysroot</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>SetUseExternalEditor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>GetUseExternalEditor</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetUseColor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_color</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseColor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>SetUseSourceCache</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_source_cache</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>GetUseSourceCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GetDefaultArchitecture</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arch_name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>arch_name_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SetDefaultArchitecture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch_name</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <call><name>GetScriptingLanguage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>script_language_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetVersionString</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>StateAsCString</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>SBStructuredData</name></type> <name>GetBuildConfiguration</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>StateIsRunningState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>StateIsStoppedState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>EnableLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>categories</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SetLoggingCallback</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LogOutputCallback</name> <name>log_callback</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>baton</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>DispatchInput</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>baton</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DispatchInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DispatchInputInterrupt</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DispatchInputEndOfFile</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>PushInputReader</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBInputReader</name> <operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetInstanceName</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SBDebugger</name></type> <name>FindDebuggerWithID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBError</name> <call><name>SetInternalVariable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>var_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>debugger_instance_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>SBStringList</name>
<call><name>GetInternalVariableValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>var_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>debugger_instance_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>SBStream</name> <operator>&amp;</operator><name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetTerminalWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetTerminalWidth</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>term_width</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>user_id_t</name> <call><name>GetID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPrompt</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetPrompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetReproducerPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <macro><name>GetScriptLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetScriptLanguage</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <name>script_lang</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetCloseInputOnEOF</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetCloseInputOnEOF</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeCategory</name></type> <name>GetCategory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category_name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SBTypeCategory</name></type> <name>GetCategory</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>lang_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>SBTypeCategory</name></type> <name>CreateCategory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DeleteCategory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>GetNumCategories</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeCategory</name></type> <name>GetCategoryAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeCategory</name></type> <name>GetDefaultCategory</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeFormat</name></type> <name>GetFormatForType</name><parameter_list>(<parameter><decl><type><name>SBTypeNameSpecifier</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeSummary</name></type> <name>GetSummaryForType</name><parameter_list>(<parameter><decl><type><name>SBTypeNameSpecifier</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeFilter</name></type> <name>GetFilterForType</name><parameter_list>(<parameter><decl><type><name>SBTypeNameSpecifier</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBTypeSynthetic</name></type> <name>GetSyntheticForType</name><parameter_list>(<parameter><decl><type><name>SBTypeNameSpecifier</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>RunCommandInterpreter</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_handle_events</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>spawn_thread</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>void</name></type> <name>RunCommandInterpreter</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_handle_events</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>spawn_thread</name></decl></parameter>,
<parameter><decl><type><name>SBCommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>num_errors</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>quit_requested</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>stopped_for_crash</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SBCommandInterpreterRunResult</name></type>
<name>RunCommandInterpreter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBCommandInterpreterRunOptions</name> <modifier>&amp;</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>SBError</name></type> <name>RunREPL</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <name>language</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>repl_options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBCommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBInputReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBListener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBProcess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBSourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SBTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>SBTarget</name> <call><name>FindTargetWithLLDBProcess</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>processSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <operator>&amp;</operator><name>debugger_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Debugger</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>Debugger</name> <operator>&amp;</operator><macro><name>ref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>DebuggerSP</name> <operator>&amp;</operator><macro><name>get_sp</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>DebuggerSP</name> <name>m_opaque_sp</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
