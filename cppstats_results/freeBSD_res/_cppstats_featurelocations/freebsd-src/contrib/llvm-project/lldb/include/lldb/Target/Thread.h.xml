<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Thread.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ExecutionContextScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/RegisterCheckpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackFrameList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Broadcaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_THREAD_MAX_STOP_EXC_DATA</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanStack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ThreadProperties</name><argument_list>(<argument>bool is_global</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>ThreadProperties</name><argument_list>()</argument_list></macro> <name>override</name></expr>;








<expr><specifier>const</specifier> <name>RegularExpression</name> <operator>*</operator><call><name>GetSymbolsToAvoidRegexp</name><argument_list>()</argument_list></call></expr>;

<expr><name>FileSpecList</name> <macro><name>GetLibrariesToAvoid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetTraceEnabledState</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetStepInAvoidsNoDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>GetStepOutAvoidsNoDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint64_t</name> <macro><name>GetMaxBacktraceDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadProperties</name></expr></argument>&gt;</argument_list></name> <name>ThreadPropertiesSP</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>Thread</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>Thread</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>ThreadProperties</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>UserID</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>ExecutionContextScope</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>Broadcaster</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <block>{
<decl><name>eBroadcastBitStackChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadSuspended</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadResumed</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitSelectedFrameChanged</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>eBroadcastBitThreadSelected</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>ConstString</name> <modifier>&amp;</modifier></type><name>GetStaticBroadcasterClass</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ConstString</name> <operator>&amp;</operator><macro><name>GetBroadcasterClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>GetStaticBroadcasterClass</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadEventData</name> <range>: <expr><name>public</name> <name>EventData</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ThreadEventData</name><argument_list>(<argument>const lldb::ThreadSP thread_sp</argument>)</argument_list></macro></expr>;

<macro><name>ThreadEventData</name><argument_list>(<argument>const lldb::ThreadSP thread_sp</argument>, <argument>const StackID &amp;stack_id</argument>)</argument_list></macro>;

<expr><call><name>ThreadEventData</name><argument_list>()</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ThreadEventData</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;

<expr><name>ConstString</name> <macro><name>GetFlavor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ThreadEventData</name><operator>::</operator><call><name>GetFlavorString</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>Dump</name><argument_list>(<argument>Stream *s</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>ThreadEventData</name> <operator>*</operator><call><name>GetEventDataFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetThreadFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>StackID</name> <call><name>GetStackIDFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <call><name>GetStackFrameFromEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Event</name> <operator>*</operator><name>event_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_thread_sp</name></expr>;</return> }</block>

<name>StackID</name> <macro><name>GetStackID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stack_id</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>lldb</name><operator>::</operator><name>ThreadSP</name> <name>m_thread_sp</name></expr>;
<expr><name>StackID</name> <name>m_stack_id</name></expr>;

<expr><call><name>ThreadEventData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadEventData</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadEventData</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadEventData</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>ThreadStateCheckpoint</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>orig_stop_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <name>stop_info_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>m_completed_plan_checkpoint</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterCheckpointSP</name>
<name>register_backup_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_inlined_depth</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>current_inlined_pc</name></expr>;</expr_stmt>
}</block>;</struct>












<macro><name>Thread</name><argument_list>(<argument>Process &amp;process</argument>, <argument>lldb::tid_t tid</argument>, <argument>bool use_invalid_index_id = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Thread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsInitialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SettingsTerminate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ThreadPropertiesSP</name> <modifier>&amp;</modifier></type><name>GetGlobalProperties</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>GetProcess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_process_wp</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>GetResumeSignal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_resume_signal</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetResumeSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_resume_signal</name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetState</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>void</name></type> <name>SetResumeState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>state</name></expr></argument>, <argument><expr><name>bool</name> <name>override_suspend</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m_resume_state</name> <operator>==</operator> <name>lldb</name><operator>::</operator><name>eStateSuspended</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>override_suspend</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m_resume_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetResumeState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_resume_state</name></expr>;</return> }</block></expr></expr_stmt>





<function_decl><type><name>void</name></type> <name>SetupForResume</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>ShouldResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>WillResume</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>resume_state</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidResume</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>DidStop</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>RefreshStateAfterStop</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>void</name></type> <name>SelectMostRelevantFrame</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetStopDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetStopDescriptionRaw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>WillStop</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ShouldStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Vote</name></type> <name>ShouldReportStop</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Vote</name></type> <name>ShouldReportRun</name><parameter_list>(<parameter><decl><type><name>Event</name> <modifier>*</modifier></type><name>event_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>virtual</name> <name>bool</name></type> <name>MatchesSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ThreadSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <call><name>GetStopInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopReason</name> <call><name>GetStopReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>StopInfoIsUpToDate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>SetStopInfoToNothing</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ThreadStoppedForAReason</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>RunModeAsString</name><argument_list>(<argument>lldb::RunMode mode</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>StopReasonAsString</name><argument_list>(<argument>lldb::StopReason reason</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetInfo</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>











<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>GetExtendedInfo</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_extended_info_fetched</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_extended_info</name> <operator>=</operator> <call><name>FetchThreadExtendedInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_extended_info_fetched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return m_extended_info</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

















<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>LazyBool</name> <macro><name>GetAssociatedWithLibdispatchQueue</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>eLazyBoolNo</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetAssociatedWithLibdispatchQueue</name><argument_list>(
<argument><expr><name>lldb_private</name><operator>::</operator><name>LazyBool</name> <name>associated_with_libdispatch_queue</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>














<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>queue_id_t</name> <macro><name>GetQueueID</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>LLDB_INVALID_QUEUE_ID</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetQueueID</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>queue_id_t</name> <name>new_val</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>









<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetQueueName</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetQueueName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>











<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>QueueKind</name> <macro><name>GetQueueKind</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>lldb</name><operator>::</operator><name>eQueueKindUnknown</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetQueueKind</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>QueueKind</name> <name>kind</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>









<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>QueueSP</name> <macro><name>GetQueue</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>lldb</name><operator>::</operator><call><name>QueueSP</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetQueueLibdispatchQueueAddress</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetQueueLibdispatchQueueAddress</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>dispatch_queue_t</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>













<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>ThreadHasQueueInformation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>uint32_t</name></type> <name>GetStackFrameCount</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetNumFrames</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetStackFrameAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetFrameAtIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StackFrameSP</name>
<macro><name>GetFrameWithConcreteFrameIndex</name><argument_list>(<argument>uint32_t unwind_idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>DecrementCurrentInlinedDepth</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>DecrementCurrentInlinedDepth</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetCurrentInlinedDepth</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentInlinedDepth</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>Status</name></type> <name>ReturnFromFrameWithIndex</name><argument_list>(<argument><expr><name>uint32_t</name> <name>frame_idx</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>return_value_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>broadcast</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>ReturnFromFrame</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <name>frame_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>return_value_sp</name></expr></argument>,
<argument><expr><name>bool</name> <name>broadcast</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>JumpToLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>line</name></expr></argument>,
<argument><expr><name>bool</name> <name>can_leave_function</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>warnings</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>GetFrameWithStackID</name><argument_list>(<argument>const StackID &amp;stack_id</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>stack_id</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetFrameWithStackID</name><argument_list>(<argument><expr><name>stack_id</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>lldb</name><operator>::</operator><call><name>StackFrameSP</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uint32_t</name></type> <name>GetSelectedFrameIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetSelectedFrameIndex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <call><name>GetSelectedFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>SetSelectedFrame</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>StackFrame</name> <operator>*</operator><name>frame</name></expr></argument>,
<argument><expr><name>bool</name> <name>broadcast</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>SetSelectedFrameByIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>frame_idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>broadcast</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetSelectedFrameByIndexNoisily</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>frame_idx</name></decl></parameter>,
<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>output_stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetDefaultFileAndLineToSelectedFrame</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>GetStackFrameList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetDefaultFileAndLineToSelectedFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <call><name>GetRegisterContext</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name>
<call><name>CreateRegisterContextForFrame</name><argument_list>(<argument><expr><name>StackFrame</name> <operator>*</operator><name>frame</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>ClearStackFrames</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>SetBackingThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>GetBackingThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>lldb</name><operator>::</operator><call><name>ThreadSP</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>ClearBackingThread</name><parameter_list>()</parameter_list> <block>{<block_content>







</block_content>}</block></function>
















<decl_stmt><decl><type><name>void</name></type> <name>DumpTraceInstructions</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>size_t</name> <name>count</name></expr></argument>,
<argument><expr><name>size_t</name> <name>start_position</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>DumpUsingSettingsFormat</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>frame_idx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>stop_format</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>bool</name> <name>print_json_thread</name></expr></argument>, <argument><expr><name>bool</name> <name>print_json_stopinfo</name></expr></argument>)</argument_list></decl>;</decl_stmt>





















<function_decl><type><name>virtual</name> <name>Status</name></type>
<name>StepIn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>source_step</name></decl></parameter>,
<parameter><decl><type><name>LazyBool</name></type> <name>step_in_avoids_code_without_debug_info</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl></parameter>,
<parameter><decl><type><name>LazyBool</name></type> <name>step_out_avoids_code_without_debug_info</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>virtual</name> <name>Status</name></type> <name>StepOver</name><parameter_list>(
<parameter><decl><type><name>bool</name></type> <name>source_step</name></decl></parameter>,
<parameter><decl><type><name>LazyBool</name></type> <name>step_out_avoids_code_without_debug_info</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>virtual</name> <name>Status</name></type> <name>StepOut</name><parameter_list>()</parameter_list>;</function_decl>








<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <call><name>GetThreadPointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetThreadLocalData</name><argument_list>(<argument>const lldb::ModuleSP module</argument>,
<argument>lldb::addr_t tls_file_addr</argument>)</argument_list></macro></expr>;</expr_stmt>










<function_decl><type><name>virtual</name> <name>bool</name></type> <name>SafeToCallFunctions</name><parameter_list>()</parameter_list>;</function_decl>






































<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueBasePlan</name><argument_list>(<argument>bool abort_other_plans</argument>)</argument_list></macro></expr>;</expr_stmt>





















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepSingleInstruction</name><argument_list>(
<argument>bool step_over</argument>, <argument>bool abort_other_plans</argument>, <argument>bool stop_other_threads</argument>,
<argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>







































<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepOverRange</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>const AddressRange &amp;range</argument>,
<argument>const SymbolContext &amp;addr_context</argument>, <argument>lldb::RunMode stop_other_threads</argument>,
<argument>Status &amp;status</argument>,
<argument>LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepOverRange</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>const LineEntry &amp;line_entry</argument>,
<argument>const SymbolContext &amp;addr_context</argument>, <argument>lldb::RunMode stop_other_threads</argument>,
<argument>Status &amp;status</argument>,
<argument>LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate</argument>)</argument_list></macro></expr>;</expr_stmt>
















































<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepInRange</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>const AddressRange &amp;range</argument>,
<argument>const SymbolContext &amp;addr_context</argument>, <argument>const char *step_in_target</argument>,
<argument>lldb::RunMode stop_other_threads</argument>, <argument>Status &amp;status</argument>,
<argument>LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate</argument>,
<argument>LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepInRange</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>const LineEntry &amp;line_entry</argument>,
<argument>const SymbolContext &amp;addr_context</argument>, <argument>const char *step_in_target</argument>,
<argument>lldb::RunMode stop_other_threads</argument>, <argument>Status &amp;status</argument>,
<argument>LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate</argument>,
<argument>LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate</argument>)</argument_list></macro></expr>;</expr_stmt>









































<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepOut</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>SymbolContext *addr_context</argument>, <argument>bool first_insn</argument>,
<argument>bool stop_other_threads</argument>, <argument>Vote report_stop_vote</argument>, <argument>Vote report_run_vote</argument>,
<argument>uint32_t frame_idx</argument>, <argument>Status &amp;status</argument>,
<argument>LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate</argument>)</argument_list></macro></expr>;</expr_stmt>



























































<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepOutNoShouldStop</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>SymbolContext *addr_context</argument>, <argument>bool first_insn</argument>,
<argument>bool stop_other_threads</argument>, <argument>Vote report_stop_vote</argument>, <argument>Vote report_run_vote</argument>,
<argument>uint32_t frame_idx</argument>, <argument>Status &amp;status</argument>, <argument>bool continue_to_next_branch = false</argument>)</argument_list></macro></expr>;</expr_stmt>























<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>QueueThreadPlanForStepThrough</name><argument_list>(<argument>StackID &amp;return_stack_id</argument>,
<argument>bool abort_other_plans</argument>, <argument>bool stop_other_threads</argument>,
<argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>






















<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>QueueThreadPlanForRunToAddress</name><argument_list>(<argument>bool abort_other_plans</argument>, <argument>Address &amp;target_addr</argument>,
<argument>bool stop_other_threads</argument>, <argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>QueueThreadPlanForStepUntil</name><argument_list>(
<argument>bool abort_other_plans</argument>, <argument>lldb::addr_t *address_list</argument>, <argument>size_t num_addresses</argument>,
<argument>bool stop_others</argument>, <argument>uint32_t frame_idx</argument>, <argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadPlanSP</name>
<macro><name>QueueThreadPlanForStepScripted</name><argument_list>(<argument>bool abort_other_plans</argument>, <argument>const char *class_name</argument>,
<argument>StructuredData::ObjectSP extra_args_sp</argument>,
<argument>bool stop_other_threads</argument>, <argument>Status &amp;status</argument>)</argument_list></macro></expr>;</expr_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>AutoCompleteThreadPlans</name><argument_list>(<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>ThreadPlan</name> <operator>*</operator><macro><name>GetCurrentPlan</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<function_decl><type><name>Status</name></type> <name>UnwindInnermostExpression</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <macro><name>GetCompletedPlan</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <macro><name>GetExpressionVariable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>IsThreadPlanDone</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>WasThreadPlanDiscarded</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>CompletedPlanOverridesBreakpoint</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>













<decl_stmt><decl><type><name>Status</name></type> <name>QueueThreadPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>plan_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>abort_other_plans</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>DiscardThreadPlans</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>void</name></type> <name>DiscardThreadPlansUpToPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <operator>&amp;</operator><name>up_to_plan_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>DiscardThreadPlansUpToPlan</name><parameter_list>(<parameter><decl><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>up_to_plan_ptr</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>bool</name></type> <name>DiscardUserThreadPlansUpToIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>thread_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>CheckpointThreadState</name><parameter_list>(<parameter><decl><type><name>ThreadStateCheckpoint</name> <modifier>&amp;</modifier></type><name>saved_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type>
<name>RestoreRegisterStateFromCheckpoint</name><parameter_list>(<parameter><decl><type><name>ThreadStateCheckpoint</name> <modifier>&amp;</modifier></type><name>saved_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RestoreThreadStateFromCheckpoint</name><parameter_list>(<parameter><decl><type><name>ThreadStateCheckpoint</name> <modifier>&amp;</modifier></type><name>saved_state</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>uint32_t</name> <macro><name>GetIndexID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<function><type><name>virtual</name> <name>uint32_t</name></type> <name>GetExtendedBacktraceOriginatingIndexID</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>GetIndexID</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>





<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>GetProtocolID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetID</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <macro><name>CalculateTarget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>CalculateProcess</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CalculateThread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <macro><name>CalculateStackFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>CalculateExecutionContext</name><argument_list>(<argument><expr><name>ExecutionContext</name> <operator>&amp;</operator><name>exe_ctx</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name>
<call><name>GetStackFrameSPForStackFramePtr</name><argument_list>(<argument><expr><name>StackFrame</name> <operator>*</operator><name>stack_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>size_t</name></type> <name>GetStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start_frame</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_frames</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_frames_with_source</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>stop_format</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>only_stacks</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>GetStackFrameStatus</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>first_frame</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_frames</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show_frame_info</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>num_frames_with_source</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>m_destroy_called</name></expr>;</return> }</block></expr></expr_stmt>














<expr_stmt><expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <call><name>GetPrivateStopInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<function_decl><type><name>void</name></type> <name>CalculatePublicStopInfo</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>virtual</name> <name>bool</name></type> <name>CalculateStopInfo</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>














<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetTemporaryResumeState</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_temporary_resume_state</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetStopInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <operator>&amp;</operator><name>stop_info_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ResetStopInfo</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetShouldReportStop</name><parameter_list>(<parameter><decl><type><name>Vote</name></type> <name>vote</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>virtual</name> <name>void</name></type> <name>SetExtendedBacktraceToken</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>









<function><type><name>virtual</name> <name>uint64_t</name></type> <name>GetExtendedBacktraceToken</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>LLDB_INVALID_ADDRESS</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <call><name>GetCurrentException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ThreadSP</name> <call><name>GetCurrentExceptionBacktrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadPlan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ThreadEventData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StackFrameList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>StackFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>OperatingSystem</name></decl>;</decl_stmt>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>DestroyThread</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>ThreadPlanStack</name> <operator>&amp;</operator><macro><name>GetPlans</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>PushPlan</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <name>plan_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>PopPlan</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DiscardPlan</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ThreadPlan</name> <modifier>*</modifier></type><name>GetPreviousPlan</name><argument_list>(<argument><expr><name>ThreadPlan</name> <operator>*</operator><name>plan</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>Unwind</name> <modifier>&amp;</modifier></type><name>GetUnwinder</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsStillAtLastBreakpointHit</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsOperatingSystemPluginThread</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <macro><name>FetchThreadExtendedInfo</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>StructuredData</name><operator>::</operator><call><name>ObjectSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameListSP</name> <call><name>GetStackFrameList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetTemporaryResumeState</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>new_state</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>m_temporary_resume_state</name> <operator>=</operator> <name>new_state</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>FrameSelectedCallback</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>StackFrame</name> <operator>*</operator><name>frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ProcessWP</name> <name>m_process_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name> <name>m_stop_info_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_info_stop_id</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_stop_info_override_stop_id</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m_index_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name> <name>m_reg_context_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name>
<name>m_state_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name>
<name>m_frame_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameListSP</name> <name>m_curr_frames_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StackFrameListSP</name> <name>m_prev_frames_sp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_resume_signal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_resume_state</name></expr>;</expr_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StateType</name> <name>m_temporary_resume_state</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Unwind</name></expr></argument>&gt;</argument_list></name> <name>m_unwinder_up</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_destroy_called</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_override_should_notify</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ThreadPlanStack</name></expr></argument>&gt;</argument_list></name> <name>m_null_plan_stack_up</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>m_extended_info_fetched</name></decl>;</decl_stmt>

<expr_stmt><expr><name>StructuredData</name><operator>::</operator><name>ObjectSP</name> <name>m_extended_info</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>BroadcastSelectedFrameChange</name><parameter_list>(<parameter><decl><type><name>StackID</name> <modifier>&amp;</modifier></type><name>new_frame_id</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Thread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Thread</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Thread</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Thread</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
