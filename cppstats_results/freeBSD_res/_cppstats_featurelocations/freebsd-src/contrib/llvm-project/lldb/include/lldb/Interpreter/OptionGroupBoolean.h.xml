<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Interpreter/OptionGroupBoolean.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_INTERPRETER_OPTIONGROUPBOOLEAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_INTERPRETER_OPTIONGROUPBOOLEAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/OptionValueBoolean.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupBoolean</name> <range>: <expr><name>public</name> <name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>



<macro><name>OptionGroupBoolean</name><argument_list>(<argument>uint32_t usage_mask</argument>, <argument>bool required</argument>,
<argument>const char *long_option</argument>, <argument>int short_option</argument>,
<argument>const char *usage_text</argument>, <argument>bool default_value</argument>,
<argument>bool no_argument_toggle_default</argument>)</argument_list></macro></expr>;

<expr><operator>~</operator><macro><name>OptionGroupBoolean</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_option_definition</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>Status</name> <macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>OptionValueBoolean</name> <operator>&amp;</operator><macro><name>GetOptionValue</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_value</name></expr>;</return> }</block>

<specifier>const</specifier> <name>OptionValueBoolean</name> <operator>&amp;</operator><macro><name>GetOptionValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_value</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>OptionValueBoolean</name> <name>m_value</name></expr>;
<expr><name>OptionDefinition</name> <name>m_option_definition</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
