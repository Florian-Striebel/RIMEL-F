<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/Platform.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_PLATFORM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_PLATFORM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/UserSettingsController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/File.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Interpreter/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ArchSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StructuredData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserIDResolver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessInstanceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessInstanceInfoMatch</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ProcessInstanceInfo</name></expr></argument>&gt;</argument_list></name> <name>ProcessInstanceInfoList</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleCache</name></decl>;</decl_stmt>
<enum>enum <name>MmapFlags</name> <block>{ <decl><name>eMmapFlagsPrivate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>eMmapFlagsAnon</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>PlatformProperties</name> <range>: <expr><name>public</name> <name>Properties</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PlatformProperties</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ConstString</name> <call><name>GetSettingName</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetUseModuleCache</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>SetUseModuleCache</name><argument_list>(<argument>bool use_module_cache</argument>)</argument_list></macro></expr>;

<expr><name>FileSpec</name> <macro><name>GetModuleCacheDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <call><name>SetModuleCacheDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>dir_spec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>SetDefaultModuleCacheDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>dir_spec</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PlatformProperties</name></expr></argument>&gt;</argument_list></name> <name>PlatformPropertiesSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name> <name>MmapArgList</name></expr>;</expr_stmt></typedef>












<decl_stmt><decl><type><name>class</name></type> <name>Platform</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>

<macro><name>Platform</name><argument_list>(<argument>bool is_host_platform</argument>)</argument_list></macro></expr>;





<expr><operator>~</operator><macro><name>Platform</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>Initialize</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>Terminate</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>PlatformPropertiesSP</name> <operator>&amp;</operator><call><name>GetGlobalPlatformProperties</name><argument_list>()</argument_list></call></expr>;










<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <call><name>GetHostPlatform</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name>
<call><name>GetPlatformForArchitecture</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><name>ArchSpec</name> <operator>*</operator><name>platform_arch_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetHostPlatformName</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>SetHostPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>Find</name><argument_list>(<argument>ConstString name</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>Create</name><argument_list>(<argument>ConstString name</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>,
<argument><expr><name>ArchSpec</name> <operator>*</operator><name>platform_arch_ptr</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <name>ArchSpec</name> <macro><name>GetAugmentedArchSpec</name><argument_list>(<argument>Platform *platform</argument>,
<argument>llvm::StringRef triple</argument>)</argument_list></macro></expr>;































<expr><name>virtual</name> <name>Status</name> <call><name>ResolveExecutable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>module_search_paths_ptr</name></expr></argument>)</argument_list></call></expr>;














































<expr><name>virtual</name> <name>Status</name> <call><name>ResolveSymbolFile</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>sym_spec</name></expr></argument>,
<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>sym_file</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>bool</name> <call><name>ResolveRemotePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>platform_path</name></expr></argument>,
<argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>resolved_platform_path</name></expr></argument>)</argument_list></call></expr>;








<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <call><name>GetOSVersion</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>SetOSVersion</name><argument_list>(<argument>llvm::VersionTuple os_version</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <call><name>GetOSBuildString</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>GetOSKernelDescription</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;


<expr><name>ConstString</name> <call><name>GetName</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetHostname</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>ConstString</name> <macro><name>GetFullNameForDylib</name><argument_list>(<argument>ConstString basename</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetDescription</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>virtual</name> <name>void</name> <call><name>GetStatus</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>strm</name></expr></argument>)</argument_list></call></expr>;






<expr><name>virtual</name> <name>bool</name> <macro><name>GetRemoteOSVersion</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <macro><name>GetRemoteOSBuildString</name><argument_list>(<argument>std::string &amp;s</argument>)</argument_list></macro> <block>{
<expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GetRemoteOSKernelDescription</name><argument_list>(<argument>std::string &amp;s</argument>)</argument_list></macro> <block>{
<expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block>


<name>virtual</name> <name>ArchSpec</name> <macro><name>GetRemoteSystemArchitecture</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ArchSpec</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>FileSpec</name> <macro><name>GetRemoteWorkingDirectory</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_working_dir</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <call><name>SetRemoteWorkingDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>UserIDResolver</name> <operator>&amp;</operator><call><name>GetUserIDResolver</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



























<expr><name>virtual</name> <name>Status</name> <call><name>GetFileWithUUID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>platform_file</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>UUID</name> <operator>*</operator><name>uuid_ptr</name></expr></argument>, <argument><expr><name>FileSpec</name> <operator>&amp;</operator><name>local_file</name></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>FileSpecList</name>
<call><name>LocateExecutableScriptingResources</name><argument_list>(<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>Module</name> <operator>&amp;</operator><name>module</name></expr></argument>,
<argument><expr><name>Stream</name> <operator>*</operator><name>feedback_stream</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>GetSharedModule</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>, <argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>module_search_paths_ptr</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>old_modules</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>GetModuleSpec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>module_file_spec</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>, <argument><expr><name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>ConnectRemote</name><argument_list>(<argument><expr><name>Args</name> <operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>DisconnectRemote</name><argument_list>()</argument_list></call></expr>;














<expr><name>virtual</name> <name>bool</name> <macro><name>GetSupportedArchitectureAtIndex</name><argument_list>(<argument>uint32_t idx</argument>,
<argument>ArchSpec &amp;arch</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>size_t</name> <call><name>GetSoftwareBreakpointTrapOpcode</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>,
<argument><expr><name>BreakpointSite</name> <operator>*</operator><name>bp_site</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>Status</name> <call><name>LaunchProcess</name><argument_list>(<argument><expr><name>ProcessLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>)</argument_list></call></expr>;






<expr><name>virtual</name> <name>Status</name> <call><name>ShellExpandArguments</name><argument_list>(<argument><expr><name>ProcessLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name> <name>Status</name> <macro><name>KillProcess</name><argument_list>(<argument>const lldb::pid_t pid</argument>)</argument_list></macro></expr>;



<expr><name>virtual</name> <name>bool</name> <macro><name>IsCompatibleArchitecture</name><argument_list>(<argument>const ArchSpec &amp;arch</argument>,
<argument>bool exact_arch_match</argument>,
<argument>ArchSpec *compatible_arch_ptr</argument>)</argument_list></macro></expr>;





<expr><name>virtual</name> <name>bool</name> <macro><name>CanDebugProcess</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>






<name>virtual</name> <name>lldb</name><operator>::</operator><name>ProcessSP</name>
<call><name>DebugProcess</name><argument_list>(<argument><expr><name>ProcessLaunchInfo</name> <operator>&amp;</operator><name>launch_info</name></expr></argument>, <argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>,
<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,

<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>ConnectProcess</name><argument_list>(<argument>llvm::StringRef connect_url</argument>,
<argument>llvm::StringRef plugin_name</argument>,
<argument>Debugger &amp;debugger</argument>, <argument>Target *target</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ProcessSP</name>
<macro><name>ConnectProcessSynchronous</name><argument_list>(<argument>llvm::StringRef connect_url</argument>,
<argument>llvm::StringRef plugin_name</argument>, <argument>Debugger &amp;debugger</argument>,
<argument>Stream &amp;stream</argument>, <argument>Target *target</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;














<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <call><name>Attach</name><argument_list>(<argument><expr><name>ProcessAttachInfo</name> <operator>&amp;</operator><name>attach_info</name></expr></argument>,
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>,
<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,


<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;






















<expr><name>virtual</name> <name>uint32_t</name> <call><name>FindProcesses</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ProcessInstanceInfoMatch</name> <operator>&amp;</operator><name>match_info</name></expr></argument>,
<argument><expr><name>ProcessInstanceInfoList</name> <operator>&amp;</operator><name>proc_infos</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>GetProcessInfo</name><argument_list>(<argument>lldb::pid_t pid</argument>, <argument>ProcessInstanceInfo &amp;proc_info</argument>)</argument_list></macro></expr>;




<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>BreakpointSP</name> <call><name>SetThreadCreationBreakpoint</name><argument_list>(<argument><expr><name>Target</name> <operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;



<expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>ConstString</name>
<macro><name>GetSDKDirectory</name><argument_list>(<argument>lldb_private::Target &amp;target</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb_private</name><operator>::</operator><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>GetRemoteURL</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_remote_url</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsHost</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>m_is_host</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>IsRemote</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>m_is_host</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <macro><name>IsConnected</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name>IsHost</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><call><name>GetSystemArchitecture</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetSystemArchitecture</name><argument_list>(<argument>const ArchSpec &amp;arch</argument>)</argument_list></macro> <block>{
<expr><name>m_system_arch</name> <operator>=</operator> <name>arch</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name>IsHost</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_os_version_set_while_connected</name> <operator>=</operator> <call><name><name>m_system_arch</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>




<name>ArchSpec</name> <macro><name>GetAugmentedArchSpec</name><argument_list>(<argument>llvm::StringRef triple</argument>)</argument_list></macro></expr>;


<expr><name>size_t</name> <macro><name>GetMaxUserIDNameLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_max_uid_name_len</name></expr>;</return> }</block>


<name>size_t</name> <macro><name>GetMaxGroupIDNameLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_max_gid_name_len</name></expr>;</return> }</block>

<name>ConstString</name> <macro><name>GetSDKRootDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_sdk_sysroot</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSDKRootDirectory</name><argument_list>(<argument>ConstString dir</argument>)</argument_list></macro> <block>{ <expr><name>m_sdk_sysroot</name> <operator>=</operator> <name>dir</name></expr>; }</block>

<name>ConstString</name> <macro><name>GetSDKBuild</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_sdk_build</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetSDKBuild</name><argument_list>(<argument>ConstString sdk_build</argument>)</argument_list></macro> <block>{ <expr><name>m_sdk_build</name> <operator>=</operator> <name>sdk_build</name></expr>; }</block>




<name>virtual</name> <name>bool</name> <macro><name>SupportsModules</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>



<name>virtual</name> <name>void</name>
<call><name>AddClangModuleCompilationOptions</name><argument_list>(<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;

<expr><name>FileSpec</name> <call><name>GetWorkingDirectory</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>SetWorkingDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>working_dir</name></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>bool</name>
<macro><name>ModuleIsExcludedForUnconstrainedSearches</name><argument_list>(<argument>Target &amp;target</argument>,
<argument>const lldb::ModuleSP &amp;module_sp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name> <macro><name>MakeDirectory</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>, <argument>uint32_t permissions</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>GetFilePermissions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>,
<argument><expr><name>uint32_t</name> <operator>&amp;</operator><name>file_permissions</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>SetFilePermissions</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>uint32_t file_permissions</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>OpenFile</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>,
<argument>File::OpenOptions flags</argument>, <argument>uint32_t mode</argument>,
<argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<return>return <expr><name>UINT64_MAX</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>CloseFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>virtual</name> <name>lldb</name><operator>::</operator><name>user_id_t</name> <macro><name>GetFileSize</name><argument_list>(<argument>const FileSpec &amp;file_spec</argument>)</argument_list></macro> <block>{
<return>return <expr><name>UINT64_MAX</name></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>AutoCompleteDiskFileOrDirectory</name><argument_list>(<argument>CompletionRequest &amp;request</argument>,
<argument>bool only_dir</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>uint64_t</name> <macro><name>ReadFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>uint64_t offset</argument>, <argument>void *dst</argument>,
<argument>uint64_t dst_len</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"Platform::ReadFile() is not supported in the %s platform"</literal></expr></argument>,
<argument><expr><call><name>GetName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block>

<name>virtual</name> <name>uint64_t</name> <macro><name>WriteFile</name><argument_list>(<argument>lldb::user_id_t fd</argument>, <argument>uint64_t offset</argument>,
<argument>const void *src</argument>, <argument>uint64_t src_len</argument>, <argument>Status &amp;error</argument>)</argument_list></macro> <block>{
<expr><call><name><name>error</name><operator>.</operator><name>SetErrorStringWithFormat</name></name><argument_list>(
<argument><expr><literal type="string">"Platform::WriteFile() is not supported in the %s platform"</literal></expr></argument>,
<argument><expr><call><name>GetName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block>

<name>virtual</name> <name>Status</name> <call><name>GetFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>destination</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>PutFile</name><argument_list>(<argument>const FileSpec &amp;source</argument>, <argument>const FileSpec &amp;destination</argument>,
<argument>uint32_t uid = UINT32_MAX</argument>, <argument>uint32_t gid = UINT32_MAX</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>Status</name>
<call><name>CreateSymlink</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>src</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;























<expr><name>virtual</name> <name>Status</name> <call><name>Install</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Environment</name> <call><name>GetEnvironment</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>bool</name> <call><name>GetFileExists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <call><name>Unlink</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>MmapArgList</name> <macro><name>GetMmapArgumentList</name><argument_list>(<argument>const ArchSpec &amp;arch</argument>,
<argument>lldb::addr_t addr</argument>,
<argument>lldb::addr_t length</argument>,
<argument>unsigned prot</argument>, <argument>unsigned flags</argument>,
<argument>lldb::addr_t fd</argument>, <argument>lldb::addr_t offset</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>GetSupportsRSync</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_supports_rsync</name></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetSupportsRSync</name><argument_list>(<argument>bool flag</argument>)</argument_list></macro> <block>{ <expr><name>m_supports_rsync</name> <operator>=</operator> <name>flag</name></expr>; }</block>

<name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRSyncOpts</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_rsync_opts</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetRSyncOpts</name><argument_list>(<argument>const char *opts</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_rsync_opts</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetRSyncPrefix</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_rsync_prefix</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetRSyncPrefix</name><argument_list>(<argument>const char *prefix</argument>)</argument_list></macro> <block>{
<expr><call><name><name>m_rsync_prefix</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>virtual</name> <name>bool</name> <macro><name>GetSupportsSSH</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_supports_ssh</name></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetSupportsSSH</name><argument_list>(<argument>bool flag</argument>)</argument_list></macro> <block>{ <expr><name>m_supports_ssh</name> <operator>=</operator> <name>flag</name></expr>; }</block>

<name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetSSHOpts</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>m_ssh_opts</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetSSHOpts</name><argument_list>(<argument>const char *opts</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_ssh_opts</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>virtual</name> <name>bool</name> <macro><name>GetIgnoresRemoteHostname</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_ignores_remote_hostname</name></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>SetIgnoresRemoteHostname</name><argument_list>(<argument>bool flag</argument>)</argument_list></macro> <block>{
<expr><name>m_ignores_remote_hostname</name> <operator>=</operator> <name>flag</name></expr>;
}</block>

<name>virtual</name> <name>lldb_private</name><operator>::</operator><name>OptionGroupOptions</name> <operator>*</operator>
<macro><name>GetConnectionOptions</name><argument_list>(<argument>CommandInterpreter &amp;interpreter</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>virtual</name> <name>lldb_private</name><operator>::</operator><name>Status</name> <macro><name>RunShellCommand</name><argument_list>(
<argument>llvm::StringRef command</argument>,
<argument>const FileSpec &amp;working_dir</argument>,

<argument>int *status_ptr</argument>,
<argument>int *signo_ptr</argument>,

<argument>std::string
*command_output</argument>,
<argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>lldb_private</name><operator>::</operator><name>Status</name> <macro><name>RunShellCommand</name><argument_list>(
<argument>llvm::StringRef shell</argument>, <argument>llvm::StringRef command</argument>,
<argument>const FileSpec &amp;working_dir</argument>,

<argument>int *status_ptr</argument>,
<argument>int *signo_ptr</argument>,

<argument>std::string
*command_output</argument>,
<argument>const Timeout&lt;std::micro&gt; &amp;timeout</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>SetLocalCacheDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>local</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetLocalCacheDirectory</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetPlatformSpecificConnectionInformation</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <call><name>CalculateMD5</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>file_spec</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>low</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>high</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <macro><name>GetResumeCountForLaunchInfo</name><argument_list>(<argument>ProcessLaunchInfo &amp;launch_info</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block>

<name>virtual</name> <specifier>const</specifier> <name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <operator>&amp;</operator><call><name>GetRemoteUnixSignals</name><argument_list>()</argument_list></call></expr>;

<expr><name>lldb</name><operator>::</operator><name>UnixSignalsSP</name> <call><name>GetUnixSignals</name><argument_list>()</argument_list></call></expr>;




















<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name>
<macro><name>GetQueueNameForThreadQAddress</name><argument_list>(<argument>Process *process</argument>, <argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block>



















<name>virtual</name> <name>lldb</name><operator>::</operator><name>queue_id_t</name>
<macro><name>GetQueueIDForThreadQAddress</name><argument_list>(<argument>Process *process</argument>, <argument>lldb::addr_t dispatch_qaddr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LLDB_INVALID_QUEUE_ID</name></expr>;</return>
}</block>




















<name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>GetTrapHandlerSymbolNames</name><argument_list>()</argument_list></call></expr>;














<expr><name>virtual</name> <name>FileSpec</name> <macro><name>LocateExecutable</name><argument_list>(<argument>const char *basename</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>FileSpec</name><argument_list>()</argument_list></call></expr>;</return> }</block>




<name>virtual</name> <name>uint32_t</name> <macro><name>GetDefaultMemoryCacheLineSize</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="number">0</literal></expr>;</return> }</block>
































<name>uint32_t</name> <call><name>LoadImage</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>local_file</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>remote_file</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;































<expr><name>uint32_t</name> <call><name>LoadImageUsingPaths</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>library_name</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>paths</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>*</operator><name>loaded_path</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>uint32_t</name> <call><name>DoLoadImage</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>&amp;</operator><name>remote_file</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>paths</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>FileSpec</name> <operator>*</operator><name>loaded_path</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>Status</name> <macro><name>UnloadImage</name><argument_list>(<argument>lldb_private::Process *process</argument>,
<argument>uint32_t image_token</argument>)</argument_list></macro></expr>;















<expr><name>virtual</name> <name>size_t</name> <call><name>ConnectToWaitingProcesses</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>,
<argument><expr><name>lldb_private</name><operator>::</operator><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;
















<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>StructuredData</name><operator>::</operator><name>DictionarySP</name></expr></argument>&gt;</argument_list></name>
<macro><name>FetchExtendedCrashInformation</name><argument_list>(<argument>lldb_private::Process &amp;process</argument>)</argument_list></macro> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>


<name>lldb</name><operator>::</operator><name>ProcessSP</name> <macro><name>DoConnectProcess</name><argument_list>(<argument>llvm::StringRef connect_url</argument>,
<argument>llvm::StringRef plugin_name</argument>,
<argument>Debugger &amp;debugger</argument>, <argument>Stream *stream</argument>,
<argument>Target *target</argument>, <argument>Status &amp;error</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <name>m_is_host</name></expr>;





<expr><name>bool</name> <name>m_os_version_set_while_connected</name></expr>;
<expr><name>bool</name> <name>m_system_arch_set_while_connected</name></expr>;
<expr><name>ConstString</name>
<name>m_sdk_sysroot</name></expr>;
<expr><name>ConstString</name> <name>m_sdk_build</name></expr>;
<expr><name>FileSpec</name> <name>m_working_dir</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_remote_url</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>m_os_version</name></expr>;
<expr><name>ArchSpec</name>
<name>m_system_arch</name></expr>;
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>IDToNameMap</name></expr>;</expr_stmt></typedef>


<name>std</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_max_uid_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_max_gid_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_supports_rsync</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_rsync_opts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_rsync_prefix</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_supports_ssh</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_ssh_opts</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_ignores_remote_hostname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_local_cache_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>m_trap_handlers</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_calculated_trap_handlers</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleCache</name></expr></argument>&gt;</argument_list></name> <name>m_module_cache</name></expr>;</expr_stmt>












<function_decl><type><name>virtual</name> <name>void</name></type> <name>CalculateTrapHandlerSymbolNames</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>Status</name></type> <name>GetCachedExecutable</name><argument_list>(<argument><expr><name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>module_search_paths_ptr</name></expr></argument>,
<argument><expr><name>Platform</name> <operator>&amp;</operator><name>remote_platform</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>Status</name></type> <name>DownloadModuleSlice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>src_file_spec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>src_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>src_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileSpec</name> <modifier>&amp;</modifier></type><name>dst_file_spec</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>DownloadSymbolFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>dst_file_spec</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetCacheHostname</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>Status</name><operator>(</operator><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>ModuleResolver</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>Status</name></type> <name>GetRemoteSharedModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>, <argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ModuleResolver</name> <operator>&amp;</operator><name>module_resolver</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>GetCachedSharedModule</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>did_create_ptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>LoadCachedExecutable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleSpec</name> <operator>&amp;</operator><name>module_spec</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpecList</name> <operator>*</operator><name>module_search_paths_ptr</name></expr></argument>,
<argument><expr><name>Platform</name> <operator>&amp;</operator><name>remote_platform</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>FileSpec</name></type> <name>GetModuleCacheRoot</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PlatformList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PlatformList</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_mutex</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>m_platforms</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>m_selected_platform_sp</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>PlatformList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Append</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>, <argument><expr><name>bool</name> <name>set_selected</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_platforms</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>platform_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>set_selected</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_selected_platform_sp</name> <operator>=</operator> <call><name><name>m_platforms</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>m_platforms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>GetAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <name>platform_sp</name></expr>;
<expr><block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>m_platforms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>platform_sp</name> <operator>=</operator> <name><name>m_platforms</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr>
<return>return <expr><name>platform_sp</name></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <macro><name>GetSelectedPlatform</name><argument_list>()</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_selected_platform_sp</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>m_platforms</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m_selected_platform_sp</name> <operator>=</operator> <call><name><name>m_platforms</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name>m_selected_platform_sp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SetSelectedPlatform</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>PlatformSP</name> <operator>&amp;</operator><name>platform_sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>platform_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_platforms</name> <init>= <expr><call><name><name>m_platforms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>num_platforms</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m_platforms</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>platform_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_selected_platform_sp</name> <operator>=</operator> <name><name>m_platforms</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>m_platforms</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>platform_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_selected_platform_sp</name> <operator>=</operator> <call><name><name>m_platforms</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_platforms</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>PlatformSP</name> <name>m_selected_platform_sp</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>PlatformList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PlatformList</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PlatformList</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PlatformList</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupPlatformRSync</name> <range>: <expr><name>public</name> <name>lldb_private</name><operator>::</operator><name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupPlatformRSync</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupPlatformRSync</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>lldb_private</name><operator>::</operator><name>Status</name>
<macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>bool</name> <name>m_rsync</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_rsync_opts</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_rsync_prefix</name></expr>;
<expr><name>bool</name> <name>m_ignores_remote_hostname</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>OptionGroupPlatformRSync</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OptionGroupPlatformRSync</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>OptionGroupPlatformRSync</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionGroupPlatformRSync</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupPlatformSSH</name> <range>: <expr><name>public</name> <name>lldb_private</name><operator>::</operator><name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupPlatformSSH</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupPlatformSSH</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>lldb_private</name><operator>::</operator><name>Status</name>
<macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>bool</name> <name>m_ssh</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_ssh_opts</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>OptionGroupPlatformSSH</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OptionGroupPlatformSSH</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>OptionGroupPlatformSSH</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionGroupPlatformSSH</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionGroupPlatformCaching</name> <range>: <expr><name>public</name> <name>lldb_private</name><operator>::</operator><name>OptionGroup</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OptionGroupPlatformCaching</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><operator>~</operator><macro><name>OptionGroupPlatformCaching</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>lldb_private</name><operator>::</operator><name>Status</name>
<macro><name>SetOptionValue</name><argument_list>(<argument>uint32_t option_idx</argument>, <argument>llvm::StringRef option_value</argument>,
<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>OptionParsingStarting</name><argument_list>(<argument>ExecutionContext *execution_context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>OptionDefinition</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDefinitions</name><argument_list>()</argument_list></macro> <name>override</name></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <name>m_cache_dir</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>OptionGroupPlatformCaching</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OptionGroupPlatformCaching</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>OptionGroupPlatformCaching</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>OptionGroupPlatformCaching</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
