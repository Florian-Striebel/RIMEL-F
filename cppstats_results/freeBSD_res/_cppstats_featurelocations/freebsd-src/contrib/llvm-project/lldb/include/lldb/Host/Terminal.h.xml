<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/Terminal.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_TERMINAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_TERMINAL_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<struct_decl>struct <name>termios</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Terminal</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>Terminal</name><argument_list>(<argument>int fd = -<literal type="number">1</literal></argument>)</argument_list></macro> : <macro><name>m_fd</name><argument_list>(<argument>fd</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><operator>~</operator><call><name>Terminal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsATerminal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>GetFileDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_fd</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>SetFileDescriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>FileDescriptorIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>SetEcho</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SetCanonical</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>m_fd</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>TerminalState</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>TerminalState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>TerminalState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

















<function_decl><type><name>bool</name></type> <name>Save</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>save_process_group</name></decl></parameter>)</parameter_list>;</function_decl>









<expr_stmt><expr><name>bool</name> <macro><name>Restore</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>





<expr_stmt><expr><name>bool</name> <macro><name>TFlagsIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>TTYStateIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>ProcessGroupIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Terminal</name></type> <name>m_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_tflags</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_ENABLE_TERMIOS</name></expr></cpp:if>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr>struct <name>termios</name></expr></argument>&gt;</argument_list></name>
<name>m_termios_up</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>pid_t</name> <name>m_process_group</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>TerminalStateSwitcher</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>TerminalStateSwitcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>TerminalStateSwitcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>uint32_t</name> <macro><name>GetNumberOfStates</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>Restore</name><argument_list>(<argument><expr><name>uint32_t</name> <name>idx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


















<function_decl><type><name>bool</name></type> <name>Save</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>save_process_group</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>mutable</name> <name>uint32_t</name></type> <name>m_currentState</name> <init>=
<expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TerminalState</name></type>
<name><name>m_ttystates</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
