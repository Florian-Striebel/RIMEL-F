<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanRunToAddress.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANRUNTOADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANRUNTOADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanRunToAddress</name> <range>: <expr><name>public</name> <name>ThreadPlan</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ThreadPlanRunToAddress</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>Address &amp;address</argument>, <argument>bool stop_others</argument>)</argument_list></macro></expr>;

<macro><name>ThreadPlanRunToAddress</name><argument_list>(<argument>Thread &amp;thread</argument>, <argument>lldb::addr_t address</argument>,
<argument>bool stop_others</argument>)</argument_list></macro>;

<macro><name>ThreadPlanRunToAddress</name><argument_list>(<argument>Thread &amp;thread</argument>,
<argument>const std::vector&lt;lldb::addr_t&gt; &amp;addresses</argument>,
<argument>bool stop_others</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>ThreadPlanRunToAddress</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ValidatePlan</name><argument_list>(<argument>Stream *error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ShouldStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>StopOthers</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>SetStopOthers</name><argument_list>(<argument>bool new_value</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetPlanRunState</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WillStop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>MischiefManaged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>DoPlanExplainsStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <call><name>SetInitialBreakpoints</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>AtOurAddress</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>bool</name> <name>m_stop_others</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name>
<name>m_addresses</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name></expr></argument>&gt;</argument_list></name> <name>m_break_ids</name></expr>;


<expr><call><name>ThreadPlanRunToAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanRunToAddress</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadPlanRunToAddress</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadPlanRunToAddress</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
