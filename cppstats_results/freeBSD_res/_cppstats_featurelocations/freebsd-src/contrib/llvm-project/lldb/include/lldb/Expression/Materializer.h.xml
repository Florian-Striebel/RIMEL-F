<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/Materializer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_MATERIALIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_MATERIALIZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Expression/IRMemoryMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TaggedASTType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/StackFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Materializer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Materializer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Materializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Dematerializer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Dematerializer</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>Dematerializer</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Wipe</name><argument_list>()</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>Dematerialize</name><argument_list>(<argument>Status &amp;err</argument>, <argument>lldb::addr_t frame_top</argument>,
<argument>lldb::addr_t frame_bottom</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>Wipe</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>IsValid</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>m_materializer</name> <operator>&amp;&amp;</operator> <name>m_map</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>m_process_address</name> <operator>!=</operator> <name>LLDB_INVALID_ADDRESS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Materializer</name></decl>;</decl_stmt>

<macro><name>Dematerializer</name><argument_list>(<argument>Materializer &amp;materializer</argument>, <argument>lldb::StackFrameSP &amp;frame_sp</argument>,
<argument>IRMemoryMap &amp;map</argument>, <argument>lldb::addr_t process_address</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_materializer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>materializer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_map</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_process_address</name><argument_list>(<argument>process_address</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>frame_sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m_thread_wp</name> <operator>=</operator> <call><name><name>frame_sp</name><operator>-&gt;</operator><name>GetThread</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m_stack_id</name> <operator>=</operator> <call><name><name>frame_sp</name><operator>-&gt;</operator><name>GetStackID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

Materializer *m_materializer = nullptr</block><empty_stmt>;</empty_stmt></if></if_stmt>
<name>lldb</name><operator>::</operator><name>ThreadWP</name> <name>m_thread_wp</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StackID</name></type> <name>m_stack_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IRMemoryMap</name> <modifier>*</modifier></type><name>m_map</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_process_address</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Dematerializer</name></expr></argument>&gt;</argument_list></name> <name>DematerializerSP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Dematerializer</name></expr></argument>&gt;</argument_list></name> <name>DematerializerWP</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>DematerializerSP</name></type> <name>Materialize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>, <argument><expr><name>IRMemoryMap</name> <operator>&amp;</operator><name>map</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PersistentVariableDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PersistentVariableDelegate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>ConstString</name></type> <name>GetName</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DidDematerialize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>variable</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type>
<name>AddPersistentVariable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>ExpressionVariableSP</name> <operator>&amp;</operator><name>persistent_variable_sp</name></expr></argument>,
<argument><expr><name>PersistentVariableDelegate</name> <operator>*</operator><name>delegate</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>AddVariable</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>VariableSP</name> <operator>&amp;</operator><name>variable_sp</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>uint32_t</name></type> <name>AddResultVariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerType</name> <modifier>&amp;</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_lvalue</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>keep_in_memory</name></decl></parameter>,
<parameter><decl><type><name>PersistentVariableDelegate</name> <modifier>*</modifier></type><name>delegate</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>AddSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>&amp;</modifier></type><name>symbol_sp</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>AddRegister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RegisterInfo</name> <modifier>&amp;</modifier></type><name>register_info</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>uint32_t</name></type> <name>GetStructAlignment</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_struct_alignment</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetStructByteSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_current_offset</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>Entity</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Entity</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Entity</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Materialize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>, <argument><expr><name>IRMemoryMap</name> <operator>&amp;</operator><name>map</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Dematerialize</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>StackFrameSP</name> <operator>&amp;</operator><name>frame_sp</name></expr></argument>, <argument><expr><name>IRMemoryMap</name> <operator>&amp;</operator><name>map</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>frame_top</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>frame_bottom</name></expr></argument>, <argument><expr><name>Status</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DumpToLog</name><argument_list>(<argument><expr><name>IRMemoryMap</name> <operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>,
<argument><expr><name>Log</name> <operator>*</operator><name>log</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>Wipe</name><argument_list>(<argument><expr><name>IRMemoryMap</name> <operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>process_address</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>uint32_t</name></type> <name>GetAlignment</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_alignment</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_size</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetOffset</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_offset</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetOffset</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_alignment</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>uint32_t</name></type> <name>AddStructMember</name><parameter_list>(<parameter><decl><type><name>Entity</name> <modifier>&amp;</modifier></type><name>entity</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Entity</name></expr></argument>&gt;</argument_list></name> <name>EntityUP</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>EntityUP</name></expr></argument>&gt;</argument_list></name> <name>EntityVector</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>DematerializerWP</name></type> <name>m_dematerializer_wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EntityVector</name></type> <name>m_entities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_current_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_struct_alignment</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
