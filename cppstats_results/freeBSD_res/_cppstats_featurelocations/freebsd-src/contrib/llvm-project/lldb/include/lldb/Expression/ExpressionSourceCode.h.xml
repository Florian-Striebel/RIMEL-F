<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Expression/ExpressionSourceCode.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_EXPRESSION_EXPRESSIONSOURCECODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_EXPRESSION_EXPRESSIONSOURCECODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ExpressionSourceCode</name> <block>{<block_content>
<label><name>protected</name>:</label>
<enum>enum <name>Wrapping</name> : <type><name>bool</name></type> <block>{
<decl><name>Wrap</name> <init>= <expr><name>true</name></expr></init></decl>,
<decl><name>NoWrap</name> <init>= <expr><name>false</name></expr></init></decl>,
}</block>;</enum>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>NeedsWrapping</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_wrap</name> <operator>==</operator> <name>Wrap</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<macro><name>ExpressionSourceCode</name><argument_list>(<argument>llvm::StringRef name</argument>, <argument>llvm::StringRef prefix</argument>,
<argument>llvm::StringRef body</argument>, <argument>Wrapping wrap</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>m_name</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_prefix</name><argument_list>(<argument><expr><call><name><name>prefix</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_body</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_wrap</name><argument_list>(<argument>wrap</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_body</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Wrapping</name></type> <name>m_wrap</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
