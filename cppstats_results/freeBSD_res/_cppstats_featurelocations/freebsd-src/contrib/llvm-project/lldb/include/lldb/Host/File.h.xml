<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/File.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/PosixApi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/IOObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/BitmaskEnum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdarg&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<expr_stmt><expr><call><name>LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>File</name> <range>: <expr><name>public</name> <name>IOObject</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>int</name> <name>kInvalidDescriptor</name></expr>;
<expr><specifier>static</specifier> <name>FILE</name> <operator>*</operator><name>kInvalidStream</name></expr>;








enum <expr><name>OpenOptions</name> <operator>:</operator> <name>uint32_t</name> <block>{
<expr><name>eOpenOptionRead</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionWrite</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionAppend</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionTruncate</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionNonBlocking</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionCanCreate</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionCanCreateNewOnly</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionDontFollowSymlinks</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>,
<expr><name>eOpenOptionCloseOnExec</name> <operator>=</operator>
<operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>,
<macro><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>( <argument>eOpenOptionCloseOnExec</argument>)</argument_list></macro>
}</block></expr>;

<expr><specifier>static</specifier> <name>mode_t</name> <macro><name>ConvertOpenOptionsForPOSIXOpen</name><argument_list>(<argument>OpenOptions open_options</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>OpenOptions</name></expr></argument>&gt;</argument_list></name> <macro><name>GetOptionsFromMode</name><argument_list>(<argument>llvm::StringRef mode</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>DescriptorIsValid</name><argument_list>(<argument>int descriptor</argument>)</argument_list></macro> <block>{ <return>return <expr><name>descriptor</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr>;
<expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>GetStreamOpenModeFromOptions</name><argument_list>(<argument>OpenOptions options</argument>)</argument_list></macro></expr>;

<expr><call><name>File</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>IOObject</name><argument_list>(<argument>eFDTypeFile</argument>)</argument_list></macro><block>{}</block></expr>;














<expr><name>Status</name> <macro><name>Read</name><argument_list>(<argument>void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;














<expr><name>Status</name> <macro><name>Write</name><argument_list>(<argument>const void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;





<expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;






<expr><name>Status</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;










<expr><name>WaitableHandle</name> <macro><name>GetWaitableHandle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;







<expr><name>virtual</name> <name>Status</name> <macro><name>GetFileSpec</name><argument_list>(<argument>FileSpec &amp;file_spec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;








<expr><name>virtual</name> <name>int</name> <macro><name>GetDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;









<expr><name>virtual</name> <name>FILE</name> <operator>*</operator><call><name>GetStream</name><argument_list>()</argument_list></call></expr>;



















<expr><name>virtual</name> <name>off_t</name> <macro><name>SeekFromStart</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro></expr>;



















<expr><name>virtual</name> <name>off_t</name> <macro><name>SeekFromCurrent</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro></expr>;




















<expr><name>virtual</name> <name>off_t</name> <macro><name>SeekFromEnd</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro></expr>;






















<expr><name>virtual</name> <name>Status</name> <call><name>Read</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>size_t</name> <operator>&amp;</operator><name>num_bytes</name></expr></argument>, <argument><expr><name>off_t</name> <operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;
























<expr><name>virtual</name> <name>Status</name> <call><name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <operator>&amp;</operator><name>num_bytes</name></expr></argument>, <argument><expr><name>off_t</name> <operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;






<expr><name>virtual</name> <name>Status</name> <call><name>Flush</name><argument_list>()</argument_list></call></expr>;






<expr><name>virtual</name> <name>Status</name> <call><name>Sync</name><argument_list>()</argument_list></call></expr>;














<expr><name>size_t</name> <macro><name>Printf</name><argument_list>(<argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;











<expr><name>virtual</name> <name>size_t</name> <macro><name>PrintfVarArg</name><argument_list>(<argument>const char *format</argument>, <argument>va_list args</argument>)</argument_list></macro></expr>;











<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>OpenOptions</name></expr></argument>&gt;</argument_list></name> <macro><name>GetOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>GetOpenMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>opts</name> <operator>=</operator> <call><name>GetOptions</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>opts</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>GetStreamOpenModeFromOptions</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>






<decl_stmt><decl><type><name>uint32_t</name></type> <name>GetPermissions</name><argument_list>(<argument><expr><name>Status</name> <operator>&amp;</operator><name>error</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>GetIsInteractive</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>bool</name></type> <name>GetIsRealTerminal</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><name>bool</name></type> <name>GetIsTerminalWithColors</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>ID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isA</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>classID</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>classID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>File</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>file</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_interactive</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_is_real_terminal</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LazyBool</name></type> <name>m_supports_colors</name> <init>= <expr><name>eLazyBoolCalculate</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>CalculateInteractiveAndTerminal</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>File</name><argument_list>(<argument><expr><specifier>const</specifier> <name>File</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>File</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>File</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NativeFile</name> <range>: <expr><name>public</name> <name>File</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NativeFile</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>m_descriptor</name><argument_list>(<argument><expr><name>kInvalidDescriptor</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_stream</name><argument_list>(<argument>kInvalidStream</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>NativeFile</name><argument_list>(<argument>FILE *fh</argument>, <argument>bool transfer_ownership</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_descriptor</name><argument_list>(<argument><expr><name>kInvalidDescriptor</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_own_descriptor</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_stream</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>m_options</name><argument_list>()</argument_list></call></expr>, <macro><name>m_own_stream</name><argument_list>(<argument>transfer_ownership</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>NativeFile</name><argument_list>(<argument>int fd</argument>, <argument>OpenOptions options</argument>, <argument>bool transfer_ownership</argument>)</argument_list></macro>
<operator>:</operator> <call><name>m_descriptor</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_own_descriptor</name><argument_list>(<argument><expr><name>transfer_ownership</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>m_stream</name><argument_list>(<argument><expr><name>kInvalidStream</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_own_stream</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>NativeFile</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

<name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>DescriptorIsValid</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>StreamIsValid</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>Status</name> <macro><name>Read</name><argument_list>(<argument>void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Write</name><argument_list>(<argument>const void *buf</argument>, <argument>size_t &amp;num_bytes</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>WaitableHandle</name> <macro><name>GetWaitableHandle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>GetFileSpec</name><argument_list>(<argument>FileSpec &amp;file_spec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>int</name> <macro><name>GetDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>FILE</name> <operator>*</operator><macro><name>GetStream</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>off_t</name> <macro><name>SeekFromStart</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>off_t</name> <macro><name>SeekFromCurrent</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>off_t</name> <macro><name>SeekFromEnd</name><argument_list>(<argument>off_t offset</argument>, <argument>Status *error_ptr = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Read</name><argument_list>(<argument>void *dst</argument>, <argument>size_t &amp;num_bytes</argument>, <argument>off_t &amp;offset</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Write</name><argument_list>(<argument>const void *src</argument>, <argument>size_t &amp;num_bytes</argument>, <argument>off_t &amp;offset</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Flush</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>Status</name> <macro><name>Sync</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>size_t</name> <macro><name>PrintfVarArg</name><argument_list>(<argument>const char *format</argument>, <argument>va_list args</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>OpenOptions</name></expr></argument>&gt;</argument_list></name> <macro><name>GetOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>char</name> <name>ID</name></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>isA</name><argument_list>(<argument>const void *classID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>classID</name> <operator>==</operator> <operator>&amp;</operator><name>ID</name> <operator>||</operator> <name>File</name><operator>::</operator><call><name>isA</name><argument_list>(<argument><expr><name>classID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const File *file</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>file</name><operator>-&gt;</operator><name>isA</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>DescriptorIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>File</name><operator>::</operator><call><name>DescriptorIsValid</name><argument_list>(<argument><expr><name>m_descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>bool</name> <macro><name>StreamIsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_stream</name> <operator>!=</operator> <name>kInvalidStream</name></expr>;</return> }</block>


<name>int</name> <name>m_descriptor</name></expr>;
<expr><name>bool</name> <name>m_own_descriptor</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>FILE</name> <operator>*</operator><name>m_stream</name></expr>;
<expr><name>OpenOptions</name> <name>m_options</name><block>{}</block></expr>;
<expr><name>bool</name> <name>m_own_stream</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>std</name><operator>::</operator><name>mutex</name> <name>offset_access_mutex</name></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>NativeFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NativeFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>NativeFile</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>NativeFile</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
