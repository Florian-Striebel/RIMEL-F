<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/OperatingSystem.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_OPERATINGSYSTEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_OPERATINGSYSTEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/PluginInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>OperatingSystem</name> <range>: <expr><name>public</name> <name>PluginInterface</name> <block>{
<expr><name>public</name><operator>:</operator>












<specifier>static</specifier> <name>OperatingSystem</name> <operator>*</operator><call><name>FindPlugin</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>plugin_name</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>OperatingSystem</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;


<expr><name>virtual</name> <name>bool</name> <call><name>UpdateThreadList</name><argument_list>(<argument><expr><name>ThreadList</name> <operator>&amp;</operator><name>old_thread_list</name></expr></argument>,
<argument><expr><name>ThreadList</name> <operator>&amp;</operator><name>real_thread_list</name></expr></argument>,
<argument><expr><name>ThreadList</name> <operator>&amp;</operator><name>new_thread_list</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>ThreadWasSelected</name><argument_list>(<argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>RegisterContextSP</name>
<macro><name>CreateRegisterContextForThread</name><argument_list>(<argument>Thread *thread</argument>,
<argument>lldb::addr_t reg_data_addr</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <call><name>CreateThreadStopReason</name><argument_list>(<argument><expr><name>Thread</name> <operator>*</operator><name>thread</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <macro><name>CreateThread</name><argument_list>(<argument>lldb::tid_t tid</argument>, <argument>lldb::addr_t context</argument>)</argument_list></macro> <block>{
<return>return <expr><name>lldb</name><operator>::</operator><call><name>ThreadSP</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <call><name>IsOperatingSystemPluginThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ThreadSP</name> <operator>&amp;</operator><name>thread_sp</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>

<name>Process</name>
<operator>*</operator><name>m_process</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
