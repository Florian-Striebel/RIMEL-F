<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/UnwindLLDB.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_UNWINDLLDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_UNWINDLLDB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/FuncUnwinders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/SymbolContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/UnwindPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/RegisterContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Unwind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-public.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RegisterContextUnwind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UnwindLLDB</name> <range>: <expr><name>public</name> <name>lldb_private</name><operator>::</operator><name>Unwind</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>UnwindLLDB</name><argument_list>(<argument><expr><name>lldb_private</name><operator>::</operator><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>UnwindLLDB</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

enum <expr><name>RegisterSearchResult</name> <block>{
<expr><name>eRegisterFound</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>eRegisterNotFound</name></expr>,
<expr><name>eRegisterIsVolatile</name></expr>
}</block></expr>;

<expr><name>protected</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>lldb_private</name><operator>::</operator><name>RegisterContextUnwind</name></expr>;

struct <expr><name>RegisterLocation</name> <block>{
enum <expr><name>RegisterLocationTypes</name> <block>{
<expr><name>eRegisterNotSaved</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><name>eRegisterSavedAtMemoryLocation</name></expr>,

<expr><name>eRegisterInRegister</name></expr>,

<expr><name>eRegisterSavedAtHostMemoryLocation</name></expr>,

<expr><name>eRegisterValueInferred</name></expr>,

<expr><name>eRegisterInLiveRegisterContext</name></expr>

}</block></expr>;
<expr><name>int</name> <name>type</name></expr>;
<expr>union <block>{
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>target_memory_location</name></expr>;
<expr><name>uint32_t</name>
<name>register_number</name></expr>;
<expr><name>void</name> <operator>*</operator><name>host_memory_location</name></expr>;
<expr><name>uint64_t</name> <name>inferred_value</name></expr>;

}</block> <name>location</name></expr>;
}</block></expr>;

<expr><name>void</name> <macro><name>DoClear</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>m_frames</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>m_candidate_frame</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>m_unwind_complete</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>uint32_t</name> <macro><name>DoGetFrameCount</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>DoGetFrameInfoAtIndex</name><argument_list>(<argument>uint32_t frame_idx</argument>, <argument>lldb::addr_t &amp;cfa</argument>,
<argument>lldb::addr_t &amp;start_pc</argument>,
<argument>bool &amp;behaves_like_zeroth_frame</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>RegisterContextSP</name>
<macro><name>DoCreateRegisterContextForFrame</name><argument_list>(<argument>lldb_private::StackFrame *frame</argument>)</argument_list></macro> <name>override</name></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RegisterContextUnwind</name></expr></argument>&gt;</argument_list></name> <name>RegisterContextLLDBSP</name></expr>;</expr_stmt></typedef>





<name>RegisterContextLLDBSP</name> <macro><name>GetRegisterContextForFrameNum</name><argument_list>(<argument>uint32_t frame_num</argument>)</argument_list></macro></block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>SearchForSavedLocationForRegister</name><argument_list>(
<argument><expr><name>uint32_t</name> <name>lldb_regnum</name></expr></argument>, <argument><expr><name>lldb_private</name><operator>::</operator><name>UnwindLLDB</name><operator>::</operator><name>RegisterLocation</name> <operator>&amp;</operator><name>regloc</name></expr></argument>,
<argument><expr><name>uint32_t</name> <name>starting_frame_num</name></expr></argument>, <argument><expr><name>bool</name> <name>pc_register</name></expr></argument>)</argument_list></decl>;</decl_stmt>











<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>GetUserSpecifiedTrapHandlerFunctionNames</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>m_user_supplied_trap_handler_functions</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<struct>struct <name>Cursor</name> <block>{
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>start_pc</name> <operator>=</operator>
<name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>cfa</name> <operator>=</operator> <name>LLDB_INVALID_ADDRESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb_private</name><operator>::</operator><name>SymbolContext</name> <name>sctx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RegisterContextLLDBSP</name></type>
<name>reg_ctx_lldb_sp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Cursor</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>sctx</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>reg_ctx_lldb_sp</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>private</name><operator>:</operator>
<call><name>Cursor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Cursor</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Cursor</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Cursor</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Cursor</name></expr></argument>&gt;</argument_list></name> <name>CursorSP</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CursorSP</name></expr></argument>&gt;</argument_list></name> <name>m_frames</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CursorSP</name></type> <name>m_candidate_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_unwind_complete</name></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ConstString</name></expr></argument>&gt;</argument_list></name> <name>m_user_supplied_trap_handler_functions</name></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>UpdateUnwindPlanForFirstFrameIfInvalid</name><parameter_list>(<parameter><decl><type><name>ABI</name> <modifier>*</modifier></type><name>abi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CursorSP</name></type> <name>GetOneMoreFrame</name><parameter_list>(<parameter><decl><type><name>ABI</name> <modifier>*</modifier></type><name>abi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddOneMoreFrame</name><parameter_list>(<parameter><decl><type><name>ABI</name> <modifier>*</modifier></type><name>abi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddFirstFrame</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><call><name>UnwindLLDB</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnwindLLDB</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UnwindLLDB</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>UnwindLLDB</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
