<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/IOHandler.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_IOHANDLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_IOHANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/ValueObjectList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Host/Config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/ConstString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Predicate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/StringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-defines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>repro</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DataRecorder</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>curses</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Application</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Application</name></expr></argument>&gt;</argument_list></name> <name>ApplicationAP</name></expr>;</expr_stmt></typedef>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IOHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
<expr_stmt><expr><name>CommandInterpreter</name></expr><operator>,</operator>
<expr><name>CommandList</name></expr><operator>,</operator>
<expr><name>Confirm</name></expr><operator>,</operator>
<expr><name>Curses</name></expr><operator>,</operator>
<expr><name>Expression</name></expr><operator>,</operator>
<expr><name>REPL</name></expr><operator>,</operator>
<expr><name>ProcessIO</name></expr><operator>,</operator>
<expr><name>PythonInterpreter</name></expr><operator>,</operator>
<expr><name>LuaInterpreter</name></expr><operator>,</operator>
<expr><name>PythonCode</name></expr><operator>,</operator>
<expr><name>Other</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>IOHandler</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>IOHandler::Type type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>IOHandler</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>IOHandler::Type type</argument>,
<argument>const lldb::FileSP &amp;input_sp</argument>, <argument>const lldb::StreamFileSP &amp;output_sp</argument>,
<argument>const lldb::StreamFileSP &amp;error_sp</argument>, <argument>uint32_t flags</argument>,
<argument>repro::DataRecorder *data_recorder</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IOHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>Run</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>Cancel</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function_decl><type><name>virtual</name> <name>bool</name></type> <name>Interrupt</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>GotEOF</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>bool</name></type> <name>IsActive</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>m_done</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>SetIsDone</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_done</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>bool</name></type> <name>GetIsDone</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_done</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>Activate</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>Deactivate</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>TerminalSizeChanged</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPrompt</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>SetPrompt</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>prompt</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function_decl><type><name>bool</name></type> <name>SetPrompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>ConstString</name></type> <name>GetControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetCommandPrefix</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetHelpPrologue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>GetInputFD</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetOutputFD</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetErrorFD</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetInputFILE</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetOutputFILE</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>GetErrorFILE</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <call><name>GetInputFileSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <call><name>GetOutputStreamFileSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <call><name>GetErrorStreamFileSP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>GetDebugger</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_debugger</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GetUserData</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_user_data</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>SetUserData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>m_user_data</name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>Flags</name> <modifier>&amp;</modifier></type><name>GetFlags</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>m_flags</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Flags</name> <operator>&amp;</operator><macro><name>GetFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_flags</name></expr>;</return> }</block></expr></expr_stmt>






<function_decl><type><name>bool</name></type> <name>GetIsInteractive</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>GetIsRealTerminal</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>SetPopped</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>WaitForPop</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>virtual</name> <name>void</name></type> <name>PrintAsync</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>Flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>m_debugger</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>FileSP</name> <name>m_input_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_output_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>StreamFileSP</name> <name>m_error_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repro</name><operator>::</operator><name>DataRecorder</name> <operator>*</operator><name>m_data_recorder</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>m_popped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Flags</name></type> <name>m_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>m_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_active</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>IOHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IOHandler</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>IOHandler</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>IOHandler</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>IOHandlerDelegate</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Completion</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>LLDBCommand</name></expr><operator>,</operator> <expr><name>Expression</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>IOHandlerDelegate</name><argument_list>(<argument>Completion completion = Completion::None</argument>)</argument_list></macro>
: <macro><name>m_completion</name><argument_list>(<argument>completion</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IOHandlerDelegate</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>IOHandlerActivated</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>IOHandlerDeactivated</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>IOHandlerSuggestion</name><argument_list>(<argument>IOHandler &amp;io_handler</argument>,
<argument>llvm::StringRef line</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>IOHandlerComplete</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>,
<parameter><decl><type><name>CompletionRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>IOHandlerGetFixIndentationCharacters</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>























<function><type><name>virtual</name> <name>int</name></type> <name>IOHandlerFixIndentation</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>&amp;</modifier></type><name>lines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cursor_position</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>IOHandlerInputComplete</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>IOHandlerInputInterrupted</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>















<function><type><name>virtual</name> <name>bool</name></type> <name>IOHandlerIsInputComplete</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>,
<parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>lines</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>ConstString</name></type> <name>IOHandlerGetControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>IOHandlerGetCommandPrefix</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>virtual</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>IOHandlerGetHelpPrologue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>





<function><type><name>virtual</name> <name>bool</name></type> <name>IOHandlerInterrupt</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Completion</name></type> <name>m_completion</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>IOHandlerDelegateMultiline</name> <range>: <expr><name>public</name> <name>IOHandlerDelegate</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>IOHandlerDelegateMultiline</name><argument_list>(<argument>const char *end_line</argument>,
<argument>Completion completion = Completion::None</argument>)</argument_list></macro>
<operator>:</operator> <call><name>IOHandlerDelegate</name><argument_list>(<argument><expr><name>completion</name></expr></argument>)</argument_list></call></expr>,
<macro><name>m_end_line</name><argument_list>(<argument>(end_line &amp;&amp; end_line[<literal type="number">0</literal>]) ? end_line : <literal type="string">""</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>IOHandlerDelegateMultiline</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;

<expr><name>ConstString</name> <macro><name>IOHandlerGetControlSequence</name><argument_list>(<argument>char ch</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ConstString</name><argument_list>(<argument><expr><name>m_end_line</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<function><type><name>bool</name></type> <name>IOHandlerIsInputComplete</name><parameter_list>(<parameter><decl><type><name>IOHandler</name> <modifier>&amp;</modifier></type><name>io_handler</name></decl></parameter>,
<parameter><decl><type><name>StringList</name> <modifier>&amp;</modifier></type><name>lines</name></decl></parameter>)</parameter_list> override <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_lines</name> <init>= <expr><call><name><name>lines</name><operator>.</operator><name>GetSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_lines</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>lines</name><index>[<expr><name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>m_end_line</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name><name>lines</name><operator>.</operator><name>PopBack</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>m_end_line</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IOHandlerEditline</name> <range>: <expr><name>public</name> <name>IOHandler</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>IOHandlerEditline</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>IOHandler::Type type</argument>,
<argument>const char *editline_name</argument>,
<argument>llvm::StringRef prompt</argument>, <argument>llvm::StringRef continuation_prompt</argument>,
<argument>bool multi_line</argument>, <argument>bool color_prompts</argument>,
<argument>uint32_t line_number_start</argument>,


<argument>IOHandlerDelegate &amp;delegate</argument>,
<argument>repro::DataRecorder *data_recorder</argument>)</argument_list></macro></expr>;

<macro><name>IOHandlerEditline</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>IOHandler::Type type</argument>,
<argument>const lldb::FileSP &amp;input_sp</argument>,
<argument>const lldb::StreamFileSP &amp;output_sp</argument>,
<argument>const lldb::StreamFileSP &amp;error_sp</argument>, <argument>uint32_t flags</argument>,
<argument>const char *editline_name</argument>,
<argument>llvm::StringRef prompt</argument>, <argument>llvm::StringRef continuation_prompt</argument>,
<argument>bool multi_line</argument>, <argument>bool color_prompts</argument>,
<argument>uint32_t line_number_start</argument>,


<argument>IOHandlerDelegate &amp;delegate</argument>,
<argument>repro::DataRecorder *data_recorder</argument>)</argument_list></macro>;

<expr><call><name>IOHandlerEditline</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>,
<argument><expr><name>IOHandlerDelegate</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><call><name>IOHandlerEditline</name><argument_list>(<argument><expr><name>Debugger</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>FileSP</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StreamFileSP</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>StreamFileSP</name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>IOHandlerDelegate</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><operator>~</operator><macro><name>IOHandlerEditline</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Run</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Cancel</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>Interrupt</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GotEOF</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Activate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>Deactivate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>TerminalSizeChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ConstString</name> <macro><name>GetControlSequence</name><argument_list>(<argument>char ch</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>m_delegate</name><operator>.</operator><name>IOHandlerGetControlSequence</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetCommandPrefix</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>m_delegate</name><operator>.</operator><name>IOHandlerGetCommandPrefix</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetHelpPrologue</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>m_delegate</name><operator>.</operator><name>IOHandlerGetHelpPrologue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>GetPrompt</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>SetPrompt</name><argument_list>(<argument>llvm::StringRef prompt</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <call><name>SetPrompt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>prompt</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>GetContinuationPrompt</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetContinuationPrompt</name><argument_list>(<argument>llvm::StringRef prompt</argument>)</argument_list></macro></expr>;
<expr><name>void</name> <call><name>SetContinuationPrompt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>bool</name> <call><name>GetLine</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>interrupted</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>GetLines</name><argument_list>(<argument><expr><name>StringList</name> <operator>&amp;</operator><name>lines</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>interrupted</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>SetBaseLineNumber</name><argument_list>(<argument>uint32_t line</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>GetInterruptExits</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_interrupt_exits</name></expr>;</return> }</block>

<name>void</name> <macro><name>SetInterruptExits</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{ <expr><name>m_interrupt_exits</name> <operator>=</operator> <name>b</name></expr>; }</block>

<specifier>const</specifier> <name>StringList</name> <operator>*</operator><macro><name>GetCurrentLines</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_current_lines_ptr</name></expr>;</return> }</block>

<name>uint32_t</name> <macro><name>GetCurrentLineIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>PrintAsync</name><argument_list>(<argument>Stream *stream</argument>, <argument>const char *s</argument>, <argument>size_t len</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_ENABLE_LIBEDIT</name></expr></cpp:if>
<name>bool</name> <call><name>IsInputCompleteCallback</name><argument_list>(<argument><expr><name>Editline</name> <operator>*</operator><name>editline</name></expr></argument>, <argument><expr><name>StringList</name> <operator>&amp;</operator><name>lines</name></expr></argument>)</argument_list></call></expr>;

<expr><name>int</name> <macro><name>FixIndentationCallback</name><argument_list>(<argument>Editline *editline</argument>, <argument>const StringList &amp;lines</argument>,
<argument>int cursor_position</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>SuggestionCallback</name><argument_list>(<argument>llvm::StringRef line</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>AutoCompleteCallback</name><argument_list>(<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>protected</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLDB_ENABLE_LIBEDIT</name></expr></cpp:if>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Editline</name></expr></argument>&gt;</argument_list></name> <name>m_editline_up</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>IOHandlerDelegate</name> <operator>&amp;</operator><name>m_delegate</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_prompt</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_continuation_prompt</name></expr>;
<expr><name>StringList</name> <operator>*</operator><name>m_current_lines_ptr</name></expr>;
<expr><name>uint32_t</name> <name>m_base_line_number</name></expr>;
<expr><name>uint32_t</name> <name>m_curr_line_idx</name></expr>;
<expr><name>bool</name> <name>m_multi_line</name></expr>;
<expr><name>bool</name> <name>m_color_prompts</name></expr>;
<expr><name>bool</name> <name>m_interrupt_exits</name></expr>;
<expr><name>bool</name> <name>m_editing</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_line_buffer</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>IOHandlerConfirm</name> <range>: <expr><name>public</name> <name>IOHandlerDelegate</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>IOHandlerEditline</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>IOHandlerConfirm</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>llvm::StringRef prompt</argument>,
<argument>bool default_response</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>IOHandlerConfirm</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>GetResponse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_user_response</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>IOHandlerComplete</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>,
<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>IOHandlerInputComplete</name><argument_list>(<argument><expr><name>IOHandler</name> <operator>&amp;</operator><name>io_handler</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>m_default_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_user_response</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IOHandlerStack</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>IOHandlerStack</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Push</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sp</name><operator>-&gt;</operator><name>SetPopped</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_top</name> <operator>=</operator> <call><name><name>sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>m_stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <macro><name>Top</name><argument_list>()</argument_list></macro> <block>{
<expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <name>sp</name></expr>;
<expr><block>{
<expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name><name>m_stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr>
<return>return <expr><name>sp</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>Pop</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <call><name>sp</name><argument_list>(<argument><expr><call><name><name>m_stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m_stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sp</name><operator>-&gt;</operator><name>SetPopped</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>m_top</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>m_stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nullptr</name></expr> </then><else>: <expr><call><name><name>m_stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>recursive_mutex</name> <operator>&amp;</operator><macro><name>GetMutex</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_mutex</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsTop</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>IOHandlerSP</name> <operator>&amp;</operator><name>io_handler_sp</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>m_top</name> <operator>==</operator> <call><name><name>io_handler_sp</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CheckTopIOHandlerTypes</name><argument_list>(<argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name> <name>top_type</name></expr></argument>,
<argument><expr><name>IOHandler</name><operator>::</operator><name>Type</name> <name>second_top_type</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>recursive_mutex</name></expr></argument>&gt;</argument_list></name> <call><name>guard</name><argument_list>(<argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_io_handlers</name> <init>= <expr><call><name><name>m_stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>num_io_handlers</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>m_stack</name><index>[<expr><name>num_io_handlers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>top_type</name> <operator>&amp;&amp;</operator>
<name><name>m_stack</name><index>[<expr><name>num_io_handlers</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>second_top_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ConstString</name></type> <name>GetTopIOHandlerControlSequence</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_top</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_top</name><operator>-&gt;</operator><name>GetControlSequence</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ConstString</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTopIOHandlerCommandPrefix</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_top</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_top</name><operator>-&gt;</operator><name>GetCommandPrefix</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTopIOHandlerHelpPrologue</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>m_top</name> <operator>!=</operator> <name>nullptr</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_top</name><operator>-&gt;</operator><name>GetHelpPrologue</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>PrintAsync</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>IOHandlerSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>collection</name></type> <name>m_stack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IOHandler</name> <modifier>*</modifier></type><name>m_top</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>IOHandlerStack</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IOHandlerStack</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>IOHandlerStack</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>IOHandlerStack</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
