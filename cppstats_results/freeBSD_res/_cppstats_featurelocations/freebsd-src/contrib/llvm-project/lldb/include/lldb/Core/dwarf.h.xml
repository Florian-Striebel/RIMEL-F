<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/dwarf.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_DWARF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_DWARF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/RangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/BinaryFormat/Dwarf.h"</cpp:file></cpp:include>


<expr_stmt><expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>dwarf</name></expr>;</expr_stmt>

<typedef>typedef <type><name>uint32_t</name></type> <name>dw_uleb128_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>dw_sleb128_t</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>dw_attr_t</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>dw_form_t</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name>dwarf</name><operator>::</operator><name>Tag</name> <name>dw_tag_t</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>dw_addr_t</name>;</typedef>



<typedef>typedef <type><name>uint32_t</name></type> <name>dw_offset_t</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_INVALID_OFFSET</name></cpp:macro> <cpp:value>(~(dw_offset_t)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFFul</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_MASK_ENCODING</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<typedef>typedef <expr_stmt><expr><name>lldb_private</name><operator>::</operator><name><name>RangeVector</name><argument_list type="generic">&lt;<argument><expr><name>dw_addr_t</name></expr></argument>, <argument><expr><name>dw_addr_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>DWARFRangeList</name></expr>;</expr_stmt></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
