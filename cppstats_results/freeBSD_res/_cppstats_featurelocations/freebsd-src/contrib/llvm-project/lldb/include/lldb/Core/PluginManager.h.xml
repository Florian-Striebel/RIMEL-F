<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Core/PluginManager.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_CORE_PLUGINMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_CORE_PLUGINMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Architecture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/TypeSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/CompletionRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/FileSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-enumerations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private-interfaces.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_PLUGIN_DEFINE_ADV</name><parameter_list>(<parameter><type><name>ClassName</name></type></parameter>, <parameter><type><name>PluginName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace lldb_private { void lldb_initialize_##PluginName() { ClassName::Initialize(); } void lldb_terminate_##PluginName() { ClassName::Terminate(); } }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_PLUGIN_DEFINE</name><parameter_list>(<parameter><type><name>PluginName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LLDB_PLUGIN_DEFINE_ADV(PluginName, PluginName)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_PLUGIN_DECLARE</name><parameter_list>(<parameter><type><name>PluginName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>namespace lldb_private { extern void lldb_initialize_##PluginName(); extern void lldb_terminate_##PluginName(); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_PLUGIN_INITIALIZE</name><parameter_list>(<parameter><type><name>PluginName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lldb_initialize_##PluginName()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_PLUGIN_TERMINATE</name><parameter_list>(<parameter><type><name>PluginName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lldb_terminate_##PluginName()</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandInterpreter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PluginManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Terminate</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>ABICreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ABICreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ABICreateInstance</name></type> <name>GetABICreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterPlugin</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>description</name></expr></argument>,
<argument><expr><name>ArchitectureCreateInstance</name> <name>create_callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ArchitectureCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Architecture</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateArchitectureInstance</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ArchSpec</name> <operator>&amp;</operator><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>DisassemblerCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>DisassemblerCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DisassemblerCreateInstance</name></type>
<name>GetDisassemblerCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DisassemblerCreateInstance</name></type>
<name>GetDisassemblerCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>DynamicLoaderCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>DynamicLoaderCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DynamicLoaderCreateInstance</name></type>
<name>GetDynamicLoaderCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DynamicLoaderCreateInstance</name></type>
<name>GetDynamicLoaderCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>JITLoaderCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>JITLoaderCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>JITLoaderCreateInstance</name></type>
<name>GetJITLoaderCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>EmulateInstructionCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>EmulateInstructionCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>EmulateInstructionCreateInstance</name></type>
<name>GetEmulateInstructionCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>EmulateInstructionCreateInstance</name></type>
<name>GetEmulateInstructionCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>OperatingSystemCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>OperatingSystemCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>OperatingSystemCreateInstance</name></type>
<name>GetOperatingSystemCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>OperatingSystemCreateInstance</name></type>
<name>GetOperatingSystemCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>LanguageCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>LanguageCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageCreateInstance</name></type> <name>GetLanguageCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(
<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>LanguageRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>LanguageRuntimeGetCommandObject</name></type> <name>command_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>LanguageRuntimeGetExceptionPrecondition</name></type> <name>precondition_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>LanguageRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageRuntimeCreateInstance</name></type>
<name>GetLanguageRuntimeCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageRuntimeGetCommandObject</name></type>
<name>GetLanguageRuntimeGetCommandObjectAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageRuntimeGetExceptionPrecondition</name></type>
<name>GetLanguageRuntimeGetExceptionPreconditionAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>SystemRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>SystemRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SystemRuntimeCreateInstance</name></type>
<name>GetSystemRuntimeCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>ObjectFileCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>ObjectFileCreateMemoryInstance</name></type> <name>create_memory_callback</name></decl></parameter>,
<parameter><decl><type><name>ObjectFileGetModuleSpecifications</name></type> <name>get_module_specifications</name></decl></parameter>,
<parameter><decl><type><name>ObjectFileSaveCore</name></type> <name>save_core</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ObjectFileCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectFileCreateInstance</name></type>
<name>GetObjectFileCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectFileCreateMemoryInstance</name></type>
<name>GetObjectFileCreateMemoryCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectFileGetModuleSpecifications</name></type>
<name>GetObjectFileGetModuleSpecificationsCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectFileCreateMemoryInstance</name></type>
<name>GetObjectFileCreateMemoryCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>SaveCore</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ProcessSP</name> <operator>&amp;</operator><name>process_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileSpec</name> <operator>&amp;</operator><name>outfile</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>SaveCoreStyle</name> <operator>&amp;</operator><name>core_style</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>ObjectContainerCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>ObjectFileGetModuleSpecifications</name></type> <name>get_module_specifications</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ObjectContainerCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectContainerCreateInstance</name></type>
<name>GetObjectContainerCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectFileGetModuleSpecifications</name></type>
<name>GetObjectContainerGetModuleSpecificationsCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>PlatformCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>PlatformCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PlatformCreateInstance</name></type> <name>GetPlatformCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PlatformCreateInstance</name></type>
<name>GetPlatformCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPlatformPluginNameAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPlatformPluginDescriptionAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AutoCompletePlatformName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>partial_name</name></expr></argument>,
<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>ProcessCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ProcessCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ProcessCreateInstance</name></type> <name>GetProcessCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ProcessCreateInstance</name></type>
<name>GetProcessCreateCallbackForPluginName</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetProcessPluginNameAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetProcessPluginDescriptionAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AutoCompleteProcessName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>partial_name</name></expr></argument>,
<argument><expr><name>CompletionRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><argument_list>(<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>ScriptLanguage</name> <name>script_lang</name></expr></argument>,
<argument><expr><name>ScriptInterpreterCreateInstance</name> <name>create_callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>ScriptInterpreterCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ScriptInterpreterCreateInstance</name></type>
<name>GetScriptInterpreterCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>ScriptInterpreterSP</name>
<macro><name>GetScriptInterpreterForLanguage</name><argument_list>(<argument>lldb::ScriptLanguage script_lang</argument>,
<argument>Debugger &amp;debugger</argument>)</argument_list></macro></expr>;</expr_stmt>



































<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>StructuredDataPluginCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>StructuredDataFilterLaunchInfo</name></type> <name>filter_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>StructuredDataPluginCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>StructuredDataPluginCreateInstance</name></type>
<name>GetStructuredDataPluginCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>StructuredDataFilterLaunchInfo</name></type>
<name>GetStructuredDataFilterCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>iteration_complete</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>SymbolFileCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>DebuggerInitializeCallback</name></type> <name>debugger_init_callback</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>SymbolFileCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SymbolFileCreateInstance</name></type>
<name>GetSymbolFileCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>SymbolVendorCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>SymbolVendorCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SymbolVendorCreateInstance</name></type>
<name>GetSymbolVendorCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><argument_list>(
<argument><expr><name>ConstString</name> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>description</name></expr></argument>,
<argument><expr><name>TraceCreateInstanceForSessionFile</name> <name>create_callback_for_session_file</name></expr></argument>,
<argument><expr><name>TraceCreateInstanceForLiveProcess</name> <name>create_callback_for_live_process</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>schema</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>TraceCreateInstanceForSessionFile</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>TraceCreateInstanceForSessionFile</name></type>
<name>GetTraceCreateCallback</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>plugin_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>TraceCreateInstanceForLiveProcess</name></type>
<name>GetTraceCreateCallbackForLiveProcess</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>plugin_name</name></decl></parameter>)</parameter_list>;</function_decl>










<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetTraceSchema</name><argument_list>(<argument>ConstString plugin_name</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetTraceSchema</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro></expr>;</expr_stmt>






<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(
<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>TraceExporterCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>ThreadTraceExportCommandCreator</name></type> <name>create_thread_trace_export_command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>TraceExporterCreateInstance</name></type>
<name>GetTraceExporterCreateCallback</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>plugin_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>TraceExporterCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTraceExporterPluginNameAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>ThreadTraceExportCommandCreator</name></type>
<name>GetThreadTraceExportCommandCreatorAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>UnwindAssemblyCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>UnwindAssemblyCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>UnwindAssemblyCreateInstance</name></type>
<name>GetUnwindAssemblyCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>MemoryHistoryCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>MemoryHistoryCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MemoryHistoryCreateInstance</name></type>
<name>GetMemoryHistoryCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>InstrumentationRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>InstrumentationRuntimeGetType</name></type> <name>get_type_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>InstrumentationRuntimeCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>InstrumentationRuntimeGetType</name></type>
<name>GetInstrumentationRuntimeGetTypeCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>InstrumentationRuntimeCreateInstance</name></type>
<name>GetInstrumentationRuntimeCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>TypeSystemCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>LanguageSet</name></type> <name>supported_languages_for_types</name></decl></parameter>,
<parameter><decl><type><name>LanguageSet</name></type> <name>supported_languages_for_expressions</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>TypeSystemCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>TypeSystemCreateInstance</name></type>
<name>GetTypeSystemCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageSet</name></type> <name>GetAllTypeSystemSupportedLanguagesForTypes</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageSet</name></type> <name>GetAllTypeSystemSupportedLanguagesForExpressions</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>RegisterPlugin</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>,
<parameter><decl><type><name>REPLCreateInstance</name></type> <name>create_callback</name></decl></parameter>,
<parameter><decl><type><name>LanguageSet</name></type> <name>supported_languages</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>UnregisterPlugin</name><parameter_list>(<parameter><decl><type><name>REPLCreateInstance</name></type> <name>create_callback</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>REPLCreateInstance</name></type> <name>GetREPLCreateCallbackAtIndex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LanguageSet</name></type> <name>GetREPLAllTypeSystemSupportedLanguages</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DebuggerInitialize</name><parameter_list>(<parameter><decl><type><name>Debugger</name> <modifier>&amp;</modifier></type><name>debugger</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForDynamicLoaderPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>,
<argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForDynamicLoaderPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForPlatformPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForPlatformPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForProcessPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForProcessPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForSymbolFilePlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForSymbolFilePlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForJITLoaderPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>, <argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForJITLoaderPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForOperatingSystemPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>,
<argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForOperatingSystemPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name>
<macro><name>GetSettingForStructuredDataPlugin</name><argument_list>(<argument>Debugger &amp;debugger</argument>,
<argument>ConstString setting_name</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSettingForStructuredDataPlugin</name><argument_list>(
<argument><expr><name>Debugger</name> <operator>&amp;</operator><name>debugger</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>OptionValuePropertiesSP</name> <operator>&amp;</operator><name>properties_sp</name></expr></argument>,
<argument><expr><name>ConstString</name> <name>description</name></expr></argument>, <argument><expr><name>bool</name> <name>is_global_property</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
