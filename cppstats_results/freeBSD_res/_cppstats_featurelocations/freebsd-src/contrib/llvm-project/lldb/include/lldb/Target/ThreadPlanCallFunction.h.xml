<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/ThreadPlanCallFunction.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_THREADPLANCALLFUNCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_THREADPLANCALLFUNCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/Thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Target/ThreadPlan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ThreadPlanCallFunction</name> <range>: <expr><name>public</name> <name>ThreadPlan</name> <block>{



<expr><name>public</name><operator>:</operator>
<call><name>ThreadPlanCallFunction</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>function</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CompilerType</name> <operator>&amp;</operator><name>return_type</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>ThreadPlanCallFunction</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>function</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvaluateExpressionOptions</name> <operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>ThreadPlanCallFunction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>GetDescription</name><argument_list>(<argument>Stream *s</argument>, <argument>lldb::DescriptionLevel level</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ValidatePlan</name><argument_list>(<argument>Stream *error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>ShouldStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>Vote</name> <macro><name>ShouldReportStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>StopOthers</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>lldb</name><operator>::</operator><name>StateType</name> <macro><name>GetPlanRunState</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>DidPush</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>WillStop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>MischiefManaged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;










<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <macro><name>GetReturnValueObject</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>m_return_valobj_sp</name></expr>;</return>
}</block>




<name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetFunctionStackPointer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_function_sp</name></expr>;</return> }</block>




<name>void</name> <macro><name>WillPop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;









<expr><name>virtual</name> <name>lldb</name><operator>::</operator><name>StopInfoSP</name> <macro><name>GetRealStopInfo</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>m_real_stop_info_sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m_real_stop_info_sp</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>GetPrivateStopInfo</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<name>lldb</name><operator>::</operator><name>addr_t</name> <macro><name>GetStopAddress</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>m_stop_address</name></expr>;</return> }</block>

<name>void</name> <macro><name>RestoreThreadState</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ThreadDestroyed</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><name>m_takedown_done</name> <operator>=</operator> <name>true</name></expr>; }</block>

<name>void</name> <macro><name>SetStopOthers</name><argument_list>(<argument>bool new_value</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <call><name>ReportRegisterState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>message</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>DoPlanExplainsStop</name><argument_list>(<argument>Event *event_ptr</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>SetReturnValue</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>ConstructorSetup</name><argument_list>(<argument><expr><name>Thread</name> <operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><name>ABI</name> <operator>*</operator><operator>&amp;</operator><name>abi</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>start_load_addr</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <operator>&amp;</operator><name>function_load_addr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>DoTakedown</name><argument_list>(<argument>bool success</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>SetBreakpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>ClearBreakpoints</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>BreakpointsExplainStop</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <name>m_valid</name></expr>;
<expr><name>bool</name> <name>m_stop_other_threads</name></expr>;
<expr><name>bool</name> <name>m_unwind_on_error</name></expr>;
<expr><name>bool</name> <name>m_ignore_breakpoints</name></expr>;
<expr><name>bool</name> <name>m_debug_execution</name></expr>;
<expr><name>bool</name> <name>m_trap_exceptions</name></expr>;
<expr><name>Address</name> <name>m_function_addr</name></expr>;
<expr><name>Address</name> <name>m_start_addr</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_function_sp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ThreadPlanSP</name> <name>m_subplan_sp</name></expr>;
<expr><name>LanguageRuntime</name> <operator>*</operator><name>m_cxx_language_runtime</name></expr>;
<expr><name>LanguageRuntime</name> <operator>*</operator><name>m_objc_language_runtime</name></expr>;
<expr><name>Thread</name><operator>::</operator><name>ThreadStateCheckpoint</name> <name>m_stored_thread_state</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>StopInfoSP</name>
<name>m_real_stop_info_sp</name></expr>;



<expr><name>StreamString</name> <name>m_constructor_errors</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>ValueObjectSP</name> <name>m_return_valobj_sp</name></expr>;


<expr><name>bool</name> <name>m_takedown_done</name></expr>;

<expr><name>bool</name> <name>m_should_clear_objc_exception_bp</name></expr>;
<expr><name>bool</name> <name>m_should_clear_cxx_exception_bp</name></expr>;
<expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>m_stop_address</name></expr>;


<expr><name>private</name><operator>:</operator>
<name>CompilerType</name> <name>m_return_type</name></expr>;
<expr><call><name>ThreadPlanCallFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThreadPlanCallFunction</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><specifier>const</specifier> <name>ThreadPlanCallFunction</name> <operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ThreadPlanCallFunction</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
