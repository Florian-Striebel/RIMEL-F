<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Symbol/SymbolContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_SYMBOL_SYMBOLCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_SYMBOL_SYMBOLCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Mangled.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Symbol/LineEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextScope</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>SymbolContext</name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>SymbolContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<function_decl><type><name>explicit</name></type> <name>SymbolContext</name><parameter_list>(<parameter><decl><type><name>SymbolContextScope</name> <modifier>*</modifier></type><name>sc_scope</name></decl></parameter>)</parameter_list>;</function_decl>























<decl_stmt><decl><type><name>explicit</name></type> <name>SymbolContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>CompileUnit</name> <operator>*</operator><name>comp_unit</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>Function</name> <operator>*</operator><name>function</name> <operator>=</operator> <name>nullptr</name></expr></argument>, <argument><expr><name>Block</name> <operator>*</operator><name>block</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>LineEntry</name> <operator>*</operator><name>line_entry</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>Symbol</name> <operator>*</operator><name>symbol</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>explicit</name></type> <name>SymbolContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>ModuleSP</name> <operator>&amp;</operator><name>module_sp</name></expr></argument>,
<argument><expr><name>CompileUnit</name> <operator>*</operator><name>comp_unit</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>Function</name> <operator>*</operator><name>function</name> <operator>=</operator> <name>nullptr</name></expr></argument>, <argument><expr><name>Block</name> <operator>*</operator><name>block</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>LineEntry</name> <operator>*</operator><name>line_entry</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>Symbol</name> <operator>*</operator><name>symbol</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SymbolContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clear_target</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

















































<decl_stmt><decl><type><name>bool</name></type> <name>DumpStopContext</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>ExecutionContextScope</name> <operator>*</operator><name>exe_scope</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>so_addr</name></expr></argument>, <argument><expr><name>bool</name> <name>show_fullpaths</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_module</name></expr></argument>, <argument><expr><name>bool</name> <name>show_inlined_frames</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_function_arguments</name></expr></argument>,
<argument><expr><name>bool</name> <name>show_function_name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






































<decl_stmt><decl><type><name>bool</name></type> <name>GetAddressRange</name><argument_list>(<argument><expr><name>uint32_t</name> <name>scope</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>range_idx</name></expr></argument>,
<argument><expr><name>bool</name> <name>use_inline_block_range</name></expr></argument>, <argument><expr><name>AddressRange</name> <operator>&amp;</operator><name>range</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>GetAddressRangeFromHereToEndLine</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>end_line</name></decl></parameter>, <parameter><decl><type><name>AddressRange</name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>,
<parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><specifier>const</specifier> <name>Symbol</name> <modifier>*</modifier></type><name>FindBestGlobalDataSymbol</name><parameter_list>(<parameter><decl><type><name>ConstString</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Status</name> <modifier>&amp;</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>uint32_t</name> <macro><name>GetResolvedMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <macro><name>GetLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




















<function_decl><type><name>Block</name> <modifier>*</modifier></type><name>GetFunctionBlock</name><parameter_list>()</parameter_list>;</function_decl>


















<decl_stmt><decl><type><name>bool</name></type> <name>GetFunctionMethodInfo</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>LanguageType</name> <operator>&amp;</operator><name>language</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>is_instance_method</name></expr></argument>,
<argument><expr><name>ConstString</name> <operator>&amp;</operator><name>language_object_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>SortTypeList</name><argument_list>(<argument><expr><name>TypeMap</name> <operator>&amp;</operator><name>type_map</name></expr></argument>, <argument><expr><name>TypeList</name> <operator>&amp;</operator><name>type_list</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>








<decl_stmt><decl><type><name>ConstString</name></type> <name>GetFunctionName</name><argument_list>(
<argument><expr><name>Mangled</name><operator>::</operator><name>NamePreference</name> <name>preference</name> <operator>=</operator> <name>Mangled</name><operator>::</operator><name>ePreferDemangled</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<expr_stmt><expr><name>LineEntry</name> <macro><name>GetFunctionStartLineEntry</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



















<decl_stmt><decl><type><name>bool</name></type> <name>GetParentOfInlinedScope</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>curr_frame_pc</name></expr></argument>,
<argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>next_frame_sc</name></expr></argument>,
<argument><expr><name>Address</name> <operator>&amp;</operator><name>inlined_frame_addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>target_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>module_sp</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompileUnit</name> <modifier>*</modifier></type><name>comp_unit</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Function</name> <modifier>*</modifier></type><name>function</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineEntry</name></type> <name>line_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Symbol</name> <modifier>*</modifier></type><name>symbol</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Variable</name> <modifier>*</modifier></type><name>variable</name> <init>=
<expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextSpecifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>SpecificationType</name> <block>{
<decl><name>eNothingSpecified</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>eModuleSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>eFileSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>eLineStartSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>eLineEndSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>eFunctionSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>eClassOrNamespaceSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>eAddressRangeSpecified</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>
}</block>;</enum>


<expr_stmt><expr><call><name>SymbolContextSpecifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>TargetSP</name> <operator>&amp;</operator><name>target_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>SymbolContextSpecifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>AddSpecification</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec_string</name></decl></parameter>, <parameter><decl><type><name>SpecificationType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AddLineSpecification</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>line_no</name></decl></parameter>, <parameter><decl><type><name>SpecificationType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>SymbolContextMatches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>AddressMatches</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>addr_t</name> <name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>TargetSP</name> <name>m_target_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_module_spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>ModuleSP</name> <name>m_module_sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileSpec</name></expr></argument>&gt;</argument_list></name> <name>m_file_spec_up</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_start_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>m_end_line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_function_spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_class_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AddressRange</name></expr></argument>&gt;</argument_list></name> <name>m_address_range_up</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_type</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>SymbolContextList</name> <block>{<block_content>
<label><name>public</name>:</label>



<expr_stmt><expr><call><name>SymbolContextList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>SymbolContextList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>AppendIfUnique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>merge_symbol_into_function</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>AppendIfUnique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SymbolContextList</name> <modifier>&amp;</modifier></type><name>sc_list</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>merge_symbol_into_function</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
















<decl_stmt><decl><type><name>bool</name></type> <name>GetContextAtIndex</name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>, <argument><expr><name>SymbolContext</name> <operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>











<function><type><name>SymbolContext</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>m_symbol_contexts</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>SymbolContext</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>m_symbol_contexts</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function_decl><type><name>bool</name></type> <name>RemoveContextAtIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>uint32_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>NumLineEntriesWithLine</name><argument_list>(<argument><expr><name>uint32_t</name> <name>line</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>,
<argument><expr><name>Target</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>protected</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolContext</name></expr></argument>&gt;</argument_list></name>
<name>collection</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>collection</name></type> <name>m_symbol_contexts</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name><name>AdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>SymbolContext</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>&gt;</argument_list></name></type>
<name>SymbolContextIterable</name>;</typedef>
<function><type><name>SymbolContextIterable</name></type> <name>SymbolContexts</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>SymbolContextIterable</name><argument_list>(<argument><expr><name>m_symbol_contexts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SymbolContext</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SymbolContextList</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SymbolContextList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SymbolContextList</name> <operator>&amp;</operator><name>lhs</name><operator>,</operator> <specifier>const</specifier> <name>SymbolContextList</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
