<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Target/QueueList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_TARGET_QUEUELIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_TARGET_QUEUELIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/UserID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>








<decl_stmt><decl><type><name>class</name></type> <name>QueueList</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Process</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>QueueList</name><argument_list>(<argument><expr><name>Process</name> <operator>*</operator><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>QueueList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>uint32_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list>;</function_decl>







<expr_stmt><expr><name>lldb</name><operator>::</operator><name>QueueSP</name> <macro><name>GetQueueAtIndex</name><argument_list>(<argument>uint32_t idx</argument>)</argument_list></macro></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>QueueSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>LockingAdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>QueueSP</name></expr></argument>, <argument><expr><name>vector_adapter</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name></type>
<name>QueueIterable</name>;</typedef>






<function><type><name>QueueIterable</name></type> <name>Queues</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>QueueIterable</name><argument_list>(<argument><expr><name>m_queues</name></expr></argument>, <argument><expr><name>m_mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>void</name></type> <name>AddQueue</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>QueueSP</name> <name>queue</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>QueueSP</name> <macro><name>FindQueueByID</name><argument_list>(<argument>lldb::queue_id_t qid</argument>)</argument_list></macro></expr>;</expr_stmt>












<expr_stmt><expr><name>lldb</name><operator>::</operator><name>QueueSP</name> <macro><name>FindQueueByIndexID</name><argument_list>(<argument>uint32_t index_id</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <operator>&amp;</operator><call><name>GetMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>m_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type>
<name>m_stop_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_queues</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>QueueList</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
