<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Host/OptionParser.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_HOST_OPTIONPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_HOST_OPTIONPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<struct_decl>struct <name>option</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>

<struct_decl>struct <name>OptionDefinition</name>;</struct_decl>

<struct>struct <name>Option</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDefinition</name> <modifier>*</modifier></type><name>definition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>OptionParser</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>OptionArgument</name> <block>{ <decl><name>eNoArgument</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>eRequiredArgument</name></decl>, <decl><name>eOptionalArgument</name></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnableError</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>Parse</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>argv</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>optstring</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Option</name> <operator>*</operator><name>longopts</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>longindex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOptionArgument</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetOptionIndex</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetOptionErrorCause</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>GetShortOptionString</name><argument_list>(<argument><expr>struct <name>option</name> <operator>*</operator><name>long_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
