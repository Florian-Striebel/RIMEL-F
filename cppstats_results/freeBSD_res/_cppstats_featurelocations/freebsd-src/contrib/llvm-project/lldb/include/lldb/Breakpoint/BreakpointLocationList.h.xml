<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/lldb/include/lldb/Breakpoint/BreakpointLocationList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLDB_BREAKPOINT_BREAKPOINTLOCATIONLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLDB_BREAKPOINT_BREAKPOINTLOCATIONLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Core/Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/Utility/Iterable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lldb/lldb-private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>lldb_private</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>BreakpointLocationList</name> <block>{<block_content>





<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Breakpoint</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BreakpointLocationList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Dump</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>










<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>FindByAddress</name><argument_list>(<argument>const Address &amp;addr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>










<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>FindByID</name><argument_list>(<argument>lldb::break_id_t breakID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <call><name>FindIDByAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Address</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<function_decl><type><name>size_t</name></type> <name>FindInModule</name><parameter_list>(<parameter><decl><type><name>Module</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>bp_loc_list</name></decl></parameter>)</parameter_list>;</function_decl>









<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetByIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>GetByIndex</name><argument_list>(<argument>size_t i</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>ClearAllBreakpointSites</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ResolveAllBreakpointSites</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><name>size_t</name> <macro><name>GetNumResolvedLocations</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>uint32_t</name> <macro><name>GetHitCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>












<decl_stmt><decl><type><name>bool</name></type> <name>ShouldStop</name><argument_list>(<argument><expr><name>StoppointCallbackContext</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>breakID</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<expr_stmt><expr><name>size_t</name> <macro><name>GetSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_locations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>












<decl_stmt><decl><type><name>void</name></type> <name>GetDescription</name><argument_list>(<argument><expr><name>Stream</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>DescriptionLevel</name> <name>level</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>protected</name>:</label>





<expr_stmt><expr><call><name>BreakpointLocationList</name><argument_list>(<argument><expr><name>Breakpoint</name> <operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>Create</name><argument_list>(<argument>const Address &amp;addr</argument>,
<argument>bool resolve_indirect_symbols</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>StartRecordingNewLocations</name><parameter_list>(<parameter><decl><type><name>BreakpointLocationCollection</name> <modifier>&amp;</modifier></type><name>new_locations</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>StopRecordingNewLocations</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <macro><name>AddLocation</name><argument_list>(<argument>const Address &amp;addr</argument>,
<argument>bool resolve_indirect_symbols</argument>,
<argument>bool *new_location = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SwapLocation</name><argument_list>(<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <name>to_location_sp</name></expr></argument>,
<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <name>from_location_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RemoveLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name> <operator>&amp;</operator><name>bp_loc_sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>RemoveLocationByIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>RemoveInvalidLocations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArchSpec</name> <modifier>&amp;</modifier></type><name>arch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Compact</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name></expr></argument>&gt;</argument_list></name> <name>collection</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>lldb_private</name><operator>::</operator><name>Address</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name></expr></argument>,
<argument><expr><name>Address</name><operator>::</operator><name>ModulePointerAndOffsetLessThanFunctionObject</name></expr></argument>&gt;</argument_list></name>
<name>addr_map</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>Breakpoint</name> <modifier>&amp;</modifier></type><name>m_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collection</name></type> <name>m_locations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addr_map</name></type> <name>m_address_to_location</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>recursive_mutex</name> <name>m_mutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lldb</name><operator>::</operator><name>break_id_t</name> <name>m_next_id</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BreakpointLocationCollection</name> <modifier>*</modifier></type><name>m_new_location_recorder</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name><name>AdaptedIterable</name><argument_list type="generic">&lt;<argument><expr><name>collection</name></expr></argument>, <argument><expr><name>lldb</name><operator>::</operator><name>BreakpointLocationSP</name></expr></argument>,
<argument><expr><name>vector_adapter</name></expr></argument>&gt;</argument_list></name></type>
<name>BreakpointLocationIterable</name>;</typedef>

<function><type><name>BreakpointLocationIterable</name></type> <name>BreakpointLocations</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>BreakpointLocationIterable</name><argument_list>(<argument><expr><name>m_locations</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
